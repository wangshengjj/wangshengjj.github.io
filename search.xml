<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Kubernetes环境搭建hk4e原神真端教程</title>
      <link href="/2023/06/24/hk4e/"/>
      <url>/2023/06/24/hk4e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于Kubernetes环境搭建hk4e原神真端教程"><a href="#基于Kubernetes环境搭建hk4e原神真端教程" class="headerlink" title="基于Kubernetes环境搭建hk4e原神真端教程"></a>基于<code>Kubernetes</code>环境搭建<code>hk4e</code>原神真端教程</h1><blockquote><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</strong><br><strong>教程用到的文件下载链接：<a href="https://pan.baidu.com/s/1pJTUu1KjyAU7duIvqYwD-Q?pwd=6zv9">https://pan.baidu.com/s/1pJTUu1KjyAU7duIvqYwD-Q?pwd=6zv9</a></strong></p></blockquote><h2 id="一、环境介绍"><a href="#一、环境介绍" class="headerlink" title="一、环境介绍"></a>一、环境介绍</h2><table><thead><tr><th>主机名</th><th>IP地址</th><th>软件</th></tr></thead><tbody><tr><td>master</td><td>192.168.31.200</td><td>kubernetes1.20.7、Docker-ce19.03</td></tr><tr><td>node01</td><td>192.168.31.201</td><td>kubernetes1.20.7、Docker-ce19.03</td></tr><tr><td>node02</td><td>192.168.31.203</td><td>kubernetes1.20.7、Docker-ce19.03</td></tr><tr><td>NFS</td><td>192.168.31.202</td><td>NFS网络存储</td></tr></tbody></table><blockquote><p><strong>本教程基于<code>hk4e</code>真端<code>3.2</code>版本，把实体机部署转到容器环境。</strong><br><strong><code>Kubernetes</code>简称<code>K8s</code>，以下教程部分将以<code>K8s</code>为称</strong></p></blockquote><ul><li>关于<code>K8s</code>环境介绍：</li><li><code>k8s</code>是一个容器编排工具，它由<code>Google</code>公司开源，由<code>Go</code>语言编写，它的作用类似于<code>Docker-compose</code>，它和<code>Docker-compose</code>最大的区别在于，<code>k8s</code>可以管理多台机器，而<code>Docker-compose</code>只能管理<code>1</code>台。</li><li><code>K8s</code>拥有服务发现和负载均衡的功能，同时<code>K8s</code>也支持存储编排功能</li><li><code>K8s</code>可以实现资源调度的分配，自动部署更新和回滚。</li><li><code>K8s</code>支持副本集功能，可以实现容器的自我修复</li><li>更多关于<code>K8s</code>的介绍，请观看这期教程<a href="https://www.wsjj.top/archives/137">【容器应用系列教程】Kubernetes介绍</a></li></ul><h2 id="二、部署Kubernetes环境"><a href="#二、部署Kubernetes环境" class="headerlink" title="二、部署Kubernetes环境"></a>二、部署<code>Kubernetes</code>环境</h2><blockquote><p><strong>部署过程省略</strong><br><strong>关于<code>K8s</code>搭建教程：<a href="https://www.wsjj.top/archives/138">https://www.wsjj.top/archives/138</a></strong></p></blockquote><h3 id="1-修改Kube-apiserver的端口范围"><a href="#1-修改Kube-apiserver的端口范围" class="headerlink" title="1.修改Kube-apiserver的端口范围"></a>1.修改<code>Kube-apiserver</code>的端口范围</h3><blockquote><p><strong>此操作，需要部署完<code>K8s</code>集群后再做修改！！！</strong><br><strong>默认端口范围在<code>30001-32767</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml#配置文件并不完整，仅展示修改部分containers:  - command:    - kube-apiserver    - --service-node-port-range&#x3D;20000-32767#指定NodePort端口范围，需要和下面的其他参数对其<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>修改完配置文件后，<code>k8s</code>集群会自动重启，请等待重启完毕</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl get pods -A -o wideNAMESPACE       NAME                                        READY   STATUS      RESTARTS   AGE   IP               NODE     NOMINATED NODE   READINESS GATESkube-system     calico-kube-controllers-5f6d4b864b-5vdvx    1&#x2F;1     Running     0          42m   192.168.31.201   node01   &lt;none&gt;           &lt;none&gt;kube-system     calico-node-4rspn                           1&#x2F;1     Running     0          42m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     calico-node-smvkk                           1&#x2F;1     Running     1          42m   192.168.31.201   node01   &lt;none&gt;           &lt;none&gt;kube-system     calico-node-xtm4s                           1&#x2F;1     Running     0          42m   192.168.31.203   node02   &lt;none&gt;           &lt;none&gt;kube-system     coredns-54d67798b7-5qx8t                    1&#x2F;1     Running     0          51m   192.168.140.66   node02   &lt;none&gt;           &lt;none&gt;kube-system     coredns-54d67798b7-ntffw                    1&#x2F;1     Running     0          51m   192.168.140.65   node02   &lt;none&gt;           &lt;none&gt;kube-system     etcd-master                                 1&#x2F;1     Running     0          51m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     kube-apiserver-master                       1&#x2F;1     Running     0          51m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     kube-controller-manager-master              1&#x2F;1     Running     0          51m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     kube-proxy-7v68r                            1&#x2F;1     R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-部署nginx-ingress插件"><a href="#2-部署nginx-ingress插件" class="headerlink" title="2.部署nginx-ingress插件"></a>2.部署<code>nginx-ingress</code>插件</h3><blockquote><p><strong>这个插件主要用于基于服务名的发布，发布我们<code>sdk</code>服务器的连接地址</strong><br><strong>如果不需要部署这个插件，那么一会就需要修改<code>sdkserver</code>的端口类型为<code>NodePort</code>，直接端口映射到物理机的端口上</strong><br><strong>教程用到的文件下载链接：<a href="https://pan.baidu.com/s/1pJTUu1KjyAU7duIvqYwD-Q?pwd=6zv9">https://pan.baidu.com/s/1pJTUu1KjyAU7duIvqYwD-Q?pwd=6zv9</a></strong></p></blockquote><h4 id="准备yml文件"><a href="#准备yml文件" class="headerlink" title="准备yml文件"></a>准备<code>yml</code>文件</h4><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e02.png" alt="k8s-hk4e02"></p><h4 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h4><blockquote><p><strong>这一步需要再<code>2</code>个<code>node</code>节点上操作</strong><br><strong>如果你的网络条件良好，这一步可以略过<br>如果你的网络条件较差，我在镜像包里，准备了用到的镜像文件</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e04.png" alt="k8s-hk4e04"></p><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# docker load -i nginx-ingress-controller_v1.3.1.tar[root@node01 ~]# docker load -i kube-webhook-certgen_v1.3.0.tar[root@node02 ~]# docker load -i nginx-ingress-controller_v1.3.1.tar[root@node02 ~]# docker load -i kube-webhook-certgen_v1.3.0.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回到master节点，部署nginx-ingress"><a href="#回到master节点，部署nginx-ingress" class="headerlink" title="回到master节点，部署nginx-ingress"></a>回到<code>master</code>节点，部署<code>nginx-ingress</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl create -f ingress-nginx-deploy_v1.3.1.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="部署完，可查看所有Pod状态"><a href="#部署完，可查看所有Pod状态" class="headerlink" title="部署完，可查看所有Pod状态"></a>部署完，可查看所有<code>Pod</code>状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl get pods -A -o wideNAMESPACE       NAME                                        READY   STATUS      RESTARTS   AGE   IP               NODE     NOMINATED NODE   READINESS GATESingress-nginx   ingress-nginx-admission-create-ld8d2        0&#x2F;1     Completed   0          45s   192.168.140.70   node02   &lt;none&gt;           &lt;none&gt;ingress-nginx   ingress-nginx-admission-patch-9b2lx         0&#x2F;1     Completed   1          45s   192.168.140.69   node02   &lt;none&gt;           &lt;none&gt;ingress-nginx   ingress-nginx-controller-64ff7cd7cf-hz6ps   1&#x2F;1     Running     0          45s   192.168.31.203   node02   &lt;none&gt;           &lt;none&gt;kube-system     calico-kube-controllers-5f6d4b864b-5vdvx    1&#x2F;1     Running     0          42m   192.168.31.201   node01   &lt;none&gt;           &lt;none&gt;kube-system     calico-node-4rspn                           1&#x2F;1     Running     0          42m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     calico-node-smvkk                           1&#x2F;1     Running     1          42m   192.168.31.201   node01   &lt;none&gt;           &lt;none&gt;kube-system     calico-node-xtm4s                           1&#x2F;1     Running     0          42m   192.168.31.203   node02   &lt;none&gt;           &lt;none&gt;kube-system     coredns-54d67798b7-5qx8t                    1&#x2F;1     Running     0          51m   192.168.140.66   node02   &lt;none&gt;           &lt;none&gt;kube-system     coredns-54d67798b7-ntffw                    1&#x2F;1     Running     0          51m   192.168.140.65   node02   &lt;none&gt;           &lt;none&gt;kube-system     etcd-master                                 1&#x2F;1     Running     0          51m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     kube-apiserver-master                       1&#x2F;1     Running     0          51m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     kube-controller-manager-master              1&#x2F;1     Running     0          51m   192.168.31.200   master   &lt;none&gt;           &lt;none&gt;kube-system     kube-proxy-7v68r                            1&#x2F;1     R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、准备NFS网络存储共享"><a href="#三、准备NFS网络存储共享" class="headerlink" title="三、准备NFS网络存储共享"></a>三、准备<code>NFS</code>网络存储共享</h2><blockquote><p><strong><code>NFS</code>搭建过程省略，请自行准备下面几个挂载点。</strong><br><strong>关于<code>NFS</code>搭建教程：<a href="https://www.wsjj.top/archives/62">https://www.wsjj.top/archives/62</a></strong><br><strong><code>NFS</code>比较重要，负责存储真端的所有数据，还有后续数据库做持久存储的重要存储媒介</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nfs ~]# exportfs -ravexporting 192.168.31.0&#x2F;24:&#x2F;hk4e_dataexporting 192.168.31.0&#x2F;24:&#x2F;hk4e_mongodbexporting 192.168.31.0&#x2F;24:&#x2F;hk4e_redisexporting 192.168.31.0&#x2F;24:&#x2F;hk4e_slave_dataexporting 192.168.31.0&#x2F;24:&#x2F;hk4e_master_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-准备数据文件"><a href="#1-准备数据文件" class="headerlink" title="1.准备数据文件"></a>1.准备数据文件</h3><blockquote><p><strong>教程用到的文件下载地址：<a href="https://pan.baidu.com/s/1pJTUu1KjyAU7duIvqYwD-Q?pwd=6zv9">https://pan.baidu.com/s/1pJTUu1KjyAU7duIvqYwD-Q?pwd=6zv9</a></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e01.png" alt="k8s-hk4e01"></p><blockquote><p><strong>把压缩包里的所有目录个文件，拷贝到<code>hk4e_data</code>目录下</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nfs ~]# cd &#x2F;hk4e_data[root@nfs hk4e_data]# lshk4e-gameserver_data.zip[root@nfs hk4e_data]# unzip hk4e-gameserver_data.zip[root@nfs hk4e_data]# mv hk4e-gameserver_data&#x2F;* .&#x2F;[root@nfs hk4e_data]# chmod a+x .&#x2F;[root@nfs hk4e_data]# rm -rf hk4e-gameserver_data.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、准备搭建用的镜像"><a href="#四、准备搭建用的镜像" class="headerlink" title="四、准备搭建用的镜像"></a>四、准备搭建用的镜像</h2><blockquote><p><strong>我们的<code>k8s</code>使用<code>Docker</code>作为容器引擎</strong><br><strong>需要在所有<code>node</code>节点导入教程用到的镜像</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e03.png" alt="k8s-hk4e03"></p><h3 id="1-导入镜像"><a href="#1-导入镜像" class="headerlink" title="1.导入镜像"></a>1.导入镜像</h3><pre class="line-numbers language-none"><code class="language-none">[root@node02 ~]# docker load -i tar包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-关于hk4e-sdkserver-ubuntu镜像和hk4e-gameserver-ubuntu镜像-可选的"><a href="#2-关于hk4e-sdkserver-ubuntu镜像和hk4e-gameserver-ubuntu镜像-可选的" class="headerlink" title="2.关于hk4e-sdkserver-ubuntu镜像和hk4e-gameserver-ubuntu镜像(可选的)"></a>2.关于<code>hk4e-sdkserver-ubuntu</code>镜像和<code>hk4e-gameserver-ubuntu</code>镜像(可选的)</h3><blockquote><p><strong>如果您出现了导入失败的情况</strong><br><strong>我在文件里准备了<code>Docker build</code>用到的所有文件，可以自己手动在<code>node</code>节点上构建镜像</strong><br><strong>注意：导出的镜像名和标签，建议跟我一样</strong><br><strong>如果不同，则需要修改<code>hk4e-sdkserver.yml</code>和<code>hk4e-gameserver.yml</code>的<code>image</code>后面的镜像名</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e05.png" alt="k8s-hk4e05"></p><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e06.png" alt="k8s-hk4e06"></p><pre class="line-numbers language-none"><code class="language-none">[root@node02 Docker build]# lsDockerfile  jdk-17_linux-x64_bin.tar.gz[root@node02 Docker build]# docker build -t hk4e-sdkserver-ubuntu:v0.2 .&#x2F;[+] Building 15.7s (9&#x2F;9) FINISHED                                                    &#x3D;&gt; [internal] load build definition from Dockerfile                           0.0s &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 456B                                           0.0s &#x3D;&gt; [internal] load .dockerignore                                              0.0s &#x3D;&gt; &#x3D;&gt; transferring context: 2B                                                0.0s &#x3D;&gt; [internal] load metadata for docker.io&#x2F;library&#x2F;ubuntu:20.04                0.0s &#x3D;&gt; [internal] load build context                                              2.0s &#x3D;&gt; &#x3D;&gt; transferring context: 181.75MB                                          2.0s &#x3D;&gt; [1&#x2F;4] FROM docker.io&#x2F;library&#x2F;ubuntu:20.04                                  0.0s &#x3D;&gt; &#x3D;&gt; resolve docker.io&#x2F;library&#x2F;ubuntu:20.04                                  0.0s &#x3D;&gt; [2&#x2F;4] WORKDIR &#x2F;sdkserver                                                   0.1s &#x3D;&gt; [3&#x2F;4] RUN sed -i s@&#x2F;archive.ubuntu.com&#x2F;@&#x2F;mirrors.aliyun.com&#x2F;@g &#x2F;etc&#x2F;apt&#x2F;  10.9s &#x3D;&gt; [4&#x2F;4] ADD jdk-17_linux-x64_bin.tar.gz &#x2F;usr&#x2F;local&#x2F;                          3.5s &#x3D;&gt; exporting to image                                                         1.0s  &#x3D;&gt; &#x3D;&gt; exporting layers                                                        1.0s  &#x3D;&gt; &#x3D;&gt; writing image sha256:802940fa7aff0ccc8b3ab56018d3361d4a29c32a30ab09d02  0.0s  &#x3D;&gt; &#x3D;&gt; naming to docker.io&#x2F;library&#x2F;hk4e-sdkserver-ubuntu:v0.2                  0.0s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node02 Docker build]# docker build -t hk4e-gameserver-ubuntu:v0.2 .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、部署hk4e真端的数据库"><a href="#五、部署hk4e真端的数据库" class="headerlink" title="五、部署hk4e真端的数据库"></a>五、部署<code>hk4e</code>真端的数据库</h2><h3 id="1-创建命名空间-重要"><a href="#1-创建命名空间-重要" class="headerlink" title="1.创建命名空间(重要)"></a>1.创建命名空间(重要)</h3><blockquote><p><strong>后续我们所有的服务和<code>Pod</code>，都在这个命名空间内部署</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl create ns genshin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-部署主从MySQL数据库"><a href="#2-部署主从MySQL数据库" class="headerlink" title="2.部署主从MySQL数据库"></a>2.部署主从<code>MySQL</code>数据库</h3><h4 id="A-准备主数据库的PV和PVC"><a href="#A-准备主数据库的PV和PVC" class="headerlink" title="A.准备主数据库的PV和PVC"></a>A.准备主数据库的<code>PV</code>和<code>PVC</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim hk4e-master-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: hk4e-master-db-pv   namespace: genshin#指定命名空间spec:  capacity:      storage: 10G#PV卷大小，建议和NFS那边保持一致  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.31.202#NFS服务器地址      path: &#x2F;hk4e_master_data#NFS共享出来的目录名称---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: hk4e-master-db-pvc     namespace: genshin#指定命名空间spec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 10G#PVC卷大小，建议和NFS那边保持一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl create -f hk4e-master-pv-pvc.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-准备从数据库的PV和PVC"><a href="#B-准备从数据库的PV和PVC" class="headerlink" title="B.准备从数据库的PV和PVC"></a>B.准备从数据库的<code>PV</code>和<code>PVC</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim hk4e-slave-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: hk4e-slave-db-pv   namespace: genshin#指定命名空间spec:  capacity:      storage: 10G#PV卷大小，建议和NFS那边保持一致  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.31.202#NFS服务器地址      path: &#x2F;hk4e_slave_data#NFS共享出来的目录名称---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: hk4e-slave-db-pvc     namespace: genshin#指定命名空间spec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 10G#PVC卷大小，建议和NFS那边保持一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl create -f hk4e-slave-pv-pvc.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看PV和PVC"><a href="#查看PV和PVC" class="headerlink" title="查看PV和PVC"></a>查看<code>PV</code>和<code>PVC</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-master-db-mysql_yaml]# kubectl get pvNAME                CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                        STORAGECLASS   REASON   AGEhk4e-master-db-pv   10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-master-db-pvc                           2m52shk4e-slave-db-pv    10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-slave-db-pvc                            8s[root@master hk4e-master-db-mysql_yaml]# kubectl get pvc -n genshinNAME                 STATUS   VOLUME              CAPACITY   ACCESS MODES   STORAGECLASS   AGEhk4e-master-db-pvc   Bound    hk4e-master-db-pv   10G        RWX                           2m59shk4e-slave-db-pvc    Bound    hk4e-slave-db-pv    10G        RWX                           15s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-创建主库用到的ConfigMap"><a href="#C-创建主库用到的ConfigMap" class="headerlink" title="C.创建主库用到的ConfigMap"></a>C.创建主库用到的<code>ConfigMap</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim hk4e-master-db-config.ymlapiVersion: v1kind: ConfigMapmetadata:    name: hk4e-master-db-config    namespace: genshindata:    my.cnf: |        [mysqld]        server_id&#x3D;10        log_bin&#x3D;master        gtid_mode&#x3D;on        enforce_gtid_consistency&#x3D;true        collation-server &#x3D; utf8_general_ci        character-set-server &#x3D; utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl craete -f hk4e-master-db-config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-创建从库用到的ConfigMap"><a href="#D-创建从库用到的ConfigMap" class="headerlink" title="D.创建从库用到的ConfigMap"></a>D.创建从库用到的<code>ConfigMap</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim hk4e-slave-db-config.ymlapiVersion: v1kind: ConfigMapmetadata:    name: hk4e-slave-db-config    namespace: genshindata:    my.cnf: |        [mysqld]        server_id&#x3D;11        log_bin&#x3D;slave        gtid_mode&#x3D;on        enforce_gtid_consistency&#x3D;true        collation-server &#x3D; utf8_general_ci        character-set-server &#x3D; utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl craete -f hk4e-slave-db-config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看所有ConfigMap"><a href="#查看所有ConfigMap" class="headerlink" title="查看所有ConfigMap"></a>查看所有<code>ConfigMap</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-master-db-mysql_yaml]# kubectl get cm -n genshinNAME                    DATA   AGEhk4e-master-db-config   1      87shk4e-slave-db-config    1      28skube-root-ca.crt        1      32m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-创建主库Pod"><a href="#E-创建主库Pod" class="headerlink" title="E.创建主库Pod"></a>E.创建主库<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim hk4e-master-db.ymlapiVersion: apps&#x2F;v1kind: StatefulSet#有状态负载类型metadata:    name: hk4e-master-mysql    namespace: genshin#指定命名空间spec:       replicas: 1#指定保持1个副本集    selector:        matchLabels:            app: hk4e-master-mysql      serviceName: &quot;hk4e-master-mysql&quot;#指定下面的服务名    template:        metadata:            labels:                app: hk4e-master-mysql        spec:              nodeName: node01#指定调度到哪个节点上            containers:            - name: hk4e-master-mysql              image: mysql:5.7#镜像名              imagePullPolicy: IfNotPresent#拉取镜像策略              ports:              - containerPort: 3306              env:#传递环境变量              - name: MYSQL_ROOT_PASSWORD                value: &quot;f2c340a9-bf06-4345-9654-00b074b92fe8&quot;#数据库root用户密码              - name: MYSQL_USER                value: &quot;work&quot;#创建work用户              - name: MYSQL_PASSWORD                value: &quot;GenshinImpactOffline2022&quot;#创建work用户的密码              resources:   #配置资源限制                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;              volumeMounts:                  - name: mysql-data-volume#挂载到数据目录                    mountPath: &#x2F;var&#x2F;lib&#x2F;mysql                  - name: mysql-config-volume#挂载配置文件                    mountPath: &#x2F;etc&#x2F;mysql&#x2F;conf.d                    readOnly: true            volumes:                 - name: mysql-data-volume#数据卷名                  persistentVolumeClaim:#挂载PVC                    claimName: hk4e-master-db-pvc                - name: mysql-config-volume#数据卷名                  projected:                    sources:                    - configMap:#挂载cm                        name: hk4e-master-db-config  ---apiVersion: v1kind: Service#创建服务metadata:    name: hk4e-master-mysql#服务名    namespace: genshin#命名空间spec:    ports:    - port: 3306#容器内部通信的端口    selector:      app: hk4e-master-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl create -f hk4e-master-db.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-创建从库Pod"><a href="#F-创建从库Pod" class="headerlink" title="F.创建从库Pod"></a>F.创建从库<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim hk4e-slave-db.ymlapiVersion: apps&#x2F;v1kind: StatefulSet#有状态负载类型metadata:    name: hk4e-slave-mysql    namespace: genshin#指定命名空间spec:       replicas: 1#指定保持1个副本集    selector:        matchLabels:            app: hk4e-slave-mysql      serviceName: &quot;hk4e-slave-mysql&quot;#指定下面的服务名    template:        metadata:            labels:                app: hk4e-slave-mysql        spec:              nodeName: node01#指定调度到哪个节点上            containers:            - name: hk4e-slave-mysql              image: mysql:5.7#镜像名              imagePullPolicy: IfNotPresent#拉取镜像策略              ports:              - containerPort: 3306              env:#传递环境变量              - name: MYSQL_ROOT_PASSWORD                value: &quot;f2c340a9-bf06-4345-9654-00b074b92fe8&quot;#数据库root用户密码              resources:   #配置资源限制                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;              volumeMounts:                  - name: mysql-data-volume#挂载到数据目录                    mountPath: &#x2F;var&#x2F;lib&#x2F;mysql                  - name: mysql-config-volume#挂载配置文件                    mountPath: &#x2F;etc&#x2F;mysql&#x2F;conf.d                    readOnly: true            volumes:                 - name: mysql-data-volume#数据卷名                  persistentVolumeClaim:#挂载PVC                    claimName: hk4e-slave-db-pvc                - name: mysql-config-volume#数据卷名                  projected:                    sources:                    - configMap:#挂载cm                        name: hk4e-slave-db-config  ---apiVersion: v1kind: Service#创建服务metadata:    name: hk4e-slave-mysql#服务名    namespace: genshin#命名空间spec:    ports:    - port: 3306#容器内部通信的端口    selector:      app: hk4e-slave-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl create -f hk4e-slave-db.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看数据库Pod"><a href="#查看数据库Pod" class="headerlink" title="查看数据库Pod"></a>查看数据库<code>Pod</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-master-db-mysql_yaml]# kubectl get pod -n genshinNAME                  READY   STATUS    RESTARTS   AGEhk4e-master-mysql-0   1&#x2F;1     Running   0          34mhk4e-slave-mysql-0    1&#x2F;1     Running   0          34m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看NFS服务器上的数据目录"><a href="#查看NFS服务器上的数据目录" class="headerlink" title="查看NFS服务器上的数据目录"></a>查看<code>NFS</code>服务器上的数据目录</h5><pre class="line-numbers language-none"><code class="language-none">[root@nfs ~]# ls &#x2F;hk4e_master_data&#x2F;auto.cnf    client-cert.pem  ibdata1      ibtmp1         master.000003  mysql.sock          public_key.pem   sysca-key.pem  client-key.pem   ib_logfile0  master.000001  master.index   performance_schema  server-cert.pemca.pem      ib_buffer_pool   ib_logfile1  master.000002  mysql          private_key.pem     server-key.pem[root@nfs ~]# ls &#x2F;hk4e_slave_data&#x2F;auto.cnf    client-cert.pem  ibdata1      ibtmp1      performance_schema  server-cert.pem  slave.000002  sysca-key.pem  client-key.pem   ib_logfile0  mysql       private_key.pem     server-key.pem   slave.000003ca.pem      ib_buffer_pool   ib_logfile1  mysql.sock  public_key.pem      slave.000001     slave.index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-进入主库，配置主从复制的用户和hk4e的数据库"><a href="#G-进入主库，配置主从复制的用户和hk4e的数据库" class="headerlink" title="G.进入主库，配置主从复制的用户和hk4e的数据库"></a>G.进入主库，配置主从复制的用户和<code>hk4e</code>的数据库</h4><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-master-db-mysql_yaml]# kubectl exec -it hk4e-master-mysql-0 -n genshin -- bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">bash-4.2# mysql -uroot -pf2c340a9-bf06-4345-9654-00b074b92fe8mysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.11 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;work&#39;@&#39;127.0.0.1&#39; IDENTIFIED BY &#39;GenshinImpactOffline2022&#39; WITH GRANT OPTION;Query OK, 0 rows affected, 1 warning (0.02 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;work&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;GenshinImpactOffline2022&#39; WITH GRANT OPTION;Query OK, 0 rows affected, 2 warnings (0.01 sec)mysql&gt; FLUSH   PRIVILEGES;Query OK, 0 rows affected (0.04 sec)mysql&gt; quitBye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-创建hk4e用到的库，和导入数据"><a href="#H-创建hk4e用到的库，和导入数据" class="headerlink" title="H.创建hk4e用到的库，和导入数据"></a>H.创建<code>hk4e</code>用到的库，和导入数据</h4><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e07.png" alt="k8s-hk4e07"></p><h5 id="先把用到的数据导入到NFS上"><a href="#先把用到的数据导入到NFS上" class="headerlink" title="先把用到的数据导入到NFS上"></a>先把用到的数据导入到<code>NFS</code>上</h5><blockquote><p><strong>一定要创建完数据库后再导入，否则会报错。</strong><br><strong>或者使用<code>kubectl cp</code>命令，拷贝文件到容器内部，用法和<code>docker cp</code>一样</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nfs hk4e_master_data]# ls | grep mysql_sqlmysql_sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="回到容器内部执行脚本，一键导入数据库"><a href="#回到容器内部执行脚本，一键导入数据库" class="headerlink" title="回到容器内部执行脚本，一键导入数据库"></a>回到容器内部执行脚本，一键导入数据库</h5><pre class="line-numbers language-none"><code class="language-none">bash-4.2# bash &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql_sql&#x2F;sql.shbash-4.2# rm -rf &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql_sqlbash-4.2# exit#退出容器exit[root@master hk4e-master-db-mysql_yaml]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="I-进入从库，配置主从复制环境"><a href="#I-进入从库，配置主从复制环境" class="headerlink" title="I.进入从库，配置主从复制环境"></a>I.进入从库，配置主从复制环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-master-db-mysql_yaml]# kubectl exec -it hk4e-slave-mysql-0 -n genshin -- bashbash-4.2# mysql -uroot -pf2c340a9-bf06-4345-9654-00b074b92fe8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; change master to    -&gt; master_host&#x3D;&quot;hk4e-master-mysql&quot;,    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1;Query OK, 0 rows affected, 2 warnings (0.10 sec)mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看主从复制状态"><a href="#查看主从复制状态" class="headerlink" title="查看主从复制状态"></a>查看主从复制状态</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: hk4e-master-mysql                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000003          Read_Master_Log_Pos: 136422               Relay_Log_File: hk4e-slave-mysql-0-relay-bin.000003                Relay_Log_Pos: 136629        Relay_Master_Log_File: master.000003             Slave_IO_Running: Yes#IO线程正常            Slave_SQL_Running: Yes#SQL线程正常            mysql&gt; exitByebash-4.2# exitexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-部署redis"><a href="#3-部署redis" class="headerlink" title="3.部署redis"></a>3.部署<code>redis</code></h3><h4 id="A-创建redis的PV和PVC"><a href="#A-创建redis的PV和PVC" class="headerlink" title="A.创建redis的PV和PVC"></a>A.创建<code>redis</code>的<code>PV</code>和<code>PVC</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-redis_yaml]# vim hk4e-redis-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: hk4e-redis-db-pv   namespace: genshinspec:  capacity:      storage: 10G  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.31.202      path: &#x2F;hk4e_redis---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: hk4e-redis-db-pvc     namespace: genshinspec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 10G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-redis_yaml]# kubectl create -f hk4e-redis-pv-pvc.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-redis_yaml]# kubectl get pv NAME                CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM                        STORAGECLASS   REASON   AGEhk4e-master-db-pv   10G        RWX            Recycle          Bound       genshin&#x2F;hk4e-master-db-pvc                           85mhk4e-redis-db-pv    10G        RWX            Recycle          Available                                                        8shk4e-slave-db-pv    10G        RWX            Recycle          Bound       genshin&#x2F;hk4e-slave-db-pvc                            82m[root@master hk4e-redis_yaml]# kubectl get pvc -n genshinNAME                 STATUS   VOLUME              CAPACITY   ACCESS MODES   STORAGECLASS   AGEhk4e-master-db-pvc   Bound    hk4e-master-db-pv   10G        RWX                           85mhk4e-redis-db-pvc    Bound    hk4e-redis-db-pv    10G        RWX                           14shk4e-slave-db-pvc    Bound    hk4e-slave-db-pv    10G        RWX                           82m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-部署redis用到的ConfigMap"><a href="#B-部署redis用到的ConfigMap" class="headerlink" title="B.部署redis用到的ConfigMap"></a>B.部署<code>redis</code>用到的<code>ConfigMap</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-redis_yaml]# vim hk4e-redis-config.ymlapiVersion: v1kind: ConfigMapmetadata:    name: hk4e-redis-config    namespace: genshindata:    redis.conf: |        dir &#x2F;srv&#x2F;redis        bind 0.0.0.0        appendonly yes        protected-mode yes        port 6379        tcp-backlog 800        timeout 0        tcp-keepalive 300        daemonize no        supervised no        pidfile &#x2F;srv&#x2F;redis&#x2F;redis-server.pid        loglevel warning        logfile &#x2F;srv&#x2F;redis&#x2F;redis-server.log        databases 168        always-show-logo yes        save 900 1        save 300 10        save 60 10000        requirepass GenshinImpactOffline2022<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-redis_yaml]# kubectl create -f hk4e-redis-config.ymlconfigmap&#x2F;hk4e-redis-config created[root@master hk4e-redis_yaml]# kubectl get cm -n genshinNAME                    DATA   AGEhk4e-master-db-config   1      82mhk4e-redis-config       1      9shk4e-slave-db-config    1      81mkube-root-ca.crt        1      114m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-部署Redis的Pod"><a href="#C-部署Redis的Pod" class="headerlink" title="C.部署Redis的Pod"></a>C.部署<code>Redis</code>的<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-redis_yaml]# vim hk4e-redis.yml apiVersion: apps&#x2F;v1kind: StatefulSet       #有状态负载metadata:  name: hk4e-redis  namespace: genshin  labels:    app: hk4e-redisspec:  replicas: 1  selector:    matchLabels:      app: hk4e-redis  serviceName: &quot;hk4e-redis&quot;  template:    metadata:      labels:        app: hk4e-redis    spec:      nodeName: node01#指定调度到哪个节点上      containers:      - name: hk4e-redis        image: redis        command:          - &quot;sh&quot;          - &quot;-c&quot;          - &quot;redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf&quot;        ports:        - containerPort: 6379        resources:          limits:#资源限制            cpu: 1000m            memory: 1024Mi          requests:            cpu: 1000m            memory: 1024Mi        livenessProbe:          tcpSocket:            port: 6379          initialDelaySeconds: 300          timeoutSeconds: 1          periodSeconds: 10          successThreshold: 1          failureThreshold: 3        readinessProbe:          tcpSocket:            port: 6379          initialDelaySeconds: 5          timeoutSeconds: 1          periodSeconds: 10          successThreshold: 1          failureThreshold: 3        volumeMounts:        - name: hk4e-redis-config          mountPath:  &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf       #配置文件挂载到容器内          subPath: redis.conf        - name: hk4e-redis-data-volume          mountPath: &#x2F;srv&#x2F;redis       #配置文件里指定的数据目录      volumes:      - name: hk4e-redis-config        configMap:          name: hk4e-redis-config    #挂载配置文件      - name: hk4e-redis-data-volume        persistentVolumeClaim:            claimName: hk4e-redis-db-pvc     #挂载PVC---apiVersion: v1kind: Servicemetadata:  name: hk4e-redis  namespace: genshin  labels:    app: hk4e-redisspec:  ports:    - name: tcp      port: 6379  selector:    app: hk4e-redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-redis_yaml]# kubectl create -f hk4e-redis.yml statefulset.apps&#x2F;hk4e-redis createdservice&#x2F;hk4e-redis created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# kubectl get pods -n genshinNAME                  READY   STATUS    RESTARTS   AGEhk4e-master-mysql-0   1&#x2F;1     Running   0          65mhk4e-redis-0          1&#x2F;1     Running   0          91shk4e-slave-mysql-0    1&#x2F;1     Running   0          65m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-部署MongoDB"><a href="#4-部署MongoDB" class="headerlink" title="4.部署MongoDB"></a>4.部署<code>MongoDB</code></h3><h4 id="A-准备MongoDB的PV和PVC"><a href="#A-准备MongoDB的PV和PVC" class="headerlink" title="A.准备MongoDB的PV和PVC"></a>A.准备<code>MongoDB</code>的<code>PV</code>和<code>PVC</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-mongodb_yaml]# vim hk4e-mongodb-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: hk4e-mongodb-db-pv   namespace: genshinspec:  capacity:      storage: 10G  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.31.202      path: &#x2F;hk4e_mongodb---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: hk4e-mongodb-db-pvc     namespace: genshinspec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 10G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-mongodb_yaml]# kubectl create -f hk4e-mongodb-pv-pvc.yml persistentvolume&#x2F;hk4e-mongodb-db-pv createdpersistentvolumeclaim&#x2F;hk4e-mongodb-db-pvc created[root@master hk4e-mongodb_yaml]# kubectl get pvNAME                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                         STORAGECLASS   REASON   AGEhk4e-master-db-pv    10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-master-db-pvc                            92mhk4e-mongodb-db-pv   10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-mongodb-db-pvc                           8shk4e-redis-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-redis-db-pvc                             7m21shk4e-slave-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-slave-db-pvc                             90m[root@master hk4e-mongodb_yaml]# kubectl get pv -n genshinNAME                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                         STORAGECLASS   REASON   AGEhk4e-master-db-pv    10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-master-db-pvc                            92mhk4e-mongodb-db-pv   10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-mongodb-db-pvc                           14shk4e-redis-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-redis-db-pvc                             7m27shk4e-slave-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-slave-db-pvc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-创建MongoDB的Pod"><a href="#B-创建MongoDB的Pod" class="headerlink" title="B.创建MongoDB的Pod"></a>B.创建<code>MongoDB</code>的<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-mongodb_yaml]# vim hk4e-mongodb.ymlapiVersion: apps&#x2F;v1kind: Deployment     metadata:    name: hk4e-mongodb    namespace: genshinspec:       replicas: 1    selector:        matchLabels:            app: hk4e-mongodb     template:        metadata:            labels:                app: hk4e-mongodb        spec:              nodeName: node01#指定调度到哪个节点上            containers:            - name: hk4e-mongodb              image: mongo:4.0#镜像              imagePullPolicy: IfNotPresent              ports:              - containerPort: 27017              resources:                   requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;              volumeMounts:                  - name: hk4e-mongodb-data                    mountPath: &#x2F;data&#x2F;db            volumes:              - name: hk4e-mongodb-data                persistentVolumeClaim:                  claimName: hk4e-mongodb-db-pvc---apiVersion: v1kind: Servicemetadata:    name: hk4e-mongodb    namespace: genshinspec:    ports:    - port: 27017    selector:      app: hk4e-mongodb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-mongodb_yaml]# kubectl create -f hk4e-mongodb.yml deployment.apps&#x2F;hk4e-mongodb createdservice&#x2F;hk4e-mongodb created[root@master hk4e-mongodb_yaml]# kubectl get pod -n genshinNAME                           READY   STATUS    RESTARTS   AGEhk4e-master-mysql-0            1&#x2F;1     Running   0          76mhk4e-mongodb-5d7fc87d9-b4ql5   1&#x2F;1     Running   0          43shk4e-redis-0                   1&#x2F;1     Running   0          12mhk4e-slave-mysql-0             1&#x2F;1     Running   0          76m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、部署hk4e的sdkserver"><a href="#六、部署hk4e的sdkserver" class="headerlink" title="六、部署hk4e的sdkserver"></a>六、部署<code>hk4e</code>的<code>sdkserver</code></h2><h3 id="1-准备sdkserver的PV和PVC"><a href="#1-准备sdkserver的PV和PVC" class="headerlink" title="1.准备sdkserver的PV和PVC"></a>1.准备<code>sdkserver</code>的<code>PV</code>和<code>PVC</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# vim hk4e-sdkserver-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: hk4e-sdkserver-pv   namespace: genshinspec:  capacity:      storage: 10G  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.31.202      path: &#x2F;hk4e_data&#x2F;sdkserver---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: hk4e-sdkserver-pvc     namespace: genshinspec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 10G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# kubectl create -f hk4e-sdkserver-pv-pvc.ymlpersistentvolume&#x2F;hk4e-sdkserver-pv createdpersistentvolumeclaim&#x2F;hk4e-sdkserver-pvc created[root@master hk4e-sdkserver_yaml]# kubectl get pvNAME                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                         STORAGECLASS   REASON   AGEhk4e-master-db-pv    10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-master-db-pvc                            108mhk4e-mongodb-db-pv   10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-mongodb-db-pvc                           16mhk4e-redis-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-redis-db-pvc                             23mhk4e-sdkserver-pv    10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-sdkserver-pvc                            6shk4e-slave-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-slave-db-pvc[root@master hk4e-sdkserver_yaml]# kubectl get pvc -n genshinNAME                  STATUS   VOLUME               CAPACITY   ACCESS MODES   STORAGECLASS   AGEhk4e-master-db-pvc    Bound    hk4e-master-db-pv    10G        RWX                           108mhk4e-mongodb-db-pvc   Bound    hk4e-mongodb-db-pv   10G        RWX                           16mhk4e-redis-db-pvc     Bound    hk4e-redis-db-pv     10G        RWX                           23mhk4e-sdkserver-pvc    Bound    hk4e-sdkserver-pv    10G        RWX                           15shk4e-slave-db-pvc     Bound    hk4e-slave-db-pv     10G        RWX                           106m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改sdk的config-json"><a href="#2-修改sdk的config-json" class="headerlink" title="2.修改sdk的config,json"></a>2.修改<code>sdk</code>的<code>config,json</code></h3><blockquote><p><strong>前往<code>NFS</code>修改</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nfs hk4e_data]# vim sdkserver&#x2F;config.json&quot;dispatch&quot;: &#123;      &quot;regions&quot;: [        &#123;          &quot;Name&quot;: &quot;os_usa&quot;,          &quot;Title&quot;: &quot;Grasscutter&quot;,          &quot;type&quot;: &quot;DEV_PUBLIC&quot;,          &quot;DispatchUrl&quot;: &quot;http:&#x2F;&#x2F;192.168.31.203:20001&#x2F;query_cur_region&quot;#这个IP是后端node02节点的物理机IP，稍后我将把gameserver调度到node02身上        &#125;      ],      &quot;logRequests&quot;: &quot;NONE&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建sdkserver的pod"><a href="#3-创建sdkserver的pod" class="headerlink" title="3.创建sdkserver的pod"></a>3.创建<code>sdkserver</code>的<code>pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# vim hk4e-sdkserver.ymlapiVersion: apps&#x2F;v1kind: Deployment     metadata:    name: hk4e-sdkserver    namespace: genshinspec:       replicas: 1    selector:        matchLabels:            app: hk4e-sdkserver     template:        metadata:            labels:                app: hk4e-sdkserver        spec:              nodeName: node02#指定调度到哪个节点上            containers:            - name: hk4e-sdkserver              image: hk4e-sdkserver-ubuntu:v0.2#指定镜像              imagePullPolicy: IfNotPresent              # tty: true              ports:              - containerPort: 2888              resources:                   requests:#做资源限制                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;              volumeMounts:                  - name: hk4e-sdkserver-data                    mountPath: &#x2F;sdkserver            volumes:              - name: hk4e-sdkserver-data                persistentVolumeClaim:                  claimName: hk4e-sdkserver-pvc---apiVersion: v1kind: Servicemetadata:    name: hk4e-sdkserver    namespace: genshinspec:    ports:    - port: 2888    selector:      app: hk4e-sdkserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# kubectl create -f hk4e-sdkserver.ymldeployment.apps&#x2F;hk4e-sdkserver createdservice&#x2F;hk4e-sdkserver created[root@master hk4e-sdkserver_yaml]# kubectl get pod -n genshinNAME                              READY   STATUS    RESTARTS   AGEhk4e-master-mysql-0               1&#x2F;1     Running   0          88mhk4e-mongodb-5d7fc87d9-b4ql5      1&#x2F;1     Running   0          12mhk4e-redis-0                      1&#x2F;1     Running   0          23mhk4e-sdkserver-6dbb86f5cc-kv2lg   1&#x2F;1     Running   0          28shk4e-slave-mysql-0                1&#x2F;1     Running   0          88m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# kubectl logs hk4e-sdkserver-6dbb86f5cc-kv2lg -n genshin05:44:37 &lt;ERROR:Crypto&gt; An error occurred while loading keys.java.lang.NullPointerException: Cannot invoke &quot;java.util.List.iterator()&quot; because the return value of &quot;org.nofs.utils.FileUtils.getPathsFromResource(String)&quot; is nullat org.nofs.utils.Crypto.loadKeys(Crypto.java:40)at org.nofs.Grasscutter.main(Grasscutter.java:92)05:44:37 &lt;INFO:Grasscutter&gt; Starting Grasscutter...05:44:37 &lt;INFO:Grasscutter&gt; Game version: 3.2.005:44:37 &lt;INFO:Grasscutter&gt; Grasscutter version: 3.2.0-dev-01ce6a905:44:38 &lt;INFO:HttpServer&gt; [Dispatch] Dispatch server started at hk4e-sdkserver:2888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建Ingress服务，发布2888端口"><a href="#4-创建Ingress服务，发布2888端口" class="headerlink" title="4.创建Ingress服务，发布2888端口"></a>4.创建<code>Ingress</code>服务，发布<code>2888</code>端口</h3><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# vim hk4e-sdkserver-ingress.ymlapiVersion: extensions&#x2F;v1beta1kind: Ingress metadata:  name: hk4e-sdkserver-ingress  namespace: genshin  annotations:    kubernetes.io&#x2F;ingress.class: &quot;nginx&quot;spec:  rules:   - host: sdk.linux.com#发布到哪个域名上    http:      paths:       - path:          backend:           serviceName: hk4e-sdkserver#指定要发布服务的服务名          servicePort: 2888#被发布的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# kubectl create -f hk4e-sdkserver-ingress.yml Warning: extensions&#x2F;v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io&#x2F;v1 Ingressingress.extensions&#x2F;hk4e-sdkserver-ingress created[root@master hk4e-sdkserver_yaml]# kubectl get ingress -n genshinNAME                     CLASS    HOSTS           ADDRESS   PORTS   AGEhk4e-sdkserver-ingress   &lt;none&gt;   sdk.linux.com             80      14s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看ingress跑在哪台node节点上"><a href="#查看ingress跑在哪台node节点上" class="headerlink" title="查看ingress跑在哪台node节点上"></a>查看<code>ingress</code>跑在哪台<code>node</code>节点上</h4><blockquote><p><strong>如果是真实的服务器，直接域名解析到相应的公网<code>IP</code>上即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-sdkserver_yaml]# kubectl get pod -A -o wideNAMESPACE       NAME                                        READY   STATUS      RESTARTS   AGE     IP                NODE     NOMINATED NODE   READINESS GATESgenshin         hk4e-master-mysql-0                         1&#x2F;1     Running     0          95m     192.168.196.129   node01   &lt;none&gt;           &lt;none&gt;genshin         hk4e-mongodb-5d7fc87d9-b4ql5                1&#x2F;1     Running     0          19m     192.168.140.71    node02   &lt;none&gt;           &lt;none&gt;genshin         hk4e-redis-0                                1&#x2F;1     Running     0          31m     192.168.196.131   node01   &lt;none&gt;           &lt;none&gt;genshin         hk4e-sdkserver-6dbb86f5cc-kv2lg             1&#x2F;1     Running     0          7m56s   192.168.140.72    node02   &lt;none&gt;           &lt;none&gt;genshin         hk4e-slave-mysql-0                          1&#x2F;1     Running     0          95m     192.168.196.130   node01   &lt;none&gt;           &lt;none&gt;ingress-nginx   ingress-nginx-controller-64ff7cd7cf-hz6ps   1&#x2F;1     Running     0          162m    192.168.31.203    node02   &lt;none&gt;           &lt;none&gt;#我这里跑在node02身上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改hosts文件-如果公网有域名，不用修改"><a href="#修改hosts文件-如果公网有域名，不用修改" class="headerlink" title="修改hosts文件(如果公网有域名，不用修改)"></a>修改hosts文件(如果公网有域名，不用修改)</h4><blockquote><p><code>C:\Windows\System32\drivers\etc\hosts</code></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e08.png" alt="k8s-hk4e08"></p><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e09.png" alt="k8s-hk4e09"></p><h2 id="七、部署hk4e的gameserver"><a href="#七、部署hk4e的gameserver" class="headerlink" title="七、部署hk4e的gameserver"></a>七、部署<code>hk4e</code>的<code>gameserver</code></h2><h3 id="1-准备gameserver的PV和PVC"><a href="#1-准备gameserver的PV和PVC" class="headerlink" title="1.准备gameserver的PV和PVC"></a>1.准备<code>gameserver</code>的<code>PV</code>和<code>PVC</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-gameserver_yaml]# vim hk4e-gameserver-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: hk4e-gameserver-pv   namespace: genshinspec:  capacity:      storage: 50G  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.31.202      path: &#x2F;hk4e_data---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: hk4e-gameserver-pvc     namespace: genshinspec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 50G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-gameserver_yaml]# kubectl create -f hk4e-gameserver-pv-pvc.yml persistentvolume&#x2F;hk4e-gameserver-pv createdpersistentvolumeclaim&#x2F;hk4e-gameserver-pvc created[root@master hk4e-gameserver_yaml]# kubectl get pvNAME                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                         STORAGECLASS   REASON   AGEhk4e-gameserver-pv   50G        RWX            Recycle          Bound    genshin&#x2F;hk4e-gameserver-pvc                           7shk4e-master-db-pv    10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-master-db-pvc                            128mhk4e-mongodb-db-pv   10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-mongodb-db-pvc                           36mhk4e-redis-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-redis-db-pvc                             43mhk4e-sdkserver-pv    10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-sdkserver-pvc                            19mhk4e-slave-db-pv     10G        RWX            Recycle          Bound    genshin&#x2F;hk4e-slave-db-pvc                             125m[root@master hk4e-gameserver_yaml]# kubectl get pvc -n genshinNAME                  STATUS   VOLUME               CAPACITY   ACCESS MODES   STORAGECLASS   AGEhk4e-gameserver-pvc   Bound    hk4e-gameserver-pv   50G        RWX                           13shk4e-master-db-pvc    Bound    hk4e-master-db-pv    10G        RWX                           128mhk4e-mongodb-db-pvc   Bound    hk4e-mongodb-db-pv   10G        RWX                           36mhk4e-redis-db-pvc     Bound    hk4e-redis-db-pv     10G        RWX                           43mhk4e-sdkserver-pvc    Bound    hk4e-sdkserver-pv    10G        RWX                           20mhk4e-slave-db-pvc     Bound    hk4e-slave-db-pv     10G        RWX                           126m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改hk4e的运行地址"><a href="#2-修改hk4e的运行地址" class="headerlink" title="2.修改hk4e的运行地址"></a>2.修改<code>hk4e</code>的运行地址</h3><blockquote><p><strong>前往<code>NFS</code>服务器上<code>hk4e_data</code>目录操作</strong><br><strong>如果是内网游玩，<code>IP</code>地址都填写写本机<code>IP</code>的内网地址即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">find .&#x2F; -name &quot;*.xml&quot;  -exec sed -i &quot;s&#x2F;REPLACE_IT_TO_YOUR_DEVICE_IP&#x2F;你的内网IP&#x2F;g&quot; &#123;&#125; \;find . -name &quot;*.xml&quot;  -exec sed -i &quot;s&#x2F;REPLACE_IT_TO_YOUR_ACCESS_IP&#x2F;你的公网IP&#x2F;g&quot; &#123;&#125; \;find . -name &quot;*.php&quot;  -exec sed -i &quot;s&#x2F;123.123.123.123&#x2F;你的公网IP&#x2F;g&quot; &#123;&#125; \;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-部署gameserver的pod"><a href="#3-部署gameserver的pod" class="headerlink" title="3.部署gameserver的pod"></a>3.部署<code>gameserver</code>的<code>pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-gameserver_yaml]# vim hk4e-gameserver.ymlapiVersion: apps&#x2F;v1kind: Deployment     metadata:    name: hk4e-gameserver    namespace: genshinspec:       replicas: 1    selector:        matchLabels:            app: hk4e-gameserver     template:        metadata:            labels:                app: hk4e-gameserver        spec:              nodeName: node02#指定调度到哪个节点上            # hostNetwork: true            containers:            - name: hk4e-gameserver              image: hk4e-gameserver-ubuntu:v0.2#自定义镜像              imagePullPolicy: IfNotPresent              # tty: true              command:#启动容器的命令                - &quot;&#x2F;bin&#x2F;sh&quot;                - &quot;-c&quot;                - &quot;&#x2F;gameserver&#x2F;startserver.sh&quot;              resources:   #配置资源限制                requests:                  memory: &quot;16G&quot;                  cpu: &quot;8&quot;                limits:                  memory: &quot;20G&quot;                  cpu: &quot;12&quot;              volumeMounts:                  - name: hk4e-gameserver-data                    mountPath: &#x2F;gameserver            volumes:              - name: hk4e-gameserver-data                persistentVolumeClaim:                  claimName: hk4e-gameserver-pvc---apiVersion: v1kind: Servicemetadata:    name: hk4e-gameserver    namespace: genshinspec:    type: NodePort#用于发布宿主机身上的端口    ports:    - name: port-0-tcp      port: 20001      protocol: TCP      nodePort: 20001    - name: port-0-udp      port: 20001      protocol: UDP      nodePort: 20001    - name: port-1-tcp      port: 20011      protocol: TCP      nodePort: 20011    - name: port-1-udp      port: 20011      protocol: UDP      nodePort: 20011    - name: port-2-tcp      port: 20021      protocol: TCP      nodePort: 20021    - name: port-2-udp      port: 20021      protocol: UDP      nodePort: 20021    - name: port-3-tcp      port: 20031      protocol: TCP      nodePort: 20031    - name: port-3-udp      port: 20031      protocol: UDP      nodePort: 20031    - name: port-4-tcp      port: 20041      protocol: TCP      nodePort: 20041    - name: port-4-udp      port: 20041      protocol: UDP      nodePort: 20041    - name: port-5-tcp      port: 20051      protocol: TCP      nodePort: 20051    - name: port-5-udp      port: 20051      protocol: UDP      nodePort: 20051    - name: port-6-tcp      port: 20061      protocol: TCP      nodePort: 20061    - name: port-6-udp      port: 20061      protocol: UDP      nodePort: 20061    - name: port-7-tcp      port: 20071      protocol: TCP      nodePort: 20071    - name: port-7-udp      port: 20071      protocol: UDP      nodePort: 20071    - name: port-8-tcp      port: 20081      protocol: TCP      nodePort: 20081    - name: port-8-udp      port: 20081      protocol: UDP      nodePort: 20081    selector:      app: hk4e-gameserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-gameserver_yaml]# kubectl create -f hk4e-gameserver.yml[root@master hk4e-gameserver_yaml]# kubectl get pods -n genshinNAME                              READY   STATUS    RESTARTS   AGEhk4e-gameserver-8dcdd6b47-j9wnt   1&#x2F;1     Running   0          26shk4e-master-mysql-0               1&#x2F;1     Running   0          110mhk4e-mongodb-5d7fc87d9-b4ql5      1&#x2F;1     Running   0          34mhk4e-redis-0                      1&#x2F;1     Running   0          46mhk4e-sdkserver-6dbb86f5cc-kv2lg   1&#x2F;1     Running   0          22mhk4e-slave-mysql-0                1&#x2F;1     Running   0          110m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看服务"><a href="#4-查看服务" class="headerlink" title="4.查看服务"></a>4.查看服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@master hk4e-gameserver_yaml]# kubectl get svc -n genshinNAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                                                                                                                                                                           AGEhk4e-gameserver     NodePort    172.16.133.113   &lt;none&gt;        20001:20001&#x2F;TCP,20001:20001&#x2F;UDP,20011:20011&#x2F;TCP,20011:20011&#x2F;UDP,20021:20021&#x2F;TCP,20021:20021&#x2F;UDP,20031:20031&#x2F;TCP,20031:20031&#x2F;UDP,20041:20041&#x2F;TCP,20041:20041&#x2F;UDP,20051:20051&#x2F;TCP,20051:20051&#x2F;UDP,20061:20061&#x2F;TCP,20061:20061&#x2F;UDP,20071:20071&#x2F;TCP,20071:20071&#x2F;UDP,20081:20081&#x2F;TCP,20081:20081&#x2F;UDP   5m50shk4e-master-mysql   ClusterIP   172.16.242.133   &lt;none&gt;        3306&#x2F;TCP                                                                                                                                                                                                                                                                                          114mhk4e-mongodb        ClusterIP   172.16.153.180   &lt;none&gt;        27017&#x2F;TCP                                                                                                                                                                                                                                                                                         40mhk4e-redis          ClusterIP   172.16.177.173   &lt;none&gt;        6379&#x2F;TCP                                                                                                                                                                                                                                                                                          49mhk4e-sdkserver      ClusterIP   172.16.29.198    &lt;none&gt;        2888&#x2F;TCP                                                                                                                                                                                                                                                                                          26mhk4e-slave-mysql    ClusterIP   172.16.186.228   &lt;none&gt;        3306&#x2F;TCP                                                                                                                                                                                                                                                                                          113m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、登录游戏测试"><a href="#八、登录游戏测试" class="headerlink" title="八、登录游戏测试"></a>八、登录游戏测试</h2><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e10.png" alt="k8s-hk4e10"></p><p><img src="https://www.wsjj.top/upload/2023/06/k8s-hk4e11.png" alt="k8s-hk4e11"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> k8s </category>
          
          <category> 集群 </category>
          
          <category> 容器 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 原神 </tag>
            
            <tag> 原神私服 </tag>
            
            <tag> hk4e </tag>
            
            <tag> 原神真端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python学习笔记】集合和Bytes</title>
      <link href="/2023/06/22/156/"/>
      <url>/2023/06/22/156/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Python学习笔记】集合和Bytes"><a href="#【Python学习笔记】集合和Bytes" class="headerlink" title="【Python学习笔记】集合和Bytes"></a>【Python学习笔记】<code>集合</code>和<code>Bytes</code></h1><h2 id="一、集合的定义和类型"><a href="#一、集合的定义和类型" class="headerlink" title="一、集合的定义和类型"></a>一、集合的定义和类型</h2><ul><li>作用：去重</li><li>可变集合<ul><li><code>set( )</code></li></ul></li><li>不可变集合<ul><li><code>fronzenset( )</code></li></ul></li></ul><h3 id="1-集合的定义"><a href="#1-集合的定义" class="headerlink" title="1.集合的定义"></a>1.集合的定义</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;hello&quot;print(type(data))print(data)new_data &#x3D; set(data)#定义一个新的变量，把旧变量转换成集合print(type(new_data))print(new_data)&lt;class &#39;str&#39;&gt;#可以看到一开始还是字符串类型hello#输出的是普通字符串&lt;class &#39;set&#39;&gt;#转换成集合类型&#123;&#39;e&#39;, &#39;h&#39;, &#39;o&#39;, &#39;l&#39;&#125;#去重效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [ &quot;nginx&quot;, &quot;tomcat&quot;, &quot;nginx&quot;, &quot;tomcat&quot;,&quot;nginx&quot;, &quot;tomcat&quot;,&quot;nginx&quot;, &quot;tomcat&quot;,&quot;nginx&quot;, &quot;tomcat&quot;]new_data &#x3D; set(data)print(new_data)&#123;&#39;tomcat&#39;, &#39;nginx&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>综上所述，集合主要是用来对数据去重的</strong></p></blockquote><h3 id="2-遍历集合"><a href="#2-遍历集合" class="headerlink" title="2.遍历集合"></a>2.遍历集合</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [ &quot;nginx&quot;, &quot;tomcat&quot;, &quot;nginx&quot;, &quot;tomcat&quot;,&quot;nginx&quot;, &quot;tomcat&quot;,&quot;nginx&quot;, &quot;tomcat&quot;,&quot;nginx&quot;, &quot;tomcat&quot;]new_data &#x3D; set(data)for i in new_data:    print(i)    tomcatnginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h3><h4 id="统计字符出现次数"><a href="#统计字符出现次数" class="headerlink" title="统计字符出现次数"></a>统计字符出现次数</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;aaaaaaabbbbbbbbbbbbbbddddddddddddddddcccccccccc&quot;for i in set(data):    print(&quot;字符：%s 出现次数：%s&quot; % (i, data.count(i)))    字符：d 出现次数：16字符：b 出现次数：14字符：c 出现次数：10字符：a 出现次数：7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计某个网站的访问日志，某个IP的访问次数"><a href="#统计某个网站的访问日志，某个IP的访问次数" class="headerlink" title="统计某个网站的访问日志，某个IP的访问次数"></a>统计某个网站的访问日志，某个<code>IP</code>的访问次数</h4><pre class="line-numbers language-none"><code class="language-none">logs &#x3D; [ &quot;1.1.1.1&quot;, &quot;1.1.1.1&quot;, &quot;1.1.1.1&quot;, &quot;1.1.1.2&quot;, &quot;1.1.1.2&quot;, &quot;1.1.1.2&quot;, &quot;1.1.1.2&quot;, &quot;1.1.1.3&quot;, &quot;1.1.1.3&quot;,]for i in set(logs):    print(&quot;IP地址：%s，访问次数：%s&quot; % (i, logs.count(i)))    IP地址：1.1.1.2，访问次数：4IP地址：1.1.1.3，访问次数：2IP地址：1.1.1.1，访问次数：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、字符串转Bytes"><a href="#二、字符串转Bytes" class="headerlink" title="二、字符串转Bytes"></a>二、字符串转<code>Bytes</code></h2><pre class="line-numbers language-none"><code class="language-none">data &#x3D; b&quot;hello world&quot;#不支持中文print(type(data))print(data)&lt;class &#39;bytes&#39;&gt;#类型bytesb&#39;hello world&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-encode-编码"><a href="#1-encode-编码" class="headerlink" title="1.encode( )编码"></a>1.<code>encode( )</code>编码</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;Python自动化运维&quot;print(type(data))print(data)new_data &#x3D; data.encode(encoding&#x3D;&quot;utf-8&quot;)print(type(new_data))print(new_data)&lt;class &#39;str&#39;&gt;#字符串类型Python自动化运维#普通字符串&lt;class &#39;bytes&#39;&gt;#bytes类型b&#39;Python\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8c\x96\xe8\xbf\x90\xe7\xbb\xb4&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-bytes-编码"><a href="#2-bytes-编码" class="headerlink" title="2.bytes()编码"></a>2.<code>bytes()</code>编码</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python自动化运维&quot;new_data &#x3D; bytes(data, encoding&#x3D;&quot;utf-8&quot;)print(type(new_data))print(new_data)b&#39;python\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8c\x96\xe8\xbf\x90\xe7\xbb\xb4&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Bytes转字符串"><a href="#三、Bytes转字符串" class="headerlink" title="三、Bytes转字符串"></a>三、<code>Bytes</code>转字符串</h2><h3 id="1-decode-解码"><a href="#1-decode-解码" class="headerlink" title="1.decode( )解码"></a>1.<code>decode( )</code>解码</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; b&quot;python\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8c\x96\xe8\xbf\x90\xe7\xbb\xb4&quot;print(type(data))new_data &#x3D; data.decode(encoding&#x3D;&quot;utf-8&quot;)#把bytes转成普通字符串print(type(new_data))print(new_data)&lt;class &#39;bytes&#39;&gt;&lt;class &#39;str&#39;&gt;python自动化运维<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-str-解码"><a href="#2-str-解码" class="headerlink" title="2.str( )解码"></a>2.<code>str( )</code>解码</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; b&quot;python\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8c\x96\xe8\xbf\x90\xe7\xbb\xb4&quot;new_data &#x3D; str(data, encoding&#x3D;&quot;utf-8&quot;)#把bytes转成普通字符串print(type(new_data))print(new_data)&lt;class &#39;str&#39;&gt;python自动化运维<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> py </tag>
            
            <tag> 集合 </tag>
            
            <tag> bytes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python学习笔记】字典的管理操作</title>
      <link href="/2023/06/22/155/"/>
      <url>/2023/06/22/155/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Python学习笔记】字典的管理操作"><a href="#【Python学习笔记】字典的管理操作" class="headerlink" title="【Python学习笔记】字典的管理操作"></a>【Python学习笔记】字典的管理操作</h1><h2 id="一、关于字典"><a href="#一、关于字典" class="headerlink" title="一、关于字典"></a>一、关于字典</h2><ul><li>被定义在一对大括号<code>&#123; &#125;</code>中的数据 </li><li>以<code>key-value</code>对进行存储，不同的键值对使用逗号隔开 </li><li>键要唯一，值可以为任意类型的数据</li><li>注意：字典是可变的数据</li></ul><h3 id="1-字典的用法"><a href="#1-字典的用法" class="headerlink" title="1.字典的用法"></a>1.字典的用法</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;print(type(data))print(data)&lt;class &#39;dict&#39;&gt;&#123;&#39;user&#39;: &#39;wangshengjj&#39;, &#39;password&#39;: &#39;wsjj&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;192.168.122.10&quot;:&#123;&quot;ssh_user&quot;:&quot;root&quot;,&quot;ssh_port&quot;:22&#125;,        &quot;192.168.122.20&quot;:&#123;&quot;ssh_user&quot;:&quot;root&quot;,&quot;ssh_port&quot;:22&#125;&#125;print(type(data))print(data)&lt;class &#39;dict&#39;&gt;&#123;&#39;192.168.122.10&#39;: &#123;&#39;ssh_user&#39;: &#39;root&#39;, &#39;ssh_port&#39;: 22&#125;, &#39;192.168.122.20&#39;: &#123;&#39;ssh_user&#39;: &#39;root&#39;, &#39;ssh_port&#39;: 22&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、字典数据管理操作"><a href="#二、字典数据管理操作" class="headerlink" title="二、字典数据管理操作"></a>二、字典数据管理操作</h2><h3 id="1-获取数据"><a href="#1-获取数据" class="headerlink" title="1.获取数据"></a>1.获取数据</h3><pre class="line-numbers language-none"><code class="language-none">#使用本方法，如果键不存在于字典中，那么就会返回执行错误data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;print(data[&quot;user&quot;])#中括号里输入键，获取值wangshengjjdata &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;print(data.get(&quot;password&quot;))wsjj#在字典中取值的时候，推荐使用下面的方法，如果键不存在于字典中，下面的方法就会返回空结果data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;print(data.get(&quot;passwd&quot;))None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-向字典添加数据"><a href="#2-向字典添加数据" class="headerlink" title="2.向字典添加数据"></a>2.向字典添加数据</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;user01&quot;:&quot;wangshengjj&quot;,&quot;password01&quot;:&quot;wsjj&quot;&#125;data[&quot;user02&quot;] &#x3D; &quot;网笙久久&quot;data[&quot;password02&quot;] &#x3D; &quot;wsjj.top&quot;print(data)&#123;&#39;user01&#39;: &#39;wangshengjj&#39;, &#39;password01&#39;: &#39;wsjj&#39;, &#39;user02&#39;: &#39;网笙久久&#39;, &#39;password02&#39;: &#39;wsjj.top&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3.修改数据"></a>3.修改数据</h3><blockquote><p><strong>可以看到，<code>添加数据</code>和<code>修改数据</code>，结构是一样的</strong><br><strong>所以以后在<code>添加数据</code>的时候，需要注意，<code>新增</code>数据的<code>键</code>不能和<code>已有</code>的<code>键</code>冲突</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;data[&quot;user&quot;] &#x3D; &quot;网笙久久&quot;data[&quot;password&quot;] &#x3D; &quot;wsjj.top&quot;print(data)&#123;&#39;user&#39;: &#39;网笙久久&#39;, &#39;password&#39;: &#39;wsjj.top&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、字典对象的操作方法"><a href="#三、字典对象的操作方法" class="headerlink" title="三、字典对象的操作方法"></a>三、字典对象的操作方法</h2><h3 id="1-以列表的方式，返回字典里所有的键"><a href="#1-以列表的方式，返回字典里所有的键" class="headerlink" title="1.以列表的方式，返回字典里所有的键"></a>1.以列表的方式，返回字典里所有的键</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;print(data.keys())dict_keys([&#39;user&#39;, &#39;password&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-以列表的方式，返回字典里所有的值"><a href="#2-以列表的方式，返回字典里所有的值" class="headerlink" title="2.以列表的方式，返回字典里所有的值"></a>2.以列表的方式，返回字典里所有的值</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;print(data.values())dict_values([&#39;wangshengjj&#39;, &#39;wsjj&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-以列表的方式，返回字典里包含键值对的多个元组"><a href="#3-以列表的方式，返回字典里包含键值对的多个元组" class="headerlink" title="3.以列表的方式，返回字典里包含键值对的多个元组"></a>3.以列表的方式，返回字典里包含键值对的多个元组</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;print(data.items())dict_items([(&#39;user&#39;, &#39;wangshengjj&#39;), (&#39;password&#39;, &#39;wsjj&#39;)])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、遍历字典"><a href="#四、遍历字典" class="headerlink" title="四、遍历字典"></a>四、遍历字典</h2><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;for i in data:    print(i)    userpassworddata &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;for i in data:    print(&quot;%s:%s&quot; %(i, data.get(i)))user:wangshengjjpassword:wsjj#上面的另外一种写法data &#x3D; &#123;&quot;user&quot;:&quot;wangshengjj&quot;,&quot;password&quot;:&quot;wsjj&quot;&#125;for i,j in data.items():#使用items    print(&quot;%s:%s&quot; %(i, j))    user:wangshengjjpassword:wsjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-案例"><a href="#1-案例" class="headerlink" title="1.案例"></a>1.案例</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;192.168.122.10&quot;:&#123;&quot;ssh_user&quot;:&quot;root&quot;,&quot;ssh_port&quot;:22&#125;,        &quot;192.168.122.20&quot;:&#123;&quot;ssh_user&quot;:&quot;root&quot;,&quot;ssh_port&quot;:22&#125;&#125;for a in data.items():        print(&quot;ssh %s@%s -p %s&quot; %(a[1][&quot;ssh_user&quot;],a[0],a[1][&quot;ssh_port&quot;]))ssh root@192.168.122.10 -p 22ssh root@192.168.122.20 -p 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="另外一种写法"><a href="#另外一种写法" class="headerlink" title="另外一种写法"></a>另外一种写法</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &#123;&quot;192.168.122.10&quot;:&#123;&quot;ssh_user&quot;:&quot;root&quot;,&quot;ssh_port&quot;:22&#125;,        &quot;192.168.122.20&quot;:&#123;&quot;ssh_user&quot;:&quot;root&quot;,&quot;ssh_port&quot;:22&#125;&#125;for ip, info in data.items():        print(&quot;ssh %s@%s -p %s&quot; % (info.get(&quot;ssh_user&quot;),ip,info.get(&quot;ssh_port&quot;)ssh root@192.168.122.10 -p 22ssh root@192.168.122.20 -p 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python学习笔记】列表及元组</title>
      <link href="/2023/06/21/154/"/>
      <url>/2023/06/21/154/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Python学习笔记】列表及元组"><a href="#【Python学习笔记】列表及元组" class="headerlink" title="【Python学习笔记】列表及元组"></a>【Python学习笔记】列表及元组</h1><h2 id="一、列表定义"><a href="#一、列表定义" class="headerlink" title="一、列表定义"></a>一、列表定义</h2><ul><li>被定义一对方括号[ ]中的数据, 不同的数据使用逗号隔开 </li><li>样子：<code>[ 数据1, 数据2, 数据3 ]</code></li><li>列表属于<code>可变数据</code></li></ul><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; [ &quot;nginx&quot;, &quot;redis&quot;, &quot;mysql&quot;, &quot;tomcat&quot; ]print(type(data_01))print(data_01)&lt;class &#39;list&#39;&gt;#类型列表[&#39;nginx&#39;, &#39;redis&#39;, &#39;mysql&#39;, &#39;tomcat&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; [ [ &quot;Mysql&quot;, &quot;MriaDB&quot; ], [ &quot;nginx&quot;, &quot;httpd&quot; ], [ &quot;tomcat&quot; ] ]print(type(data_01))print(data_01)&lt;class &#39;list&#39;&gt;[[&#39;Mysql&#39;, &#39;MriaDB&#39;], [&#39;nginx&#39;, &#39;httpd&#39;], [&#39;tomcat&#39;]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-列表解析"><a href="#1-列表解析" class="headerlink" title="1.列表解析"></a>1.列表解析</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [ i for i in range(10) ]print(data)[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [ i ** 2 for i in range(1,11) ]print(data)[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、列表常规操作符"><a href="#二、列表常规操作符" class="headerlink" title="二、列表常规操作符"></a>二、列表常规操作符</h2><h3 id="1-判断成员关系in、not-in"><a href="#1-判断成员关系in、not-in" class="headerlink" title="1.判断成员关系in、not in"></a>1.判断成员关系<code>in</code>、<code>not in</code></h3><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; data_01 &#x3D; [ &quot;nginx&quot;, &quot;httpd&quot;, &quot;tomcat&quot; ]&gt;&gt;&gt; &quot;httpd&quot; in data_01True&gt;&gt;&gt; &quot;httpd&quot; not in data_01False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;nginx&quot;,&quot;httpd&quot;,&quot;tomcat&quot;,&quot;mysql&quot;]choise &#x3D; input(&quot;请输入服务名：&quot;)if choise in data:    print(&quot;%s服务存在&quot; % choise)else:    print(&quot;%s服务不存在&quot; % choise)    请输入服务名：mariadbmariadb服务不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取列表中元素的个数"><a href="#2-获取列表中元素的个数" class="headerlink" title="2.获取列表中元素的个数"></a>2.获取列表中元素的个数</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;nginx&quot;,&quot;httpd&quot;,&quot;tomcat&quot;,&quot;mysql&quot;]print(len(data))4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-索引操作"><a href="#3-索引操作" class="headerlink" title="3.索引操作"></a>3.索引操作</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;mysql&quot;,&quot;redis&quot;,&quot;k8s&quot;,&quot;nginx&quot;]print(data[0])mysqldata &#x3D; [&quot;mysql&quot;,&quot;redis&quot;,&quot;k8s&quot;,&quot;nginx&quot;]print(data[-1])nginxdata_01 &#x3D; [[&quot;nginx&quot;,&quot;1.20&quot;],[&quot;mysql&quot;,&quot;5.6&quot;]]print(data_01[1])print(data_01[1][0])[&#39;mysql&#39;, &#39;5.6&#39;]mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;mysql&quot;,&quot;redis&quot;,&quot;k8s&quot;,&quot;nginx&quot;]data[0] &#x3D; &quot;mariadb&quot;print(data)[&#39;mariadb&#39;, &#39;redis&#39;, &#39;k8s&#39;, &#39;nginx&#39;]data_01 &#x3D; [[&quot;nginx&quot;,&quot;1.20&quot;],[&quot;mysql&quot;,&quot;5.6&quot;]]data_01[0][-1] &#x3D; &quot;latest&quot;print(data_01)[[&#39;nginx&#39;, &#39;latest&#39;], [&#39;mysql&#39;, &#39;5.6&#39;]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、列表对象操作方法"><a href="#三、列表对象操作方法" class="headerlink" title="三、列表对象操作方法"></a>三、列表对象操作方法</h2><h3 id="1-追加数据"><a href="#1-追加数据" class="headerlink" title="1.追加数据"></a>1.追加数据</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;nginx&quot;,&quot;httpd&quot;,&quot;tomcat&quot;,&quot;mysql&quot;]data.append(&quot;mariadb&quot;)print(data)[&#39;nginx&#39;, &#39;httpd&#39;, &#39;tomcat&#39;, &#39;mysql&#39;, &#39;mariadb&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h3><blockquote><p><strong>在指定位置插入数据</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;nginx&quot;,&quot;httpd&quot;,&quot;tomcat&quot;,&quot;mysql&quot;]data.insert(1, &quot;apache&quot;)print(data)[&#39;nginx&#39;, &#39;apache&#39;, &#39;httpd&#39;, &#39;tomcat&#39;, &#39;mysql&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; []while True:    choise_input &#x3D; input(&quot;请输入你要插入的数据(输入q退出)：&quot;)    if choise_input &#x3D;&#x3D; &quot;quit&quot; or choise_input &#x3D;&#x3D; &quot;q&quot;:        break    data.append(choise_input)    print(data)    请输入你要插入的数据(输入q退出)：nginx[&#39;nginx&#39;]请输入你要插入的数据(输入q退出)：tomcat[&#39;nginx&#39;, &#39;tomcat&#39;]请输入你要插入的数据(输入q退出)：httpd[&#39;nginx&#39;, &#39;tomcat&#39;, &#39;httpd&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除数据pop"><a href="#3-删除数据pop" class="headerlink" title="3.删除数据pop()"></a>3.删除数据<code>pop()</code></h3><ul><li>删除最后一个数据 </li><li>返回被删除的数据</li></ul><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;nginx&quot;,&quot;httpd&quot;,&quot;tomcat&quot;,&quot;mysql&quot;]new_data &#x3D;data.pop()print(new_data)mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除数据remove"><a href="#4-删除数据remove" class="headerlink" title="4.删除数据remove()"></a>4.删除数据<code>remove()</code></h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [&quot;nginx&quot;,&quot;httpd&quot;,&quot;tomcat&quot;,&quot;mysql&quot;]data.remove(&quot;tomcat&quot;)print(data)[&#39;nginx&#39;, &#39;httpd&#39;, &#39;mysql&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、遍历列表"><a href="#四、遍历列表" class="headerlink" title="四、遍历列表"></a>四、遍历列表</h2><pre class="line-numbers language-none"><code class="language-none">app &#x3D; [&quot;nginx&quot;,&quot;redis&quot;,&quot;nfs&quot;,&quot;mysql&quot;]for i in app:    print(&quot;yum install -y %s&quot; % i)    yum install -y nginxyum install -y redisyum install -y nfsyum install -y mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2种写法"><a href="#2种写法" class="headerlink" title="2种写法"></a><code>2</code>种写法</h3><pre class="line-numbers language-none"><code class="language-none">image &#x3D; [ [&quot;mysql&quot;, &quot;5.7&quot;], [&quot;nginx&quot;, &quot;1.18&quot;], [&quot;wordpress&quot;, &quot;latest&quot;] ]for i in image:    print(&quot;docker pull %s:%s&quot; % (i[0], i[1]))docker pull mysql:5.7docker pull nginx:1.18docker pull wordpress:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">image &#x3D; [ [&quot;mysql&quot;, &quot;5.7&quot;], [&quot;nginx&quot;, &quot;1.18&quot;], [&quot;wordpress&quot;, &quot;latest&quot;] ]for i, j in image:    print(&quot;docker pull %s:%s&quot; % (i, j))docker pull mysql:5.7docker pull nginx:1.18docker pull wordpress:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、元组管理操作"><a href="#五、元组管理操作" class="headerlink" title="五、元组管理操作"></a>五、元组管理操作</h2><h3 id="1-元组的定义"><a href="#1-元组的定义" class="headerlink" title="1.元组的定义"></a>1.元组的定义</h3><ul><li>被定义在一对圆括号( )的数据， 不同的元素使用逗号隔开  </li><li>注意：元组是<code>不可变的数据</code></li></ul><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; ()data_02 &#x3D; ( &quot;nginx&quot;, &quot;httpd&quot;, &quot;IIS&quot; )data_03 &#x3D; ( (&quot;MySQL&quot;, &quot;Oracle&quot;), (&quot;redis&quot;, &quot;etcd&quot;), (&quot;docker&quot;, &quot;podman&quot;) )data_04 &#x3D; ( [&quot;linux&quot;, &quot;unix&quot;], [&quot;macos&quot;, &quot;windows&quot;] )print(type(data_01), type(data_02), type(data_03), type(data_04))&lt;class &#39;tuple&#39;&gt; &lt;class &#39;tuple&#39;&gt; &lt;class &#39;tuple&#39;&gt; &lt;class &#39;tuple&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-元组的常用操作"><a href="#2-元组的常用操作" class="headerlink" title="2.元组的常用操作"></a>2.元组的常用操作</h3><blockquote><p><code>len()</code>、<code>in</code>、<code>not in</code>、<code>索引</code></p></blockquote><ul><li>和列表一样的操作方法</li><li>但是唯一区别是，内容不可修改</li></ul><pre class="line-numbers language-none"><code class="language-none">data_02 &#x3D; ( &quot;nginx&quot;, &quot;httpd&quot;, &quot;IIS&quot; )print(data_02[-1])print(data_02[0])IISnginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-遍历元组"><a href="#3-遍历元组" class="headerlink" title="3.遍历元组"></a>3.遍历元组</h3><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; ( &quot;nginx&quot;, &quot;httpd&quot;, &quot;tomcat&quot;, &quot;IIS&quot; )for i in data_01:    print(&quot;---&gt; %s&quot; % i)    ---&gt; nginx---&gt; httpd---&gt; tomcat---&gt; IIS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; [(&quot;mysql&quot;,&quot;5.7&quot;),(&quot;nginx&quot;,&quot;latest&quot;),(&quot;redis&quot;,&quot;3.0.4&quot;)]for a,b in data:    print(&quot;docker run -itd %s:%s&quot; %(a,b))    docker run -itd mysql:5.7docker run -itd nginx:latestdocker run -itd redis:3.0.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 列表 </tag>
            
            <tag> 元组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python学习笔记】字符串管理操作</title>
      <link href="/2023/06/20/153/"/>
      <url>/2023/06/20/153/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Python学习笔记】字符串管理操作"><a href="#【Python学习笔记】字符串管理操作" class="headerlink" title="【Python学习笔记】字符串管理操作"></a>【Python学习笔记】字符串管理操作</h1><h2 id="一、字符串的定义"><a href="#一、字符串的定义" class="headerlink" title="一、字符串的定义"></a>一、字符串的定义</h2><ul><li>被定义在一对引号中的数据</li><li>不可变数据类型</li></ul><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; &quot;192.168.1.1&quot;data_02 &#x3D; &#39;node01.linux.com&#39;data_03 &#x3D; &quot;&#x2F;etc&#x2F;fstab&quot;data_04 &#x3D; &quot;&quot;print(type(data_01), type(data_02), type(data_03), type(data_04))&lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-原始字符"><a href="#1-原始字符" class="headerlink" title="1.原始字符"></a>1.原始字符</h3><ul><li>避免特殊字符被转义</li><li>应用于正则表达式、<code>windows</code>文件路径</li></ul><h4 id="如果不加原始字符"><a href="#如果不加原始字符" class="headerlink" title="如果不加原始字符"></a>如果不加原始字符</h4><pre class="line-numbers language-none"><code class="language-none">data_dir &#x3D; &quot;C:\newfile\file01&quot;print(data_dir)C:#并不是我们想要的结果，并且把\n识别成了换行符ewfileile01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用原始字符"><a href="#使用原始字符" class="headerlink" title="使用原始字符"></a>使用原始字符</h4><pre class="line-numbers language-none"><code class="language-none">data_dir &#x3D; r&quot;C:\newfile\file01&quot;print(data_dir)C:\newfile\file01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、字符串的常规处理操作"><a href="#二、字符串的常规处理操作" class="headerlink" title="二、字符串的常规处理操作"></a>二、字符串的常规处理操作</h2><h4 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h4><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; &quot;&#x2F;etc&#x2F;fstab&quot;print(len(data_01))10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符拼接"><a href="#字符拼接" class="headerlink" title="字符拼接"></a>字符拼接</h4><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; &quot;&#x2F;etc&#x2F;fstab&quot;print(&quot;cat &quot; + data_01)cat &#x2F;etc&#x2F;fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重复字段"><a href="#重复字段" class="headerlink" title="重复字段"></a>重复字段</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;&#x3D;&#x3D;&quot;print(data * 4)&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断成员关系"><a href="#判断成员关系" class="headerlink" title="判断成员关系"></a>判断成员关系</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(&quot;h&quot; in data)True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(&quot;hn&quot; in data)False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(&quot;a&quot; not in data)True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul><li>从左向右，下标从0开始</li><li>从右向左, 下标从-1开始</li></ul><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(data[2])t#从0开始输出第三个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(data[-2])o#从后往前数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(data[2:5])tho#从0开始显示第三个到第四个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(data[::2])pto#从0开始每隔2个输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(data[1:6:2])yhn#从1开始，会先显示自己，然后每隔2位输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(data[::-1])nohtyp#反向输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="替换Y为大写"><a href="#替换Y为大写" class="headerlink" title="替换Y为大写"></a>替换<code>Y</code>为大写</h5><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;python&quot;print(data[0] + &quot;Y&quot; + data[2:6:])pYthon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、字符串对象操作方法"><a href="#三、字符串对象操作方法" class="headerlink" title="三、字符串对象操作方法"></a>三、字符串对象操作方法</h2><h3 id="1-查看对象操作方法"><a href="#1-查看对象操作方法" class="headerlink" title="1.查看对象操作方法"></a>1.查看对象操作方法</h3><pre class="line-numbers language-none"><code class="language-none">print(dir(str))#str代表字符串类型[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isascii&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-转换大小写"><a href="#2-转换大小写" class="headerlink" title="2.转换大小写"></a>2.转换大小写</h3><pre class="line-numbers language-none"><code class="language-none">data_dir &#x3D; r&quot;C:\Windows\X86&quot;print(data_dir.upper())#全部转换成大写print(data_dir.lower())#全部转换成小写print(data_dir.capitalize())#首字符为大写C:\WINDOWS\X86c:\windows\x86C:\windows\x86<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-判断字符开头和结尾"><a href="#3-判断字符开头和结尾" class="headerlink" title="3.判断字符开头和结尾"></a>3.判断字符开头和结尾</h3><pre class="line-numbers language-none"><code class="language-none">data_dir &#x3D; r&quot;C:\Windows\X86&quot;print(data_dir.startswith(&quot;C&quot;))True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data_dir &#x3D; r&quot;C:\Windows\X86&quot;print(data_dir.endswith(&quot;X86&quot;))True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动补齐目录"><a href="#自动补齐目录" class="headerlink" title="自动补齐目录/"></a>自动补齐目录<code>/</code></h4><blockquote><p><strong>部分用户在输入路径的时候，有的习惯不会加上<code>/</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">dir_name &#x3D; input(r&quot;请输入目录：&quot;)if dir_name.endswith(&quot;&#x2F;&quot;):    print(dir_name)else:    dir_name &#x3D; dir_name + &quot;&#x2F;&quot;    print(dir_name)    请输入目录：&#x2F;tmp&#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-去除左右连段指定字符"><a href="#4-去除左右连段指定字符" class="headerlink" title="4.去除左右连段指定字符"></a>4.去除左右连段指定字符</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;   master.linux.com    &quot;print(data.strip())#去除空格master.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;   1master.linux.com    1&quot;print(data.lstrip())#去除左边的空格1master.linux.com    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;1   master.linux.com2    &quot;print(data.rstrip())#删除右边的空格1   master.linux.com2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;BBmaster.linux.comBB&quot;print(data.strip(&quot;BB&quot;))#去除两边BBmaster.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-例子：选择的时候替换大小写"><a href="#5-例子：选择的时候替换大小写" class="headerlink" title="5.例子：选择的时候替换大小写"></a>5.例子：选择的时候替换大小写</h3><blockquote><p><strong>比如我们的程序只识别小写的<code>y</code>，但是不同用户习惯，会把小写<code>y</code>打成大写<code>Y</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">choice &#x3D; input(&quot;确认&#x2F;取消(y&#x2F;n)? &quot;).strip().lower()if choice &#x3D;&#x3D; &quot;y&quot;:    print(&quot;确认 %s&quot; %choice)else:    print(&quot;取消&quot;)    确认&#x2F;取消(y&#x2F;n)? Y确认 y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-分割字符串"><a href="#6-分割字符串" class="headerlink" title="6.分割字符串"></a>6.分割字符串</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;linux unix macos windows&quot;print(data.split())#空白为分隔符[&#39;linux&#39;, &#39;unix&#39;, &#39;macos&#39;, &#39;windows&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;linux unix macos windows&quot;print(data.split()[2])#从0开始macos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="自定义分隔符"><a href="#自定义分隔符" class="headerlink" title="自定义分隔符"></a>自定义分隔符</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;linux.unix.macos.windows&quot;print(data.split(&quot;.&quot;))[&#39;linux&#39;, &#39;unix&#39;, &#39;macos&#39;, &#39;windows&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="取值-1"><a href="#取值-1" class="headerlink" title="取值"></a>取值</h5><pre class="line-numbers language-none"><code class="language-none">ip_addr &#x3D; &quot;192.168.1.1&quot;print(ip_addr.split(&quot;.&quot;)[0])192<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-字符串替换"><a href="#7-字符串替换" class="headerlink" title="7.字符串替换"></a>7.字符串替换</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;hello python&quot;print(data.replace(&quot;o&quot;,&quot;1&quot;))#把所有o替换成1hell1 pyth1n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="指定替换"><a href="#指定替换" class="headerlink" title="指定替换"></a>指定替换</h4><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;hello python&quot;print(data.replace(&quot;o&quot;,&quot;1&quot;,1))#只替换第一个hell1 python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-判断字符串组成结构"><a href="#8-判断字符串组成结构" class="headerlink" title="8.判断字符串组成结构"></a>8.判断字符串组成结构</h3><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;123456&quot;print(data.isdigit())Truedata &#x3D; &quot;abc&quot;print(data.islower())Truedata &#x3D; &quot;Abc&quot;print(data.isupper())Falsedata &#x3D; &quot;ab123c&quot;print(data.isalnum())True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、遍历字符串"><a href="#四、遍历字符串" class="headerlink" title="四、遍历字符串"></a>四、遍历字符串</h2><pre class="line-numbers language-none"><code class="language-none">data &#x3D; &quot;linux&quot;for i in data:    print(&quot;%s&quot; % data)    linux#因为有5个字符，所以循环了5遍linuxlinuxlinuxlinux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-生成10位随机数"><a href="#1-生成10位随机数" class="headerlink" title="1.生成10位随机数"></a>1.生成10位随机数</h3><pre class="line-numbers language-none"><code class="language-none">import randomimport stringall_data &#x3D; string.ascii_letters + string.digits + string.punctuationdata &#x3D; &quot;&quot;for i in range(20):    data &#x3D; random.choice(all_data) + dataprint(data)!&#x2F;s\WBT$+Go+&#x3D;J^r*LmO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> python </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python学习笔记】条件判断和循环</title>
      <link href="/2023/06/20/152/"/>
      <url>/2023/06/20/152/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Python学习笔记】条件判断和循环"><a href="#【Python学习笔记】条件判断和循环" class="headerlink" title="【Python学习笔记】条件判断和循环"></a>【Python学习笔记】条件判断和循环</h1><h2 id="一、逻辑控制语句"><a href="#一、逻辑控制语句" class="headerlink" title="一、逻辑控制语句"></a>一、逻辑控制语句</h2><ul><li>条件判断<ul><li><code>if</code></li></ul></li><li>循环<ul><li><code>for</code>、<code>while</code></li></ul></li></ul><h2 id="二、if条件判断"><a href="#二、if条件判断" class="headerlink" title="二、if条件判断"></a>二、<code>if</code>条件判断</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><pre class="line-numbers language-none"><code class="language-none">if 条件:    条件为真的操作    条件为真的操作else:    条件为假的操作    条件为假的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-条件判断"><a href="#2-条件判断" class="headerlink" title="2.条件判断"></a>2.条件判断</h3><pre class="line-numbers language-none"><code class="language-none">i &#x3D; int(input(&quot;请输入数字：&quot;))if i &gt; 100:    print(&quot;数字大于100&quot;)else:    print(&quot;数字小于100&quot;)    请输入数字：1数字小于100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">i &#x3D; int(input(&quot;请输入数字：&quot;))if i &gt; 100:    print(&quot;数字大于100&quot;)elif i &#x3D;&#x3D; 100:    print(&quot;数字等于100&quot;)else:    print(&quot;数字小于100&quot;)    请输入数字：100数字等于100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、for循环"><a href="#三、for循环" class="headerlink" title="三、for循环"></a>三、<code>for</code>循环</h2><pre class="line-numbers language-none"><code class="language-none">for i in range(4):    print(&quot;ssh root@192.168.140.%s&quot; % i)    print(&quot;---&quot; * 3)    ssh root@192.168.140.0---------ssh root@192.168.140.1---------ssh root@192.168.140.2---------ssh root@192.168.140.3---------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">for i in range(1,11):    print(&quot;ping -c 1 -w 1 172.16.%s.1&quot; % i)    ping -c 1 -w 1 172.16.1.1ping -c 1 -w 1 172.16.2.1ping -c 1 -w 1 172.16.3.1ping -c 1 -w 1 172.16.4.1ping -c 1 -w 1 172.16.5.1ping -c 1 -w 1 172.16.6.1ping -c 1 -w 1 172.16.7.1ping -c 1 -w 1 172.16.8.1ping -c 1 -w 1 172.16.9.1ping -c 1 -w 1 172.16.10.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、while循环"><a href="#四、while循环" class="headerlink" title="四、while循环"></a>四、<code>while</code>循环</h2><h3 id="1-常规语法"><a href="#1-常规语法" class="headerlink" title="1.常规语法"></a>1.常规语法</h3><pre class="line-numbers language-none"><code class="language-none">while 条件:    执行的操作    执行的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 10while i &lt; 20:    print(i)    i +&#x3D; 1    10111213141516171819<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="取消输出自动换行"><a href="#取消输出自动换行" class="headerlink" title="取消输出自动换行"></a>取消输出自动换行</h4><pre class="line-numbers language-none"><code class="language-none">i &#x3D; 10while i &lt; 20:    print(i, end &#x3D; &quot;&quot;)    i +&#x3D; 1    10111213141516171819<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、终止循环"><a href="#五、终止循环" class="headerlink" title="五、终止循环"></a>五、终止循环</h2><h3 id="1-break终止整个循环"><a href="#1-break终止整个循环" class="headerlink" title="1.break终止整个循环"></a>1.<code>break</code>终止整个循环</h3><pre class="line-numbers language-none"><code class="language-none">for i in range(1,6):    if i &#x3D;&#x3D; 4:        break    else:        print(&quot;ping 192.168.1.%s&quot; % i)        ping 192.168.1.1ping 192.168.1.2ping 192.168.1.3#可以看到循环在第四次终止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-continue终止本次循环"><a href="#2-continue终止本次循环" class="headerlink" title="2.continue终止本次循环"></a>2.<code>continue</code>终止本次循环</h3><pre class="line-numbers language-none"><code class="language-none">for i in range(1,6):    if i &#x3D;&#x3D; 4:        continue    else:        print(&quot;ping 192.168.1.%s&quot; % i)        ping 192.168.1.1ping 192.168.1.2ping 192.168.1.3#第四次循环被终止ping 192.168.1.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> for </tag>
            
            <tag> if </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python学习笔记】输出语句及定义变量</title>
      <link href="/2023/06/20/151/"/>
      <url>/2023/06/20/151/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Python学习笔记】输出语句及定义变量"><a href="#【Python学习笔记】输出语句及定义变量" class="headerlink" title="【Python学习笔记】输出语句及定义变量"></a>【Python学习笔记】输出语句及定义变量</h1><h2 id="一、输出语句print"><a href="#一、输出语句print" class="headerlink" title="一、输出语句print"></a>一、输出语句<code>print</code></h2><pre class="line-numbers language-none"><code class="language-none">print(&quot;hello world&quot;)hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-引号的使用"><a href="#1-引号的使用" class="headerlink" title="1.引号的使用"></a>1.引号的使用</h3><blockquote><p><strong>可<code>单引号</code>，也可<code>双引号</code>，也可以<code>三引号</code></strong><br><strong>不过<code>三</code>引号更多用于多条语句输出</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">print(&quot;hello world&quot;)#双引号print(&#39;你好世界&#39;) #单引号print(&quot;&quot;&quot;           Linux               Windows             MacOS               Unix                &quot;&quot;&quot;)#三个双引号print(&#39;&#39;&#39;你好       这里是      网笙久久     的博客      &#39;&#39;&#39;)#三个单引号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-输出变量的值"><a href="#2-输出变量的值" class="headerlink" title="2.输出变量的值"></a>2.输出变量的值</h3><pre class="line-numbers language-none"><code class="language-none">name &#x3D; &quot;网笙久久print(name) 网笙久久<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">name &#x3D; &quot;网笙久久&quot;              print(&quot;这里是&quot;, name, &quot;的博客&quot;)  这里是 网笙久久 的博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-占位符的使用"><a href="#3-占位符的使用" class="headerlink" title="3.占位符的使用"></a>3.占位符的使用</h3><blockquote><p><strong>不知各位，看到上面的输出结果是否感到别扭</strong><br><strong>那我再换个写法，使用占位符呢</strong></p></blockquote><ul><li><code>%s</code>字符串占位</li><li><code>%d</code>整数</li><li><code>%f</code>浮点数</li><li><code>%%</code>%本身(转义)</li></ul><pre class="line-numbers language-none"><code class="language-none">name &#x3D; &quot;网笙久久&quot;             print(&quot;这里是%s的博客&quot; % name) 这里是网笙久久的博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="s字符串"><a href="#s字符串" class="headerlink" title="%s字符串"></a><code>%s</code>字符串</h4><pre class="line-numbers language-none"><code class="language-none">user &#x3D; &quot;wangshengjj&quot;   print(&quot;字符串：%s&quot; % user) 字符串：wangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d整数"><a href="#d整数" class="headerlink" title="%d整数"></a><code>%d</code>整数</h4><pre class="line-numbers language-none"><code class="language-none">number &#x3D; 100            print(&quot;整数：%d&quot; % number) 整数：100#不管什么样的数据，最后输出的都是整数number &#x3D; 1.14514           print(&quot;整数：%d&quot; % number)    整数：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="f浮点数"><a href="#f浮点数" class="headerlink" title="%f浮点数"></a><code>%f</code>浮点数</h4><pre class="line-numbers language-none"><code class="language-none">#通过本条例子可知，浮点数最多输出小数点后6为数字，如果多余那么就做四舍五入计算number &#x3D; 3.1415926      print(&quot;浮点数：%f&quot; % number)浮点数：3.141593#如果是整数，会自动补齐后6位小数number &#x3D; 20               print(&quot;浮点数：%f&quot; % number)  浮点数：20.000000#当然也可以手动控制保留后几位小数  %.3f表示保留后三位number &#x3D; 3.1415926         print(&quot;浮点数：%.3f&quot; % number) 浮点数：3.142<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出-号本身"><a href="#输出-号本身" class="headerlink" title="%%输出%号本身"></a><code>%%</code>输出<code>%</code>号本身</h4><pre class="line-numbers language-none"><code class="language-none">number &#x3D; 50                print(&quot;百分比：%s%%&quot; % number) 百分比：50%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、变量的定义和使用"><a href="#二、变量的定义和使用" class="headerlink" title="二、变量的定义和使用"></a>二、变量的定义和使用</h2><h3 id="1-变量的定义、调用"><a href="#1-变量的定义、调用" class="headerlink" title="1.变量的定义、调用"></a>1.变量的定义、调用</h3><pre class="line-numbers language-none"><code class="language-none">变量名称 &#x3D; 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义变量名注意事项：<ul><li>只能包含字母、数字、下划线</li><li>只能以下划线、字母开头</li><li>不能与<code>python</code>关键字冲突</li><li>见名知义</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">user &#x3D; &quot;wangshengjj&quot;print(user)         wangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>一行定义多个变量和值</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">hostname, ip_addr &#x3D; &quot;master.linux.com&quot;, &quot;10.10.10.10&quot;print(&quot;主机名：%s IP地址：%s&quot; % (hostname,ip_addr)) 主机名：master.linux.com IP地址：10.10.10.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-交互式变量"><a href="#2-交互式变量" class="headerlink" title="2.交互式变量"></a>2.交互式变量</h3><pre class="line-numbers language-none"><code class="language-none">变量名称 &#x3D; input(&quot;提示信息&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">number1 &#x3D; input(&quot;请输入第一个数字：&quot;)                    number2 &#x3D; input(&quot;请输入第二个数字：&quot;)                    print(&quot;第一个数：%s 第二个数： %s&quot; % (number1,number2))   请输入第一个数字：10请输入第二个数字：20第一个数：10 第二个数： 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-变量的特性"><a href="#3-变量的特性" class="headerlink" title="3.变量的特性"></a>3.变量的特性</h3><pre class="line-numbers language-none"><code class="language-none"># id() 返回变量所在的内存地址data_01 &#x3D; 200     data_02 &#x3D; 100     print(id(data_01))print(id(data_02))140715983646592140715983643392<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、数据类型—数字"><a href="#三、数据类型—数字" class="headerlink" title="三、数据类型—数字"></a>三、数据类型—<code>数字</code></h2><h3 id="1-Python常见的数据类型"><a href="#1-Python常见的数据类型" class="headerlink" title="1.Python常见的数据类型"></a>1.<code>Python</code>常见的数据类型</h3><blockquote><p><strong><code>数字</code>、<code>字符串</code>、<code>列表</code>、<code>元组</code>、<code>字典</code>、<code>集合</code>、<code>Bytes</code></strong></p></blockquote><h3 id="2-数字类型"><a href="#2-数字类型" class="headerlink" title="2.数字类型"></a>2.数字类型</h3><blockquote><p>**常见的数字类型：整数、浮点数、复数<code>10+20i</code> **</p></blockquote><pre class="line-numbers language-none"><code class="language-none">type() #可查看数据类型data01 &#x3D; 10                                   data02 &#x3D; 11.4514                              data03 &#x3D; 10 + 20j                             print(type(data01),type(data02),type(data03)) &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;complex&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数学运算符"><a href="#3-数学运算符" class="headerlink" title="3.数学运算符"></a>3.数学运算符</h3><blockquote><p><strong><code>+</code>， <code>-</code>， <code>*</code>， <code>/</code>,  <code>%(取余)</code>, <code>//(地板除)</code>, <code>**(次幂)</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">print(1 + 2)  print(5 - 2)  print(10 * 4) print(10 &#x2F; 4) print(10 &#x2F;&#x2F; 4)#地板除救赎去除小数点print(10 % 4) print(2 ** 3) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Python中的自加1运算"><a href="#Python中的自加1运算" class="headerlink" title="Python中的自加1运算"></a><code>Python</code>中的<code>自加1</code>运算</h4><blockquote><p><strong>相信了解过<code>C</code>语言的小伙伴，肯定不陌生<code>i = i++</code>，代表变量<code>i</code>做<code>自加1</code>运算</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#第一种写法data &#x3D; 10      data &#x3D; data + 1print(data)    11#第二种写法data &#x3D; 10  data +&#x3D; 1  print(data)11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h3><blockquote><p><strong><code>&gt;</code>, <code>&lt;</code>, <code>==(等于)</code>, <code>!=</code>, <code>&gt;=</code>, <code>&lt;=</code></strong><br><strong>返回真假结果</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">data_01 &#x3D; 10             data_02 &#x3D; 20             print(data_01 &lt; data_02) Truedata_01 &#x3D; 10            data_02 &#x3D; 20            print(data_01 &gt; data_02)Falsedata_01 &#x3D; 10              data_02 &#x3D; 10              print(data_01 &#x3D;&#x3D; data_02) Truedata_01 &#x3D; 10              data_02 &#x3D; 10              print(data_01 !&#x3D; data_02) False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h3><blockquote><p><strong><code>and</code>, <code>or</code>, <code>not(取反)</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#并且data_01 &#x3D; 10                                   data_02 &#x3D; 20                                   data_03 &#x3D; 30                                   data_04 &#x3D; 40                                   print(data_01 &lt; data_02 and data_03 &gt; data_04) False#或者data_01 &#x3D; 10                                    data_02 &#x3D; 20                                    data_03 &#x3D; 30                                    data_04 &#x3D; 40                                    print(data_01 &#x3D;&#x3D; data_02 or data_03 &lt; data_04)  True#取反data_01 &#x3D; 10                  data_04 &#x3D; 40                  print(not data_01 &gt; data_04)  True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-random随机数模块"><a href="#6-random随机数模块" class="headerlink" title="6.random随机数模块"></a>6.<code>random</code>随机数模块</h3><pre class="line-numbers language-none"><code class="language-none">#生成1以内的随机数import random      #引用模板   data &#x3D; random.random()print(data)           0.4526206880407839#生成指定范围的随机数import random               data &#x3D; random.randint(1, 10)print(data)                 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-math数学运算模块"><a href="#7-math数学运算模块" class="headerlink" title="7.math数学运算模块"></a>7.<code>math</code>数学运算模块</h3><pre class="line-numbers language-none"><code class="language-none">import math          data &#x3D; math.log2(100)print(data)          6.643856189774724<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、示例"><a href="#四、示例" class="headerlink" title="四、示例"></a>四、示例</h2><h3 id="1-拼接字符"><a href="#1-拼接字符" class="headerlink" title="1.拼接字符"></a>1.拼接字符</h3><pre class="line-numbers language-none"><code class="language-none">number1 &#x3D; input(&quot;请输入数字：&quot;)number2 &#x3D; input(&quot;请输入数字：&quot;)print(number1 + number2) 请输入数字：1请输入数字：212#可以看到如果我们不指定数据的类型，那么Python会当成字符类型，Python把2个字符拼接在了一起<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">number1 &#x3D; input(&quot;请输入数字：&quot;)number2 &#x3D; input(&quot;请输入数字：&quot;)print(number1 + number2) 请输入数字：你好请输入数字：世界你好世界<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-做数学运算"><a href="#2-做数学运算" class="headerlink" title="2.做数学运算"></a>2.做数学运算</h3><pre class="line-numbers language-none"><code class="language-none">number1 &#x3D; int(input(&quot;请输入数字：&quot;))#使用int()把数据类型转换成整数number2 &#x3D; int(input(&quot;请输入数字：&quot;))print(number1 + number2)      请输入数字：10请输入数字：2030#可以看到数据被转换成整数后，就可以做数学运算了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数学运算结合站位符"><a href="#3-数学运算结合站位符" class="headerlink" title="3.数学运算结合站位符"></a>3.数学运算结合站位符</h3><pre class="line-numbers language-none"><code class="language-none">number01 &#x3D; int(input(&quot;请输入第一个数字：&quot;))                                 number02 &#x3D; int(input(&quot;请输入第二个数字：&quot;))                                 print(&quot;%s + %s &#x3D; %s&quot; % (number01,number02,number01 + number02))    print(&quot;%s - %s &#x3D; %s&quot; % (number01,number02,number01 - number02))    print(&quot;%s * %s &#x3D; %s&quot; % (number01,number02,number01 * number02))    print(&quot;%s &#x2F; %s &#x3D; %s&quot; % (number01,number02,number01 &#x2F; number02))    print(&quot;%s %% %s &#x3D; %s&quot; % (number01,number02,number01 % number02)) 请输入第一个数字：1请输入第二个数字：21 + 2 &#x3D; 31 - 2 &#x3D; -11 * 2 &#x3D; 21 &#x2F; 2 &#x3D; 0.51 % 2 &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> python </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes插件helm包管理器</title>
      <link href="/2023/06/19/150/"/>
      <url>/2023/06/19/150/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes插件helm包管理器"><a href="#【容器应用系列教程】Kubernetes插件helm包管理器" class="headerlink" title="【容器应用系列教程】Kubernetes插件helm包管理器"></a>【容器应用系列教程】Kubernetes插件helm包管理器</h1><h2 id="一、关于helm介绍"><a href="#一、关于helm介绍" class="headerlink" title="一、关于helm介绍"></a>一、关于<code>helm</code>介绍</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><ul><li><code>Helm</code>是<code>kubernetes</code>的包管理工具，相当于<code>linux</code>环境下的<code>yum/apg-get</code>命令</li><li><code>helm</code>也是<code>go</code>语言开发的</li><li>简化在<code>kubernets</code>集群中部署应用的流程</li></ul><h3 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2.基本概念"></a>2.基本概念</h3><ul><li><code>helm</code><ul><li>命令行客户端工具，主要用于<code>Kubernetes</code>应用中的<code>chart</code>的创建、打包、发布和管理。</li></ul></li><li><code>Chart</code>：<ul><li><code>helm</code>程序包 ，一系列用于描述<code>k8s</code>资源相关文件的集合 ，比方说我们部署<code>nginx</code>，需要<code>deployment</code>的<code>yaml</code>，需要<code>service</code>的<code>yaml</code>，这两个清单文件就是一个<code>helm</code>程序包，在<code>k8s</code>中把这些<code>yaml</code>清单文件叫做<code>chart</code>图表。</li></ul></li><li><code>values.yaml</code><ul><li>文件为模板中的文件赋值，可以实现我们自定义安装</li></ul></li><li><code>repository</code>：<ul><li>存放<code>chart</code>图表的仓库</li></ul></li><li><code>Release</code>：<ul><li>基于<code>Chart</code>的部署实体，一个<code>chart</code>被<code>Helm</code>运行后将会生成对应的一个<code>release</code></li></ul></li></ul><h3 id="3-版本兼容性"><a href="#3-版本兼容性" class="headerlink" title="3.版本兼容性"></a>3.版本兼容性</h3><blockquote><p><strong>官方文档：<code>https://helm.sh/zh/docs/topics/version_skew/</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes42.png" alt="kubernetes42"></p><h2 id="二、helm3安装"><a href="#二、helm3安装" class="headerlink" title="二、helm3安装"></a>二、<code>helm3</code>安装</h2><h3 id="1-安装helm"><a href="#1-安装helm" class="headerlink" title="1.安装helm"></a>1.安装<code>helm</code></h3><blockquote><p><strong>由于我这使用的<code>Kubernetes</code>版本是<code>1.20.7</code>所以我使用<code>helm3.8.2</code>版本</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# wget https:&#x2F;&#x2F;get.helm.sh&#x2F;helm-v3.8.2-linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# tar xf helm-v3.8.2-linux-amd64.tar.gz[root@k8s-master ~]# cp &#x2F;root&#x2F;linux-amd64&#x2F;helm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-编辑环境变量"><a href="#2-编辑环境变量" class="headerlink" title="2.编辑环境变量"></a>2.编辑环境变量</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;profile#在文件末尾添加内容source &lt;(helm completion bash)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm versionversion.BuildInfo&#123;Version:&quot;v3.8.2&quot;, GitCommit:&quot;6e3701edea09e5d55a8ca2aae03a68917630e91b&quot;, GitTreeState:&quot;clean&quot;, GoVersion:&quot;go1.17.5&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-添加国内仓库地址"><a href="#4-添加国内仓库地址" class="headerlink" title="4.添加国内仓库地址"></a>4.添加国内仓库地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm repo add aliyun https:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;charts[root@k8s-master ~]# helm repo add msoft http:&#x2F;&#x2F;mirror.azure.cn&#x2F;kubernetes&#x2F;charts&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-更新仓库"><a href="#5-更新仓库" class="headerlink" title="5.更新仓库"></a>5.更新仓库</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm repo updateHang tight while we grab the latest from your chart repositories......Successfully got an update from the &quot;aliyun&quot; chart repository...Successfully got an update from the &quot;msoft&quot; chart repositoryUpdate Complete. ⎈Happy Helming!⎈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-查看仓库"><a href="#6-查看仓库" class="headerlink" title="6.查看仓库"></a>6.查看仓库</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm repo listNAME  URL                                                   aliyunhttps:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;chartsmsoft http:&#x2F;&#x2F;mirror.azure.cn&#x2F;kubernetes&#x2F;charts&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-搜索指定chart"><a href="#7-搜索指定chart" class="headerlink" title="7.搜索指定chart"></a>7.搜索指定<code>chart</code></h3><pre class="line-numbers language-none"><code class="language-none"># helm search repo 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm search repo mysqlNAME                           CHART VERSIONAPP VERSIONDESCRIPTION                                       aliyun&#x2F;mysql                   0.3.5                   Fast, reliable, scalable, and easy to use open-...msoft&#x2F;mysql                    1.6.9        5.7.30     DEPRECATED - Fast, reliable, scalable, and easy...msoft&#x2F;mysqldump                2.6.2        2.4.1      DEPRECATED! - A Helm chart to help backup MySQL...msoft&#x2F;prometheus-mysql-exporter0.7.1        v0.11.0    DEPRECATED A Helm chart for prometheus mysql ex...aliyun&#x2F;percona                 0.3.0                   free, fully compatible, enhanced, open source d...aliyun&#x2F;percona-xtradb-cluster  0.0.2        5.7.19     free, fully compatible, enhanced, open source d...msoft&#x2F;percona                  1.2.3        5.7.26     DEPRECATED - free, fully compatible, enhanced, ...msoft&#x2F;percona-xtradb-cluster   1.0.8        5.7.19     DEPRECATED - free, fully compatible, enhanced, ...msoft&#x2F;phpmyadmin               4.3.5        5.0.1      DEPRECATED phpMyAdmin is an mysql administratio...aliyun&#x2F;gcloud-sqlproxy         0.2.3                   Google Cloud SQL Proxy                            aliyun&#x2F;mariadb                 2.1.6        10.1.31    Fast, reliable, scalable, and easy to use open-...msoft&#x2F;gcloud-sqlproxy          0.6.1        1.11       DEPRECATED Google Cloud SQL Proxy                 msoft&#x2F;mariadb                  7.3.14       10.3.22    DEPRECATED Fast, reliable, scalable, and easy t...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、helm3的使用"><a href="#三、helm3的使用" class="headerlink" title="三、helm3的使用"></a>三、<code>helm3</code>的使用</h2><h3 id="1-查看某个chart的详细信息"><a href="#1-查看某个chart的详细信息" class="headerlink" title="1.查看某个chart的详细信息"></a>1.查看某个<code>chart</code>的详细信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm show chart msoft&#x2F;mysqlapiVersion: v1appVersion: 5.7.30deprecated: truedescription: DEPRECATED - Fast, reliable, scalable, and easy to use open-source relational  database system.home: https:&#x2F;&#x2F;www.mysql.com&#x2F;icon: https:&#x2F;&#x2F;www.mysql.com&#x2F;common&#x2F;logos&#x2F;logo-mysql-170x115.pngkeywords:- mysql- database- sqlname: mysqlsources:- https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;charts- https:&#x2F;&#x2F;github.com&#x2F;docker-library&#x2F;mysqlversion: 1.6.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取对应chart的配置文件"><a href="#2-获取对应chart的配置文件" class="headerlink" title="2.获取对应chart的配置文件"></a>2.获取对应<code>chart</code>的配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm inspect values msoft&#x2F;mysql &gt; config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-自定义配置"><a href="#3-自定义配置" class="headerlink" title="3.自定义配置"></a>3.自定义配置</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim config.yaml#配置文件并不完整，仅展示修改部分mysqlRootPassword: redhat#自定义数据库密码mysqlDatabase: jiaowu#创建库persistence:  enabled: false#关闭PV数据卷<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建release"><a href="#4-创建release" class="headerlink" title="4.创建release"></a>4.创建<code>release</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm install -f config.yaml  msoft&#x2F;mysql --generate-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get podNAME                                READY   STATUS              RESTARTS   AGEmysql-1687177709-5657f94b76-pg77b   0&#x2F;1     Init:0&#x2F;1            0          23s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-查看"><a href="#5-查看" class="headerlink" title="5.查看"></a>5.查看</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm lsNAME            NAMESPACEREVISIONUPDATED                                STATUS  CHART      APP VERSIONmysql-1687177709default  1       2023-06-19 20:28:30.942114444 +0800 CSTdeployedmysql-1.6.95.7.30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-升级"><a href="#6-升级" class="headerlink" title="6.升级"></a>6.升级</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm upgrade -f config.yaml mysql-1687177709 msoft&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-版本回滚"><a href="#7-版本回滚" class="headerlink" title="7.版本回滚"></a>7.版本回滚</h3><h4 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm history mysql-1669203259 REVISIONUPDATED                 STATUS    CHART      APP VERSIONDESCRIPTION     1       Wed Nov 23 19:34:21 2022supersededmysql-1.6.95.7.30     Install complete2       Wed Nov 23 19:38:38 2022deployed  mysql-1.6.95.7.30     Upgrade complete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><pre class="line-numbers language-none"><code class="language-none"># helm rollback 镜像 版本ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# helm rollback mysql-1669203259 1 Rollback was a success! Happy Helming!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> Helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器监控系列教程】Prometheus普罗米修斯监控Kubernetes</title>
      <link href="/2023/06/16/149/"/>
      <url>/2023/06/16/149/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器监控系列教程】Prometheus普罗米修斯监控Kubernetes"><a href="#【容器监控系列教程】Prometheus普罗米修斯监控Kubernetes" class="headerlink" title="【容器监控系列教程】Prometheus普罗米修斯监控Kubernetes"></a>【容器监控系列教程】Prometheus普罗米修斯监控Kubernetes</h1><blockquote><p><strong>本教程涉及到的所有文件下载地址：<a href="https://pan.baidu.com/s/1IOk6PMEleZY5O_hNg9agxw?pwd=hng7">https://pan.baidu.com/s/1IOk6PMEleZY5O_hNg9agxw?pwd=hng7</a></strong><br><strong>关于文件中提供的<code>tar</code>包，是教程用到的<code>image</code>镜像文件，我已经打包好了，可以使用<code>docker load</code>把镜像快速上传到<code>node</code>节点上。</strong><br><strong>更多关于<code>Docker</code>镜像操作教程：<a href="https://www.wsjj.top/archives/134">https://www.wsjj.top/archives/134</a></strong></p></blockquote><h2 id="一、Prometheus普罗米修斯的介绍"><a href="#一、Prometheus普罗米修斯的介绍" class="headerlink" title="一、Prometheus普罗米修斯的介绍"></a>一、<code>Prometheus</code>普罗米修斯的介绍</h2><ul><li><code>prometheus</code>是由谷歌研发的一款开源的监控软件，它通过安装在远程机器上的<code>exporter</code>，通过<code>HTTP</code>协议从远程的机器收集数据并存储在本地的时序数据库上</li><li>同时<code>Prometheus</code>后端用<code>golang</code>语言开发，前端是<code>Grafana</code></li><li><code>Prometheus</code>为了支持各种中间件以及第三方的监控提供了<code>exporter</code>，大家可以把它理解成监控适配器，将不同指标类型和格式的数据统一转化为<code>Prometheus</code>能够识别的指标类型。</li><li>例如<code>Node exporter</code>主要通过读取<code>Linux</code>的<code>/proc</code>以及<code>/sys</code>目录下的系统文件获取操作系统运行状态，<code>reids exporter</code>通过<code>Reids</code>命令行获取指标，<code>mysql exporter</code>通过读取数据库监控表获取<code>MySQL</code>的性能数据。他们将这些异构的数据转化为标准的<code>Prometheus</code>格式，并提供<code>HTTP</code>查询接口。</li></ul><h2 id="二、部署Prometheus服务端"><a href="#二、部署Prometheus服务端" class="headerlink" title="二、部署Prometheus服务端"></a>二、部署<code>Prometheus</code>服务端</h2><h3 id="1-使用ConfigMap存储Prometheus配置文件"><a href="#1-使用ConfigMap存储Prometheus配置文件" class="headerlink" title="1.使用ConfigMap存储Prometheus配置文件"></a>1.使用<code>ConfigMap</code>存储<code>Prometheus</code>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-config.yamlapiVersion: v1kind: ConfigMapmetadata:  name: prometheus-config  namespace: prometheusdata:  prometheus.yml: |    global:      scrape_interval:     15s      evaluation_interval: 15s    scrape_configs:      - job_name: &#39;prometheus&#39;        static_configs:        - targets: [&#39;localhost:9090&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl create -f prometheus-config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-部署Prometheus服务端"><a href="#2-部署Prometheus服务端" class="headerlink" title="2.部署Prometheus服务端"></a>2.部署<code>Prometheus</code>服务端</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-deploy.yamlapiVersion: v1kind: &quot;Service&quot;metadata:  name: prometheus  namespace: prometheus  labels:    name: prometheusspec:  ports:  - name: prometheus    protocol: TCP    port: 9090    targetPort: 9090  selector:    app: prometheus  type: NodePort---apiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: prometheus  namespace: prometheus  labels:    name: prometheusspec:  replicas: 1  selector:    matchLabels:      app: prometheus  template:    metadata:      labels:        app: prometheus    spec:      containers:      - name: prometheus        image: prom&#x2F;prometheus:v2.37.8        imagePullPolicy: IfNotPresent        command:        - &quot;&#x2F;bin&#x2F;prometheus&quot;        args:        - &quot;--config.file&#x3D;&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml&quot;        ports:        - containerPort: 9090          protocol: TCP        volumeMounts:        - mountPath: &quot;&#x2F;etc&#x2F;prometheus&quot;          name: prometheus-config      volumes:      - name: prometheus-config        configMap:          name: prometheus-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl create -f prometheus-deploy.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看服务和端口"><a href="#查看服务和端口" class="headerlink" title="查看服务和端口"></a>查看服务和端口</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get svc -n prometheusNAME         TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGEprometheus   NodePort   172.16.40.197   &lt;none&gt;        9090:30678&#x2F;TCP   3h16m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pod -n prometheus -o wideNAME                          READY   STATUS    RESTARTS   AGE    IP                NODE                   NOMINATED NODE   READINESS GATESprometheus-5cdccb54f6-xnpf2   1&#x2F;1     Running   2          143m   192.168.201.213   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="浏览器访问测试"><a href="#浏览器访问测试" class="headerlink" title="浏览器访问测试"></a>浏览器访问测试</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes16.png" alt="kubernetes16"></p><h2 id="三、访问授权"><a href="#三、访问授权" class="headerlink" title="三、访问授权"></a>三、访问授权</h2><blockquote><p><strong>为了让<code>prometheus</code>能够获取到<code>kubernetes</code>集群中的状态数据，需要为其创建用户并进行授权。<code>kubernets</code>基于<code>RBAC</code>机制实现认证授权，因此需要创建用户、角色，并将用户与角色进行关联。</strong></p></blockquote><h3 id="1-创建用户和角色"><a href="#1-创建用户和角色" class="headerlink" title="1.创建用户和角色"></a>1.创建用户和角色</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-rbac.yamlapiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRolemetadata:  name: prometheusrules:- apiGroups: [&quot;&quot;]  resources:  - nodes  - nodes&#x2F;proxy  - services  - endpoints  - pods  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]- apiGroups:  - extensions  resources:  - ingresses  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]- nonResourceURLs: [&quot;&#x2F;metrics&quot;]  verbs: [&quot;get&quot;]---apiVersion: v1kind: ServiceAccountmetadata:  name: prometheus  namespace: prometheus---apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRoleBindingmetadata:  name: prometheusroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: prometheussubjects:- kind: ServiceAccount  name: prometheus  namespace: prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ClusterRole</code>是属于全局的，不需要指定命名空间</li><li><code>ServiceAccount</code>必须指定命名空间</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl create -f prometheus-rbac.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置Prometheus关联用户"><a href="#2-配置Prometheus关联用户" class="headerlink" title="2.配置Prometheus关联用户"></a>2.配置<code>Prometheus</code>关联用户</h3><blockquote><p><strong>更新<code>prometheus-deploy.yaml</code>文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-deploy.yaml#配置文件不完整，仅展示添加部分spec:  replicas: 1  selector:    matchLabels:      app: prometheus  template:    metadata:      labels:        app: prometheus    spec:      serviceAccountName: prometheus#关联刚刚创建的用户      containers:      - name: prometheus        image: prom&#x2F;prometheus:v2.37.8        imagePullPolicy: IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新配置文件"><a href="#更新配置文件" class="headerlink" title="更新配置文件"></a>更新配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl apply -f prometheus-deploy.yaml[root@k8s-master prometheus]# kubectl get pod -n prometheusNAME                          READY   STATUS    RESTARTS   AGEprometheus-5cdccb54f6-xnpf2   1&#x2F;1     Running   2          154m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重启Pod"><a href="#重启Pod" class="headerlink" title="重启Pod"></a>重启<code>Pod</code></h4><blockquote><p><strong>删除<code>Pod</code>等待自动创建</strong><br><strong>教程后面将默认不再赘述，遇到重启或者重建<code>Pod</code>步骤时，请自行删除<code>Pod</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl delete pod prometheus-5cdccb54f6-xnpf2 -n prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检查容器内部证书"><a href="#检查容器内部证书" class="headerlink" title="检查容器内部证书"></a>检查容器内部证书</h4><blockquote><p><strong>配置完用户后，会默认在<code>/var/run/secrets/kubernetes.io/serviceaccount/</code>目录下生成和<code>K8s</code>集群通信用的证书</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl exec -it prometheus-5cdccb54f6-xnpf2 -n prometheus -- ls &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt     namespace  token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、配置服务发现"><a href="#四、配置服务发现" class="headerlink" title="四、配置服务发现"></a>四、配置服务发现</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><blockquote><p><code>prometheus</code>与<code>kubernetes API</code>集成主要有<code>5</code>种方式，分别为<code>Node</code>, <code>Service</code>, <code>Pod</code>, <code>Endpoints</code>, <code>Ingress</code></p></blockquote><h3 id="2-为了让promethues能够获取到集群所有节点的信息，在prometheus-config-yaml配置文件中，添加如下job配置"><a href="#2-为了让promethues能够获取到集群所有节点的信息，在prometheus-config-yaml配置文件中，添加如下job配置" class="headerlink" title="2.为了让promethues能够获取到集群所有节点的信息，在prometheus-config.yaml配置文件中，添加如下job配置"></a>2.为了让<code>promethues</code>能够获取到集群所有节点的信息，在<code>prometheus-config.yaml</code>配置文件中，添加如下<code>job</code>配置</h3><blockquote><p><strong>指定<code>kubernetes_sd_config</code>的模式为<code>node</code>，<code>Prometheus</code>会自动从<code>kubernetes</code>中发现所有<code>node</code>节点并且作为当前<code>Job</code>监控的<code>Target</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-config.yamlapiVersion: v1kind: ConfigMapmetadata:  name: prometheus-config  namespace: prometheusdata:  prometheus.yml: |    global:      scrape_interval:     15s      evaluation_interval: 15s    scrape_configs:      - job_name: &#39;prometheus&#39;        static_configs:        - targets: [&#39;localhost:9090&#39;]      - job_name: &#39;kubernetes-nodes&#39;        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: node      - job_name: &#39;kubernetes-service&#39;        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: service      - job_name: &#39;kubernetes-endpoints&#39;        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: endpoints      - job_name: &#39;kubernetes-ingress&#39;        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: ingress      - job_name: &#39;kubernetes-pods&#39;        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl apply -f prometheus-config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重建Prometheus的Pod"><a href="#重建Prometheus的Pod" class="headerlink" title="重建Prometheus的Pod"></a>重建<code>Prometheus</code>的<code>Pod</code></h4><blockquote><p><strong>删除<code>Pod</code>等待自动创建</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl delete pod prometheus-5cdccb54f6-xnpf2 -n prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="浏览器访问查看"><a href="#浏览器访问查看" class="headerlink" title="浏览器访问查看"></a>浏览器访问查看</h4><blockquote><p><strong>刷新访问<code>prometheus</code>页面，可以查看到发现的<code>K8S</code>集群中的资源</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes17.png" alt="kubernetes17"></p><h2 id="五、配置监控Kubelet"><a href="#五、配置监控Kubelet" class="headerlink" title="五、配置监控Kubelet"></a>五、配置监控<code>Kubelet</code></h2><h3 id="1-修改prometheus-config-yaml文件，添加监控项"><a href="#1-修改prometheus-config-yaml文件，添加监控项" class="headerlink" title="1.修改prometheus-config.yaml文件，添加监控项"></a>1.修改<code>prometheus-config.yaml</code>文件，添加监控项</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-config.yaml#在配置文件末尾添加以下内容      - job_name: &#39;kubernetes-kubelet&#39;        scheme: https        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: node        relabel_configs:        - action: labelmap          regex: __meta_kubernetes_node_label_(.+)        - target_label: __address__          replacement: kubernetes.default.svc:443        - source_labels: [__meta_kubernetes_node_name]          regex: (.+)          target_label: __metrics_path__          replacement: &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;$&#123;1&#125;&#x2F;proxy&#x2F;metrics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新配置并重启容器"><a href="#更新配置并重启容器" class="headerlink" title="更新配置并重启容器"></a>更新配置并重启容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl apply -f prometheus-config.yamlconfigmap&#x2F;prometheus-config configured<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pods -n prometheusNAME                          READY   STATUS    RESTARTS   AGEprometheus-5cdccb54f6-xnpf2   1&#x2F;1     Running   2          3h1m[root@k8s-master prometheus]# kubectl delete pod prometheus-5cdccb54f6-xnpf2 -n prometheuspod &quot;prometheus-5cdccb54f6-xnpf2&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问web端查看是否更新"><a href="#访问web端查看是否更新" class="headerlink" title="访问web端查看是否更新"></a>访问<code>web</code>端查看是否更新</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes18.png" alt="kubernetes18"></p><h2 id="六、通过cAdvisor监控节点容器资源使用情况"><a href="#六、通过cAdvisor监控节点容器资源使用情况" class="headerlink" title="六、通过cAdvisor监控节点容器资源使用情况"></a>六、通过cAdvisor监控节点容器资源使用情况</h2><h3 id="1-修改prometheus-config-yaml文件，添加监控项-1"><a href="#1-修改prometheus-config-yaml文件，添加监控项-1" class="headerlink" title="1.修改prometheus-config.yaml文件，添加监控项"></a>1.修改<code>prometheus-config.yaml</code>文件，添加监控项</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-config.yaml#在配置文件末尾添加以下内容      - job_name: &#39;kubernetes-cadvisor&#39;        scheme: https        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: node        relabel_configs:        - target_label: __address__          replacement: kubernetes.default.svc:443        - source_labels: [__meta_kubernetes_node_name]          regex: (.+)          target_label: __metrics_path__          replacement: &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;$&#123;1&#125;&#x2F;proxy&#x2F;metrics&#x2F;cadvisor        - action: labelmap          regex: __meta_kubernetes_node_label_(.+)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新配置并重启容器-1"><a href="#更新配置并重启容器-1" class="headerlink" title="更新配置并重启容器"></a>更新配置并重启容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl apply -f prometheus-config.yamlconfigmap&#x2F;prometheus-config configured<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pods -n prometheusNAME                          READY   STATUS    RESTARTS   AGEprometheus-5cdccb54f6-rj4fc   1&#x2F;1     Running   0          5m19s[root@k8s-master prometheus]# kubectl delete pod prometheus-5cdccb54f6-rj4fc -n prometheuspod &quot;prometheus-5cdccb54f6-rj4fc&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问web端查看是否更新-1"><a href="#访问web端查看是否更新-1" class="headerlink" title="访问web端查看是否更新"></a>访问<code>web</code>端查看是否更新</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes19.png" alt="kubernetes19"></p><h2 id="七、基于node-exporter监控集群资源使用情况"><a href="#七、基于node-exporter监控集群资源使用情况" class="headerlink" title="七、基于node-exporter监控集群资源使用情况"></a>七、基于<code>node-exporter</code>监控集群资源使用情况</h2><h3 id="1-使用DaemonSet类型部署node-exporter"><a href="#1-使用DaemonSet类型部署node-exporter" class="headerlink" title="1.使用DaemonSet类型部署node-exporter"></a>1.使用<code>DaemonSet</code>类型部署<code>node-exporter</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim node-exporter.ymlapiVersion: apps&#x2F;v1kind: DaemonSetmetadata:  name: node-exporter  namespace: prometheusspec:  selector:    matchLabels:      app: node-exporter  template:    metadata:      annotations:        prometheus.io&#x2F;scrape: &#39;true&#39;        prometheus.io&#x2F;port: &#39;9100&#39;        prometheus.io&#x2F;path: &#39;metrics&#39;      labels:        app: node-exporter      name: node-exporter    spec:      containers:      - image: prom&#x2F;node-exporter        imagePullPolicy: IfNotPresent        name: node-exporter        ports:        - containerPort: 9100          hostPort: 9100          name: scrape      hostNetwork: true      hostPID: true#node exporter要运行在物理机上，因此指定了hostNetwork和hostPID参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl create -f node-exporter.ymldaemonset.apps&#x2F;node-exporter created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pod -n prometheus -o wideNAME                          READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATESnode-exporter-hvkdb           1&#x2F;1     Running   0          2m22s   192.168.140.12    k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;node-exporter-ktfm8           1&#x2F;1     Running   0          2m22s   192.168.140.11    k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;prometheus-5cdccb54f6-wprjh   1&#x2F;1     Running   0          23m     192.168.242.158   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加采集任务"><a href="#2-添加采集任务" class="headerlink" title="2.添加采集任务"></a>2.添加采集任务</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-config.yaml#在配置文件末尾添加内容      - job_name: &#39;kubernetes-cadvisor&#39;        scheme: https        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        kubernetes_sd_configs:        - role: node        relabel_configs:        - target_label: __address__          replacement: kubernetes.default.svc:443        - source_labels: [__meta_kubernetes_node_name]          regex: (.+)          target_label: __metrics_path__          replacement: &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;$&#123;1&#125;&#x2F;proxy&#x2F;metrics&#x2F;cadvisor        - action: labelmap          regex: __meta_kubernetes_node_label_(.+)      - job_name: &#39;kubernetes-node-exporter&#39;        kubernetes_sd_configs:        - role: pod        relabel_configs:        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]          action: keep          regex: true        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]          action: replace          target_label: __metrics_path__          regex: (.+)        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]          action: replace          regex: ([^:]+)(?::\d+)?;(\d+)          replacement: $1:$2          target_label: __address__        - action: labelmap          regex: __meta_kubernetes_pod_label_(.+)        - source_labels: [__meta_kubernetes_namespace]          action: replace          target_label: kubernetes_namespace        - source_labels: [__meta_kubernetes_pod_name]          action: replace          target_label: kubernetes_pod_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-更新配置文件"><a href="#3-更新配置文件" class="headerlink" title="3.更新配置文件"></a>3.更新配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl apply -f prometheus-config.yaml configmap&#x2F;prometheus-config configured<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pods -n prometheusNAME                          READY   STATUS    RESTARTS   AGEnode-exporter-hvkdb           1&#x2F;1     Running   0          6m1snode-exporter-ktfm8           1&#x2F;1     Running   0          6m1sprometheus-5cdccb54f6-wprjh   1&#x2F;1     Running   0          27m[root@k8s-master prometheus]# kubectl delete pod prometheus-5cdccb54f6-wprjh -n prometheuspod &quot;prometheus-5cdccb54f6-wprjh&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-访问web端查看"><a href="#4-访问web端查看" class="headerlink" title="4.访问web端查看"></a>4.访问<code>web</code>端查看</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes20.png" alt="kubernetes20"></p><h2 id="八、配置从api-server获取监控指标"><a href="#八、配置从api-server获取监控指标" class="headerlink" title="八、配置从api-server获取监控指标"></a>八、配置从<code>api-server</code>获取监控指标</h2><h3 id="1-修改Prometheus-config添加监控项"><a href="#1-修改Prometheus-config添加监控项" class="headerlink" title="1.修改Prometheus-config添加监控项"></a>1.修改<code>Prometheus-config</code>添加监控项</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-config.yaml#在文件末尾添加内容      - job_name: &#39;kubernetes-apiservers&#39;        kubernetes_sd_configs:        - role: endpoints        scheme: https        tls_config:          ca_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;ca.crt        bearer_token_file: &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token        relabel_configs:        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]          action: keep          regex: default;kubernetes;https        - target_label: __address__          replacement: kubernetes.default.svc:443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-更新配置文件，重启Pod"><a href="#2-更新配置文件，重启Pod" class="headerlink" title="2.更新配置文件，重启Pod"></a>2.更新配置文件，重启<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl apply -f prometheus-config.yamlconfigmap&#x2F;prometheus-config configured<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pods -n prometheusNAME                          READY   STATUS    RESTARTS   AGEnode-exporter-hvkdb           1&#x2F;1     Running   0          16mnode-exporter-ktfm8           1&#x2F;1     Running   0          16mprometheus-5cdccb54f6-vsw6m   1&#x2F;1     Running   0          9m47s[root@k8s-master prometheus]# kubectl delete pod prometheus-5cdccb54f6-vsw6m -n prometheuspod &quot;prometheus-5cdccb54f6-vsw6m&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-访问web端查看"><a href="#3-访问web端查看" class="headerlink" title="3.访问web端查看"></a>3.访问<code>web</code>端查看</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes21.png" alt="kubernetes21"></p><h2 id="九、配置grafana图形化"><a href="#九、配置grafana图形化" class="headerlink" title="九、配置grafana图形化"></a>九、配置<code>grafana</code>图形化</h2><h3 id="1-部署grafana"><a href="#1-部署grafana" class="headerlink" title="1.部署grafana"></a>1.部署<code>grafana</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim grafana.yamlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: grafana-core  namespace: prometheus  labels:    app: grafana    component: corespec:  replicas: 1  selector:    matchLabels:      app: grafana  template:    metadata:      labels:        app: grafana    spec:      containers:      - image: grafana&#x2F;grafana:9.5.3        name: grafana-core        imagePullPolicy: IfNotPresent        resources:          limits:            cpu: 100m            memory: 100Mi          requests:            cpu: 100m            memory: 100Mi        env:          - name: GF_AUTH_BASIC_ENABLED            value: &quot;true&quot;          - name: GF_AUTH_ANONYMOUS_ENABLED            value: &quot;false&quot;        readinessProbe:          httpGet:            path: &#x2F;login            port: 3000        volumeMounts:        - name: grafana-persistent-storage          mountPath: &#x2F;var&#x2F;lib&#x2F;grafana      volumes:      - name: grafana-persistent-storage        emptyDir: &#123;&#125;---apiVersion: v1kind: Servicemetadata:  name: grafana  namespace: prometheus  labels:    app: grafanaspec:  type: NodePort  ports:    - port: 3000  selector:    app: grafana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl create -f grafana.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-查看Pod"><a href="#2-查看Pod" class="headerlink" title="2.查看Pod"></a>2.查看<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pods -n prometheus -o wideNAME                            READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATESgrafana-core-6497854f7b-z26nw   1&#x2F;1     Running   0          46s   192.168.201.215   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;node-exporter-hvkdb             1&#x2F;1     Running   0          66m   192.168.140.12    k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;node-exporter-ktfm8             1&#x2F;1     Running   0          66m   192.168.140.11    k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;prometheus-5cdccb54f6-xgkk8     1&#x2F;1     Running   0          49m   192.168.242.159   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看svc"><a href="#3-查看svc" class="headerlink" title="3.查看svc"></a>3.查看<code>svc</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get svc -n prometheus -o wideNAME         TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE     SELECTORgrafana      NodePort   172.16.34.121   &lt;none&gt;        3000:30916&#x2F;TCP   63s     app&#x3D;grafanaprometheus   NodePort   172.16.40.197   &lt;none&gt;        9090:30678&#x2F;TCP   5h28m   app&#x3D;prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-登录web界面"><a href="#4-登录web界面" class="headerlink" title="4.登录web界面"></a>4.登录<code>web</code>界面</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes22.png" alt="kubernetes22"></p><h3 id="5-添加数据源"><a href="#5-添加数据源" class="headerlink" title="5.添加数据源"></a>5.添加数据源</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes23.png" alt="kubernetes23"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes24.png" alt="kubernetes24"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes25.png" alt="kubernetes25"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes26.png" alt="kubernetes26"></p><h3 id="6-导入模板"><a href="#6-导入模板" class="headerlink" title="6.导入模板"></a>6.导入模板</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes27.png" alt="kubernetes27"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes28.png" alt="kubernetes28"></p><blockquote><p><strong>模板ID：<code>162</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes29.png" alt="kubernetes29"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes30.png" alt="kubernetes30"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes31.png" alt="kubernetes31"></p><h3 id="7-显示内存、CPU、磁盘的使用情况"><a href="#7-显示内存、CPU、磁盘的使用情况" class="headerlink" title="7.显示内存、CPU、磁盘的使用情况"></a>7.显示内存、CPU、磁盘的使用情况</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes32.png" alt="kubernetes32"></p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><pre class="line-numbers language-none"><code class="language-none">(sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes+node_memory_Buffers_bytes+node_memory_Cached_bytes) ) &#x2F; sum(node_memory_MemTotal_bytes) * 100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>把上面的内容复制进去</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes33.png" alt="kubernetes33"></p><h4 id="另外2个图形也是同样的操作，替换里面的内容"><a href="#另外2个图形也是同样的操作，替换里面的内容" class="headerlink" title="另外2个图形也是同样的操作，替换里面的内容"></a>另外<code>2</code>个图形也是同样的操作，替换里面的内容</h4><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><pre class="line-numbers language-none"><code class="language-none">sum(sum by (name)( rate(container_cpu_usage_seconds_total&#123;image!&#x3D;&quot;&quot;&#125;[1m] ) )) &#x2F; count(node_cpu_seconds_total&#123;mode&#x3D;&quot;system&quot;&#125;) * 100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h4><pre class="line-numbers language-none"><code class="language-none">(sum(node_filesystem_size_bytes&#123;device&#x3D;&quot;&#x2F;dev&#x2F;mapper&#x2F;centos-root&quot;&#125;) - sum(node_filesystem_free_bytes&#123;device&#x3D;&quot;&#x2F;dev&#x2F;mapper&#x2F;centos-root&quot;&#125;) ) &#x2F; sum(node_filesystem_size_bytes&#123;device&#x3D;&quot;&#x2F;dev&#x2F;mapper&#x2F;centos-root&quot;&#125;) * 100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="效果图展示"><a href="#效果图展示" class="headerlink" title="效果图展示"></a>效果图展示</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes34.png" alt="kubernetes34"></p><h3 id="8-保存图形"><a href="#8-保存图形" class="headerlink" title="8.保存图形"></a>8.保存图形</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes35.png" alt="kubernetes35"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes36.png" alt="kubernetes36"></p><h3 id="9-主页面快速查看创建的图形"><a href="#9-主页面快速查看创建的图形" class="headerlink" title="9.主页面快速查看创建的图形"></a>9.主页面快速查看创建的图形</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes37.png" alt="kubernetes37"></p><h2 id="十、监控Mysql"><a href="#十、监控Mysql" class="headerlink" title="十、监控Mysql"></a>十、监控<code>Mysql</code></h2><h3 id="1-创建Mysql的Pod"><a href="#1-创建Mysql的Pod" class="headerlink" title="1.创建Mysql的Pod"></a>1.创建<code>Mysql</code>的<code>Pod</code></h3><blockquote><p><strong>我这里使用上期教程部署<code>WordPress</code>用到的<code>Mysql</code></strong><br><strong>关于<code>Kubernetes</code>部署<code>WordPress</code>博客教程：<a href="https://www.wsjj.top/archives/147">https://www.wsjj.top/archives/147</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim &#x2F;root&#x2F;wordpress&#x2F;wp-master-mysql.ymlapiVersion: apps&#x2F;v1kind: StatefulSetmetadata:    name: wp-master-mysql    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wp-master-mysql    serviceName: &quot;wp-master-mysql&quot;    template:        metadata:            labels:                app: wp-master-mysql        spec:            containers:            - name: wp-master-mysql              image: mysql:5.7              imagePullPolicy: IfNotPresent              ports:              - containerPort: 3306              env:              - name: MYSQL_ROOT_PASSWORD                value: &quot;WWW.1.com&quot;              - name: MYSQL_DATABASE                value: &quot;wordpress&quot;              - name: MYSQL_USER                value: &quot;wpuser&quot;              - name: MYSQL_PASSWORD                value: &quot;redhat&quot;              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;              volumeMounts:                  - name: mysql-data-volume                    mountPath: &#x2F;var&#x2F;lib&#x2F;mysql                  - name: mysql-config-volume                    mountPath: &#x2F;etc&#x2F;mysql&#x2F;conf.d                    readOnly: true            volumes:                - name: mysql-data-volume                  persistentVolumeClaim:                    claimName: master-db-pvc                - name: mysql-config-volume                  projected:                    sources:                    - configMap:                        name: master-db-config---apiVersion: v1kind: Servicemetadata:    name: wp-master-mysql    namespace: wordpressspec:    ports:    - port: 3306    selector:      app: wp-master-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl create -f &#x2F;root&#x2F;wordpress&#x2F;wp-master-mysql.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-登录Mysql创建监控需要的用户"><a href="#2-登录Mysql创建监控需要的用户" class="headerlink" title="2.登录Mysql创建监控需要的用户"></a>2.登录<code>Mysql</code>创建监控需要的用户</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl exec -it wp-master-mysql-0 -n wordpress -- bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt; GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#39;prometheus&#39;@&#39;%&#39; IDENTIFIED BY &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.05 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-部署Mysql-exporter"><a href="#3-部署Mysql-exporter" class="headerlink" title="3.部署Mysql-exporter"></a>3.部署<code>Mysql-exporter</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim mysql-exporter.yamlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: mysql-exporter  namespace: prometheusspec:  replicas: 1  selector:    matchLabels:      app: mysql-exporter  template:    metadata:      labels:        app: mysql-exporter    spec:      containers:      - name: mysql-exporter        image: prom&#x2F;mysqld-exporter:v0.14.0        env:        - name: DATA_SOURCE_NAME          value: &quot;prometheus:WWW.1.com@(wp-master-mysql.wordpress.svc.cluster.local:3306)&#x2F;&quot; #配置全名连接地址，和刚才创建的用户        imagePullPolicy: IfNotPresent        ports:        - containerPort: 9104---apiVersion: v1kind: Servicemetadata:  name: mysql-exporter  namespace: prometheusspec:  type: ClusterIP  selector:    app: mysql-exporter  ports:  - name: api    port: 9104    protocol: TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl create -f mysql-exporter.yamldeployment.apps&#x2F;mysql-exporter createdservice&#x2F;mysql-exporter created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看Mysql-exporter"><a href="#查看Mysql-exporter" class="headerlink" title="查看Mysql-exporter"></a>查看<code>Mysql-exporter</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pods -n prometheusNAME                              READY   STATUS    RESTARTS   AGEgrafana-core-6497854f7b-z26nw     1&#x2F;1     Running   0          85mmysql-exporter-856d6b9fd9-gh7kg   1&#x2F;1     Running   0          12snode-exporter-hvkdb               1&#x2F;1     Running   0          151mnode-exporter-ktfm8               1&#x2F;1     Running   0          151mprometheus-5cdccb54f6-xgkk8       1&#x2F;1     Running   0          133m[root@k8s-master prometheus]# kubectl get svc -n prometheusNAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGEgrafana          NodePort    172.16.34.121    &lt;none&gt;        3000:30916&#x2F;TCP   87mmysql-exporter   ClusterIP   172.16.228.238   &lt;none&gt;        9104&#x2F;TCP         101sprometheus       NodePort    172.16.40.197    &lt;none&gt;        9090:30678&#x2F;TCP   6h54m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新prometheus-config-yaml文件"><a href="#更新prometheus-config-yaml文件" class="headerlink" title="更新prometheus-config.yaml文件"></a>更新<code>prometheus-config.yaml</code>文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# vim prometheus-config.yaml#在文件末尾添加以下内容      - job_name: &#39;mysql_monitor&#39;        static_configs:        - targets: [&#39;mysql-exporter:9104&#39;]#服务连接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl apply -f prometheus-config.yaml configmap&#x2F;prometheus-config configured<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master prometheus]# kubectl get pod -n prometheusNAME                              READY   STATUS    RESTARTS   AGEgrafana-core-6497854f7b-z26nw     1&#x2F;1     Running   0          91mmysql-exporter-856d6b9fd9-gh7kg   1&#x2F;1     Running   0          5m44snode-exporter-hvkdb               1&#x2F;1     Running   0          156mnode-exporter-ktfm8               1&#x2F;1     Running   0          156mprometheus-5cdccb54f6-xgkk8       1&#x2F;1     Running   0          139m[root@k8s-master prometheus]# kubectl delete pod prometheus-5cdccb54f6-xgkk8 -n prometheuspod &quot;prometheus-5cdccb54f6-xgkk8&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问Prometheus的web界面"><a href="#访问Prometheus的web界面" class="headerlink" title="访问Prometheus的web界面"></a>访问<code>Prometheus</code>的<code>web</code>界面</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes38.png" alt="kubernetes38"></p><h3 id="4-在Grafana添加数据源"><a href="#4-在Grafana添加数据源" class="headerlink" title="4.在Grafana添加数据源"></a>4.在<code>Grafana</code>添加数据源</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes27.png" alt="kubernetes27"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes28.png" alt="kubernetes28"></p><blockquote><p><strong>模板ID：<code>7362</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes39.png" alt="kubernetes39"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes40.png" alt="kubernetes40"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes41.png" alt="kubernetes41"></p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> 容器监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes调度系统</title>
      <link href="/2023/06/16/148/"/>
      <url>/2023/06/16/148/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes调度系统"><a href="#【容器应用系列教程】Kubernetes调度系统" class="headerlink" title="【容器应用系列教程】Kubernetes调度系统"></a>【容器应用系列教程】Kubernetes调度系统</h1><h2 id="一、基于nodeName调度"><a href="#一、基于nodeName调度" class="headerlink" title="一、基于nodeName调度"></a>一、基于nodeName调度</h2><blockquote><p><strong>指定在哪个<code>node</code>节点上，创建<code>Pod</code></strong></p></blockquote><h3 id="1-查看所有节点"><a href="#1-查看所有节点" class="headerlink" title="1.查看所有节点"></a>1.查看所有节点</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nodeNAME                   STATUS   ROLES                  AGE   VERSIONk8s-master.linux.com   Ready    control-plane,master   8d    v1.20.7k8s-node01.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7k8s-node02.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-基于nodeName调度"><a href="#2-基于nodeName调度" class="headerlink" title="2.基于nodeName调度"></a>2.基于<code>nodeName</code>调度</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# vim test1.yamlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: test1-nginx  namespace: defaultspec:  replicas: 2  selector:    matchLabels:      app: test1-nginx  template:    metadata:      labels:        app: test1-nginx    spec:      nodeName: k8s-node02.linux.com#指定所有Pod都运行在node02上      containers:      - name: test1-nginx        image: nginx        imagePullPolicy: IfNotPresent        ports:        - containerPort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl create -f test1.yaml deployment.apps&#x2F;test1-nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-查看Pod"><a href="#3-查看Pod" class="headerlink" title="3.查看Pod"></a>3.查看<code>Pod</code></h3><blockquote><p><strong>可以看到所有<code>Pod</code>都跑在<code>node02</code>节点上</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get pods -o wideNAME                           READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATEStest1-nginx-5bccbd59df-cfl6v   1&#x2F;1     Running   0          2m29s   192.168.242.131   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-5bccbd59df-r68jk   1&#x2F;1     Running   0          2m29s   192.168.242.130   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、基于nodeSelector调度"><a href="#二、基于nodeSelector调度" class="headerlink" title="二、基于nodeSelector调度"></a>二、基于<code>nodeSelector</code>调度</h2><h3 id="1-查看所有节点的标签"><a href="#1-查看所有节点的标签" class="headerlink" title="1.查看所有节点的标签"></a>1.查看所有节点的标签</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get node --show-labelsNAME                   STATUS   ROLES                  AGE   VERSION   LABELSk8s-master.linux.com   Ready    control-plane,master   8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-master.linux.com,kubernetes.io&#x2F;os&#x3D;linux,node-role.kubernetes.io&#x2F;control-plane&#x3D;,node-role.kubernetes.io&#x2F;master&#x3D;k8s-node01.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-node01.linux.com,kubernetes.io&#x2F;os&#x3D;linuxk8s-node02.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-node02.linux.com,kubernetes.io&#x2F;os&#x3D;linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建基于nodeSelector调度"><a href="#2-创建基于nodeSelector调度" class="headerlink" title="2.创建基于nodeSelector调度"></a>2.创建基于<code>nodeSelector</code>调度</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# vim test2.yamlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: test2-nginx  namespace: defaultspec:  replicas: 2  selector:    matchLabels:      app: test2-nginx  template:    metadata:      labels:        app: test2-nginx    spec:      nodeSelector:#nodeSelector调度类型            name: wsjj#在有name&#x3D;wsjj的标签机器上创建      containers:      - name: test2-nginx        image: nginx        imagePullPolicy: IfNotPresent        ports:        - containerPort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl create -f test2.yaml deployment.apps&#x2F;test1-nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-查看Pod-1"><a href="#3-查看Pod-1" class="headerlink" title="3.查看Pod"></a>3.查看<code>Pod</code></h3><blockquote><p><strong>可以看到所有<code>Pod</code>都是处于<code>pending</code>等待调度状态</strong><br><strong>这是因为，在所有节点上，都没有找到<code>name=wsjj</code>标签的机器</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get podNAME                           READY   STATUS    RESTARTS   AGEtest2-nginx-5f89c875cf-cfl6v   0&#x2F;1     Pending   0          6stest2-nginx-5f89c875cf-r68jk   0&#x2F;1     Pending   0          6s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-手动打标签"><a href="#4-手动打标签" class="headerlink" title="4.手动打标签"></a>4.手动打标签</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl label node k8s-node01.linux.com name&#x3D;wsjjnode&#x2F;k8s-node01.linux.com labeled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong><code>node01</code>身上多了<code>name=wsjj</code>的标签</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get node --show-labelsNAME                   STATUS   ROLES                  AGE   VERSION   LABELSk8s-master.linux.com   Ready    control-plane,master   8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-master.linux.com,kubernetes.io&#x2F;os&#x3D;linux,node-role.kubernetes.io&#x2F;control-plane&#x3D;,node-role.kubernetes.io&#x2F;master&#x3D;k8s-node01.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-node01.linux.com,kubernetes.io&#x2F;os&#x3D;linux,name&#x3D;wsjjk8s-node02.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-node02.linux.com,kubernetes.io&#x2F;os&#x3D;linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-再次查看Pod"><a href="#5-再次查看Pod" class="headerlink" title="5.再次查看Pod"></a>5.再次查看<code>Pod</code></h3><blockquote><p><strong>当有了标签后，<code>Pod</code>正常运行</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get pod -o wideNAME                           READY   STATUS    RESTARTS   AGE    IP                NODE                   NOMINATED NODE   READINESS GATEStest2-nginx-5f89c875cf-cfl6v   1&#x2F;1     Running   0          7m4s   192.168.201.194   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test2-nginx-5f89c875cf-r68jk   1&#x2F;1     Running   0          7m4s   192.168.201.195   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-删除标签"><a href="#6-删除标签" class="headerlink" title="6.删除标签"></a>6.删除标签</h3><pre class="line-numbers language-none"><code class="language-none"># kubectl label nodes &lt;node_name&gt; key- <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl label nodes k8s-node01.linux.com name-node&#x2F;k8s-node01.linux.com labeled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="可以看到即使标签被删除了，旧的Pod不会被影响"><a href="#可以看到即使标签被删除了，旧的Pod不会被影响" class="headerlink" title="可以看到即使标签被删除了，旧的Pod不会被影响"></a>可以看到即使标签被删除了，旧的<code>Pod</code>不会被影响</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get pod -o wideNAME                           READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATEStest2-nginx-5f89c875cf-cfl6v   1&#x2F;1     Running   0          11m   192.168.201.194   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test2-nginx-5f89c875cf-r68jk   1&#x2F;1     Running   0          11m   192.168.201.195   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl delete pod test2-nginx-5f89c875cf-cfl6vpod &quot;test2-nginx-5f89c875cf-cfl6v&quot; deleted[root@k8s-master test]# kubectl get pod -o wideNAME                           READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATEStest2-nginx-5f89c875cf-7d9tj   0&#x2F;1     Pending   0          17s   &lt;none&gt;            &lt;none&gt;                 &lt;none&gt;           &lt;none&gt;test2-nginx-5f89c875cf-r68jk   1&#x2F;1     Running   0          12m   192.168.201.195   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-修改标签的值"><a href="#7-修改标签的值" class="headerlink" title="7.修改标签的值"></a>7.修改标签的值</h3><pre class="line-numbers language-none"><code class="language-none"># kubectl label nodes &lt;node_name&gt; key&#x3D;value --overwrite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、基于nodeAffinity节点亲缘性"><a href="#三、基于nodeAffinity节点亲缘性" class="headerlink" title="三、基于nodeAffinity节点亲缘性"></a>三、基于<code>nodeAffinity</code>节点亲缘性</h2><blockquote><p><strong>使用<code>nodeAffinity</code>可以在部署<code>Pod</code>时，将<code>Pod</code>调度运行到符合特定条件或不符合特定条件的节点</strong></p></blockquote><h3 id="1-nodeAffinity调度策略"><a href="#1-nodeAffinity调度策略" class="headerlink" title="1.nodeAffinity调度策略"></a>1.<code>nodeAffinity</code>调度策略</h3><h4 id="requiredDuringSchedulingIgnoredDuringExecution"><a href="#requiredDuringSchedulingIgnoredDuringExecution" class="headerlink" title="requiredDuringSchedulingIgnoredDuringExecution"></a><code>requiredDuringSchedulingIgnoredDuringExecution</code></h4><ul><li>表示<code>pod</code>必须部署到满足条件的节点上，如果没有满足条件的节点，就不停重试。</li><li><code>IgnoreDuringExecution</code>表示<code>pod</code>部署之后运行的时候，如果节点标签发生了变化，不再满足<code>pod</code>指定的条件，<code>pod</code>也会继续运行。</li></ul><h4 id="requiredDuringSchedulingRequiredDuringExecution"><a href="#requiredDuringSchedulingRequiredDuringExecution" class="headerlink" title="requiredDuringSchedulingRequiredDuringExecution"></a><code>requiredDuringSchedulingRequiredDuringExecution</code></h4><ul><li>表示<code>pod</code>必须部署到满足条件的节点上，如果没有满足条件的节点，就不停重试</li><li><code>RequiredDuringExecution</code>表示<code>pod</code>部署之后运行的时候，如果节点标签发生了变化，不再满足<code>pod</code>指定的条件，则重新选择符合要求的节点</li></ul><h4 id="preferredDuringSchedulingIgnoredDuringExecution"><a href="#preferredDuringSchedulingIgnoredDuringExecution" class="headerlink" title="preferredDuringSchedulingIgnoredDuringExecution"></a><code>preferredDuringSchedulingIgnoredDuringExecution</code></h4><ul><li>表示优先部署到满足条件的节点上，如果没有满足条件的节点，就忽略这些条件，按照正常逻辑部署</li></ul><h4 id="preferredDuringSchedulingRequiredDuringExecution"><a href="#preferredDuringSchedulingRequiredDuringExecution" class="headerlink" title="preferredDuringSchedulingRequiredDuringExecution"></a><code>preferredDuringSchedulingRequiredDuringExecution</code></h4><ul><li>表示优先部署到满足条件的节点上，如果没有满足条件的节点，就忽略这些条件，按照正常逻辑部署。</li><li><code>RequiredDuringExecution</code>表示如果后面节点标签发生了变化，满足了条件，则重新调度到满足条件的节点。</li></ul><h3 id="2-案例1：基于nodeAffinity节点亲缘性调度"><a href="#2-案例1：基于nodeAffinity节点亲缘性调度" class="headerlink" title="2.案例1：基于nodeAffinity节点亲缘性调度"></a>2.案例1：基于<code>nodeAffinity</code>节点亲缘性调度</h3><h4 id="为node02打标记"><a href="#为node02打标记" class="headerlink" title="为node02打标记"></a>为<code>node02</code>打标记</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl label node k8s-node02.linux.com yewu&#x3D;devnode&#x2F;k8s-node02.linux.com labeled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get node --show-labelsNAME                   STATUS   ROLES                  AGE   VERSION   LABELSk8s-master.linux.com   Ready    control-plane,master   8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-master.linux.com,kubernetes.io&#x2F;os&#x3D;linux,node-role.kubernetes.io&#x2F;control-plane&#x3D;,node-role.kubernetes.io&#x2F;master&#x3D;k8s-node01.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-node01.linux.com,kubernetes.io&#x2F;os&#x3D;linuxk8s-node02.linux.com   Ready    &lt;none&gt;                 8d    v1.20.7   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;k8s-node02.linux.com,kubernetes.io&#x2F;os&#x3D;linux,yewu&#x3D;dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建Deployment测试"><a href="#创建Deployment测试" class="headerlink" title="创建Deployment测试"></a>创建<code>Deployment</code>测试</h4><pre class="line-numbers language-none"><code class="language-none">apiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: test3-nginx  namespace: default  labels:    app: test3-nginxspec:  replicas: 2  selector:    matchLabels:      app: test3-nginx  template:    metadata:      labels:        app: test3-nginx    spec:      affinity:        nodeAffinity:#类型          requiredDuringSchedulingIgnoredDuringExecution:#指定策略            nodeSelectorTerms:            - matchExpressions:              - key: yewu#键                operator: NotIn#表示label的值不在某个列表中，类似取反                values:                - dev#值      containers:      - name: test3-nginx        image: nginx        ports:        - containerPort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>支持的操作符：</li><li><code>In</code>: <code>label</code>的值在某个列表中</li><li><code>NotIn</code>：<code>label</code>的值不在某个列表中</li><li><code>Exists</code>：某个<code>label</code>存在</li><li><code>DoesNotExist</code>：某个<code>label</code>不存在</li><li><code>Gt</code>：<code>label</code>的值大于某个值（字符串比较）</li><li><code>Lt</code>：<code>label</code>的值小于某个值（字符串比较）</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl create -f test3.ymldeployment.apps&#x2F;test3-nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><blockquote><p><strong>由于取反的原因，<code>node02</code>身上有符合要求的标签，所以取反到<code>node01</code>身上创建</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get pod -o wideNAME                           READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATEStest3-nginx-654cf47554-bzbh4   1&#x2F;1     Running   0          2m34s   192.168.201.195   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test3-nginx-654cf47554-cwggc   1&#x2F;1     Running   0          2m34s   192.168.201.196   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-案例2：基于nodeAffinity节点亲缘性调度"><a href="#3-案例2：基于nodeAffinity节点亲缘性调度" class="headerlink" title="3.案例2：基于nodeAffinity节点亲缘性调度"></a>3.案例2：基于<code>nodeAffinity</code>节点亲缘性调度</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# vim test4.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: test4-nginx  namespace: default  labels:    app: test4-nginxspec:  replicas: 2  selector:    matchLabels:      app: test4-nginx  template:    metadata:      labels:        app: test4-nginx    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:              - matchExpressions:                - key: kubernetes.io&#x2F;os                  operator: In                  values:                    - linux          preferredDuringSchedulingIgnoredDuringExecution:            - weight: 1              preference:                matchExpressions:                  - key: yewu                    operator: In                    values:                     - dev      containers:      - name: test4-nginx        image: nginx        imagePullPolicy: IfNotPresent        ports:        - containerPort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl create -f test4.ymldeployment.apps&#x2F;test4-nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看Pod"><a href="#查看Pod" class="headerlink" title="查看Pod"></a>查看<code>Pod</code></h4><blockquote><p><strong>本案例中同时设置了<code>requiredDuringSchedulingIgnoredDuringExecution</code>和<code>preferredDuringSchedulingIgnoredDuringExecution</code>两种策略，表示的意思为将<code>Pod</code>要调度到具有<code>kubernetes.io/os=linux</code>这个标签的节点时，在满足该条件的情况下，<code>preferredDuringSchedulingIgnoredDuringExecution</code>表示的意思是优先将其调度到同时具有<code>yewu=dev</code>的节点上</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl get pods -o wideNAME                           READY   STATUS    RESTARTS   AGE    IP                NODE                   NOMINATED NODE   READINESS GATEStest4-nginx-5bf9894f8c-87wsf   1&#x2F;1     Running   0          2m3s   192.168.242.132   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;test4-nginx-5bf9894f8c-nznnn   1&#x2F;1     Running   0          2m3s   192.168.242.131   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、污点Taint、容忍Toleration"><a href="#四、污点Taint、容忍Toleration" class="headerlink" title="四、污点Taint、容忍Toleration"></a>四、污点<code>Taint</code>、容忍<code>Toleration</code></h2><blockquote><p><strong><code>Taint</code>和<code>toleration</code>相互配合，可以用来避免<code>pod</code>被分配到不合适的节点上。每个节点上都可以应用一个或多个<code>taint</code>，这表示对于那些不能容忍这些<code>taint</code>的<code>pod</code>，是不会被该节点接受的。如果将<code>toleration</code>应用于<code>pod</code>上，则表示这些<code>pod</code>可以被调度到具有相应<code>taint</code>的节点上。</strong></p></blockquote><h3 id="1-污点Taint管理操作"><a href="#1-污点Taint管理操作" class="headerlink" title="1.污点Taint管理操作"></a>1.污点<code>Taint</code>管理操作</h3><h4 id="查看Taint污点"><a href="#查看Taint污点" class="headerlink" title="查看Taint污点"></a>查看<code>Taint</code>污点</h4><blockquote><p><strong>由于我是基于<code>kubeadm</code>部署的集群，集群会默认为<code>Master</code>节点配置一个污点，防止资源被调度到<code>Master</code>节点上。</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl describe node k8s-master.linux.com | grep -i TaintsTaints:             node-role.kubernetes.io&#x2F;master:NoSchedule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="为节点添加Taint污点"><a href="#为节点添加Taint污点" class="headerlink" title="为节点添加Taint污点"></a>为节点添加<code>Taint</code>污点</h4><pre class="line-numbers language-none"><code class="language-none"># kubectl taint nodes &lt;node_name&gt; key&#x3D;value:&#123;NoSchedule|NoExecute|PreferNoSchedule&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>污点的影响策略:</li><li><code>NoSchedule</code><ul><li>新的不能容忍该污点的<code>Pod</code>不会再调度过来 </li><li>但已经运行在该节点上的<code>Pod</code>不会受影响</li></ul></li><li><code>NoExecute</code><ul><li>新的不能容忍该污点的<code>Pod</code>不会再调度过来</li><li>同时该节点上的所有<code>Pod</code>都会被驱逐</li></ul></li><li><code>PreferNoSchedule</code><ul><li>尽量不向该节点调度</li></ul></li></ul><h4 id="删除Taint污点"><a href="#删除Taint污点" class="headerlink" title="删除Taint污点"></a>删除<code>Taint</code>污点</h4><pre class="line-numbers language-none"><code class="language-none"># kubectl taint node &lt;node_name&gt; key:&#123;NoSchedule|NoExecute|PreferNoSchedule&#125;-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-示例：为node02添加Tatin污点，指定策略为NoExecute"><a href="#3-示例：为node02添加Tatin污点，指定策略为NoExecute" class="headerlink" title="3.示例：为node02添加Tatin污点，指定策略为NoExecute"></a>3.示例：为<code>node02</code>添加<code>Tatin</code>污点，指定策略为<code>NoExecute</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl taint nodes k8s-node02.linux.com AA&#x3D;10:NoExecute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="可以看到node02身上的所有Pod都被驱逐了"><a href="#可以看到node02身上的所有Pod都被驱逐了" class="headerlink" title="可以看到node02身上的所有Pod都被驱逐了"></a>可以看到<code>node02</code>身上的所有<code>Pod</code>都被驱逐了</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -o wideNAME                           READY   STATUS              RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATEStest-client                    1&#x2F;1     Running             4          10d   10.88.0.9         k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-6x8mz   0&#x2F;1     ContainerCreating   0          3s    &lt;none&gt;            k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-7wkhg   0&#x2F;1     ContainerCreating   0          3s    &lt;none&gt;            k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-c8pf9   1&#x2F;1     Running             0          10m   172.168.201.231   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-fbfxp   1&#x2F;1     Running             0          10m   172.168.201.230   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-j4j62   1&#x2F;1     Terminating         0          10m   172.168.242.138   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-j4zkd   0&#x2F;1     ContainerCreating   0          3s    &lt;none&gt;            k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-lfct5   1&#x2F;1     Terminating         0          10m   172.168.242.139   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-nnlml   1&#x2F;1     Terminating         0          10m   172.168.242.135   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-p4nrz   0&#x2F;1     ContainerCreating   0          3s    &lt;none&gt;            k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-6fcf9564d5-t8jdc   1&#x2F;1     Terminating         0          10m   172.168.242.134   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除污点"><a href="#删除污点" class="headerlink" title="删除污点"></a>删除污点</h4><pre class="line-numbers language-none"><code class="language-none"># kubectl taint node 节点名 键-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl taint nodes k8s-node02.linux.com AA-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-容忍Toleration"><a href="#4-容忍Toleration" class="headerlink" title="4.容忍Toleration"></a>4.容忍<code>Toleration</code></h3><blockquote><p><strong>一般容忍<code>Toleration</code>和污点<code>Taint</code>是配合使用的</strong><br><strong>当用户想要在，存在<code>Taint</code>污点的<code>Node</code>节点上创建<code>Pod</code>的时候，就需要有容忍<code>Toleration</code>的存在</strong></p></blockquote><h4 id="添加Tatin污点"><a href="#添加Tatin污点" class="headerlink" title="添加Tatin污点"></a>添加<code>Tatin</code>污点</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl taint nodes k8s-node02.linux.com AA&#x3D;10:NoExecute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建Pod配置容忍Toleration策略"><a href="#创建Pod配置容忍Toleration策略" class="headerlink" title="创建Pod配置容忍Toleration策略"></a>创建<code>Pod</code>配置容忍<code>Toleration</code>策略</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# vim test5.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: test5-nginx  namespace: default  labels:    app: test5-nginxspec:  replicas: 2  selector:    matchLabels:      app: test5-nginx  template:    metadata:      labels:        app: test5-nginx    spec:      containers:      - name: test5-nginx        image: nginx        imagePullPolicy: IfNotPresent        ports:        - containerPort: 80      tolerations:        - key: &quot;AA&quot;          operator: &quot;Equal&quot;             value: &quot;10&quot;          effect: NoExecute          tolerationSeconds: 30#容忍时间可以不写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master test]# kubectl create -f test5.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置项说明：</li><li><code>tolerations</code>添加容忍策略</li><li><code>key</code>指定所容忍的<code>key</code>，要与对应污点的<code>key</code>一致</li><li><code>value</code>指定所容忍的value，要与对应污点的<code>value</code>一致</li><li><code>effect</code>指定所容忍的策略，一定要与污点指定的策略一致</li><li><code>tolerationSeconds</code>指定容忍的超时时间，到达该时间后，<code>Pod</code>将会被驱逐</li></ul><h4 id="容忍的匹配规则也可以写多个"><a href="#容忍的匹配规则也可以写多个" class="headerlink" title="容忍的匹配规则也可以写多个"></a>容忍的匹配规则也可以写多个</h4><pre class="line-numbers language-none"><code class="language-none">tolerations:- key: &quot;key1&quot;  operator: &quot;Equal&quot;  value: &quot;value1&quot;  effect: &quot;NoSchedule&quot;- key: &quot;key1&quot;  operator: &quot;Equal&quot;  value: &quot;value1&quot;  effect: &quot;NoExecute&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Pod-1"><a href="#查看Pod-1" class="headerlink" title="查看Pod"></a>查看<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ]# kubectl get pods -o wideNAME                           READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATEStest1-nginx-654d4cc68c-2mh68   1&#x2F;1     Running   0          6s    172.168.242.149   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;test1-nginx-654d4cc68c-8z8kw   1&#x2F;1     Running   0          6s    172.168.242.147   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除污点Taint"><a href="#删除污点Taint" class="headerlink" title="删除污点Taint"></a>删除污点<code>Taint</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl taint node k8s-node02.linux.com AA-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> 调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes部署WordPress博客</title>
      <link href="/2023/06/15/147/"/>
      <url>/2023/06/15/147/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes部署WordPress博客"><a href="#【容器应用系列教程】Kubernetes部署WordPress博客" class="headerlink" title="【容器应用系列教程】Kubernetes部署WordPress博客"></a>【容器应用系列教程】Kubernetes部署WordPress博客</h1><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><table><thead><tr><th>主机名</th><th>IP</th><th>安装的软件</th></tr></thead><tbody><tr><td>k8s-master.linux.com</td><td>192.168.140.10</td><td>kubernetes、NFS</td></tr><tr><td>k8s-node01.linux.com</td><td>192.168.140.11</td><td>kubernetes、NFS</td></tr><tr><td>k8s-node02.linux.com</td><td>192.168.140.12</td><td>kubernetes、NFS</td></tr><tr><td>k8s-nfs.linux.com</td><td>192.168.140.13</td><td>NFS</td></tr></tbody></table><blockquote><p><strong>关于<code>Kubernetes</code>集群部署教程：<a href="https://www.wsjj.top/archives/138">https://www.wsjj.top/archives/138</a></strong></p></blockquote><h2 id="二、配置NFS服务器"><a href="#二、配置NFS服务器" class="headerlink" title="二、配置NFS服务器"></a>二、配置<code>NFS</code>服务器</h2><blockquote><p><strong>搭建过程省略</strong><br><strong>关于<code>NFS</code>搭建教程：<a href="https://www.wsjj.top/archives/62">https://www.wsjj.top/archives/62</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# exportfs -arvexporting *:&#x2F;slave_dbexporting *:&#x2F;master_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="所有k8s节点安装NFS依赖"><a href="#所有k8s节点安装NFS依赖" class="headerlink" title="所有k8s节点安装NFS依赖"></a>所有<code>k8s</code>节点安装<code>NFS</code>依赖</h3><blockquote><p><strong>后面需要挂载<code>NFS</code>远程存储，需要用到依赖</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum install -y nfs-utils[root@k8s-node01 ~]# yum install -y nfs-utils[root@k8s-node02 ~]# yum install -y nfs-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、创建命名空间"><a href="#三、创建命名空间" class="headerlink" title="三、创建命名空间"></a>三、创建命名空间</h2><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# mkdir wordpress[root@k8s-master ~]# cd wordpress&#x2F;[root@k8s-master wordpress]# vim wp-ns.ymlapiVersion: v1kind: Namespacemetadata:    name: wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wp-ns.yml[root@k8s-master wordpress]# kubectl get nsNAME              STATUS   AGEdefault           Active   6d4hkube-node-lease   Active   6d4hkube-public       Active   6d4hkube-system       Active   6d4hwordpress         Active   4h39m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、创建PV和PVC"><a href="#四、创建PV和PVC" class="headerlink" title="四、创建PV和PVC"></a>四、创建<code>PV</code>和<code>PVC</code></h2><blockquote><p><strong>关于<code>Kubernetes</code>创建<code>PV</code>和<code>PVC</code>的教程：<a href="https://www.wsjj.top/archives/144">https://www.wsjj.top/archives/144</a></strong></p></blockquote><h3 id="1-创建Master库用到的PV和PVC"><a href="#1-创建Master库用到的PV和PVC" class="headerlink" title="1.创建Master库用到的PV和PVC"></a>1.创建<code>Master</code>库用到的<code>PV</code>和<code>PVC</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim master-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: master-db-pv   namespace: wordpressspec:  capacity:      storage: 9G  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.140.13#NFS服务器地址      path: &#x2F;master_db#NFS共享的目录---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: master-db-pvc     namespace: wordpressspec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 9G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f master-pv-pvc.yml persistentvolume&#x2F;master-db-pv createdpersistentvolumeclaim&#x2F;master-db-pvc created[root@k8s-master wordpress]# kubectl get pvc -n wordpressNAME            STATUS   VOLUME         CAPACITY   ACCESS MODES   STORAGECLASS   AGEmaster-db-pvc   Bound    master-db-pv   9G         RWX                           10s[root@k8s-master wordpress]# kubectl get pv -n wordpressNAME           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   REASON   AGEmaster-db-pv   9G         RWX            Recycle          Bound    wordpress&#x2F;master-db-pvc                           75s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建Slave库用到的PV和PVC"><a href="#2-创建Slave库用到的PV和PVC" class="headerlink" title="2.创建Slave库用到的PV和PVC"></a>2.创建<code>Slave</code>库用到的<code>PV</code>和<code>PVC</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim slave-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: slave-db-pv   namespace: wordpressspec:  capacity:      storage: 10G  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.140.13      path: &#x2F;slave_db---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: slave-db-pvc     namespace: wordpressspec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 10G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f slave-pv-pvc.yml persistentvolume&#x2F;slave-db-pv createdpersistentvolumeclaim&#x2F;slave-db-pvc created[root@k8s-master wordpress]# kubectl get pv -n wordpressNAME           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   REASON   AGEmaster-db-pv   9G         RWX            Recycle          Bound    wordpress&#x2F;master-db-pvc                           5m37sslave-db-pv    10G        RWX            Recycle          Bound    wordpress&#x2F;slave-db-pvc                            9s[root@k8s-master wordpress]# kubectl get pvc -n wordpressNAME            STATUS   VOLUME         CAPACITY   ACCESS MODES   STORAGECLASS   AGEmaster-db-pvc   Bound    master-db-pv   9G         RWX                           5m40sslave-db-pvc    Bound    salve-db-pv    10G        RWX                           12s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、准备ConfigMap"><a href="#五、准备ConfigMap" class="headerlink" title="五、准备ConfigMap"></a>五、准备<code>ConfigMap</code></h2><blockquote><p><strong>关于<code>Kubernetes</code>配置映射<code>ConfigMap</code>教程：<a href="https://www.wsjj.top/archives/146">https://www.wsjj.top/archives/146</a></strong></p></blockquote><h3 id="1-准备主库配置文件"><a href="#1-准备主库配置文件" class="headerlink" title="1.准备主库配置文件"></a>1.准备主库配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim master-db-config.ymlapiVersion: v1kind: ConfigMapmetadata:    name: master-db-config    namespace: wordpressdata:    my.cnf: |        [mysqld]        server_id&#x3D;10        log_bin&#x3D;master        gtid_mode&#x3D;on        enforce_gtid_consistency&#x3D;true        collation-server &#x3D; utf8_general_ci        character-set-server &#x3D; utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f master-db-config.yml configmap&#x2F;master-db-config created[root@k8s-master wordpress]# kubectl get cm -n wordpressNAME               DATA   AGEkube-root-ca.crt   1      5h4mmaster-db-config   1      15s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-准备从库配置文件"><a href="#2-准备从库配置文件" class="headerlink" title="2.准备从库配置文件"></a>2.准备从库配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim slave-db-config.ymlapiVersion: v1kind: ConfigMapmetadata:    name: slave-db-config    namespace: wordpressdata:    my.cnf: |        [mysqld]        server_id&#x3D;11        log_bin&#x3D;slave        gtid_mode&#x3D;on        enforce_gtid_consistency&#x3D;true        collation-server &#x3D; utf8_general_ci        character-set-server &#x3D; utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f slave-db-config.yml configmap&#x2F;slave-db-config created[root@k8s-master wordpress]# kubectl get cm -n wordpressNAME               DATA   AGEkube-root-ca.crt   1      5h6mmaster-db-config   1      2m28sslave-db-config    1      9s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、配置主从复制数据库"><a href="#六、配置主从复制数据库" class="headerlink" title="六、配置主从复制数据库"></a>六、配置主从复制数据库</h2><blockquote><p><strong>关于<code>Kubernetes</code>有状态负载<code>StatefulSet</code>教程：<a href="https://www.wsjj.top/archives/145">https://www.wsjj.top/archives/145</a></strong></p></blockquote><h3 id="1-创建主库Pod和Service"><a href="#1-创建主库Pod和Service" class="headerlink" title="1.创建主库Pod和Service"></a>1.创建主库<code>Pod</code>和<code>Service</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wp-master-mysql.ymlapiVersion: apps&#x2F;v1kind: StatefulSet#类型有状态负载metadata:    name: wp-master-mysql    namespace: wordpressspec:#控制副本集    replicas: 1    selector:        matchLabels:            app: wp-master-mysql#对应下面的自定义标签    serviceName: &quot;wp-master-mysql&quot;#此处名字应该对应下面的service名字    template:        metadata:            labels:                app: wp-master-mysql#我们自定义个标签(重要)        spec:#控制Pod            containers:            - name: wp-master-mysql              image: mysql:5.7              imagePullPolicy: IfNotPresent              ports:              - containerPort: 3306              env:              - name: MYSQL_ROOT_PASSWORD                value: &quot;WWW.1.com&quot;              - name: MYSQL_DATABASE                value: &quot;wordpress&quot;              - name: MYSQL_USER                value: &quot;wpuser&quot;              - name: MYSQL_PASSWORD                value: &quot;redhat&quot;              resources:#配置资源限制                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;              volumeMounts:                  - name: mysql-data-volume                    mountPath: &#x2F;var&#x2F;lib&#x2F;mysql                  - name: mysql-config-volume                    mountPath: &#x2F;etc&#x2F;mysql&#x2F;conf.d                    readOnly: true            volumes:#配置挂载                - name: mysql-data-volume                  persistentVolumeClaim:                    claimName: master-db-pvc#指定数据目录持久挂载                - name: mysql-config-volume                  projected:                    sources:                    - configMap:                        name: master-db-config#挂载自定义master配置文件---apiVersion: v1kind: Servicemetadata:    name: wp-master-mysql    namespace: wordpressspec:    ports:    - port: 3306    selector:      app: wp-master-mysql#此处的标签应该对应上面创建的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wp-master-mysql.yml statefulset.apps&#x2F;wp-master-mysql createdservice&#x2F;wp-master-mysql created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看Pod"><a href="#查看Pod" class="headerlink" title="查看Pod"></a>查看<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpressNAME                READY   STATUS    RESTARTS   AGEwp-master-mysql-0   1&#x2F;1     Running   0          3m47s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="创建主从复制用到的用户"><a href="#创建主从复制用到的用户" class="headerlink" title="创建主从复制用到的用户"></a>创建主从复制用到的用户</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it wp-master-mysql-0 -n wordpress -- bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建从库Pod和Service"><a href="#2-创建从库Pod和Service" class="headerlink" title="2.创建从库Pod和Service"></a>2.创建从库<code>Pod</code>和<code>Service</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wp-slave-mysql.ymlapiVersion: apps&#x2F;v1kind: StatefulSetmetadata:    name: wp-slave-mysql    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wp-slave-mysql    serviceName: &quot;wp-slave-mysql&quot;    template:        metadata:            labels:                app: wp-slave-mysql        spec:            containers:            - name: wp-slave-mysql              image: mysql:5.7              imagePullPolicy: IfNotPresent              ports:              - containerPort: 3306              env:              - name: MYSQL_ROOT_PASSWORD                value: &quot;WWW.1.com&quot;              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;              volumeMounts:                  - name: mysql-data-volume                    mountPath: &#x2F;var&#x2F;lib&#x2F;mysql                  - name: mysql-config-volume                    mountPath: &#x2F;etc&#x2F;mysql&#x2F;conf.d                    readOnly: true            volumes:                - name: mysql-data-volume                  persistentVolumeClaim:                    claimName: slave-db-pvc#挂载从库持久数据                - name: mysql-config-volume                  projected:                    sources:                    - configMap:                        name: slave-db-config#挂载从库配置文件---apiVersion: v1kind: Servicemetadata:    name: wp-slave-mysql    namespace: wordpressspec:    ports:    - port: 3306    selector:      app: wp-slave-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wp-slave-mysql.yml statefulset.apps&#x2F;wp-slave-mysql createdservice&#x2F;wp-slave-mysql created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpressNAME                READY   STATUS    RESTARTS   AGEwp-master-mysql-0   1&#x2F;1     Running   0          38mwp-slave-mysql-0    1&#x2F;1     Running   0          2m19s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置主从复制"><a href="#3-配置主从复制" class="headerlink" title="3.配置主从复制"></a>3.配置主从复制</h3><blockquote><p><strong>因为从库和主库都在同一个<code>wordpress</code>命名空间内，又因为<code>k8s</code>有<code>cronDNS</code>做<code>service</code>解析，所以填写服务名即可，如果不在同一个命名空间，可能需要填写全名。</strong><br><strong>更多关于<code>Service</code>和<code>服务名</code>的详情，请查看这期教程：<a href="https://www.wsjj.top/archives/143">【容器应用系列教程】Kubernetes服务管理Service</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it wp-slave-mysql-0 -n wordpress -- bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt; change master to    -&gt; master_host&#x3D;&quot;wp-master-mysql&quot;,#数据库地址为master容器的服务名    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1;Query OK, 0 rows affected, 2 warnings (0.04 sec)mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: wp-master-mysql                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000003          Read_Master_Log_Pos: 481               Relay_Log_File: wp-slave-mysql-0-relay-bin.000003                Relay_Log_Pos: 688        Relay_Master_Log_File: master.000003             Slave_IO_Running: Yes            Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、部署WordPress"><a href="#七、部署WordPress" class="headerlink" title="七、部署WordPress"></a>七、部署<code>WordPress</code></h2><h3 id="1-安装Ingress-nginx插件"><a href="#1-安装Ingress-nginx插件" class="headerlink" title="1.安装Ingress-nginx插件"></a>1.安装<code>Ingress-nginx</code>插件</h3><blockquote><p><strong><code>Ingress-nginx</code>负责基于服务名发布服务</strong><br><strong>关于<code>Ingress-nginx</code>部署文件下载地址：<a href="https://pan.baidu.com/s/1l9cF-AShYicLk1arwVboEw?pwd=jge3">https://pan.baidu.com/s/1l9cF-AShYicLk1arwVboEw?pwd=jge3</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f ingress-nginx-deploy_v1.3.1.yamlnamespace&#x2F;ingress-nginx createdserviceaccount&#x2F;ingress-nginx createdserviceaccount&#x2F;ingress-nginx-admission createdrole.rbac.authorization.k8s.io&#x2F;ingress-nginx createdrole.rbac.authorization.k8s.io&#x2F;ingress-nginx-admission createdclusterrole.rbac.authorization.k8s.io&#x2F;ingress-nginx createdclusterrole.rbac.authorization.k8s.io&#x2F;ingress-nginx-admission createdrolebinding.rbac.authorization.k8s.io&#x2F;ingress-nginx createdrolebinding.rbac.authorization.k8s.io&#x2F;ingress-nginx-admission createdclusterrolebinding.rbac.authorization.k8s.io&#x2F;ingress-nginx createdclusterrolebinding.rbac.authorization.k8s.io&#x2F;ingress-nginx-admission createdconfigmap&#x2F;ingress-nginx-controller createdservice&#x2F;ingress-nginx-controller createdservice&#x2F;ingress-nginx-controller-admission createddeployment.apps&#x2F;ingress-nginx-controller createdjob.batch&#x2F;ingress-nginx-admission-create createdjob.batch&#x2F;ingress-nginx-admission-patch createdingressclass.networking.k8s.io&#x2F;nginx createdvalidatingwebhookconfiguration.admissionregistration.k8s.io&#x2F;ingress-nginx-admission created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n ingress-nginxNAME                                        READY   STATUS      RESTARTS   AGEingress-nginx-admission-create-ct2hs        0&#x2F;1     Completed   0          68singress-nginx-admission-patch-dshpv         0&#x2F;1     Completed   0          68singress-nginx-controller-64ff7cd7cf-sm4sx   1&#x2F;1     Running     0          68s#controller插件正常运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置NFS"><a href="#2-配置NFS" class="headerlink" title="2.配置NFS"></a>2.配置<code>NFS</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# exportfs -arvexporting *:&#x2F;wordpressexporting *:&#x2F;slave_dbexporting *:&#x2F;master_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建WordPress的Pod和Service"><a href="#3-创建WordPress的Pod和Service" class="headerlink" title="3.创建WordPress的Pod和Service"></a>3.创建<code>WordPress</code>的<code>Pod</code>和<code>Service</code></h3><blockquote><p><strong>关于<code>Kubernetes</code>无状态负载<code>Deployment</code>教程：<a href="https://www.wsjj.top/archives/141">https://www.wsjj.top/archives/141</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wordpress.ymlapiVersion: apps&#x2F;v1kind: Deployment#类型无状态负载metadata:    name: wordpress    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wordpress    strategy:#滚动更新策略        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 0    template:        metadata:            labels:                app: wordpress        spec:            containers:            - name: wordpress              image: wordpress              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80              env:              - name: WORDPRESS_DB_HOST                value: &quot;wp-master-mysql&quot;#数据库连接地址同样是服务名              - name: WORDPRESS_DB_USER                value: &quot;wpuser&quot;              - name: WORDPRESS_DB_PASSWORD                value: &quot;redhat&quot;              - name: WORDPRESS_DB_NAME                value: &quot;wordpress&quot;              - name: WORDPRESS_TABLE_PREFIX                value: &quot;wp_&quot;              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;              volumeMounts:                - name: wordpress-data-volumes                  mountPath: &#x2F;var&#x2F;www&#x2F;html#挂载到wordpress数据目录            volumes:              - name: wordpress-data-volumes                nfs:                  server: &quot;192.168.140.13&quot;#挂载NFS共享目录                  path: &#x2F;wordpress---apiVersion: v1kind: Servicemetadata:    name: wordpress    namespace: wordpressspec:#服务类型是ClusterIP    ports:    - port: 80    selector:      app: wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wordpress.yml deployment.apps&#x2F;wordpress createdservice&#x2F;wordpress created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpressNAME                         READY   STATUS    RESTARTS   AGEwordpress-7c79b77f77-j26nk   1&#x2F;1     Running   0          5m31swp-master-mysql-0            1&#x2F;1     Running   0          64mwp-slave-mysql-0             1&#x2F;1     Running   0          28m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建Ingress服务发布WordPress"><a href="#4-创建Ingress服务发布WordPress" class="headerlink" title="4.创建Ingress服务发布WordPress"></a>4.创建<code>Ingress</code>服务发布<code>WordPress</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wp-ingress.ymlapiVersion: extensions&#x2F;v1beta1kind: Ingress metadata:  name: wp-ingress  namespace: wordpress  annotations:    kubernetes.io&#x2F;ingress.class: &quot;nginx&quot;spec:  rules:   - host: wp.linux.com    http:      paths:       - path:          backend:           serviceName: wordpress          servicePort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wp-ingress.ymlWarning: extensions&#x2F;v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io&#x2F;v1 Ingressingress.extensions&#x2F;wp-ingress created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-修改Windows上的hosts文件"><a href="#5-修改Windows上的hosts文件" class="headerlink" title="5.修改Windows上的hosts文件"></a>5.修改<code>Windows</code>上的<code>hosts</code>文件</h3><blockquote><p><strong>路径：<code>C:\Windows\System32\drivers\etc\hosts</code></strong><br><strong>解析的<code>IP</code>地址，取决于您的<code>ingress</code>的<code>controller</code>跑在哪个物理机上，我这里跑在<code>node01</code>上</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes12.png" alt="kubernetes12"></p><h3 id="6-测试访问"><a href="#6-测试访问" class="headerlink" title="6.测试访问"></a>6.测试访问</h3><blockquote><p><strong>安装配置过程省略</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes13.png" alt="kubernetes13"></p><blockquote><p><strong>如果你跟到了这一步，那么恭喜你，最基本的<code>wordpress</code>已经部署好啦！</strong></p></blockquote><h2 id="八、部署Redis"><a href="#八、部署Redis" class="headerlink" title="八、部署Redis"></a>八、部署<code>Redis</code></h2><h3 id="1-配置NFS共享"><a href="#1-配置NFS共享" class="headerlink" title="1.配置NFS共享"></a>1.配置<code>NFS</code>共享</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# exportfs -arvexporting *:&#x2F;wp_redisexporting *:&#x2F;wordpressexporting *:&#x2F;slave_dbexporting *:&#x2F;master_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建redis用到的PV和PVC"><a href="#2-创建redis用到的PV和PVC" class="headerlink" title="2.创建redis用到的PV和PVC"></a>2.创建<code>redis</code>用到的<code>PV</code>和<code>PVC</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim redis-pv-pvc.ymlapiVersion: v1kind: PersistentVolumemetadata:   name: redis-db-pv   namespace: wordpressspec:  capacity:      storage: 10G  accessModes:       - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:      server: 192.168.140.13      path: &#x2F;wp_redis---apiVersion: v1kind: PersistentVolumeClaimmetadata:     name: redis-db-pvc     namespace: wordpressspec:     accessModes:        - ReadWriteMany     resources:        requests:            storage: 10G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f redis-pv-pvc.yml persistentvolume&#x2F;redis-db-pv createdpersistentvolumeclaim&#x2F;redis-db-pvc created[root@k8s-master wordpress]# kubectl get pvc -n wordpressNAME            STATUS   VOLUME         CAPACITY   ACCESS MODES   STORAGECLASS   AGEmaster-db-pvc   Bound    master-db-pv   9G         RWX                           165mredis-db-pvc    Bound    redis-db-pv    10G        RWX                           10sslave-db-pvc    Bound    slave-db-pv    10G        RWX                           86m[root@k8s-master wordpress]# kubectl get pv -n wordpressNAME           CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS   REASON   AGEmaster-db-pv   9G         RWX            Recycle          Bound    wordpress&#x2F;master-db-pvc                           166mredis-db-pv    10G        RWX            Recycle          Bound    wordpress&#x2F;redis-db-pvc                            46sslave-db-pv    10G        RWX            Recycle          Bound    wordpress&#x2F;slave-db-pvc                            87m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建Redis的ConfigMap"><a href="#3-创建Redis的ConfigMap" class="headerlink" title="3.创建Redis的ConfigMap"></a>3.创建<code>Redis</code>的<code>ConfigMap</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim redis-config.ymlapiVersion: v1kind: ConfigMapmetadata:    name: redis-config    namespace: wordpressdata:    redis.conf: |        dir &#x2F;srv        port 6379        bind 0.0.0.0        appendonly yes#开启数据持久化        daemonize no        protected-mode no        pidfile &#x2F;srv&#x2F;redis-6379.pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f redis-config.yml configmap&#x2F;redis-config created[root@k8s-master wordpress]# kubectl get cm -n wordpressNAME               DATA   AGEkube-root-ca.crt   1      7h43mmaster-db-config   1      159mredis-config       1      17sslave-db-config    1      105m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建Redis的Pod和Service"><a href="#4-创建Redis的Pod和Service" class="headerlink" title="4.创建Redis的Pod和Service"></a>4.创建Redis的<code>Pod</code>和<code>Service</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wp-redis.ymlapiVersion: apps&#x2F;v1kind: StatefulSet#有状态负载metadata:  name: redis  namespace: wordpress  labels:    app: redisspec:  replicas: 1  selector:    matchLabels:      app: redis  serviceName: &quot;redis&quot;  template:    metadata:      labels:        app: redis    spec:      containers:      - name: redis        image: redis:3.0.7        command:          - &quot;sh&quot;          - &quot;-c&quot;          - &quot;redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf&quot;        ports:        - containerPort: 6379        resources:          limits:            cpu: 1000m            memory: 1024Mi          requests:            cpu: 1000m            memory: 1024Mi        livenessProbe:          tcpSocket:            port: 6379          initialDelaySeconds: 300          timeoutSeconds: 1          periodSeconds: 10          successThreshold: 1          failureThreshold: 3        readinessProbe:          tcpSocket:            port: 6379          initialDelaySeconds: 5          timeoutSeconds: 1          periodSeconds: 10          successThreshold: 1          failureThreshold: 3        volumeMounts:        - name: wp-redis-config          mountPath:  &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf#配置文件挂载到容器内          subPath: redis.conf        - name: wp-redis-data-volume          mountPath: &#x2F;srv#配置文件里指定的数据目录      volumes:      - name: wp-redis-config        configMap:          name: redis-config#挂载配置文件      - name: wp-redis-data-volume        persistentVolumeClaim:            claimName: redis-db-pvc#挂载PVC---apiVersion: v1kind: Servicemetadata:  name: redis  namespace: wordpress  labels:    app: redisspec:  ports:    - name: tcp      port: 6379  selector:    app: redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wp-redis.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-在WordPress插件库安装Redis插件"><a href="#5-在WordPress插件库安装Redis插件" class="headerlink" title="5.在WordPress插件库安装Redis插件"></a>5.在<code>WordPress</code>插件库安装<code>Redis</code>插件</h3><blockquote><p><strong>下载完暂时不要启用插件！！！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes14.png" alt="kubernetes14"></p><h3 id="6-修改插件配置文件"><a href="#6-修改插件配置文件" class="headerlink" title="6.修改插件配置文件"></a>6.修改插件配置文件</h3><h4 id="A-编辑配置文件"><a href="#A-编辑配置文件" class="headerlink" title="A.编辑配置文件"></a>A.编辑配置文件</h4><blockquote><p><strong>前往<code>NFS</code>服务器修改配置文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# vim &#x2F;wordpress&#x2F;wp-config.php#在配置文件底部增加以下内容define(&#39;WP_REDIS_HOST&#39;, &#39;redis&#39;);#这里的名字，对应redis中的service名字define(&#39;WP_REDIS_PORT&#39;, &#39;6379&#39;);define(&#39;WP_REDIS_DATABASE&#39;, &#39;0&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-修改插件的配置文件"><a href="#B-修改插件的配置文件" class="headerlink" title="B.修改插件的配置文件"></a>B.修改插件的配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# vim &#x2F;wordpress&#x2F;wp-content&#x2F;plugins&#x2F;redis-cache&#x2F;includes&#x2F;object-cache.phpprotected function build_parameters() &#123;        $parameters &#x3D; [            &#39;scheme&#39; &#x3D;&gt; &#39;tcp&#39;,            &#39;host&#39; &#x3D;&gt; &#39;redis&#39;,#修改redis连接地址为服务名            &#39;port&#39; &#x3D;&gt; 6379,            &#39;database&#39; &#x3D;&gt; 0,            &#39;timeout&#39; &#x3D;&gt; 1,            &#39;read_timeout&#39; &#x3D;&gt; 1,            &#39;retry_interval&#39; &#x3D;&gt; null,            &#39;persistent&#39; &#x3D;&gt; false,        ];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动Reids插件测试"><a href="#C-启动Reids插件测试" class="headerlink" title="C.启动Reids插件测试"></a>C.启动<code>Reids</code>插件测试</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes15.png" alt="kubernetes15"></p><blockquote><p><strong>如果您的<code>Redis</code>启动失败，请检查连接地址是否正确</strong><br><strong>优先检查<code>redis</code>和<code>wordpress</code>服务是否在同一个命名空间内，如果不是，请把连接地址改成完整名字！</strong><br><strong>完整名字参考：<code>redis.wordpress.svc.cluster.local</code> <code>服务名.命名空间名.svc.集群域名</code></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> wordpress </category>
          
          <category> 集群 </category>
          
          <category> 容器 </category>
          
          <category> 应用 </category>
          
          <category> 命名空间 </category>
          
          <category> Pod </category>
          
          <category> 服务 </category>
          
          <category> 数据卷 </category>
          
          <category> 有状态负载 </category>
          
          <category> ConfigMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes配置映射ConfigMap</title>
      <link href="/2023/06/15/146/"/>
      <url>/2023/06/15/146/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes配置映射ConfigMap"><a href="#【容器应用系列教程】Kubernetes配置映射ConfigMap" class="headerlink" title="【容器应用系列教程】Kubernetes配置映射ConfigMap"></a>【容器应用系列教程】Kubernetes配置映射ConfigMap</h1><h2 id="一、关于ConfigMap"><a href="#一、关于ConfigMap" class="headerlink" title="一、关于ConfigMap"></a>一、关于<code>ConfigMap</code></h2><blockquote><p><strong>以键值对存储业务的配置数据(密码、配置文件内容)</strong></p></blockquote><h2 id="二、创建并使用ConfigMap"><a href="#二、创建并使用ConfigMap" class="headerlink" title="二、创建并使用ConfigMap"></a>二、创建并使用<code>ConfigMap</code></h2><h3 id="1-在ConfigMap通过键值对的方式定义"><a href="#1-在ConfigMap通过键值对的方式定义" class="headerlink" title="1.在ConfigMap通过键值对的方式定义"></a>1.在<code>ConfigMap</code>通过键值对的方式定义</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim config-db.ymlapiVersion: v1kind: ConfigMapmetadata:    name: mysql-config    namespace: wordpressdata:    db_password: redhat    db_name: jiaowu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f config-db.yml configmap&#x2F;mysql-config created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看ConfigMap"><a href="#查看ConfigMap" class="headerlink" title="查看ConfigMap"></a>查看<code>ConfigMap</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get cm -n wordpressNAME               DATA   AGEkube-root-ca.crt   1      3h19mmysql-config       2      46s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看ConfigMap的详细信息"><a href="#查看ConfigMap的详细信息" class="headerlink" title="查看ConfigMap的详细信息"></a>查看<code>ConfigMap</code>的详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl describe cm mysql-config -n wordpressName:         mysql-configNamespace:    wordpressLabels:       &lt;none&gt;Annotations:  &lt;none&gt;Data&#x3D;&#x3D;&#x3D;&#x3D;db_name:#键----jiaowu#对应的值db_password:#键----redhat#对应的值Events:  &lt;none&gt;[root@k8s-master wordpress]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用刚刚存的ConfigMap创建数据库Pod"><a href="#使用刚刚存的ConfigMap创建数据库Pod" class="headerlink" title="使用刚刚存的ConfigMap创建数据库Pod"></a>使用刚刚存的<code>ConfigMap</code>创建数据库<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim config-mysql.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: wp-mysql    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wp-mysql    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 0    template:        metadata:            labels:                app: wp-mysql        spec:            containers:            - name: wp-mysql              image: mysql:5.7              imagePullPolicy: IfNotPresent              ports:              - containerPort: 3306              env:              - name: MYSQL_ROOT_PASSWORD                valueFrom:                    configMapKeyRef:#配置变量取自ConfigMap                            name: mysql-config#刚刚创建的ConfigMap服务的名字                            key: db_password#对应的键              - name: MYSQL_DATABASE                valueFrom:                    configMapKeyRef:                            name: mysql-config                            key: db_name              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;---apiVersion: v1kind: Servicemetadata:    name: wp-mysql    namespace: wordpressspec:    ports:    - port: 3306    selector:      app: wp-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f config-mysql.yml deployment.apps&#x2F;wp-mysql createdservice&#x2F;wp-mysql created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpressNAME                        READY   STATUS    RESTARTS   AGEwp-mysql-55858fbc65-m8vnl   1&#x2F;1     Running   0          82s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进入容器内部验证"><a href="#进入容器内部验证" class="headerlink" title="进入容器内部验证"></a>进入容器内部验证</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it wp-mysql-55858fbc65-m8vnl -n wordpress -- bashbash-4.2# mysql -uroot -predhatmysql&gt; #密码正确mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || jiaowu             |       #jiaowu库| mysql              || performance_schema || sys                |+--------------------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在ConfigMap中定义配置文件"><a href="#2-在ConfigMap中定义配置文件" class="headerlink" title="2.在ConfigMap中定义配置文件"></a>2.在<code>ConfigMap</code>中定义配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim config-db.ymlapiVersion: v1kind: ConfigMapmetadata:    name: mysql-config    namespace: wordpressdata:    db_password: redhat    db_name: jiaowu    my.cnf: |#定义配置文件名        [mysqld]        server_id&#x3D;10        log_bin&#x3D;master        gtid_mode&#x3D;on#开启事务        enforce_gtid_consistency&#x3D;true        collation-server &#x3D; utf8_general_ci        character-set-server &#x3D; utf8#定义默认创建库的字符集为utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl apply -f config-db.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看ConfigMap详细信息"><a href="#查看ConfigMap详细信息" class="headerlink" title="查看ConfigMap详细信息"></a>查看<code>ConfigMap</code>详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl describe cm mysql-config -n wordpressName:         mysql-configNamespace:    wordpressLabels:       &lt;none&gt;Annotations:  &lt;none&gt;Data&#x3D;&#x3D;&#x3D;&#x3D;db_name:----jiaowudb_password:----redhatmy.cnf:----[mysqld]server_id&#x3D;10log_bin&#x3D;mastergtid_mode&#x3D;onenforce_gtid_consistency&#x3D;truecollation-server &#x3D; utf8_general_cicharacter-set-server &#x3D; utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="挂载配置文件，创建Pod"><a href="#挂载配置文件，创建Pod" class="headerlink" title="挂载配置文件，创建Pod"></a>挂载配置文件，创建<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim config-mysql.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: wp-mysql    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wp-mysql    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 0    template:        metadata:            labels:                app: wp-mysql        spec:            containers:            - name: wp-mysql              image: mysql:5.7              imagePullPolicy: IfNotPresent              ports:              - containerPort: 3306              env:              - name: MYSQL_ROOT_PASSWORD                valueFrom:                    configMapKeyRef:                            name: mysql-config                            key: db_password              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;              volumeMounts:#挂载数据卷                  - name: config-mysql-volume#挂载自己定义的数据卷名                    mountPath: &quot;&#x2F;etc&#x2F;mysql&#x2F;conf.d&quot;#挂载路径                    readOnly: true#开启只读            volumes:                - name: config-mysql-volume#创建一个数据卷名                  projected:                      sources:                      - configMap:#定义ConfigMap类型                           name: mysql-config#指定数据卷挂载到哪个ConfigMap上---apiVersion: v1kind: Servicemetadata:    name: wp-mysql    namespace: wordpressspec:    ports:    - port: 3306    selector:      app: wp-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f config-mysql.yml deployment.apps&#x2F;wp-mysql createdservice&#x2F;wp-mysql created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpressNAME                        READY   STATUS    RESTARTS   AGEwp-mysql-68b5d74d89-gr25n   1&#x2F;1     Running   0          4s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进入容器内部检查"><a href="#进入容器内部检查" class="headerlink" title="进入容器内部检查"></a>进入容器内部检查</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it wp-mysql-68b5d74d89-gr25n -n wordpress -- bashbash-4.2# mysql -uroot -predhatmysql&gt; show master status\G;#二进制日志是开启状态*************************** 1. row ***************************             File: master.000003         Position: 194     Binlog_Do_DB:  Binlog_Ignore_DB: Executed_Gtid_Set: 799fd813-0b74-11ee-95c8-6e94f7388cb8:1-51 row in set (0.00 sec)mysql&gt; create database AA;Query OK, 1 row affected (0.00 sec)mysql&gt; select schema_name,default_character_set_name from information_schema.schemata;+--------------------+----------------------------+| schema_name        | default_character_set_name |+--------------------+----------------------------+| information_schema | utf8                       || AA                 | utf8                       |#所有库都是utf8字符集| mysql              | utf8                       || performance_schema | utf8                       || sys                | utf8                       |+--------------------+----------------------------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> ConfigMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> configmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes有状态负载StatefulSet</title>
      <link href="/2023/06/15/145/"/>
      <url>/2023/06/15/145/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes有状态负载StatefulSet"><a href="#【容器应用系列教程】Kubernetes有状态负载StatefulSet" class="headerlink" title="【容器应用系列教程】Kubernetes有状态负载StatefulSet"></a>【容器应用系列教程】Kubernetes有状态负载StatefulSet</h1><h2 id="一、StatefulSet介绍"><a href="#一、StatefulSet介绍" class="headerlink" title="一、StatefulSet介绍"></a>一、<code>StatefulSet</code>介绍</h2><ul><li>本质上就是<code>POD</code></li><li>特性<ul><li>重建<code>POD</code>时，会自动挂载之前的数据卷</li><li>依赖于网络存储的数据卷</li></ul></li><li>适用场景：适用于数据库</li></ul><h2 id="二、创建StatefulSet"><a href="#二、创建StatefulSet" class="headerlink" title="二、创建StatefulSet"></a>二、创建<code>StatefulSet</code></h2><h3 id="1-创建PV和PVC"><a href="#1-创建PV和PVC" class="headerlink" title="1.创建PV和PVC"></a>1.创建<code>PV</code>和<code>PVC</code></h3><blockquote><p><strong>创建过程省略</strong><br><strong>关于<code>PV</code>和<code>PVC</code>的创建教程：<a href="https://www.wsjj.top/archives/144">https://www.wsjj.top/archives/144</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get pv -n defaultNAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM              STORAGECLASS   REASON   AGEnfs-pv1   1900M      RWX            Recycle          Available                                              15hnfs-pv2   4G         RWX            Recycle          Bound       default&#x2F;test-pvc                           15h[root@k8s-master opt]# kubectl get pvc -n defaultNAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGEtest-pvc   Bound    nfs-pv2   4G         RWX                           14h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建有状态负载StatefulSet"><a href="#2-创建有状态负载StatefulSet" class="headerlink" title="2.创建有状态负载StatefulSet"></a>2.创建有状态负载<code>StatefulSet</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# vim state-mysql.ymlapiVersion: apps&#x2F;v1kind: StatefulSet#类型为有状态负载metadata:    name: mysqlspec:    replicas: 1    selector:         matchLabels:             app: mysql    serviceName: &quot;mysql&quot;#此处需要绑定服务名，这个服务名对应着下面的Service    template:       metadata:           labels:              app: mysql       spec:           containers:           - name: mysql             image: mysql:5.7             imagePullPolicy: IfNotPresent             env:             - name: MYSQL_ROOT_PASSWORD               value: redhat             volumeMounts:               - name: mysql-volume                 mountPath: &#x2F;var&#x2F;lib&#x2F;mysql#配置永久挂载数据目录           volumes:             - name: mysql-volume#创建个数据卷               persistentVolumeClaim:#挂载PVC                    claimName: test-pvc---apiVersion: v1kind: Servicemetadata:    name: mysqlspec:    ports:    - port: 3306    selector:        app: mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get pods -n defaultNAME      READY   STATUS    RESTARTS   AGEmysql-0   1&#x2F;1     Running   0          153m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进入数据库创建测试数据"><a href="#进入数据库创建测试数据" class="headerlink" title="进入数据库创建测试数据"></a>进入数据库创建测试数据</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl exec -it mysql-0 -n default -- bashbash-4.2# mysql -uroot -predhatmysql&gt; create database AAA;Query OK, 1 row affected (0.01 sec)mysql&gt; create database BBB;Query OK, 1 row affected (0.00 sec)mysql&gt; create database CCC;Query OK, 1 row affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看NFS共享目录"><a href="#查看NFS共享目录" class="headerlink" title="查看NFS共享目录"></a>查看<code>NFS</code>共享目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# ls &#x2F;data2auto.cnf         ib_buffer_pool  mysql               server-cert.pemca-key.pem       ibdata1         mysql.sock          server-key.pemca.pem           ib_logfile0     performance_schema  sysclient-cert.pem  ib_logfile1     private_key.pemclient-key.pem   ibtmp1          public_key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除Pod模拟故障"><a href="#删除Pod模拟故障" class="headerlink" title="删除Pod模拟故障"></a>删除<code>Pod</code>模拟故障</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl delete pod mysql-0 -n defaultpod &quot;mysql-0&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="Pod会自动创建"><a href="#Pod会自动创建" class="headerlink" title="Pod会自动创建"></a><code>Pod</code>会自动创建</h5><blockquote><p><strong>并且名字和被删除的<code>Pod</code>名字一样</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -n defaultNAME      READY   STATUS        RESTARTS   AGEmysql-0   0&#x2F;1     Terminating   0          155m[root@k8s-master ~]# kubectl get pods -n defaultNAME      READY   STATUS              RESTARTS   AGEmysql-0   0&#x2F;1     ContainerCreating   0          1s[root@k8s-master ~]# kubectl get pods -n defaultNAME      READY   STATUS    RESTARTS   AGEmysql-0   1&#x2F;1     Running   0          2s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="再次查看NFS共享目录"><a href="#再次查看NFS共享目录" class="headerlink" title="再次查看NFS共享目录"></a>再次查看<code>NFS</code>共享目录</h4><blockquote><p><strong>文件没有丢失</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# ls &#x2F;data2auto.cnf         ib_buffer_pool  mysql               server-cert.pemca-key.pem       ibdata1         mysql.sock          server-key.pemca.pem           ib_logfile0     performance_schema  sysclient-cert.pem  ib_logfile1     private_key.pemclient-key.pem   ibtmp1          public_key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="登录数据库查看库"><a href="#登录数据库查看库" class="headerlink" title="登录数据库查看库"></a>登录数据库查看库</h4><blockquote><p><strong>刚才创建的库还存在</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl exec -it mysql-0 -n default -- bashbash-4.2# mysql -uroot -predhatmysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || AAA                || BBB                || CCC                || mysql              || performance_schema || sys                |+--------------------+7 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> 有状态负载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> statefulset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes数据卷Volume管理</title>
      <link href="/2023/06/14/144/"/>
      <url>/2023/06/14/144/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes数据卷Volume管理"><a href="#【容器应用系列教程】Kubernetes数据卷Volume管理" class="headerlink" title="【容器应用系列教程】Kubernetes数据卷Volume管理"></a>【容器应用系列教程】Kubernetes数据卷Volume管理</h1><h2 id="一、关于Volume"><a href="#一、关于Volume" class="headerlink" title="一、关于Volume"></a>一、关于<code>Volume</code></h2><ul><li>用于实现数据的持久化存储 </li><li><code>Kubernetes</code>支持多种类型的卷，例如<code>EmptyDir</code>、<code>HostPath</code>、<code>nfs</code>、<code>glusterfs</code>、<code>ceph</code>等</li></ul><blockquote><p><strong>关于<code>NFS</code>搭建教程：<a href="https://www.wsjj.top/archives/62">https://www.wsjj.top/archives/62</a></strong><br><strong>关于<code>glusterFS</code>搭建教程：<a href="https://www.wsjj.top/archives/103">https://www.wsjj.top/archives/103</a></strong><br><strong>关于<code>ceph</code>搭建教程：<a href="https://www.wsjj.top/archives/105">https://www.wsjj.top/archives/105</a></strong></p></blockquote><h2 id="二、EmptyDir临时卷"><a href="#二、EmptyDir临时卷" class="headerlink" title="二、EmptyDir临时卷"></a>二、EmptyDir临时卷</h2><ul><li>创建<code>Pod</code>时，<code>Pod</code>运行的<code>node</code>节点会创建临时卷，并将卷挂载到<code>Pod</code>指定的目录中</li><li>临时卷存放目录<ul><li><code>/var/lib/kubelet/pods/&lt;pod id&gt;/volumes/kubernetes.io~empty-dir/自定义的卷名称</code></li></ul></li><li><code>Pod</code>宕机销毁后，该临时卷中的数据会随之被删除</li></ul><h3 id="1-创建基于EmptyDir临时卷的Pod"><a href="#1-创建基于EmptyDir临时卷的Pod" class="headerlink" title="1.创建基于EmptyDir临时卷的Pod"></a>1.创建基于<code>EmptyDir</code>临时卷的<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim vo-centos.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: test1    labels:        app: test1spec:    replicas: 1    selector:         matchLabels:             app: test1    template:       metadata:           labels:              app: test1       spec:           containers:           - name: test1             image: centos:7             imagePullPolicy: IfNotPresent             tty: true             volumeMounts:               - name: test1-volume#要挂载到哪个数据卷上                 mountPath: &#x2F;data#容器内部data目录           volumes:             - name: test1-volume#创个数据卷名               emptyDir: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f vo-centos.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="测试读写数据"><a href="#测试读写数据" class="headerlink" title="测试读写数据"></a>测试读写数据</h4><blockquote><p><strong>注意：创建<code>Pod</code>的时候没有指定命名空间，所以默认使用<code>default</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get podsNAME                     READY   STATUS    RESTARTS   AGEtest1-77fbb8dbbc-cnp52   1&#x2F;1     Running   0          3m36s[root@k8s-master wordpress]# kubectl exec -it test1-77fbb8dbbc-cnp52 -- bash[root@test1-77fbb8dbbc-cnp52 &#x2F;]# touch &#x2F;data&#x2F;&#123;1..10&#125;.mp3[root@test1-77fbb8dbbc-cnp52 &#x2F;]# ls &#x2F;data1.mp3  10.mp3  2.mp3  3.mp3  4.mp3  5.mp3  6.mp3  7.mp3  8.mp3  9.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Pod跑在哪个机器上"><a href="#查看Pod跑在哪个机器上" class="headerlink" title="查看Pod跑在哪个机器上"></a>查看<code>Pod</code>跑在哪个机器上</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -o wideNAME                     READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATEStest1-77fbb8dbbc-cnp52   1&#x2F;1     Running   0          5m58s   192.168.242.167   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看临时卷"><a href="#查看临时卷" class="headerlink" title="查看临时卷"></a>查看临时卷</h4><blockquote><p><strong>前往<code>node02</code>操作</strong><br><strong>可以看到，这些是我们在容器内部创建的几个测试文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node02 ~]# ls &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;0c1cbb4c-d6ce-4603-84c9-48c25c4aedc3&#x2F;volumes&#x2F;kubernetes.io~empty-dir&#x2F;test1-volume&#x2F;10.mp3  1.mp3  2.mp3  3.mp3  4.mp3  5.mp3  6.mp3  7.mp3  8.mp3  9.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除Pod"><a href="#删除Pod" class="headerlink" title="删除Pod"></a>删除<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl delete -f vo-centos.ymldeployment.apps &quot;test1&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="再次查看，发现数据自动被删掉了"><a href="#再次查看，发现数据自动被删掉了" class="headerlink" title="再次查看，发现数据自动被删掉了"></a>再次查看，发现数据自动被删掉了</h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node02 ~]# ls &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;0c1cbb4c-d6ce-4603-84c9-48c25c4aedc3&#x2F;volumes&#x2F;kubernetes.io~empty-dir&#x2F;test1-volume&#x2F;ls: 无法访问&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods&#x2F;0c1cbb4c-d6ce-4603-84c9-48c25c4aedc3&#x2F;volumes&#x2F;kubernetes.io~empty-dir&#x2F;test1-volume&#x2F;: 没有那个文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、hostPath永久卷"><a href="#三、hostPath永久卷" class="headerlink" title="三、hostPath永久卷"></a>三、hostPath永久卷</h2><ul><li>创建<code>Pod</code>时，<code>Pod</code>运行的<code>node</code>节点会在本地创建目录，并该目录挂载到<code>Pod</code>中</li><li><code>Pod</code>宕机后，宿主机对应目录中的文件不会消失</li></ul><h3 id="1-创建基于hostPath的Pod"><a href="#1-创建基于hostPath的Pod" class="headerlink" title="1.创建基于hostPath的Pod"></a>1.创建基于<code>hostPath</code>的<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim vo-centos.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: test2    labels:        app: test2spec:    replicas: 1    selector:         matchLabels:             app: test2    template:       metadata:           labels:              app: test2       spec:           containers:           - name: test2             image: centos:7             imagePullPolicy: IfNotPresent             tty: true             volumeMounts:               - name: test2-volume                 mountPath: &#x2F;data#挂载到容器内&#x2F;data目录           volumes:             - name: test2-volume               hostPath:                 path: &#x2F;test2#指定物理机上的&#x2F;test2为数据目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>kubernetes</code>有一点和<code>Docker</code>不同，当<code>Docker</code>想要通过<code>-v</code>永久挂载的话，物理机必须存在被挂载的目录，但是<code>kubernetes</code>会自动创建不存在的目录</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f vo-centos.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="进入容器测试数据永久挂载"><a href="#进入容器测试数据永久挂载" class="headerlink" title="进入容器测试数据永久挂载"></a>进入容器测试数据永久挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it test2-645897fbd8-67plx -- bash[root@test2-645897fbd8-67plx &#x2F;]# touch &#x2F;data&#x2F;&#123;1..20&#125;.jpg[root@test2-645897fbd8-67plx &#x2F;]# ls &#x2F;data1.jpg   12.jpg  15.jpg  18.jpg  20.jpg  5.jpg  8.jpg10.jpg  13.jpg  16.jpg  19.jpg  3.jpg   6.jpg  9.jpg11.jpg  14.jpg  17.jpg  2.jpg   4.jpg   7.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Pod跑在哪个node节点上"><a href="#查看Pod跑在哪个node节点上" class="headerlink" title="查看Pod跑在哪个node节点上"></a>查看<code>Pod</code>跑在哪个<code>node</code>节点上</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -o wideNAME                     READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATEStest2-645897fbd8-67plx   1&#x2F;1     Running   0          86s   192.168.242.168   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看node2节点上的test2目录"><a href="#查看node2节点上的test2目录" class="headerlink" title="查看node2节点上的test2目录"></a>查看<code>node2</code>节点上的<code>test2</code>目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node02 ~]# ls &#x2F;test210.jpg  12.jpg  14.jpg  16.jpg  18.jpg  1.jpg   2.jpg  4.jpg  6.jpg  8.jpg11.jpg  13.jpg  15.jpg  17.jpg  19.jpg  20.jpg  3.jpg  5.jpg  7.jpg  9.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="删除Pod测试"><a href="#删除Pod测试" class="headerlink" title="删除Pod测试"></a>删除<code>Pod</code>测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl delete -f vo-centos.yml deployment.apps &quot;test2&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="可以看到Pod被删了，数据还在"><a href="#可以看到Pod被删了，数据还在" class="headerlink" title="可以看到Pod被删了，数据还在"></a>可以看到<code>Pod</code>被删了，数据还在</h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node02 ~]# ls &#x2F;test210.jpg  12.jpg  14.jpg  16.jpg  18.jpg  1.jpg   2.jpg  4.jpg  6.jpg  8.jpg11.jpg  13.jpg  15.jpg  17.jpg  19.jpg  20.jpg  3.jpg  5.jpg  7.jpg  9.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、基于NFS的网络卷"><a href="#四、基于NFS的网络卷" class="headerlink" title="四、基于NFS的网络卷"></a>四、基于NFS的网络卷</h2><h3 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1.准备阶段"></a>1.准备阶段</h3><blockquote><p><strong>新开一台虚拟机作为<code>NFS</code>服务器</strong><br><strong>所有<code>k8s-node</code>节点安装<code>NFS</code>依赖，负责让<code>node</code>节点可以识别<code>NFS</code>文件系统</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node01 ~]# yum install -y nfs-utils[root@k8s-node02 ~]# yum install -y nfs-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-配置NFS服务器"><a href="#2-配置NFS服务器" class="headerlink" title="2.配置NFS服务器"></a>2.配置<code>NFS</code>服务器</h3><blockquote><p><strong>过程省略</strong><br><strong>关于<code>NFS</code>安装配置教程：<a href="https://www.wsjj.top/archives/62">https://www.wsjj.top/archives/62</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim vo-centos.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: test3    labels:        app: test3spec:    replicas: 1    selector:         matchLabels:             app: test3    template:       metadata:           labels:              app: test3       spec:           containers:           - name: test3             image: centos:7             imagePullPolicy: IfNotPresent             tty: true             volumeMounts:               - name: test3-volume#挂载自定义卷                 mountPath: &#x2F;data#挂载到容器&#x2F;data目录           volumes:             - name: test3-volume#自定义卷名               nfs:                 server: &quot;192.168.140.13&quot;#NFS服务器地址                 path: &#x2F;test3#NFS共享的路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f vo-centos.yml deployment.apps&#x2F;test3 created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="测试数据挂载"><a href="#测试数据挂载" class="headerlink" title="测试数据挂载"></a>测试数据挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it test3-68c44c86b7-25dp2 -- bash[root@test3-68c44c86b7-25dp2 &#x2F;]# touch &#x2F;data&#x2F;&#123;1..5&#125;.iso[root@test3-68c44c86b7-25dp2 &#x2F;]# ls &#x2F;data1.iso  2.iso  3.iso  4.iso  5.iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看NFS服务器上的共享目录"><a href="#查看NFS服务器上的共享目录" class="headerlink" title="查看NFS服务器上的共享目录"></a>查看<code>NFS</code>服务器上的共享目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# ls &#x2F;test31.iso  2.iso  3.iso  4.iso  5.iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>可以看到，我们的数据被存到了远程<code>NFS</code>服务器身上</strong></p></blockquote><h2 id="五、PV与PVC持久卷"><a href="#五、PV与PVC持久卷" class="headerlink" title="五、PV与PVC持久卷"></a>五、PV与PVC持久卷</h2><h3 id="1-PV和PVC的介绍"><a href="#1-PV和PVC的介绍" class="headerlink" title="1.PV和PVC的介绍"></a>1.<code>PV</code>和<code>PVC</code>的介绍</h3><ul><li><code>PV</code>全称<code>PersistentVolume</code><ul><li>用于后端真实存储空间的映射</li></ul></li><li><code>PVC</code>全称<code>PersistentVolumeClain</code><ul><li><code>Pod</code>使用存储空间的申请</li></ul></li><li>使用流程<ul><li>创建<code>PV</code>标识真实的存储空间</li><li>创建<code>PVC</code>发送申请存储空间的请求，<code>K8S</code>集群会自动在<code>PV</code>、<code>PVC</code>间建立映射关系 <ul><li>建立映射关系：<ul><li>依靠存储空间的大小 </li><li>依靠<code>PV</code>的访问模式</li></ul></li></ul></li><li>创建<code>POD</code>时绑定<code>PVC</code>，实现持久化</li></ul></li></ul><h3 id="2-准备NFS服务器"><a href="#2-准备NFS服务器" class="headerlink" title="2.准备NFS服务器"></a>2.准备<code>NFS</code>服务器</h3><blockquote><p><strong>过程省略</strong><br><strong>关于<code>NFS</code>安装配置教程：<a href="https://www.wsjj.top/archives/62">https://www.wsjj.top/archives/62</a></strong></p></blockquote><h3 id="3-创建PV"><a href="#3-创建PV" class="headerlink" title="3.创建PV"></a>3.创建<code>PV</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim pv1.ymlapiVersion: v1kind: PersistentVolumemetadata:  name: nfs-pv1spec:  capacity:    storage: 1.9G#卷大小  accessModes:#指定访问模式    - ReadWriteMany#可以被多个节点以读写模式挂载  persistentVolumeReclaimPolicy: Recycle#自动回收策略  nfs:    server: 192.168.140.13#远程NFS服务器地址    path: &#x2F;data1#NFS共享的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>accessModes：</code>用于指定PV的访问模式，共有三种 <ul><li><code>ReadWriteOnce</code>被单个节点以读写模式挂载</li><li><code>ReadWriteMany</code>被多个节点以读写模式挂载 </li><li><code>ReadOnlyMany</code>被多个节点以只读模式挂载</li></ul></li><li><code>persistentVolumeReclaimPolicy: Recycle</code><ul><li>指定回收模式是自动回收，当空间被释放时，K8S自动清理，然后可以继续被绑定使用</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim pv2.ymlapiVersion: v1kind: PersistentVolumemetadata:  name: nfs-pv2spec:  capacity:    storage: 4G  accessModes:    - ReadWriteMany  persistentVolumeReclaimPolicy: Recycle  nfs:    server: 192.168.140.13    path: &#x2F;data2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f pv1.yml persistentvolume&#x2F;nfs-pv1 created[root@k8s-master wordpress]# kubectl create -f pv2.yml persistentvolume&#x2F;nfs-pv2 created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看PV"><a href="#查看PV" class="headerlink" title="查看PV"></a>查看<code>PV</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pv -n defaultNAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGEnfs-pv1   1900M      RWX            Recycle          Available                                   6m55snfs-pv2   4G         RWX            Recycle          Available                                   91s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建PVC"><a href="#4-创建PVC" class="headerlink" title="4.创建PVC"></a>4.创建<code>PVC</code></h3><blockquote><p><strong><code>PVC</code>会自动寻找和关联符合要求的<code>PV</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim pvc.ymlapiVersion: v1kind: PersistentVolumeClaimmetadata:  name: test-pvcspec:  accessModes:    - ReadWriteMany#寻找符合多个节点以读写模式挂载条件的  resources:    requests:      storage: 4G#寻找容量4G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f pvc.yml persistentvolumeclaim&#x2F;test-pvc created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看PVC"><a href="#查看PVC" class="headerlink" title="查看PVC"></a>查看<code>PVC</code></h4><blockquote><p><strong>可以看到<code>STATUS</code>为<code>Bound</code>绑定状态，这就说明<code>PVC</code>已经找到符合条件的<code>PV</code>，并且自动绑定好了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pvc -n defaultNAME       STATUS   VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGEtest-pvc   Bound    nfs-pv2   4G         RWX                           61s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="再次查看PV"><a href="#再次查看PV" class="headerlink" title="再次查看PV"></a>再次查看<code>PV</code></h4><blockquote><p><strong>可以看到<code>nfs-pv2</code>的状态变成的<code>Bound</code>绑定状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pv -n defaultNAME      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM              STORAGECLASS   REASON   AGEnfs-pv1   1900M      RWX            Recycle          Available                                              35mnfs-pv2   4G         RWX            Recycle          Bound       default&#x2F;test-pvc                           29m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建Pod绑定PVC"><a href="#5-创建Pod绑定PVC" class="headerlink" title="5.创建Pod绑定PVC"></a>5.创建<code>Pod</code>绑定<code>PVC</code></h3><pre class="line-numbers language-none"><code class="language-none">apiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: test4#注意命名空间问题，我这里没有指定，使用默认的default，PV和PVC同样都在default命名空间内    labels:        app: test4spec:    replicas: 1    selector:         matchLabels:             app: test4    template:       metadata:           labels:              app: test4       spec:           containers:           - name: test4             image: centos:7             imagePullPolicy: IfNotPresent             tty: true             volumeMounts:               - name: test4-volume                 mountPath: &#x2F;data           volumes:             - name: test4-volume               persistentVolumeClaim:#指定为PVC的方式                    claimName: test-pvc#刚刚创建的PVC的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f vo-centos.yml deployment.apps&#x2F;test4 created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="进入容器测试数据"><a href="#进入容器测试数据" class="headerlink" title="进入容器测试数据"></a>进入容器测试数据</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it test4-75b7f4458d-swjcs -- bash[root@test4-75b7f4458d-swjcs &#x2F;]# touch &#x2F;data&#x2F;&#123;1..10&#125;.pdf[root@test4-75b7f4458d-swjcs &#x2F;]# touch &#x2F;data&#x2F;&#123;1..10&#125;.mp4[root@test4-75b7f4458d-swjcs &#x2F;]# ls &#x2F;data1.mp4  10.mp4  2.mp4  3.mp4  4.mp4  5.mp4  6.mp4  7.mp4  8.mp4  9.mp41.pdf  10.pdf  2.pdf  3.pdf  4.pdf  5.pdf  6.pdf  7.pdf  8.pdf  9.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看NFS服务器上是否有数据"><a href="#查看NFS服务器上是否有数据" class="headerlink" title="查看NFS服务器上是否有数据"></a>查看<code>NFS</code>服务器上是否有数据</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-nfs ~]# ls &#x2F;data210.mp4  1.mp4  2.mp4  3.mp4  4.mp4  5.mp4  6.mp4  7.mp4  8.mp4  9.mp410.pdf  1.pdf  2.pdf  3.pdf  4.pdf  5.pdf  6.pdf  7.pdf  8.pdf  9.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> 数据卷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> volume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes服务管理Service</title>
      <link href="/2023/06/13/143/"/>
      <url>/2023/06/13/143/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes服务管理Service"><a href="#【容器应用系列教程】Kubernetes服务管理Service" class="headerlink" title="【容器应用系列教程】Kubernetes服务管理Service"></a>【容器应用系列教程】Kubernetes服务管理Service</h1><h2 id="一、关于Service"><a href="#一、关于Service" class="headerlink" title="一、关于Service"></a>一、关于<code>Service</code></h2><ul><li>业务的访问入口</li><li>负载均衡功能</li><li>服务名称<ul><li>命名格式：<code>服务名称.命名空间.svc.cluster.local</code></li><li>例子：<code>wordpress.default.svc.cluster.local</code></li></ul></li><li>依赖于<code>coreDNS</code>组件<ul><li>服务发现<ul><li>创建服务时，会自动在<code>coreDNS</code>中注册名称、IP的解析关系</li><li>创建<code>pod</code>时，<code>pod</code>会自动使用<code>DNS</code>解析对应的服务名称</li></ul></li></ul></li><li><code>Service</code>服务、<code>POD</code>依赖于标签选择器建立对应关系</li></ul><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes06.png" alt="kubernetes06"></p><h3 id="查看刚创建Kubernetes自带的2个默认的Service"><a href="#查看刚创建Kubernetes自带的2个默认的Service" class="headerlink" title="查看刚创建Kubernetes自带的2个默认的Service"></a>查看刚创建<code>Kubernetes</code>自带的<code>2</code>个默认的<code>Service</code></h3><blockquote><p><strong><code>svc</code>为<code>service</code>的简写</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get svc -n defaultNAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGEkubernetes   ClusterIP   172.16.0.1   &lt;none&gt;        443&#x2F;TCP   4d3h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get svc -n kube-systemNAME       TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                  AGEkube-dns   ClusterIP   172.16.0.10   &lt;none&gt;        53&#x2F;UDP,53&#x2F;TCP,9153&#x2F;TCP   4d3h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、Service的类型"><a href="#二、Service的类型" class="headerlink" title="二、Service的类型"></a>二、<code>Service</code>的类型</h2><ul><li><code>ClusterIP</code><ul><li>仅在集群内部可以被访问</li></ul></li><li><code>NodePort</code><ul><li>将服务发布到物理机</li></ul></li><li><code>LoadBalance</code><ul><li>适用于公有云场景</li></ul></li></ul><h2 id="三、ClusterIP类型"><a href="#三、ClusterIP类型" class="headerlink" title="三、ClusterIP类型"></a>三、<code>ClusterIP</code>类型</h2><ul><li>有<code>clusterIP</code>的服务<ul><li>集群内部服务<code>A</code>访问服务<code>B</code>时，<code>DNS</code>组件会将其解析到服务<code>B</code>对应的<code>IP</code>上</li></ul></li><li>无<code>clusterIP</code>的服务<ul><li>集群内部服务<code>A</code>访问服务<code>B</code>时，由于服务<code>B</code>没有<code>IP</code>，<code>DNS</code>会直接解析到对应的<code>Pod</code>地址上</li><li>缺点<ul><li>由于直接解析到<code>Pod</code>上，失去了<code>kube-proxy</code>提供的负载均衡，在该<code>Pod</code>宕机时，会导致服务无法正常访问</li></ul></li></ul></li></ul><h3 id="1-创建一个有ClusterIP的服务"><a href="#1-创建一个有ClusterIP的服务" class="headerlink" title="1.创建一个有ClusterIP的服务"></a>1.创建一个有<code>ClusterIP</code>的服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim nginx.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: nginx    namespace: wordpressspec:    replicas: 2    selector:        matchLabels:            app: nginx    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 1    template:        metadata:            labels:                app: nginx        spec:            containers:            - name: nginx              image: nginx:latest              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80---#创建不同的服务，可以使用分隔符隔开apiVersion: v1kind: Servicemetadata:    name: nginx    namespace: wordpressspec:    ports:    - port: 80    selector:      app: nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f .&#x2F;nginx.ymldeployment.apps&#x2F;nginx createdservice&#x2F;nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看servive和Pod"><a href="#查看servive和Pod" class="headerlink" title="查看servive和Pod"></a>查看<code>servive</code>和<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get svc -n wordpressNAME    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGEnginx   ClusterIP   172.16.14.75   &lt;none&gt;        80&#x2F;TCP    16s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpress -o wideNAME                     READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATESnginx-75b69bd684-2dwkk   1&#x2F;1     Running   0          2m40s   192.168.242.153   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;nginx-75b69bd684-8fp7t   1&#x2F;1     Running   0          2m40s   192.168.201.216   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建测试容器"><a href="#创建测试容器" class="headerlink" title="创建测试容器"></a>创建测试容器</h4><blockquote><p><code>clusterIP</code>模式的<code>service</code>只能集群内部进行访问</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim centos.ymlapiVersion: v1kind: Podmetadata:    name: centos    namespace: wordpressspec:    containers:    - name: centos      image: centos:7      imagePullPolicy: IfNotPresent      tty: true      resources:            requests:                memory: &quot;1G&quot;                cpu: &quot;500m&quot;            limits:                memory: &quot;2G&quot;                cpu: &quot;1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f centos.ymlpod&#x2F;centos created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><blockquote><p><strong>注意，短域名只能在同<code>namespace</code>下适用，如果<code>service</code>和<code>pod</code>不在同一个<code>namesapce</code>那么只能使用全域名访问</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it centos -n wordpress -- bash[root@centos &#x2F;]# curl nginx&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;&#x2F;title&gt;[root@centos &#x2F;]# curl nginx.wordpress.svc.cluster.local&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;&#x2F;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建一个无clusterIP的服务"><a href="#2-创建一个无clusterIP的服务" class="headerlink" title="2.创建一个无clusterIP的服务"></a>2.创建一个无<code>clusterIP</code>的服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim nginx.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: nginx    namespace: wordpressspec:    replicas: 2    selector:        matchLabels:            app: nginx    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 1    template:        metadata:            labels:                app: nginx        spec:            containers:            - name: nginx              image: nginx:latest              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80---apiVersion: v1kind: Servicemetadata:    name: nginx    namespace: wordpressspec:    clusterIP: None#指定无IP    ports:    - port: 80    selector:      app: nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f nginx.yml deployment.apps&#x2F;nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看service和Pod"><a href="#查看service和Pod" class="headerlink" title="查看service和Pod"></a>查看<code>service</code>和<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get svc -n wordpressNAME    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGEnginx   ClusterIP   None         &lt;none&gt;        80&#x2F;TCP    79s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pod -n wordpress -o wideNAME                     READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATEScentos                   1&#x2F;1     Running   0          12m     192.168.242.154   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;nginx-75b69bd684-gdp9b   1&#x2F;1     Running   0          3m55s   192.168.201.217   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;nginx-75b69bd684-htvbh   1&#x2F;1     Running   0          3m55s   192.168.201.218   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h4><blockquote><p><strong>可以看到<code>DNS</code>解析的<code>IP</code>是<code>Pod</code>上面的<code>IP</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it centos -n wordpress -- bash[root@centos &#x2F;]# ping nginx.wordpress.svc.cluster.localPING nginx.wordpress.svc.cluster.local (192.168.201.217) 56(84) bytes of data.64 bytes from 192-168-201-217.nginx.wordpress.svc.cluster.local (192.168.201.217): icmp_seq&#x3D;1 ttl&#x3D;62 time&#x3D;0.231 ms64 bytes from 192-168-201-217.nginx.wordpress.svc.cluster.local (192.168.201.217): icmp_seq&#x3D;2 ttl&#x3D;62 time&#x3D;0.238 ms[root@centos &#x2F;]# curl nginx.wordpress.svc.cluster.local&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;&#x2F;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、NodePort类型"><a href="#四、NodePort类型" class="headerlink" title="四、NodePort类型"></a>四、<code>NodePort</code>类型</h2><blockquote><p><strong>该类型的服务会将服务端口暴露在物理机上，可以借助物理机直接访问</strong></p></blockquote><h3 id="1-创建NodePort"><a href="#1-创建NodePort" class="headerlink" title="1.创建NodePort"></a>1.创建<code>NodePort</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim nginx.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: nginx    namespace: wordpressspec:    replicas: 2    selector:        matchLabels:            app: nginx    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 1    template:        metadata:            labels:                app: nginx        spec:            containers:            - name: nginx              image: nginx:latest              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80---apiVersion: v1kind: Servicemetadata:    name: nginx    namespace: wordpressspec:    type: NodePort#类型NodePort    ports:    - port: 80      nodePort: 30002#端口范围在30000-32767    selector:      app: nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f nginx.ymldeployment.apps&#x2F;nginx createdservice&#x2F;nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Pod运行在哪个node上"><a href="#查看Pod运行在哪个node上" class="headerlink" title="查看Pod运行在哪个node上"></a>查看<code>Pod</code>运行在哪个<code>node</code>上</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpress -o wideNAME                     READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATESnginx-75b69bd684-jls9n   1&#x2F;1     Running   0          2m30s   192.168.201.219   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;nginx-75b69bd684-lphpv   1&#x2F;1     Running   0          2m30s   192.168.242.155   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Service"><a href="#查看Service" class="headerlink" title="查看Service"></a>查看<code>Service</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get svc -n wordpressNAME    TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGEnginx   NodePort   172.16.125.146   &lt;none&gt;        80:30002&#x2F;TCP   3m19s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="物理机访问测试"><a href="#物理机访问测试" class="headerlink" title="物理机访问测试"></a>物理机访问测试</h4><blockquote><p><strong>这里填写是物理机的<code>IP</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes07.png" alt="kubernetes07"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes08.png" alt="kubernetes08"></p><h3 id="2-实验"><a href="#2-实验" class="headerlink" title="2.实验"></a>2.实验</h3><h3 id="使用Kubernetes部署Wordpress"><a href="#使用Kubernetes部署Wordpress" class="headerlink" title="使用Kubernetes部署Wordpress"></a>使用<code>Kubernetes</code>部署<code>Wordpress</code></h3><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create ns wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="编写数据库yml"><a href="#编写数据库yml" class="headerlink" title="编写数据库yml"></a>编写数据库<code>yml</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wp-mysql.ymlapiVersion: apps&#x2F;v1kind: Deployment#类型metadata:    name: wp-mysql    namespace: wordpress#加入到wordpress命名空间spec:    replicas: 1#1个副本集    selector:        matchLabels:            app: wp-mysql#此处标签应该和下面你的容器标签对应    strategy:#滚动更新策略        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 0    template:#容器的标签        metadata:            labels:                app: wp-mysql        spec:            containers:            - name: wp-mysql              image: mysql:5.7              imagePullPolicy: IfNotPresent              ports:              - containerPort: 3306              env:#传递变量              - name: MYSQL_ROOT_PASSWORD                value: &quot;WWW.1.com&quot;#设置root用户密码              resources:#资源限制                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;---apiVersion: v1kind: Servicemetadata:    name: wp-mysql    namespace: wordpress#加入到wordpress命名标签spec:    ports:    - port: 3306    selector:      app: wp-mysql#此处标签对应上面容器的标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wp-mysql.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pod -n wordpressNAME                       READY   STATUS    RESTARTS   AGEwp-mysql-cbcd75979-2dxkm   1&#x2F;1     Running   0          3m36s[root@k8s-master wordpress]# kubectl get svc -n wordpressNAME       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGEwp-mysql   ClusterIP   172.16.166.18   &lt;none&gt;        3306&#x2F;TCP   4m9s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建wordpress用到的库和用户"><a href="#创建wordpress用到的库和用户" class="headerlink" title="创建wordpress用到的库和用户"></a>创建<code>wordpress</code>用到的库和用户</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it wp-mysql-cbcd75979-2dxkm -n wordpress -- bashbash-4.2# mysql -uroot -pWWW.1.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database wordpress charset utf8mb4;Query OK, 1 row affected (0.00 sec)mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编辑wordpress的yml文件"><a href="#编辑wordpress的yml文件" class="headerlink" title="编辑wordpress的yml文件"></a>编辑<code>wordpress</code>的<code>yml</code>文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wordpress.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: wordpress    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wordpress    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 0    template:        metadata:            labels:                app: wordpress        spec:            containers:            - name: wordpress              image: wordpress              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80              env:              - name: WORDPRESS_DB_HOST                value: wp-mysql#此处数据库地址为cronDNS解析地址，也可以是全名，wp-mysql.wordpress.svc.cluster.local              - name: WORDPRESS_DB_USER                value: wordpress                - name: WORDPRESS_DB_PASSWORD                value: WWW.1.com              - name: WORDPRESS_DB_NAME                value: wordpress               - name: WORDPRESS_TABLE_PREFIX                value: wp_              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;---apiVersion: v1kind: Servicemetadata:    name: wordpress    namespace: wordpressspec:    type: NodePort    ports:    - port: 80      nodePort: 30005    selector:      app: wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wordpress.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pod -n wordpress -o wideNAME                         READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATESwordpress-657f59cdf5-82f7v   1&#x2F;1     Running   0          2m42s   192.168.201.221   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;wp-mysql-cbcd75979-2dxkm     1&#x2F;1     Running   0          16m     192.168.242.156   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;[root@k8s-master wordpress]# kubectl get svc -n wordpressNAME        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGEwordpress   NodePort    172.16.200.34   &lt;none&gt;        3306:30005&#x2F;TCP   2m16swp-mysql    ClusterIP   172.16.166.18   &lt;none&gt;        3306&#x2F;TCP         16m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes09.png" alt="kubernetes09"></p><blockquote><p><strong>后面安装配置过程省略</strong></p></blockquote><h2 id="五、Ingress发布服务"><a href="#五、Ingress发布服务" class="headerlink" title="五、Ingress发布服务"></a>五、Ingress发布服务</h2><h3 id="1-关于Ingress"><a href="#1-关于Ingress" class="headerlink" title="1.关于Ingress"></a>1.关于<code>Ingress</code></h3><ul><li>之前在<code>k8s</code>集群内部对外暴露服务的方式用的是<code>nodePort</code>，但采用<code>NodePort</code>方式暴露服务面临问题是，服务一旦多起来，<code>NodePort</code>在每个节点上开启的端口会及其庞大，而且难以维护</li><li>因此，后续出现了一种新的方式，称为<code>ingress</code>；<code>ingress</code>类似于<code>coreDNS</code>是作为<code>k8s</code>的插件存在的，借助<code>ingress</code>一样可对外暴露服务</li><li>基于<code>ingress</code>暴露服务时，类似于七层调度，对外可提供一个主机名，将不同的服务以不同的端口方式映射到该主机名上，客户端直接通过主机名进行访问</li></ul><h3 id="2-Ingress核心组件"><a href="#2-Ingress核心组件" class="headerlink" title="2.Ingress核心组件"></a>2.<code>Ingress</code>核心组件</h3><ul><li><code>ingress</code><ul><li>一种资源对象，用于描述服务规则</li></ul></li><li><code>ingress-controller</code><ul><li><code>Ingress Controller</code>通过与<code>Kubernetes API</code>交互，动态的去感知集群中<code>Ingress</code>规则变化，然后读取他，按照他自己模板生成一段<code>Nginx</code>配置，再写到<code>Nginx Pod</code>里，最后<code>reload</code>一下</li></ul></li></ul><h3 id="3-Ingress服务名访问实现方式"><a href="#3-Ingress服务名访问实现方式" class="headerlink" title="3.Ingress服务名访问实现方式"></a>3.<code>Ingress</code>服务名访问实现方式</h3><ul><li><code>nginx</code></li><li><code>haproxy</code></li><li><code>traefik</code></li></ul><h3 id="4-Ingress-nginx部署"><a href="#4-Ingress-nginx部署" class="headerlink" title="4.Ingress-nginx部署"></a>4.<code>Ingress-nginx</code>部署</h3><h4 id="A-准备Ingress-nginx的yaml文件"><a href="#A-准备Ingress-nginx的yaml文件" class="headerlink" title="A.准备Ingress-nginx的yaml文件"></a>A.准备<code>Ingress-nginx</code>的<code>yaml</code>文件</h4><blockquote><p><strong>可以前往<code>Github</code>仓库地址下载想要的版本：<a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx</a></strong><br><strong>或者使用我这里准备好的<code>yaml</code>文件：<a href="https://pan.baidu.com/s/1l9cF-AShYicLk1arwVboEw?pwd=jge3">https://pan.baidu.com/s/1l9cF-AShYicLk1arwVboEw?pwd=jge3</a></strong><br><strong>由于本人使用的<code>kubernetes</code>版本是<code>1.20.7</code>所以使用<code>ingress-nginx_v1.3.1</code>版本</strong></p></blockquote><h4 id="B-修改igress-nginx-yml文件"><a href="#B-修改igress-nginx-yml文件" class="headerlink" title="B.修改igress-nginx.yml文件"></a>B.修改<code>igress-nginx.yml</code>文件</h4><blockquote><p><strong>如果使用的是我提供的<code>yml</code>文件，可以不做修改</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#添加配置Pod网络模式为host416行 hostNetwork: true#修改镜像下载地址为国内地址439行 image: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;nginx-ingress-controller:v1.3.1536行 image: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-webhook-certgen:v1.3.0585行 image: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;kube-webhook-certgen:v1.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C、部署Ingress-nginx-v1-3-1"><a href="#C、部署Ingress-nginx-v1-3-1" class="headerlink" title="C、部署Ingress-nginx_v1.3.1"></a>C、部署<code>Ingress-nginx_v1.3.1</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f .&#x2F;ingress-nginx-deploy_v1.3.1.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pod -n ingress-nginxNAME                                        READY   STATUS      RESTARTS   AGEingress-nginx-admission-create-h2mpq        0&#x2F;1     Completed   0          153mingress-nginx-admission-patch-2v2vc         0&#x2F;1     Completed   1          153mingress-nginx-controller-64ff7cd7cf-58qkl   1&#x2F;1     Running     0          153m[root@k8s-master wordpress]# kubectl get svc -n ingress-nginxNAME                                 TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGEingress-nginx-controller             LoadBalancer   172.16.100.79   &lt;pending&gt;     80:32754&#x2F;TCP,443:31928&#x2F;TCP   153mingress-nginx-controller-admission   ClusterIP      172.16.18.128   &lt;none&gt;        443&#x2F;TCP                      153m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-准备Pod"><a href="#D-准备Pod" class="headerlink" title="D.准备Pod"></a>D.准备<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim nginx.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: nginx    namespace: wordpressspec:    replicas: 2    selector:        matchLabels:            app: nginx    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 1    template:        metadata:            labels:                app: nginx        spec:            containers:            - name: nginx              image: nginx:latest              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80---apiVersion: v1kind: Servicemetadata:    name: nginx    namespace: wordpressspec:#创建一个clusterIP类型    ports:    - port: 80    selector:      app: nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f nginx.yml deployment.apps&#x2F;nginx createdservice&#x2F;nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="E-准备ingress"><a href="#E-准备ingress" class="headerlink" title="E.准备ingress"></a>E.准备<code>ingress</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim ingress.ymlapiVersion: extensions&#x2F;v1beta1kind: Ingressmetadata:  name: ingress-wp  namespace: wordpress#命名空间  annotations:#注释说明信息    kubernetes.io&#x2F;ingress.class: &quot;nginx&quot;spec:  rules:  - host: ng.linux.com    http:      paths:      - path:        backend:          serviceName: nginx#对应的svc服务名          servicePort: 80#svc服务对应的端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f ingress.ymlWarning: extensions&#x2F;v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io&#x2F;v1 Ingressingress.extensions&#x2F;ingress-wp created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-访问测试"><a href="#F-访问测试" class="headerlink" title="F.访问测试"></a>F.访问测试</h4><h5 id="查看ingress"><a href="#查看ingress" class="headerlink" title="查看ingress"></a>查看<code>ingress</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get ingress -n wordpressNAME         CLASS    HOSTS          ADDRESS   PORTS   AGEingress-wp   &lt;none&gt;   ng.linux.com             80      54s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看controller跑在哪个物理机上"><a href="#查看controller跑在哪个物理机上" class="headerlink" title="查看controller跑在哪个物理机上"></a>查看<code>controller</code>跑在哪个物理机上</h5><blockquote><p><strong>我这里跑在<code>node1</code>上</strong><br><strong><code>controller</code>运行在哪个服务器上，决定我们的解析地址在哪里</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n ingress-nginx -o wideNAME                                        READY   STATUS      RESTARTS   AGE    IP                NODE                   NOMINATED NODE   READINESS GATESingress-nginx-admission-create-h2mpq        0&#x2F;1     Completed   0          172m   192.168.242.159   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;ingress-nginx-admission-patch-2v2vc         0&#x2F;1     Completed   1          172m   192.168.201.225   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;ingress-nginx-controller-64ff7cd7cf-58qkl   1&#x2F;1     Running     0          172m   192.168.140.11    k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h5><blockquote><p><strong>路径：<code>C:\Windows\System32\drivers\etc\hosts</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes10.png" alt="kubernetes10"></p><h5 id="访问测试-2"><a href="#访问测试-2" class="headerlink" title="访问测试"></a>访问测试</h5><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes11.png" alt="kubernetes11"></p><h3 id="5-实验：使用Ingress-nginx发布wordpress"><a href="#5-实验：使用Ingress-nginx发布wordpress" class="headerlink" title="5.实验：使用Ingress-nginx发布wordpress"></a>5.实验：使用<code>Ingress-nginx</code>发布<code>wordpress</code></h3><h4 id="A-创建命名空间"><a href="#A-创建命名空间" class="headerlink" title="A.创建命名空间"></a>A.创建命名空间</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create ns wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-创建Mysql容器"><a href="#B-创建Mysql容器" class="headerlink" title="B.创建Mysql容器"></a>B.创建<code>Mysql</code>容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wp-mysql.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: wp-mysql    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wp-mysql    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 0    template:        metadata:            labels:                app: wp-mysql        spec:            containers:            - name: wp-mysql              image: mysql:5.7              imagePullPolicy: IfNotPresent              ports:              - containerPort: 3306              env:              - name: MYSQL_ROOT_PASSWORD                value: &quot;WWW.1.com&quot;              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;---apiVersion: v1kind: Servicemetadata:    name: wp-mysql    namespace: wordpressspec:    ports:    - port: 3306    selector:      app: wp-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wp-mysql.yml deployment.apps&#x2F;wp-mysql createdservice&#x2F;wp-mysql created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-创建wordpress用到的库和用户"><a href="#C-创建wordpress用到的库和用户" class="headerlink" title="C.创建wordpress用到的库和用户"></a>C.创建<code>wordpress</code>用到的库和用户</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl -it exec wp-mysql-cbcd75979-tfk9r -n wordpress -- bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt; create database wordpress charset utf8mb4;Query OK, 1 row affected (0.00 sec)mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;%&#39; identified by &#39;redhat&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-创建Wordpress容器"><a href="#D-创建Wordpress容器" class="headerlink" title="D.创建Wordpress容器"></a>D.创建<code>Wordpress</code>容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim wordpress.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: wordpress    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:            app: wordpress    strategy:        type: RollingUpdate        rollingUpdate:            maxSurge: 1            maxUnavailable: 0    template:        metadata:            labels:                app: wordpress        spec:            containers:            - name: wordpress              image: wordpress              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80              env:              - name: WORDPRESS_DB_HOST                value: wp-mysql              - name: WORDPRESS_DB_USER                value: wordpress                - name: WORDPRESS_DB_PASSWORD                value: redhat              - name: WORDPRESS_DB_NAME                value: wordpress               - name: WORDPRESS_TABLE_PREFIX                value: wp_              resources:                requests:                  memory: &quot;1G&quot;                  cpu: &quot;1&quot;                limits:                  memory: &quot;2G&quot;                  cpu: &quot;2&quot;---apiVersion: v1kind: Servicemetadata:    name: wordpress    namespace: wordpressspec:#注意服务类型为clusterIP    ports:    - port: 80    selector:      app: wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f wordpress.yml deployment.apps&#x2F;wordpress createdservice&#x2F;wordpress created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get svc -n wordpressNAME        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGEwordpress   ClusterIP   172.16.67.252   &lt;none&gt;        80&#x2F;TCP     88swp-mysql    ClusterIP   172.16.192.50   &lt;none&gt;        3306&#x2F;TCP   9m23s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-创建Ingress服务"><a href="#E-创建Ingress服务" class="headerlink" title="E.创建Ingress服务"></a>E.创建<code>Ingress</code>服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim ingress.ymlapiVersion: extensions&#x2F;v1beta1kind: Ingress metadata:  name: ingress-wp  namespace: wordpress#指定命名空间  annotations:    kubernetes.io&#x2F;ingress.class: &quot;nginx&quot;spec:  rules:   - host: wp.linux.com#自定义访问域名    http:      paths:       - path:          backend:           serviceName: wordpress#此处服务名，应该对应wordpress的服务名字          servicePort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f ingress.yml Warning: extensions&#x2F;v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io&#x2F;v1 Ingressingress.extensions&#x2F;ingress-wp created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看Ingress"><a href="#查看Ingress" class="headerlink" title="查看Ingress"></a>查看<code>Ingress</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get ingress -n wordpressNAME         CLASS    HOSTS          ADDRESS   PORTS   AGEingress-wp   &lt;none&gt;   wp.linux.com             80      46s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看controller容器在哪台实体机上"><a href="#查看controller容器在哪台实体机上" class="headerlink" title="查看controller容器在哪台实体机上"></a>查看<code>controller</code>容器在哪台实体机上</h5><blockquote><p><strong><code>controller</code>跑在哪台机器上，决定我们解析地址在哪里</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pod -n ingress-nginx -o wideNAME                                        READY   STATUS      RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATESingress-nginx-admission-create-h2mpq        0&#x2F;1     Completed   0          10h   192.168.242.159   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;ingress-nginx-admission-patch-2v2vc         0&#x2F;1     Completed   1          10h   192.168.201.225   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;ingress-nginx-controller-64ff7cd7cf-58qkl   1&#x2F;1     Running     0          10h   192.168.140.11    k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-修改host文件"><a href="#F-修改host文件" class="headerlink" title="F.修改host文件"></a>F.修改<code>host</code>文件</h4><blockquote><p><strong>路径：<code>C:\Windows\System32\drivers\etc\hosts</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes12.png" alt="kubernetes12"></p><h4 id="G-浏览器访问测试"><a href="#G-浏览器访问测试" class="headerlink" title="G.浏览器访问测试"></a>G.浏览器访问测试</h4><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes13.png" alt="kubernetes13"></p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> wordpress </category>
          
          <category> 容器 </category>
          
          <category> 应用 </category>
          
          <category> 服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes的Job管理</title>
      <link href="/2023/06/13/142/"/>
      <url>/2023/06/13/142/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes的Job管理"><a href="#【容器应用系列教程】Kubernetes的Job管理" class="headerlink" title="【容器应用系列教程】Kubernetes的Job管理"></a>【容器应用系列教程】Kubernetes的Job管理</h1><h2 id="一、Job的分类"><a href="#一、Job的分类" class="headerlink" title="一、Job的分类"></a>一、Job的分类</h2><ul><li><code>job</code><ul><li>类似于一次性任务，创建<code>Pod</code>临时运行一次任务，任务完成后<code>Pod</code>为<code>complete</code>状态</li><li>应用场景：适用于运行测试的任务</li></ul></li><li><code>cronJob</code><ul><li>类似于周期性计划任务，创建<code>Pod</code>以周期性运行某个任务，例如数据库备份等 </li><li>通过和系统一样的<code>crontab</code>时间进行任务调度</li></ul></li></ul><h2 id="二、Job"><a href="#二、Job" class="headerlink" title="二、Job"></a>二、<code>Job</code></h2><h3 id="1-创建Job"><a href="#1-创建Job" class="headerlink" title="1.创建Job"></a>1.创建<code>Job</code></h3><blockquote><p><strong>注意：<code>Job</code>资源创建时，<code>restartPolicy</code>只支持<code>Never</code>、<code>OnFailure</code>，不支持<code>Always</code>避免进入死循环</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# vim job.ymlapiVersion: batch&#x2F;v1kind: Jobmetadata:    name: test-job    namespace: wordpressspec:    template:      metadata:        name: test-job      spec:        restartPolicy: Never        containers:        - name: test-job          image: centos:7          imagePullPolicy: IfNotPresent          command:          - &quot;&#x2F;bin&#x2F;bash&quot;          - &quot;-c&quot;          - &quot;for i in 1 2 3 4; do echo $i; done&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl create -f job.yml job.batch&#x2F;test-job created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看Pod日志"><a href="#查看Pod日志" class="headerlink" title="查看Pod日志"></a>查看<code>Pod</code>日志</h4><blockquote><p><strong>循环正常执行</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl logs test-job-s7m2h -n wordpress1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Pod状态"><a href="#查看Pod状态" class="headerlink" title="查看Pod状态"></a>查看<code>Pod</code>状态</h4><blockquote><p><strong>可以看到<code>Pod</code>处于<code>Completed</code>状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get pod -n wordpressNAME             READY   STATUS      RESTARTS   AGEtest-job-s7m2h   0&#x2F;1     Completed   0          3s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、cronJob"><a href="#三、cronJob" class="headerlink" title="三、cronJob"></a>三、<code>cronJob</code></h2><ul><li>类似于周期性计划任务，创建<code>Pod</code>以周期性运行某个任务，例如数据库备份等 </li><li>通过和系统一样的<code>crontab</code>时间进行任务调度</li></ul><h3 id="1-创建cronJob资源"><a href="#1-创建cronJob资源" class="headerlink" title="1.创建cronJob资源"></a>1.创建<code>cronJob</code>资源</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# cat cronjob.ymlapiVersion: batch&#x2F;v1beta1kind: CronJobmetadata:  name: test-cronjob  namespace: wordpressspec:  successfulJobsHistoryLimit: 3#最多存在3个  failedJobsHistoryLimit: 2#最多允许创建失败2个  schedule: &quot;*&#x2F;1 * * * *&quot;#每1分钟执行一次  jobTemplate:    spec:      template:        metadata:          name: test-cronjob        spec:          restartPolicy: OnFailure#重启策略为，容器异常退出的时候，触发重启          containers:          - name: test-cronjob            image: centos:7            imagePullPolicy: IfNotPresent            command:            - &quot;&#x2F;bin&#x2F;sh&quot;            - &quot;-c&quot;            - &quot;for i in 9 8 7 6 5; do echo $i; done&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>successfulJobsHistoryLimit</code><ul><li>设置最多记录执行成功的次数</li><li><code>0</code>表示不记录</li><li>默认会记录成功的所有，避免数量过多，建议设置该值</li></ul></li><li><code>failedJobsHistoryLimit</code><ul><li>设置最多记录失败的次数</li><li><code>0</code>表示不记录</li><li>默认会记录失败的所有，避免数量过多，建议设置该值</li></ul></li></ul><h3 id="2-查看cronJob"><a href="#2-查看cronJob" class="headerlink" title="2.查看cronJob"></a>2.查看<code>cronJob</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get cronjob -n wordpressNAME           SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGEtest-cronjob   *&#x2F;1 * * * *   False     0        53s             5m47s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-查看Pod"><a href="#3-查看Pod" class="headerlink" title="3.查看Pod"></a>3.查看<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get pod -n wordpressNAME                            READY   STATUS      RESTARTS   AGEtest-cronjob-1686655500-fxngl   0&#x2F;1     Completed   0          2m52stest-cronjob-1686655560-4cq5n   0&#x2F;1     Completed   0          111stest-cronjob-1686655620-fg8kb   0&#x2F;1     Completed   0          51s[root@k8s-master opt]# kubectl logs test-cronjob-1686655560-4cq5n -n wordpress98765<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="每隔1分钟就创建一个，最多存在3个"><a href="#每隔1分钟就创建一个，最多存在3个" class="headerlink" title="每隔1分钟就创建一个，最多存在3个"></a>每隔1分钟就创建一个，最多存在3个</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get pod -n wordpressNAME                            READY   STATUS              RESTARTS   AGEtest-cronjob-1686655560-4cq5n   0&#x2F;1     Completed           0          3m1stest-cronjob-1686655620-fg8kb   0&#x2F;1     Completed           0          2m1stest-cronjob-1686655680-56tdd   0&#x2F;1     Completed           0          61stest-cronjob-1686655740-c88ln   0&#x2F;1     ContainerCreating   0          1s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master opt]# kubectl get pod -n wordpressNAME                            READY   STATUS      RESTARTS   AGEtest-cronjob-1686655620-fg8kb   0&#x2F;1     Completed   0          2m12stest-cronjob-1686655680-56tdd   0&#x2F;1     Completed   0          72stest-cronjob-1686655740-c88ln   0&#x2F;1     Completed   0          12s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> Job </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】kubernetes无状态负载deployment</title>
      <link href="/2023/06/12/141/"/>
      <url>/2023/06/12/141/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】kubernetes无状态负载集deployment"><a href="#【容器应用系列教程】kubernetes无状态负载集deployment" class="headerlink" title="【容器应用系列教程】kubernetes无状态负载集deployment"></a>【容器应用系列教程】kubernetes无状态负载集deployment</h1><h2 id="一、关于deployment无状态负载集介绍"><a href="#一、关于deployment无状态负载集介绍" class="headerlink" title="一、关于deployment无状态负载集介绍"></a>一、关于deployment无状态负载集介绍</h2><ul><li>实际使用时，不建议直接创建<code>Pod</code></li><li><code>deployment</code>创建流程<ul><li><code>deployement</code> —&gt; <code>RS</code>(副本集) —-&gt;<code>Pod</code></li></ul></li><li><code>deployment</code>优势<ul><li>自动维护<code>Pod</code>的副本</li><li>支持滚动更新</li></ul></li><li><strong>适用场景：频繁更新的业务</strong></li><li>标签选择器(重要)<ul><li>每种资源都会有对应的标签，标签的实际体现是键值对的数据 </li><li>利用标签在<code>RS</code>副本集、<code>POD</code>之间映射关系</li></ul></li></ul><h2 id="二、创建deployment"><a href="#二、创建deployment" class="headerlink" title="二、创建deployment"></a>二、创建<code>deployment</code></h2><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim nginx.yml apiVersion: apps&#x2F;v1kind: Deployment#资源类型为Deploymentmetadata:    name: nginx    namespace: wordpressspec:    replicas: 4#创建4个副本集    selector:        matchLabels:            app: nginx#对应的标签，以键值对的方式，此处应与下面的标签保持一致    template:        metadata:            labels:                app: nginx#创建一个对应的标签，用于上面replicas控制副本集        spec:            containers:            - name: nginx              image: nginx:1.20              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f nginx.yml deployment.apps&#x2F;nginx created[root@k8s-master wordpress]# kubectl get pod -n wordpressNAME                     READY   STATUS    RESTARTS   AGEnginx-6897679c4b-gbpkq   1&#x2F;1     Running   0          9snginx-6897679c4b-szbkr   1&#x2F;1     Running   0          9snginx-6897679c4b-vlqhj   1&#x2F;1     Running   0          9snginx-6897679c4b-wckrb   1&#x2F;1     Running   0          9s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看所有无状态负载创建的容器"><a href="#2-查看所有无状态负载创建的容器" class="headerlink" title="2.查看所有无状态负载创建的容器"></a>2.查看所有无状态负载创建的容器</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get deploy -n wordpressNAME    READY   UP-TO-DATE   AVAILABLE   AGEnginx   4&#x2F;4     4            4           53s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>READY</code>显示可用且就绪的副本数</li><li><code>UP-TO-DATE</code>显示已更新到最新版本的副本数</li><li><code>AVAILABLE</code>表示可用于处理请求的副本数</li><li><code>AGE</code>表示部署的运行时间</li></ul><h3 id="3-查看副本数"><a href="#3-查看副本数" class="headerlink" title="3.查看副本数"></a>3.查看副本数</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get rs -n wordpressNAME               DESIRED   CURRENT   READY   AGEnginx-6897679c4b   4         4         4       2m18s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>DESIRED</code>预期副本数</li><li><code>CURRENT</code>当前副本数</li><li><code>READY</code>就绪的副本数</li></ul><h3 id="4-测试副本数"><a href="#4-测试副本数" class="headerlink" title="4.测试副本数"></a>4.测试副本数</h3><h4 id="故意删除一个Pod"><a href="#故意删除一个Pod" class="headerlink" title="故意删除一个Pod"></a>故意删除一个<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl delete pod nginx-6897679c4b-wckrb -n wordpresspod &quot;nginx-6897679c4b-wckrb&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>被删除的<code>Pod</code>状态变成正在停止</strong><br><strong>同时，又创建了一个新的<code>Pod</code>出来</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pod -n wordpressNAME                     READY   STATUS        RESTARTS   AGEnginx-6897679c4b-gbpkq   1&#x2F;1     Running       0          15mnginx-6897679c4b-kndqq   1&#x2F;1     Running       0          4s#副本集又自动创建了一个新的nginx-6897679c4b-szbkr   1&#x2F;1     Running       0          15mnginx-6897679c4b-vlqhj   1&#x2F;1     Running       0          15mnginx-6897679c4b-wckrb   0&#x2F;1     Terminating   0          15m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-滚动更新"><a href="#5-滚动更新" class="headerlink" title="5.滚动更新"></a>5.滚动更新</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim nginx.ymlapiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: nginx    namespace: wordpressspec:    replicas: 4    selector:        matchLabels:            app: nginx    strategy:#滚动更新        type: RollingUpdate        rollingUpdate:            maxSurge: 2#同时更新2个，一共4个容器            maxUnavailable: 1#允许更新失败1个，超过1个则视为整体更新失败    template:        metadata:            labels:                app: nginx        spec:            containers:            - name: nginx              image: nginx:latest#更换最新版标签              imagePullPolicy: IfNotPresent              ports:              - containerPort: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>template</code><ul><li>下面所有配置与直接定义<code>pod</code>信息一样</li></ul></li><li><code>replicas</code><ul><li>指定容器的副本数</li></ul></li><li><code>selector</code><ul><li>指定标签选举器的工作方式，让选择器通过哪个标签来确认容器的副本数量正常</li></ul></li><li><code>strategy</code><ul><li>指定容器的滚动升级</li><li><code>maxSurge</code><ul><li>每次升级的百分比，也可以是个绝对数字</li></ul></li><li><code>maxUnavailable</code><ul><li>升级失败的百分比，也可以是个绝对数字</li></ul></li><li>支持的升级方式：<ul><li><code>Rollupdateing</code>一次更新一批，一批完成后再继续更新</li><li><code>ReCreate</code>干掉所有容器，重新创建</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl apply -f .&#x2F;nginx.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看更新过程"><a href="#查看更新过程" class="headerlink" title="查看更新过程"></a>查看更新过程</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pod -n wordpressNAME                     READY   STATUS        RESTARTS   AGEnginx-6897679c4b-gbpkq   0&#x2F;1     Terminating   0          24mnginx-6897679c4b-szbkr   0&#x2F;1     Terminating   0          24m#正在停止旧版本的Podnginx-75b69bd684-6pjlg   1&#x2F;1     Running       0          5snginx-75b69bd684-krk7g   1&#x2F;1     Running       0          3snginx-75b69bd684-l546x   1&#x2F;1     Running       0          5snginx-75b69bd684-m48jq   1&#x2F;1     Running       0          5s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证新版本容器"><a href="#验证新版本容器" class="headerlink" title="验证新版本容器"></a>验证新版本容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl describe pod nginx-75b69bd684-l546x -n wordpress | grep -i &quot;image&quot;    Image:          nginx:latest#从1.20升级到了最新版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-回滚更新"><a href="#6-回滚更新" class="headerlink" title="6.回滚更新"></a>6.回滚更新</h3><h4 id="查看更新历史"><a href="#查看更新历史" class="headerlink" title="查看更新历史"></a>查看更新历史</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl rollout history deploy nginx -n wordpressdeployment.apps&#x2F;nginx REVISION  CHANGE-CAUSE#可以看到有2个版本1         &lt;none&gt;#刚创建容器的版本2         &lt;none&gt;#现在的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl rollout undo deployment nginx -n wordpress --to-revision&#x3D;1deployment.apps&#x2F;nginx rolled back<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查看回退过程"><a href="#查看回退过程" class="headerlink" title="查看回退过程"></a>查看回退过程</h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pod -n wordpressNAME                     READY   STATUS        RESTARTS   AGEnginx-6897679c4b-8mdtq   1&#x2F;1     Running       0          9snginx-6897679c4b-bl48l   1&#x2F;1     Running       0          8snginx-6897679c4b-jrwwp   1&#x2F;1     Running       0          9snginx-6897679c4b-wxtmz   1&#x2F;1     Running       0          9s#旧版本已经正在运行nginx-75b69bd684-6pjlg   0&#x2F;1     Terminating   0          7m15snginx-75b69bd684-m48jq   0&#x2F;1     Terminating   0          7m15s#新版本正在被停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="验证版本"><a href="#验证版本" class="headerlink" title="验证版本"></a>验证版本</h5><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl describe pod nginx-6897679c4b-jrwwp -n wordpress | grep -i &quot;image&quot;    Image:          nginx:1.20#可以看到版本回退到了1.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、DeamonSet守护进程集"><a href="#三、DeamonSet守护进程集" class="headerlink" title="三、DeamonSet守护进程集"></a>三、DeamonSet守护进程集</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><ul><li>保证每个<code>node</code>节点运行且只运行一个<code>pod</code><ul><li>例如监控应用，每个节点上都需要<code>agent</code>，或者<code>ELK</code>中的<code>Filebeat</code>收集日志</li></ul></li></ul><h3 id="2-创建DeamonSet"><a href="#2-创建DeamonSet" class="headerlink" title="2.创建DeamonSet"></a>2.创建<code>DeamonSet</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim daremonset.ymlapiVersion: apps&#x2F;v1kind: DaemonSetmetadata:  name: nginx-daemon  namespace: wordpress  labels:    k8s-app: nginx-daemonspec:  selector:    matchLabels:      app: nginx-daemon  template:    metadata:      labels:        app: nginx-daemon    spec:      containers:      - name: nginx-daemon        image: nginx        imagePullPolicy: IfNotPresent        tty: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f .&#x2F;daremonset.ymldaemonset.apps&#x2F;nginx-daemon created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看Pod详细信息"><a href="#查看Pod详细信息" class="headerlink" title="查看Pod详细信息"></a>查看<code>Pod</code>详细信息</h4><blockquote><p><strong>可以看到，<code>2</code>个<code>node</code>节点，各一个<code>Pod</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpress -o wideNAME                 READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATESnginx-daemon-hsd7h   1&#x2F;1     Running   0          67s   192.168.242.148   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;nginx-daemon-tl75l   1&#x2F;1     Running   0          67s   192.168.201.213   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> 无状态负载 </category>
          
          <category> 守护进程集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> deployment </tag>
            
            <tag> daemonset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes的Pod管理</title>
      <link href="/2023/06/12/140/"/>
      <url>/2023/06/12/140/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes的Pod管理"><a href="#【容器应用系列教程】Kubernetes的Pod管理" class="headerlink" title="【容器应用系列教程】Kubernetes的Pod管理"></a>【容器应用系列教程】Kubernetes的Pod管理</h1><h2 id="一、关于Pod"><a href="#一、关于Pod" class="headerlink" title="一、关于Pod"></a>一、关于Pod</h2><ul><li><code>k8s</code>集群所能管理的最小单元</li><li>一个<code>pod</code>只放一个容器</li><li>支持一个<code>pod</code>放多个容器，不建议实际使用</li></ul><h2 id="二、Pod管理操作"><a href="#二、Pod管理操作" class="headerlink" title="二、Pod管理操作"></a>二、Pod管理操作</h2><h3 id="1-创建Pod简单yaml文件示例"><a href="#1-创建Pod简单yaml文件示例" class="headerlink" title="1.创建Pod简单yaml文件示例"></a>1.创建<code>Pod</code>简单<code>yaml</code>文件示例</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim centos.ymlapiVersion: v1#api版本kind: Pod#资源类型Podmetadata:#元数据    name: centos#名字    namespace: wordpress#指定在哪个命名空间里spec:    containers:#容器信息    - name: centos#容器名字      image: centos:7#使用的镜像      tty: true#模拟一个终端      command:#启动容器时，执行的命令      - bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>apiVersion：</code>指定<code>api server</code>版本，目前是<code>v1</code></li><li><code>kind: </code>说明要创建的资源类型</li><li><code>metadata: </code>指定<code>Pod</code>的元数据信息 <ul><li><code>name: </code>指定<code>pod</code>名称</li><li><code>namespace: </code>指定<code>Pod</code>所在的命名空间，不写代表<code>default</code></li></ul></li><li><code>spec: </code>定义<code>pod</code>中运行的容器的具体信息</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f .&#x2F;centos.yml #创建Podpod&#x2F;centos created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-查看Pod"><a href="#2-查看Pod" class="headerlink" title="2.查看Pod"></a>2.查看<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpressNAME     READY   STATUS    RESTARTS   AGEcentos   1&#x2F;1     Running   0          64s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>-n</code>指定命名空间</li></ul><h4 id="查看Pod的详细信息"><a href="#查看Pod的详细信息" class="headerlink" title="查看Pod的详细信息"></a>查看<code>Pod</code>的详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -n wordpress -o wideNAME     READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATEScentos   1&#x2F;1     Running   0          6m59s   192.168.201.202   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>-o wide</code>显示详细信息</li></ul><h4 id="查看所有Pod"><a href="#查看所有Pod" class="headerlink" title="查看所有Pod"></a>查看所有<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods  -ANAMESPACE     NAME                                           READY   STATUS    RESTARTS   AGEkube-system   calico-kube-controllers-5f6d4b864b-2pqz6       1&#x2F;1     Running   1          3dkube-system   calico-node-fld77                              1&#x2F;1     Running   1          2d23hkube-system   calico-node-h2kxd                              1&#x2F;1     Running   1          2d23hkube-system   calico-node-vfltp                              1&#x2F;1     Running   1          2d23hkube-system   coredns-54d67798b7-cbq9r                       1&#x2F;1     Running   1          2d23hkube-system   coredns-54d67798b7-ch5hw                       1&#x2F;1     Running   1          2d23hkube-system   etcd-k8s-master.linux.com                      1&#x2F;1     Running   1          3d2hkube-system   kube-apiserver-k8s-master.linux.com            1&#x2F;1     Running   1          3d2hkube-system   kube-controller-manager-k8s-master.linux.com   1&#x2F;1     Running   1          3d2hkube-system   kube-proxy-6pq4t                               1&#x2F;1     Running   1          3d2hkube-system   kube-proxy-gb66k                               1&#x2F;1     Running   1          3d2hkube-system   kube-proxy-zcjrc                               1&#x2F;1     Running   1          3d2hkube-system   kube-scheduler-k8s-master.linux.com            1&#x2F;1     Running   1          3d2hwordpress     centos                                         1&#x2F;1     Running   0          5m17s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看所有Pod的详细信息"><a href="#查看所有Pod的详细信息" class="headerlink" title="查看所有Pod的详细信息"></a>查看所有<code>Pod</code>的详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl get pods -A -o wideNAMESPACE     NAME                                           READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATESkube-system   calico-kube-controllers-5f6d4b864b-2pqz6       1&#x2F;1     Running   1          3d      192.168.140.10    k8s-master.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   calico-node-fld77                              1&#x2F;1     Running   1          3d      192.168.140.11    k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   calico-node-h2kxd                              1&#x2F;1     Running   1          3d      192.168.140.12    k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   calico-node-vfltp                              1&#x2F;1     Running   1          3d      192.168.140.10    k8s-master.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   coredns-54d67798b7-cbq9r                       1&#x2F;1     Running   1          3d      192.168.201.194   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   coredns-54d67798b7-ch5hw                       1&#x2F;1     Running   1          3d      192.168.242.130   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   etcd-k8s-master.linux.com                      1&#x2F;1     Running   1          3d2h    192.168.140.10    k8s-master.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   kube-apiserver-k8s-master.linux.com            1&#x2F;1     Running   1          3d2h    192.168.140.10    k8s-master.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   kube-controller-manager-k8s-master.linux.com   1&#x2F;1     Running   1          3d2h    192.168.140.10    k8s-master.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   kube-proxy-6pq4t                               1&#x2F;1     Running   1          3d2h    192.168.140.11    k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   kube-proxy-gb66k                               1&#x2F;1     Running   1          3d2h    192.168.140.10    k8s-master.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   kube-proxy-zcjrc                               1&#x2F;1     Running   1          3d2h    192.168.140.12    k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   kube-scheduler-k8s-master.linux.com            1&#x2F;1     Running   1          3d2h    192.168.140.10    k8s-master.linux.com   &lt;none&gt;           &lt;none&gt;wordpress     centos                                         1&#x2F;1     Running   0          8m53s   192.168.201.202   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看某一个Pod创建信息和详细信息"><a href="#3-查看某一个Pod创建信息和详细信息" class="headerlink" title="3.查看某一个Pod创建信息和详细信息"></a>3.查看某一个<code>Pod</code>创建信息和详细信息</h3><blockquote><p><strong>也可以用来判断长时间处于创建状态的<code>Pod</code>或者异常状态的<code>Pod</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl describe pods centos -n wordpressName:         centosNamespace:    wordpressPriority:     0Node:         k8s-node01.linux.com&#x2F;192.168.140.11Start Time:   Mon, 12 Jun 2023 18:50:12 +0800Labels:       &lt;none&gt;Annotations:  &lt;none&gt;Status:       RunningIP:           192.168.201.202IPs:  IP:  192.168.201.202Containers:  centos:    Container ID:  docker:&#x2F;&#x2F;e25dd6ee071b53d167c42148ae81b3f9ac26d5933b9025e04898c0a89d6212b7    Image:         centos:7    Image ID:      docker-pullable:&#x2F;&#x2F;centos@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4    Port:          &lt;none&gt;    Host Port:     &lt;none&gt;    Command:      bash    State:          Running      Started:      Mon, 12 Jun 2023 18:50:13 +0800    Ready:          True    Restart Count:  0    Environment:    &lt;none&gt;    Mounts:      &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount from default-token-f9cxl (ro)Conditions:  Type              Status  Initialized       True   Ready             True   ContainersReady   True   PodScheduled      True Volumes:  default-token-f9cxl:    Type:        Secret (a volume populated by a Secret)    SecretName:  default-token-f9cxl    Optional:    falseQoS Class:       BestEffortNode-Selectors:  &lt;none&gt;Tolerations:     node.kubernetes.io&#x2F;not-ready:NoExecute op&#x3D;Exists for 300s                 node.kubernetes.io&#x2F;unreachable:NoExecute op&#x3D;Exists for 300sEvents:  Type    Reason     Age   From               Message  ----    ------     ----  ----               -------  Normal  Scheduled  10m   default-scheduler  Successfully assigned wordpress&#x2F;centos to k8s-node01.linux.com  Normal  Pulled     10m   kubelet            Container image &quot;centos:7&quot; already present on machine  Normal  Created    10m   kubelet            Created container centos  Normal  Started    10m   kubelet            Started container centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-连接Pod"><a href="#4-连接Pod" class="headerlink" title="4.连接Pod"></a>4.连接<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it centos -n wordpress -- &#x2F;bin&#x2F;bash[root@centos &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-删除Pod"><a href="#5-删除Pod" class="headerlink" title="5.删除Pod"></a>5.删除<code>Pod</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl delete -f .&#x2F;centos.yml pod &quot;centos&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>或者使用下面的命令，直接删除<code>Pod</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl delete pod centos -n wordpresspod &quot;centos&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、containers常用选项"><a href="#三、containers常用选项" class="headerlink" title="三、containers常用选项"></a>三、<code>containers</code>常用选项</h2><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: 资源类型metadata:    name: 自定义名字    namespace: 命名空间名spec:    containers:    选项：参数    选项：参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-name容器名称"><a href="#1-name容器名称" class="headerlink" title="1.name容器名称"></a>1.<code>name</code>容器名称</h3><pre class="line-numbers language-none"><code class="language-none">spec:    containers:    - name: centos#自定义容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-image镜像名字"><a href="#2-image镜像名字" class="headerlink" title="2.image镜像名字"></a>2.<code>image</code>镜像名字</h3><pre class="line-numbers language-none"><code class="language-none">spec:    containers:    - name: centos      image: centos:7#使用Centos镜像7版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-imagePullPolicy-Always-Never-IfNotPresent-拉取镜像策略"><a href="#3-imagePullPolicy-Always-Never-IfNotPresent-拉取镜像策略" class="headerlink" title="3.imagePullPolicy: [Always | Never | IfNotPresent ]拉取镜像策略"></a>3.<code>imagePullPolicy: [Always | Never | IfNotPresent ]</code>拉取镜像策略</h3><ul><li><code>Always</code>: 每次执行yaml文件时，都重新拉取镜像</li><li><code>Never</code>: 不拉取镜像</li><li><code>IfNotPresent</code>: 如果本地没有，则拉取镜像，有则直接使用</li></ul><pre class="line-numbers language-none"><code class="language-none">spec:    containers:    - name: centos      image: centos:7      imagePullPolicy: IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-restartPolicy-Always-Never-OnFailure-容器重启动策略"><a href="#4-restartPolicy-Always-Never-OnFailure-容器重启动策略" class="headerlink" title="4.restartPolicy [ Always | Never | OnFailure]容器重启动策略"></a>4.<code>restartPolicy [ Always | Never | OnFailure]</code>容器重启动策略</h3><ul><li><code>Always: </code>只要容器挂掉，都重启</li><li><code>Never: </code>容器挂掉，忽略不管</li><li><code>OnFailure: </code>只有在容器异常退出时，重启；如果是正常退出，则不管</li><li>资源类型为<code>Pod</code>时无法使用，只有类型是<code>Deployment</code>时才有效</li></ul><h3 id="5-command启动容器时执行的命令"><a href="#5-command启动容器时执行的命令" class="headerlink" title="5.command启动容器时执行的命令"></a>5.<code>command</code>启动容器时执行的命令</h3><pre class="line-numbers language-none"><code class="language-none">spec:    containers:    - name: centos      image: centos:7      imagePullPolicy: IfNotPresent      tty: true      command:      - bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="args向command传递参数"><a href="#args向command传递参数" class="headerlink" title="args向command传递参数"></a><code>args</code>向<code>command</code>传递参数</h4><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: Podmetadata:    name: centos    namespace: wordpressspec:    containers:    - name: centos      image: centos:7      imagePullPolicy: IfNotPresent      command:      - ping      args:      - &quot;baidu.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-ports说明容器要发布的端口"><a href="#6-ports说明容器要发布的端口" class="headerlink" title="6.ports说明容器要发布的端口"></a>6.<code>ports</code>说明容器要发布的端口</h3><blockquote><p><strong>不是服务发布，仅仅是说明容器要发布的端口</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: Podmetadata:    name: centos    namespace: wordpressspec:    containers:    - name: centos      image: centos:7      imagePullPolicy: IfNotPresent      command:      - ping      - &quot;baidu.com&quot;#上面命令参数，也可以这么写      ports:      - containerPort: 22#说明要发布22号端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl describe pod centos -n wordpress | grep -i &quot;port&quot;    Port:          22&#x2F;TCP    Host Port:     0&#x2F;TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-env向容器内传递变量"><a href="#7-env向容器内传递变量" class="headerlink" title="7.env向容器内传递变量"></a>7.<code>env</code>向容器内传递变量</h3><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: Podmetadata:    name: centos    namespace: wordpressspec:    containers:    - name: centos      image: centos:7      imagePullPolicy: IfNotPresent      command:      - ping      - &quot;baidu.com&quot;      ports:      - containerPort: 22      env:      - name: wsjj#定义变量wsjj        value: wangshengjj#变量值为wangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl exec -it centos -n wordpress -- bash[root@centos &#x2F;]# echo $wsjjwangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-resources资源限制"><a href="#8-resources资源限制" class="headerlink" title="8.resources资源限制"></a>8.<code>resources</code>资源限制</h3><ul><li>容器<code>cpu</code>,<code>内存</code>资源限制</li><li><code>1000豪核 = 1CPU</code></li></ul><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: Podmetadata:    name: centos    namespace: wordpressspec:    containers:    - name: centos      image: centos:7      imagePullPolicy: IfNotPresent      command:      - ping      - &quot;baidu.com&quot;      resources:            requests:#软限制                memory: &quot;1G&quot;                cpu: &quot;500m&quot;#1核的一半性能            limits:#硬限制                memory: &quot;2G&quot;                cpu: &quot;1&quot;#最多1核<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-健康状态检查、探针"><a href="#9-健康状态检查、探针" class="headerlink" title="9.健康状态检查、探针"></a>9.健康状态检查、探针</h3><h4 id="检查方式"><a href="#检查方式" class="headerlink" title="检查方式"></a>检查方式</h4><ul><li><code>LivenessProbe</code><ul><li>判断容器是否健康，如果不健康, kubelet将删除该容器并根据重启策略做相应的处理</li></ul></li><li><code>ReadinessProbe</code><ul><li>判断容器是否启动完成且准备接受请求；如果检测失败，则<code>endpoint</code>会被从<code>service</code>对应的<code>endpoint</code>中删除</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">livenessProbe:    httpGet:#使用get方法检测        path: &#x2F;check#指定uri地址        port: 80#端口80initialDelaySeconds: 3#容器启动前3秒不检测periodSeconds: 3#检测3秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-案例"><a href="#10-案例" class="headerlink" title="10.案例"></a>10.案例</h3><h4 id="创建一个Mysql5-7的Pod"><a href="#创建一个Mysql5-7的Pod" class="headerlink" title="创建一个Mysql5.7的Pod"></a>创建一个<code>Mysql5.7</code>的<code>Pod</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# vim .&#x2F;mysql.yamlapiVersion: v1kind: Podmetadata:    name: mysql    namespace: wordpressspec:    containers:        - name: mysql          image: mysql:5.7          imagePullPolicy: IfNotPresent          ports:          - containerPort: 3306          env:          - name: MYSQL_ROOT_PASSWORD            value: &quot;WWW.1.com&quot;          resources:            requests:              memory: &quot;1G&quot;              cpu: &quot;1&quot;            limits:              memory: &quot;2G&quot;              cpu: &quot;2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpress]# kubectl create -f .&#x2F;mysql.yaml pod&#x2F;mysql created[root@k8s-master wordpress]# kubectl exec -it mysql -n wordpress -- bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> Pod </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 容器编排工具 </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes的命名空间Namespace</title>
      <link href="/2023/06/12/139/"/>
      <url>/2023/06/12/139/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes的命名空间Namespace"><a href="#【容器应用系列教程】Kubernetes的命名空间Namespace" class="headerlink" title="【容器应用系列教程】Kubernetes的命名空间Namespace"></a>【容器应用系列教程】Kubernetes的命名空间Namespace</h1><h2 id="一、关于namespace命名空间"><a href="#一、关于namespace命名空间" class="headerlink" title="一、关于namespace命名空间"></a>一、关于<code>namespace</code>命名空间</h2><ul><li>作用<ul><li>为不同资源进行分组</li></ul></li></ul><h2 id="二、命名空间namespace管理操作"><a href="#二、命名空间namespace管理操作" class="headerlink" title="二、命名空间namespace管理操作"></a>二、命名空间<code>namespace</code>管理操作</h2><h3 id="1-查看所有命名空间namespace"><a href="#1-查看所有命名空间namespace" class="headerlink" title="1.查看所有命名空间namespace"></a>1.查看所有命名空间<code>namespace</code></h3><blockquote><p><strong><code>k8s</code>在创建<code>pod</code>的时候，如果不指定命名空间，那么默认使用<code>default</code></strong><br><strong>搭建<code>k8s</code>集群自动创建的容器保存在<code>kube-system</code>命名空间中</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get namespace[root@k8s-master ~]# kubectl get ns#上面命令的简写NAME              STATUS   AGEdefault           Active   2d20hkube-node-lease   Active   2d20hkube-public       Active   2d20hkube-system       Active   2d20h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建命名空间namesapce"><a href="#2-创建命名空间namesapce" class="headerlink" title="2.创建命名空间namesapce"></a>2.创建命名空间<code>namesapce</code></h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl create ns testnamespace&#x2F;test created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nsNAME              STATUS   AGEdefault           Active   2d20hkube-node-lease   Active   2d20hkube-public       Active   2d20hkube-system       Active   2d20htest              Active   5s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim name.ymlapiVersion: v1kind: Namespacemetadata:    name: test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nsNAME              STATUS   AGEdefault           Active   2d20hkube-node-lease   Active   2d20hkube-public       Active   2d20hkube-system       Active   2d20htest              Active   3m31stest2             Active   9s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除命名空间namesapce"><a href="#3-删除命名空间namesapce" class="headerlink" title="3.删除命名空间namesapce"></a>3.删除命名空间<code>namesapce</code></h3><h4 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl delete ns testnamespace &quot;test&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nsNAME              STATUS   AGEdefault           Active   2d20hkube-node-lease   Active   2d20hkube-public       Active   2d20hkube-system       Active   2d20htest2             Active   107s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl delete -f name.yml namespace &quot;test2&quot; deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nsNAME              STATUS   AGEdefault           Active   2d20hkube-node-lease   Active   2d20hkube-public       Active   2d20hkube-system       Active   2d20h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> 命名空间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> namespace </tag>
            
            <tag> 命名空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】基于Kubernetes1.20.7部署高可用集群(Centos7)</title>
      <link href="/2023/06/10/kubernetes/"/>
      <url>/2023/06/10/kubernetes/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】基于Kubernetes1-20-7部署高可用集群-Centos7"><a href="#【容器应用系列教程】基于Kubernetes1-20-7部署高可用集群-Centos7" class="headerlink" title="【容器应用系列教程】基于Kubernetes1.20.7部署高可用集群(Centos7)"></a>【容器应用系列教程】基于Kubernetes1.20.7部署高可用集群(Centos7)</h1><blockquote><p><strong>关于单<code>Master</code>节点<code>Kubernetes</code>集群教程：<a href="https://www.wsjj.top/archives/138">https://www.wsjj.top/archives/138</a></strong></p></blockquote><h2 id="一、环境描述"><a href="#一、环境描述" class="headerlink" title="一、环境描述"></a>一、环境描述</h2><h3 id="1-主机规划"><a href="#1-主机规划" class="headerlink" title="1.主机规划"></a>1.主机规划</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>VIP</th><th>安装的软件</th><th>系统版本</th><th>配置</th></tr></thead><tbody><tr><td>k8s-master01.linux.com</td><td>192.168.140.10</td><td>192.168.140.100</td><td>Docker、Kubernetes、LVS、HAproxy、Keepalived</td><td>Centos7.9</td><td>最低2c2g</td></tr><tr><td>k8s-master02.linux.com</td><td>192.168.140.11</td><td>192.168.140.100</td><td>Docker、Kubernetes、LVS、HAproxy、Keepalived</td><td>Centos7.9</td><td>最低2c2g</td></tr><tr><td>k8s-master03.linux.com</td><td>192.168.140.12</td><td>192.168.140.100</td><td>Docker、Kubernetes、LVS、HAproxy、Keepalived</td><td>Centos7.9</td><td>最低2c2g</td></tr><tr><td>k8s-node01.linux.com</td><td>192.168.140.13</td><td>空</td><td>Docker、Kubernetes、LVS</td><td>Centos7.9</td><td>最低2c2g</td></tr><tr><td>k8s-node02.linux.com</td><td>192.168.140.14</td><td>空</td><td>Docker、Kubernetes、LVS</td><td>Centos7.9</td><td>最低2c2g</td></tr></tbody></table><h3 id="2-软件规划"><a href="#2-软件规划" class="headerlink" title="2.软件规划"></a>2.软件规划</h3><ul><li><code>kubernetes-1.20.7</code>版本</li><li><code>docker-19.03</code>版本</li></ul><h3 id="3-网段规划"><a href="#3-网段规划" class="headerlink" title="3.网段规划"></a>3.网段规划</h3><ul><li><code>Pod</code>网段: <code>172.168.0.0/16</code></li><li><code>Service</code>网段: <code>10.96.0.0/16</code></li></ul><h2 id="二、前期准备-重要"><a href="#二、前期准备-重要" class="headerlink" title="二、前期准备(重要)"></a>二、前期准备(重要)</h2><h3 id="1-五台服务器关闭防火墙和SElinux、配置时间同步"><a href="#1-五台服务器关闭防火墙和SElinux、配置时间同步" class="headerlink" title="1.五台服务器关闭防火墙和SElinux、配置时间同步"></a>1.五台服务器关闭防火墙和SElinux、配置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h4 id="配置时间同步计划任务"><a href="#配置时间同步计划任务" class="headerlink" title="配置时间同步计划任务"></a>配置时间同步计划任务</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# yum install -y ntpdate[root@k8s-master02 ~]# yum install -y ntpdate[root@k8s-master03 ~]# yum install -y ntpdate[root@k8s-node01 ~]# yum install -y ntpdate[root@k8s-node02 ~]# yum install -y ntpdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null[root@k8s-master02 ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null[root@k8s-master03 ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null[root@k8s-node01 ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null[root@k8s-node02 ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-所有主机关闭SSH的DNS解析-优化SSH连接速度"><a href="#2-所有主机关闭SSH的DNS解析-优化SSH连接速度" class="headerlink" title="2.所有主机关闭SSH的DNS解析(优化SSH连接速度)"></a>2.所有主机关闭<code>SSH</code>的<code>DNS</code>解析(优化SSH连接速度)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-master01 ~]# systemctl restart sshd[root@k8s-master02 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-master02 ~]# systemctl restart sshd[root@k8s-master03 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-master03 ~]# systemctl restart sshd[root@k8s-node01 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-node01 ~]# systemctl restart sshd[root@k8s-node02 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-node02 ~]# systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-所有主机配置免密SSH连接-重要"><a href="#3-所有主机配置免密SSH连接-重要" class="headerlink" title="3.所有主机配置免密SSH连接(重要)"></a>3.所有主机配置免密<code>SSH</code>连接(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# ssh-keygen -t rsa[root@k8s-master01 ~]# mv &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;root&#x2F;.ssh&#x2F;authorized_keys[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.$i:&#x2F;root&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试免密SSH"><a href="#测试免密SSH" class="headerlink" title="测试免密SSH"></a>测试免密<code>SSH</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i hostname; date&gt; donek8s-master01.linux.com2023年 06月 10日 星期六 16:49:40 CSTk8s-master02.linux.com2023年 06月 10日 星期六 16:49:40 CSTk8s-master03.linux.com2023年 06月 10日 星期六 16:49:40 CSTk8s-node01.linux.com2023年 06月 10日 星期六 16:49:40 CSTk8s-node02.linux.com2023年 06月 10日 星期六 16:49:40 CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-所有主机添加主机名解析-重要"><a href="#4-所有主机添加主机名解析-重要" class="headerlink" title="4.所有主机添加主机名解析(重要)"></a>4.所有主机添加主机名解析(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;hosts#在配置文件底部添加以下内容192.168.140.10 k8s-master01.linux.com k8s-master01192.168.140.11 k8s-master02.linux.com k8s-master02192.168.140.12 k8s-master03.linux.com k8s-master03192.168.140.13 k8s-node01.linux.com k8s-node01192.168.140.14 k8s-node02.linux.com k8s-node02192.168.140.100 k8s-master-vip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;etc&#x2F;hosts root@192.168.140.$i:&#x2F;etc&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-所有主机禁用SWAP分区"><a href="#5-所有主机禁用SWAP分区" class="headerlink" title="5.所有主机禁用SWAP分区"></a>5.所有主机禁用<code>SWAP</code>分区</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i swapoff -a; free -m; sysctl -w vm.swappiness&#x3D;0&gt; done              total        used        free      shared  buff&#x2F;cache   availableMem:           2755         192        2165           9         397        2409Swap:             0           0           0vm.swappiness &#x3D; 0              total        used        free      shared  buff&#x2F;cache   availableMem:           2755         192        2165           9         396        2409Swap:             0           0           0vm.swappiness &#x3D; 0              total        used        free      shared  buff&#x2F;cache   availableMem:           2755         192        2165           9         396        2409Swap:             0           0           0vm.swappiness &#x3D; 0              total        used        free      shared  buff&#x2F;cache   availableMem:           2755         192        2165           9         396        2410Swap:             0           0           0vm.swappiness &#x3D; 0              total        used        free      shared  buff&#x2F;cache   availableMem:           2755         192        2166           9         396        2410Swap:             0           0           0vm.swappiness &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注释掉SWAP分区的挂载信息"><a href="#注释掉SWAP分区的挂载信息" class="headerlink" title="注释掉SWAP分区的挂载信息"></a>注释掉<code>SWAP</code>分区的挂载信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0[root@k8s-master01 ~]# mount -a[root@k8s-master02 ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0[root@k8s-master02 ~]# mount -a[root@k8s-master03 ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0[root@k8s-master03 ~]# mount -a[root@k8s-node01 ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0[root@k8s-node01 ~]# mount -a[root@k8s-node02 ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0[root@k8s-node02 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-所有主机调整资源限制"><a href="#6-所有主机调整资源限制" class="headerlink" title="6.所有主机调整资源限制"></a>6.所有主机调整资源限制</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i ulimit -SHn 65535&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>nofile</code>最大文件数</li><li><code>nproc</code>最大进程数</li><li><code>memlock</code>内页的页面锁</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;security&#x2F;limits.conf#在文件末尾添加以下内容* soft nofile 655360* hard nofile 131072* soft nproc 655350* hard nproc 655350* soft memlock unlimited* hard memlock unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;etc&#x2F;security&#x2F;limits.conf root@192.168.140.$i:&#x2F;etc&#x2F;security&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-配置软件安装源"><a href="#7-配置软件安装源" class="headerlink" title="7.配置软件安装源"></a>7.配置软件安装源</h3><blockquote><p><strong><code>Centos base源</code>、<code>Centos epel源</code>、<code>Docker源</code>、<code>kubernetes源</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo[root@k8s-master01 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo[docker-ce-stable]name&#x3D;Docker CE Stable - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;stableenabled&#x3D;1gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-stable-debuginfo]name&#x3D;Docker CE Stable - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;stableenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-stable-source]name&#x3D;Docker CE Stable - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;stableenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test]name&#x3D;Docker CE Test - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test-debuginfo]name&#x3D;Docker CE Test - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test-source]name&#x3D;Docker CE Test - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly]name&#x3D;Docker CE Nightly - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly-debuginfo]name&#x3D;Docker CE Nightly - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly-source]name&#x3D;Docker CE Nightly - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo[kubernetes]name&#x3D;Kubernetesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把安装源拷贝给其他机器"><a href="#把安装源拷贝给其他机器" class="headerlink" title="把安装源拷贝给其他机器"></a>把安装源拷贝给其他机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo root@192.168.140.$i:&#x2F;etc&#x2F;yum.repos.d&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立新的YUM缓存"><a href="#建立新的YUM缓存" class="headerlink" title="建立新的YUM缓存"></a>建立新的<code>YUM</code>缓存</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# yum clean all &amp;&amp; yum makecache fast[root@k8s-master02 ~]# yum clean all &amp;&amp; yum makecache fast[root@k8s-master03 ~]# yum clean all &amp;&amp; yum makecache fast[root@k8s-node01 ~]# yum clean all &amp;&amp; yum makecache fast[root@k8s-node02 ~]# yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-升级系统到最新版"><a href="#8-升级系统到最新版" class="headerlink" title="8.升级系统到最新版"></a>8.升级系统到最新版</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# yum update -y[root@k8s-master02 ~]# yum update -y[root@k8s-master03 ~]# yum update -y[root@k8s-node01 ~]# yum update -y[root@k8s-node02 ~]# yum update -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# init 6[root@k8s-master02 ~]# init 6[root@k8s-master03 ~]# init 6[root@k8s-node01 ~]# init 6[root@k8s-node02 ~]# init 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-升级系统内核-可选的"><a href="#9-升级系统内核-可选的" class="headerlink" title="9.升级系统内核(可选的)"></a>9.升级系统内核(可选的)</h3><blockquote><p><strong>关于<code>Centos7</code>升级内核教程：<a href="https://www.wsjj.top/archives/kernel">https://www.wsjj.top/archives/kernel</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i uname -r&gt; done5.4.246-1.el7.elrepo.x86_645.4.246-1.el7.elrepo.x86_645.4.246-1.el7.elrepo.x86_645.4.246-1.el7.elrepo.x86_645.4.246-1.el7.elrepo.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、调整系统参数"><a href="#三、调整系统参数" class="headerlink" title="三、调整系统参数"></a>三、调整系统参数</h2><h3 id="1-所有主机安装IPVS"><a href="#1-所有主机安装IPVS" class="headerlink" title="1.所有主机安装IPVS"></a>1.所有主机安装<code>IPVS</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i yum install ipvsadm ipset sysstat conntrack libseccomp -y&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="所有主机加载IPVS模块"><a href="#所有主机加载IPVS模块" class="headerlink" title="所有主机加载IPVS模块"></a>所有主机加载<code>IPVS</code>模块</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf#把以下内容复制到文件内ip_vsip_vs_lcip_vs_wlcip_vs_rrip_vs_wrrip_vs_lblcip_vs_lblcrip_vs_dhip_vs_ship_vs_foip_vs_nqip_vs_sedip_vs_ftpip_vs_shnf_conntrack_ipv4#如果使用高版本内核5.x版本，请更名为nf_conntrackip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf root@192.168.140.$i:&#x2F;etc&#x2F;modules-load.d&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i systemctl enable --now systemd-modules-load&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-所有主机调整内核参数"><a href="#2-所有主机调整内核参数" class="headerlink" title="2.所有主机调整内核参数"></a>2.所有主机调整内核参数</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf#复制以下内容到配置文件内net.ipv4.ip_forward &#x3D; 1net.bridge.bridge-nf-call-iptables &#x3D; 1net.bridge.bridge-nf-call-ip6tables &#x3D; 1fs.may_detach_mounts &#x3D; 1vm.overcommit_memory&#x3D;1vm.panic_on_oom&#x3D;0fs.inotify.max_user_watches&#x3D;89100fs.file-max&#x3D;52706963fs.nr_open&#x3D;52706963net.netfilter.nf_conntrack_max&#x3D;2310720net.ipv4.tcp_keepalive_time &#x3D; 600net.ipv4.tcp_keepalive_probes &#x3D; 3net.ipv4.tcp_keepalive_intvl &#x3D;15net.ipv4.tcp_max_tw_buckets &#x3D; 36000net.ipv4.tcp_tw_reuse &#x3D; 1net.ipv4.tcp_max_orphans &#x3D; 327680net.ipv4.tcp_orphan_retries &#x3D; 3net.ipv4.tcp_syncookies &#x3D; 1net.ipv4.tcp_max_syn_backlog &#x3D; 16384net.ipv4.ip_conntrack_max &#x3D; 65536net.ipv4.tcp_max_syn_backlog &#x3D; 16384net.ipv4.tcp_timestamps &#x3D; 0net.core.somaxconn &#x3D; 16384<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf root@192.168.140.$i:&#x2F;etc&#x2F;sysctl.d&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i sysctl --system&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、所有主机安装需要的软件"><a href="#四、所有主机安装需要的软件" class="headerlink" title="四、所有主机安装需要的软件"></a>四、所有主机安装需要的软件</h2><blockquote><p><strong><code>Docker-ce-19.03</code>、<code>kubeadm-1.20.7</code>、<code>kubelet-1.20.7</code>、<code>kubectl-1.20.7</code></strong></p></blockquote><h3 id="1-所有主机安装Docker-ce-19-03"><a href="#1-所有主机安装Docker-ce-19-03" class="headerlink" title="1.所有主机安装Docker-ce-19.03"></a>1.所有主机安装<code>Docker-ce-19.03</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i yum install -y docker-ce-19.03*&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12 13 14&gt; do&gt; ssh root@192.168.140.$i systemctl enable --now docker&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置Docker镜像加速"><a href="#配置Docker镜像加速" class="headerlink" title="配置Docker镜像加速"></a>配置<code>Docker</code>镜像加速</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json#复制以下内容到配置文件内&#123;&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把配置文件拷贝给其他机器"><a href="#把配置文件拷贝给其他机器" class="headerlink" title="把配置文件拷贝给其他机器"></a>把配置文件拷贝给其他机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;etc&#x2F;docker&#x2F;daemon.json root@192.168.140.$i:&#x2F;etc&#x2F;docker&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启<code>Docker</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# systemctl restart docker[root@k8s-master02 ~]# systemctl restart docker[root@k8s-master03 ~]# systemctl restart docker[root@k8s-node01 ~]# systemctl restart docker[root@k8s-node02 ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-所有主机安装kubeadm"><a href="#2-所有主机安装kubeadm" class="headerlink" title="2.所有主机安装kubeadm"></a>2.所有主机安装<code>kubeadm</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7[root@k8s-master02 ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7[root@k8s-master03 ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7[root@k8s-node01 ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7[root@k8s-node02 ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修改kubelet默认下载地址为国内镜像"><a href="#3-修改kubelet默认下载地址为国内镜像" class="headerlink" title="3.修改kubelet默认下载地址为国内镜像"></a>3.修改<code>kubelet</code>默认下载地址为国内镜像</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;kubeletKUBELET_EXTRA_ARGS&#x3D;&quot;--pod-infra-container-image&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause-amd64:3.2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;etc&#x2F;sysconfig&#x2F;kubelet root@192.168.140.$i:&#x2F;etc&#x2F;sysconfig&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# systemctl enable --now kubelet[root@k8s-master02 ~]# systemctl enable --now kubelet[root@k8s-master03 ~]# systemctl enable --now kubelet[root@k8s-node01 ~]# systemctl enable --now kubelet[root@k8s-node02 ~]# systemctl enable --now kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、在三个Master节点配置负载均衡和高可用"><a href="#五、在三个Master节点配置负载均衡和高可用" class="headerlink" title="五、在三个Master节点配置负载均衡和高可用"></a>五、在三个<code>Master</code>节点配置负载均衡和高可用</h2><h3 id="1-在三个Master节点安装HAproxy和keepalived"><a href="#1-在三个Master节点安装HAproxy和keepalived" class="headerlink" title="1.在三个Master节点安装HAproxy和keepalived"></a>1.在三个<code>Master</code>节点安装<code>HAproxy</code>和<code>keepalived</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i yum install -y haproxy keepalived&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改HAproxy配置文件"><a href="#2-修改HAproxy配置文件" class="headerlink" title="2.修改HAproxy配置文件"></a>2.修改<code>HAproxy</code>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfgglobal  maxconn  2000  ulimit-n  16384  log  127.0.0.1 local0 err  stats timeout 30sdefaults  log global  mode  http  option  httplog  timeout connect 5000  timeout client  50000  timeout server  50000  timeout http-request 15s  timeout http-keep-alive 15sfrontend monitor-in  bind *:33305  mode http  option httplog  monitor-uri &#x2F;monitorfrontend k8s-master  bind 0.0.0.0:16443  bind 127.0.0.1:16443  mode tcp  option tcplog  tcp-request inspect-delay 5s  default_backend k8s-masterbackend k8s-master  mode tcp#四层调度  option tcplog  option tcp-check  balance roundrobin  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100  server k8s-master01192.168.140.10:6443  check  server k8s-master02192.168.140.11:6443  check  server k8s-master03192.168.140.12:6443  check#我们三个Master节点的IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拷贝配置文件给另外两台master节点"><a href="#拷贝配置文件给另外两台master节点" class="headerlink" title="拷贝配置文件给另外两台master节点"></a>拷贝配置文件给另外两台<code>master</code>节点</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# scp -r &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg root@192.168.140.11:&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg                                    100%  850   735.5KB&#x2F;s   00:00    [root@k8s-master01 ~]# scp -r &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg root@192.168.140.12:&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg                                    100%  850   635.7KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动HAproxy"><a href="#启动HAproxy" class="headerlink" title="启动HAproxy"></a>启动<code>HAproxy</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# systemctl enable --now haproxy[root@k8s-master02 ~]# systemctl enable --now haproxy[root@k8s-master03 ~]# systemctl enable --now haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# netstat -tunlp | grep haproxytcp        0      0 0.0.0.0:33305           0.0.0.0:*               LISTEN      3104&#x2F;haproxy        tcp        0      0 127.0.0.1:16443         0.0.0.0:*               LISTEN      3104&#x2F;haproxy        tcp        0      0 0.0.0.0:16443           0.0.0.0:*               LISTEN      3104&#x2F;haproxy        udp        0      0 0.0.0.0:44001           0.0.0.0:*                           3104&#x2F;haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置keepalived高可用"><a href="#3-配置keepalived高可用" class="headerlink" title="3.配置keepalived高可用"></a>3.配置<code>keepalived</code>高可用</h3><h4 id="编写高可用脚本"><a href="#编写高可用脚本" class="headerlink" title="编写高可用脚本"></a>编写高可用脚本</h4><blockquote><p><strong>监测<code>kube-apiserver</code>状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh#!&#x2F;bin&#x2F;basherr&#x3D;0for k in $(seq 1 3)do    check_code&#x3D;$(pgrep haproxy)    if [[ $check_code &#x3D;&#x3D; &quot;&quot; ]]; then        err&#x3D;$(expr $err + 1)        sleep 1        continue    else        err&#x3D;0        break    fidoneif [[ $err !&#x3D; &quot;0&quot; ]]; then    echo &quot;systemctl stop keepalived&quot;    &#x2F;usr&#x2F;bin&#x2F;systemctl stop keepalived    exit 1else    exit 0fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# chmod a+x &#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将脚本拷贝给另外两台master节点"><a href="#将脚本拷贝给另外两台master节点" class="headerlink" title="将脚本拷贝给另外两台master节点"></a>将脚本拷贝给另外两台<code>master</code>节点</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# rsync -av &#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh root@192.168.140.11:&#x2F;etc&#x2F;keepalived&#x2F;[root@k8s-master01 ~]# rsync -av &#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh root@192.168.140.12:&#x2F;etc&#x2F;keepalived&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改主节点的keepalived配置文件"><a href="#修改主节点的keepalived配置文件" class="headerlink" title="修改主节点的keepalived配置文件"></a>修改主节点的<code>keepalived</code>配置文件</h4><table><thead><tr><th>主机名</th><th>IP地址</th><th>VIP</th><th>节点</th></tr></thead><tbody><tr><td>k8s-master01.linux.com</td><td>192.168.140.10</td><td>192.168.140.100</td><td>主节点MASTER</td></tr><tr><td>k8s-master02.linux.com</td><td>192.168.140.11</td><td>192.168.140.100</td><td>备用节点BACKUP</td></tr><tr><td>k8s-master03.linux.com</td><td>192.168.140.12</td><td>192.168.140.100</td><td>备用节点BACKUP</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh&quot;    interval 5    weight -5    fall 2      rise 1&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    virtual_router_id 51    priority 101    advert_int 2    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置第一个备用节点keepalived配置文件"><a href="#配置第一个备用节点keepalived配置文件" class="headerlink" title="配置第一个备用节点keepalived配置文件"></a>配置第一个备用节点<code>keepalived</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master02 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf ! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh&quot;    interval 5    weight -5    fall 2      rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP#修改模式为备用    interface ens33    virtual_router_id 51    priority 100#降低权重    advert_int 2    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置第二个备用节点keepalived配置文件"><a href="#配置第二个备用节点keepalived配置文件" class="headerlink" title="配置第二个备用节点keepalived配置文件"></a>配置第二个备用节点<code>keepalived</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master03 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf ! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check_apiserver.sh&quot;    interval 5    weight -5    fall 2      rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP#修改模式为备用    interface ens33    virtual_router_id 51    priority 90#降低权重    advert_int 2    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动三个Master节点的keepalived"><a href="#启动三个Master节点的keepalived" class="headerlink" title="启动三个Master节点的keepalived"></a>启动三个<code>Master</code>节点的<code>keepalived</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# systemctl enable --now keepalived[root@k8s-master02 ~]# systemctl enable --now keepalived[root@k8s-master03 ~]# systemctl enable --now keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="外部测试VIP连通性"><a href="#外部测试VIP连通性" class="headerlink" title="外部测试VIP连通性"></a>外部测试<code>VIP</code>连通性</h4><pre class="line-numbers language-none"><code class="language-none">C:\Users\wangshengjj&gt;ping 192.168.140.100正在 Ping 192.168.140.100 具有 32 字节的数据:来自 192.168.140.100 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.140.100 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.140.100 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.140.100 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、初始化kubernetes集群"><a href="#六、初始化kubernetes集群" class="headerlink" title="六、初始化kubernetes集群"></a>六、初始化kubernetes集群</h2><h3 id="1-在主节点k8s-Master01准备初始化文件"><a href="#1-在主节点k8s-Master01准备初始化文件" class="headerlink" title="1.在主节点k8s-Master01准备初始化文件"></a>1.在主节点<code>k8s-Master01</code>准备初始化文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubeadm config print init-defaults &gt; new.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim new.yaml#配置文件不完整，仅展示修改部分localAPIEndpoint:  advertiseAddress: 192.168.140.10#指定主API server地址  bindPort: 6443apiServer:  certSANs:  - 192.168.140.100#指定证书的签发地址，这里是VIP地址  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io&#x2F;v1beta2certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pkiclusterName: kubernetescontrolPlaneEndpoint: 192.168.140.100:16443#指定主节点地址和端口，同样是VIP和HAProxy的端口controllerManager: &#123;&#125;imageRepository: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers#指定镜像仓库为国内地址kind: ClusterConfigurationkubernetesVersion: v1.20.7#指定版本信息networking:  dnsDomain: cluster.local  podSubnet: 172.168.0.0&#x2F;16#根据规划指定pod网段  serviceSubnet: 10.96.0.0&#x2F;12scheduler: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="下载Master节点初始化用到的镜像"><a href="#下载Master节点初始化用到的镜像" class="headerlink" title="下载Master节点初始化用到的镜像"></a>下载<code>Master</code>节点初始化用到的镜像</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubeadm config images pull --config &#x2F;root&#x2F;new.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h4><blockquote><p><strong>这一步生成的<code>token</code>每个人都不一样，请注意！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubeadm init --config &#x2F;root&#x2F;new.yaml  --upload-certsYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME&#x2F;.kube  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;configAlternatively, if you are the root user, you can run:  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf#提示我们配置环境变量You should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;You can now join any number of the control-plane node running the following command on each as root:#用于其他Master节点加入集群  kubeadm join 192.168.140.100:16443 --token abcdef.0123456789abcdef \    --discovery-token-ca-cert-hash sha256:ad8316cb681fea34bf81f1bab6fc2045e386e30347038ff555140bb18ec4417a \    --control-plane --certificate-key 04ee7ab588714943029e1238f43898c1103af38942b7bca808a7f4dae37ddff9Please note that the certificate-key gives access to cluster sensitive data, keep it secret!As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.Then you can join any number of worker nodes by running the following on each as root:#用于Node节点加入集群kubeadm join 192.168.140.100:16443 --token abcdef.0123456789abcdef \    --discovery-token-ca-cert-hash sha256:ad8316cb681fea34bf81f1bab6fc2045e386e30347038ff555140bb18ec4417a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# vim &#x2F;etc&#x2F;profile#在配置文件末尾添加内容export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf[root@k8s-master01 ~]# source &#x2F;etc&#x2F;profile#让环境变量生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看所有节点"><a href="#查看所有节点" class="headerlink" title="查看所有节点"></a>查看所有节点</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubectl get nodesNAME                     STATUS     ROLES                  AGE     VERSIONk8s-master01.linux.com   NotReady   control-plane,master   5m20s   v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-将其他Master节点加入集群"><a href="#2-将其他Master节点加入集群" class="headerlink" title="2.将其他Master节点加入集群"></a>2.将其他<code>Master</code>节点加入集群</h3><blockquote><p><strong>在加入集群过程，需要下载镜像，速度可能较慢，请耐心等待</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master02 ~]# kubeadm join 192.168.140.100:16443 --token abcdef.0123456789abcdef \&gt;     --discovery-token-ca-cert-hash sha256:ad8316cb681fea34bf81f1bab6fc2045e386e30347038ff555140bb18ec4417a \&gt;     --control-plane --certificate-key 04ee7ab588714943029e1238f43898c1103af38942b7bca808a7f4dae37ddff9[root@k8s-master03 ~]# kubeadm join 192.168.140.100:16443 --token abcdef.0123456789abcdef \&gt;     --discovery-token-ca-cert-hash sha256:ad8316cb681fea34bf81f1bab6fc2045e386e30347038ff555140bb18ec4417a \&gt;     --control-plane --certificate-key 04ee7ab588714943029e1238f43898c1103af38942b7bca808a7f4dae37ddff9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回到主节点查看所有节点"><a href="#回到主节点查看所有节点" class="headerlink" title="回到主节点查看所有节点"></a>回到主节点查看所有节点</h4><blockquote><p><strong>可以看到<code>2</code>个备用<code>Master</code>节点已经加入了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubectl get nodesNAME                     STATUS     ROLES                  AGE     VERSIONk8s-master01.linux.com   NotReady   control-plane,master   9m49s   v1.20.7k8s-master02.linux.com   NotReady   control-plane,master   72s     v1.20.7k8s-master03.linux.com   NotReady   control-plane,master   17s     v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-将Node节点加入集群"><a href="#3-将Node节点加入集群" class="headerlink" title="3.将Node节点加入集群"></a>3.将<code>Node</code>节点加入集群</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node01 ~]# kubeadm join 192.168.140.100:16443 --token abcdef.0123456789abcdef \&gt;     --discovery-token-ca-cert-hash sha256:ad8316cb681fea34bf81f1bab6fc2045e386e30347038ff555140bb18ec4417a[root@k8s-node02 ~]# kubeadm join 192.168.140.100:16443 --token abcdef.0123456789abcdef \&gt;     --discovery-token-ca-cert-hash sha256:ad8316cb681fea34bf81f1bab6fc2045e386e30347038ff555140bb18ec4417a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回到主节点查看所有节点-1"><a href="#回到主节点查看所有节点-1" class="headerlink" title="回到主节点查看所有节点"></a>回到主节点查看所有节点</h4><blockquote><p><strong>此时可以看到所有节点都加入到了集群，但是所有节点都是<code>NotReady</code>状态</strong><br><strong>这是由于我们还没有配置跨物理机的网络造成的，我这里使用<code>calico</code>进行演示</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubectl get nodesNAME                     STATUS     ROLES                  AGE     VERSIONk8s-master01.linux.com   NotReady   control-plane,master   13m     v1.20.7k8s-master02.linux.com   NotReady   control-plane,master   4m47s   v1.20.7k8s-master03.linux.com   NotReady   control-plane,master   3m52s   v1.20.7k8s-node01.linux.com     NotReady   &lt;none&gt;                 44s     v1.20.7k8s-node02.linux.com     NotReady   &lt;none&gt;                 45s     v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、部署calico网络，实现容器之间的网络通信"><a href="#七、部署calico网络，实现容器之间的网络通信" class="headerlink" title="七、部署calico网络，实现容器之间的网络通信"></a>七、部署calico网络，实现容器之间的网络通信</h2><ul><li><code>calico</code>基于<code>BGP</code>协议实现通信</li><li>只需要在<code>k8s-master01</code>节点上进行操作即可</li></ul><h3 id="1-准备calico部署文件"><a href="#1-准备calico部署文件" class="headerlink" title="1.准备calico部署文件"></a>1.准备<code>calico</code>部署文件</h3><blockquote><p><strong>下载连接：<a href="https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7">https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7</a></strong></p></blockquote><h3 id="2-指定etcd数据库连接地址"><a href="#2-指定etcd数据库连接地址" class="headerlink" title="2.指定etcd数据库连接地址"></a>2.指定<code>etcd</code>数据库连接地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# sed -i &#39;s#etcd_endpoints: &quot;http:&#x2F;&#x2F;&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;#etcd_endpoints: &quot;https:&#x2F;&#x2F;192.168.140.10:2379,https:&#x2F;&#x2F;192.168.140.11:2379,https:&#x2F;&#x2F;192.168.140.12:2379&quot;#g&#39; &#x2F;root&#x2F;calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置证书相关信息"><a href="#3-配置证书相关信息" class="headerlink" title="3.配置证书相关信息"></a>3.配置证书相关信息</h3><h4 id="指定证书内容"><a href="#指定证书内容" class="headerlink" title="指定证书内容"></a>指定证书内容</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# ETCD_CA&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master01 ~]# ETCD_CERT&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.crt | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master01 ~]# ETCD_KEY&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.key | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master01 ~]# sed -i &quot;s@# etcd-key: null@etcd-key: $&#123;ETCD_KEY&#125;@g; s@# etcd-cert: null@etcd-cert: $&#123;ETCD_CERT&#125;@g; s@# etcd-ca: null@etcd-ca: $&#123;ETCD_CA&#125;@g&quot; &#x2F;root&#x2F;calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定证书文件路径"><a href="#指定证书文件路径" class="headerlink" title="指定证书文件路径"></a>指定证书文件路径</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# sed -i &#39;s#etcd_ca: &quot;&quot;#etcd_ca: &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;#g; s#etcd_cert: &quot;&quot;#etcd_cert: &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;#g; s#etcd_key: &quot;&quot; #etcd_key: &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot; #g&#39; &#x2F;root&#x2F;calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-修改pod网段"><a href="#4-修改pod网段" class="headerlink" title="4.修改pod网段"></a>4.修改<code>pod</code>网段</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# sed -ri -e &#39;s|            # - name: CALICO_IPV4POOL_CIDR|            - name: CALICO_IPV4POOL_CIDR|&#39; -e &#39;s|            #   value: &quot;192.168.0.0&#x2F;16&quot;|              value: &quot;192.168.0.0&#x2F;16&quot;|&#39; calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-部署calico网络"><a href="#5-部署calico网络" class="headerlink" title="5.部署calico网络"></a>5.部署<code>calico</code>网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubectl apply -f &#x2F;root&#x2F;calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-再次查看所有节点状态"><a href="#6-再次查看所有节点状态" class="headerlink" title="6.再次查看所有节点状态"></a>6.再次查看所有节点状态</h3><blockquote><p><strong>再次查看所有节点状态，都变成了<code>Ready</code></strong><br><strong>由于虚拟机配置原因，这个过程肯能需要等<code>1-3</code>分钟</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubectl get nodesNAME                     STATUS   ROLES                  AGE   VERSIONk8s-master01.linux.com   Ready    control-plane,master   38m   v1.20.7k8s-master02.linux.com   Ready    control-plane,master   30m   v1.20.7k8s-master03.linux.com   Ready    control-plane,master   29m   v1.20.7k8s-node01.linux.com     Ready    &lt;none&gt;                 26m   v1.20.7k8s-node02.linux.com     Ready    &lt;none&gt;                 26m   v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-查看所有pods状态"><a href="#7-查看所有pods状态" class="headerlink" title="7.查看所有pods状态"></a>7.查看所有<code>pods</code>状态</h3><blockquote><p><strong>这个过程取决于虚拟机的配置和网络情况，全变成<code>running</code>和<code>READY</code>需要<code>2-3</code>分钟左右</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master01 ~]# kubectl get pods -n kube-systemNAME                                             READY   STATUS    RESTARTS   AGEcalico-kube-controllers-5f6d4b864b-k4sfs         1&#x2F;1     Running   0          4m33scalico-node-8nctk                                1&#x2F;1     Running   0          4m33scalico-node-hv4sh                                1&#x2F;1     Running   0          4m33scalico-node-nr52x                                1&#x2F;1     Running   0          4m33scalico-node-qjk7m                                1&#x2F;1     Running   0          4m33scalico-node-zmqtr                                1&#x2F;1     Running   0          4m33scoredns-54d67798b7-4bb7m                         1&#x2F;1     Running   0          40mcoredns-54d67798b7-mtqpz                         1&#x2F;1     Running   0          40metcd-k8s-master01.linux.com                      1&#x2F;1     Running   0          40metcd-k8s-master02.linux.com                      1&#x2F;1     Running   0          32metcd-k8s-master03.linux.com                      1&#x2F;1     Running   0          29mkube-apiserver-k8s-master01.linux.com            1&#x2F;1     Running   0          40mkube-apiserver-k8s-master02.linux.com            1&#x2F;1     Running   0          32mkube-apiserver-k8s-master03.linux.com            1&#x2F;1     Running   1          29mkube-controller-manager-k8s-master01.linux.com   1&#x2F;1     Running   1          40mkube-controller-manager-k8s-master02.linux.com   1&#x2F;1     Running   0          32mkube-controller-manager-k8s-master03.linux.com   1&#x2F;1     Running   0          30mkube-proxy-6hccv                                 1&#x2F;1     Running   0          31mkube-proxy-9cscl                                 1&#x2F;1     Running   0          32mkube-proxy-hq7hv                                 1&#x2F;1     Running   0          28mkube-proxy-jkkch                                 1&#x2F;1     Running   0          40mkube-proxy-jp9kq                                 1&#x2F;1     Running   0          28mkube-scheduler-k8s-master01.linux.com            1&#x2F;1     Running   1          40mkube-scheduler-k8s-master02.linux.com            1&#x2F;1     Running   0          32mkube-scheduler-k8s-master03.linux.com            1&#x2F;1     Running   0          30m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>恭喜你，如果你跟到了这里，那么一个<code>kubernetes</code>的高可用集群就部署完毕啦！</strong><br><strong>教程到这里就结束啦，如果你想部署图形化界面或者节点健康监测，可以观看这期教程：<a href="https://www.wsjj.top/archives/138">Kubernetes集群部署</a></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 集群 </category>
          
          <category> keepalived </category>
          
          <category> haproxy </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 高可用集群 </tag>
            
            <tag> centos7 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes集群部署(Centos7)</title>
      <link href="/2023/06/09/138/"/>
      <url>/2023/06/09/138/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes集群部署-Centos7"><a href="#【容器应用系列教程】Kubernetes集群部署-Centos7" class="headerlink" title="【容器应用系列教程】Kubernetes集群部署(Centos7)"></a>【容器应用系列教程】Kubernetes集群部署(Centos7)</h1><blockquote><p><strong>基于<code>Kubernetes1.20.7</code>部署高可用集群搭建教程：<a href="https://www.wsjj.top/archives/kubernetes">https://www.wsjj.top/archives/kubernetes</a></strong></p></blockquote><h2 id="一、环境规划"><a href="#一、环境规划" class="headerlink" title="一、环境规划"></a>一、环境规划</h2><h3 id="1-主机规划"><a href="#1-主机规划" class="headerlink" title="1.主机规划"></a>1.主机规划</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>配置</th><th>节点</th></tr></thead><tbody><tr><td>k8s-master.linux.com</td><td>192.168.140.10</td><td>最低2c2g</td><td>Master节点</td></tr><tr><td>k8s-node01.linux.com</td><td>192.168.140.11</td><td>最低2c2g</td><td>Node节点</td></tr><tr><td>k8s-node02.linux.com</td><td>192.168.140.12</td><td>最低2c2g</td><td>Node节点</td></tr></tbody></table><h3 id="2-软件规划"><a href="#2-软件规划" class="headerlink" title="2.软件规划"></a>2.软件规划</h3><ul><li><code>kubernetes-1.20.7</code>版本</li><li><code>docker-19.03</code>版本</li></ul><h3 id="3-网段规划"><a href="#3-网段规划" class="headerlink" title="3.网段规划"></a>3.网段规划</h3><ul><li><code>pod</code>网段：<code>192.168.0.0/16</code></li><li><code>service</code>网段：<code>172.16.0.0/16</code></li></ul><h2 id="二、前期准备-重要"><a href="#二、前期准备-重要" class="headerlink" title="二、前期准备(重要)"></a>二、前期准备(重要)</h2><h3 id="1-三台服务器关闭防火墙和SElinux、配置时间同步"><a href="#1-三台服务器关闭防火墙和SElinux、配置时间同步" class="headerlink" title="1.三台服务器关闭防火墙和SElinux、配置时间同步"></a>1.三台服务器关闭防火墙和SElinux、配置时间同步</h3><blockquote><p><strong>过程省略</strong><br>安装<code>ntpdate</code>，<code>yum install -y ntpdate</code></p></blockquote><h3 id="2-配置计划任务"><a href="#2-配置计划任务" class="headerlink" title="2.配置计划任务"></a>2.配置计划任务</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null[root@k8s-node01 ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null[root@k8s-node02 ~]# crontab -e*&#x2F;30 * * * *   &#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-所有主机关闭SSH的DNS解析-优化SSH连接速度"><a href="#3-所有主机关闭SSH的DNS解析-优化SSH连接速度" class="headerlink" title="3.所有主机关闭SSH的DNS解析(优化SSH连接速度)"></a>3.所有主机关闭<code>SSH</code>的<code>DNS</code>解析(优化SSH连接速度)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-master ~]# systemctl restart sshd[root@k8s-node01 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-node01 ~]# systemctl restart sshd[root@k8s-node02 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@k8s-node02 ~]# systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-所有主机配置免密SSH-重要"><a href="#4-所有主机配置免密SSH-重要" class="headerlink" title="4.所有主机配置免密SSH(重要)"></a>4.所有主机配置免密<code>SSH</code>(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# ssh-keygen -t rsa[root@k8s-master ~]# mv &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;root&#x2F;.ssh&#x2F;authorized_keys[root@k8s-master ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.11:&#x2F;root&#x2F;[root@k8s-master ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.12:&#x2F;root&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试免密SSH和查看时间同步"><a href="#测试免密SSH和查看时间同步" class="headerlink" title="测试免密SSH和查看时间同步"></a>测试免密<code>SSH</code>和查看时间同步</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i hostname; date&gt; donek8s-master.linux.com2023年 06月 09日 星期五 11:45:15 CSTk8s-node01.linux.com2023年 06月 09日 星期五 11:45:15 CSTk8s-node02.linux.com2023年 06月 09日 星期五 11:45:16 CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-所有主机添加主机名解"><a href="#5-所有主机添加主机名解" class="headerlink" title="5.所有主机添加主机名解"></a>5.所有主机添加主机名解</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;hosts#添加以下内容192.168.140.10 k8s-master.linux.com k8s-master192.168.140.11 k8s-node01.linux.com k8s-node01192.168.140.12 k8s-node02.linux.com k8s-node02[root@k8s-master ~]# scp -r &#x2F;etc&#x2F;hosts root@192.168.140.11:&#x2F;etc&#x2F;hosts                                        100%  299   130.0KB&#x2F;s   00:00    [root@k8s-master ~]# scp -r &#x2F;etc&#x2F;hosts root@192.168.140.12:&#x2F;etc&#x2F;hosts                                        100%  299   200.6KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-所有主机禁用SWAP分区"><a href="#6-所有主机禁用SWAP分区" class="headerlink" title="6.所有主机禁用SWAP分区"></a>6.所有主机禁用<code>SWAP</code>分区</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i swapoff -a&gt; ssh root@192.168.140.$i free -m&gt; ssh root@192.168.140.$i sysctl -w vm.swappiness&#x3D;0&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注释掉SWAP相关挂载"><a href="#注释掉SWAP相关挂载" class="headerlink" title="注释掉SWAP相关挂载"></a>注释掉<code>SWAP</code>相关挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0[root@k8s-node01 ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0[root@k8s-node02 ~]# vim &#x2F;etc&#x2F;fstab# &#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-所有主机调整资源限制"><a href="#7-所有主机调整资源限制" class="headerlink" title="7.所有主机调整资源限制"></a>7.所有主机调整资源限制</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i ulimit -SHn 65535&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>nofile</code>最大文件数</li><li><code>nproc</code>最大进程数</li><li><code>memlock</code>内页的页面锁</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;security&#x2F;limits.conf#在文件末尾添加以下内容* soft nofile 655360* hard nofile 131072* soft nproc 655350* hard nproc 655350* soft memlock unlimited* hard memlock unlimited[root@k8s-node01 ~]# vim &#x2F;etc&#x2F;security&#x2F;limits.conf#在文件末尾添加以下内容* soft nofile 655360* hard nofile 131072* soft nproc 655350* hard nproc 655350* soft memlock unlimited* hard memlock unlimited[root@k8s-node02 ~]# vim &#x2F;etc&#x2F;security&#x2F;limits.conf#在文件末尾添加以下内容* soft nofile 655360* hard nofile 131072* soft nproc 655350* hard nproc 655350* soft memlock unlimited* hard memlock unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-配置软件安装源"><a href="#8-配置软件安装源" class="headerlink" title="8.配置软件安装源"></a>8.配置软件安装源</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo[root@k8s-master ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo[root@k8s-master ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo[docker-ce-stable]name&#x3D;Docker CE Stable - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;stableenabled&#x3D;1gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-stable-debuginfo]name&#x3D;Docker CE Stable - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;stableenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-stable-source]name&#x3D;Docker CE Stable - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;stableenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test]name&#x3D;Docker CE Test - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test-debuginfo]name&#x3D;Docker CE Test - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test-source]name&#x3D;Docker CE Test - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly]name&#x3D;Docker CE Nightly - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly-debuginfo]name&#x3D;Docker CE Nightly - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly-source]name&#x3D;Docker CE Nightly - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[root@k8s-master ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo[kubernetes]name&#x3D;Kubernetesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把所有软件安装源拷贝给另外2台机器"><a href="#把所有软件安装源拷贝给另外2台机器" class="headerlink" title="把所有软件安装源拷贝给另外2台机器"></a>把所有软件安装源拷贝给另外<code>2</code>台机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# for i in 11 12&gt; do&gt; scp -r &#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo root@192.168.140.$i:&#x2F;etc&#x2F;yum.repos.d&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立YUM缓存"><a href="#建立YUM缓存" class="headerlink" title="建立YUM缓存"></a>建立<code>YUM</code>缓存</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum clean all &amp;&amp; yum makecache fast[root@k8s-node01 ~]# yum clean all &amp;&amp; yum makecache fast[root@k8s-node02 ~]# yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-将系统升级到最新版"><a href="#9-将系统升级到最新版" class="headerlink" title="9.将系统升级到最新版"></a>9.将系统升级到最新版</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum update -y[root@k8s-node01 ~]# yum update -y[root@k8s-node02 ~]# yum update -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# init 6[root@k8s-node01 ~]# init 6[root@k8s-node02 ~]# init 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-升级内核-可选的"><a href="#10-升级内核-可选的" class="headerlink" title="10.升级内核(可选的)"></a>10.升级内核(可选的)</h3><blockquote><p><strong>关于<code>Centos7</code>升级内核教程：<a href="https://www.wsjj.top/archives/kernel">https://www.wsjj.top/archives/kernel</a></strong></p></blockquote><h2 id="三、调整系统参数"><a href="#三、调整系统参数" class="headerlink" title="三、调整系统参数"></a>三、调整系统参数</h2><h3 id="1-所有主机安装IPVS"><a href="#1-所有主机安装IPVS" class="headerlink" title="1.所有主机安装IPVS"></a>1.所有主机安装<code>IPVS</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum install ipvsadm ipset sysstat conntrack libseccomp -y[root@k8s-node01 ~]# yum install ipvsadm ipset sysstat conntrack libseccomp -y[root@k8s-node02 ~]# yum install ipvsadm ipset sysstat conntrack libseccomp -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="所有主机加载IPVS模块"><a href="#所有主机加载IPVS模块" class="headerlink" title="所有主机加载IPVS模块"></a>所有主机加载<code>IPVS</code>模块</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.confip_vsip_vs_lcip_vs_wlcip_vs_rrip_vs_wrrip_vs_lblcip_vs_lblcrip_vs_dhip_vs_ship_vs_foip_vs_nqip_vs_sedip_vs_ftpip_vs_shnf_conntrack_ipv4#如果使用高版本内核5.x版本，请更名为nf_conntrackip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp -r &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf root@192.168.140.11:&#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf                                    100%  211   401.5KB&#x2F;s   00:00    [root@k8s-master ~]# scp -r &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf root@192.168.140.12:&#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf                                    100%  211   309.1KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl enable --now systemd-modules-load[root@k8s-node01 ~]# systemctl enable --now systemd-modules-load[root@k8s-node02 ~]# systemctl enable --now systemd-modules-load<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-所有主机调整内核参数"><a href="#2-所有主机调整内核参数" class="headerlink" title="2.所有主机调整内核参数"></a>2.所有主机调整内核参数</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.confnet.ipv4.ip_forward &#x3D; 1net.bridge.bridge-nf-call-iptables &#x3D; 1net.bridge.bridge-nf-call-ip6tables &#x3D; 1fs.may_detach_mounts &#x3D; 1vm.overcommit_memory&#x3D;1vm.panic_on_oom&#x3D;0fs.inotify.max_user_watches&#x3D;89100fs.file-max&#x3D;52706963fs.nr_open&#x3D;52706963net.netfilter.nf_conntrack_max&#x3D;2310720net.ipv4.tcp_keepalive_time &#x3D; 600net.ipv4.tcp_keepalive_probes &#x3D; 3net.ipv4.tcp_keepalive_intvl &#x3D;15net.ipv4.tcp_max_tw_buckets &#x3D; 36000net.ipv4.tcp_tw_reuse &#x3D; 1net.ipv4.tcp_max_orphans &#x3D; 327680net.ipv4.tcp_orphan_retries &#x3D; 3net.ipv4.tcp_syncookies &#x3D; 1net.ipv4.tcp_max_syn_backlog &#x3D; 16384net.ipv4.ip_conntrack_max &#x3D; 65536net.ipv4.tcp_max_syn_backlog &#x3D; 16384net.ipv4.tcp_timestamps &#x3D; 0net.core.somaxconn &#x3D; 16384<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp -r &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf root@192.168.140.11:&#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf                                     100%  704     1.4MB&#x2F;s   00:00    [root@k8s-master ~]# scp -r &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf root@192.168.140.12:&#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf                                     100%  704     1.0MB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sysctl --system[root@k8s-node01 ~]# sysctl --system[root@k8s-node02 ~]# sysctl --system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、所有主机安装需要的软件"><a href="#四、所有主机安装需要的软件" class="headerlink" title="四、所有主机安装需要的软件"></a>四、所有主机安装需要的软件</h2><h3 id="1-所有主机安装Docker-ce-19-03"><a href="#1-所有主机安装Docker-ce-19-03" class="headerlink" title="1.所有主机安装Docker-ce-19.03"></a>1.所有主机安装<code>Docker-ce-19.03</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum install -y docker-ce-19.03*[root@k8s-node01 ~]# yum install -y docker-ce-19.03*[root@k8s-node02 ~]# yum install -y docker-ce-19.03*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl enable --now docker[root@k8s-node01 ~]# systemctl enable --now docker[root@k8s-node02 ~]# systemctl enable --now docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="所有Docker配置镜像加速"><a href="#所有Docker配置镜像加速" class="headerlink" title="所有Docker配置镜像加速"></a>所有<code>Docker</code>配置镜像加速</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json&#123;&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp -r &#x2F;etc&#x2F;docker&#x2F;daemon.json root@192.168.140.11:&#x2F;etc&#x2F;docker&#x2F;daemon.json                                  100%   94   140.1KB&#x2F;s   00:00    [root@k8s-master ~]# scp -r &#x2F;etc&#x2F;docker&#x2F;daemon.json root@192.168.140.12:&#x2F;etc&#x2F;docker&#x2F;daemon.json                                  100%   94    43.8KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl restart docker[root@k8s-node01 ~]# systemctl restart docker[root@k8s-node02 ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-所有主机安装Kubernetes"><a href="#2-所有主机安装Kubernetes" class="headerlink" title="2.所有主机安装Kubernetes"></a>2.所有主机安装<code>Kubernetes</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7 [root@k8s-node01 ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7 [root@k8s-node02 ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改Kubernetes镜像地址"><a href="#修改Kubernetes镜像地址" class="headerlink" title="修改Kubernetes镜像地址"></a>修改<code>Kubernetes</code>镜像地址</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;kubeletKUBELET_EXTRA_ARGS&#x3D;&quot;--pod-infra-container-image&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause-amd64:3.2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp -r &#x2F;etc&#x2F;sysconfig&#x2F;kubelet root@192.168.140.11:&#x2F;etc&#x2F;sysconfig&#x2F;kubelet                                      100%  117   106.7KB&#x2F;s   00:00    [root@k8s-master ~]# scp -r &#x2F;etc&#x2F;sysconfig&#x2F;kubelet root@192.168.140.12:&#x2F;etc&#x2F;sysconfig&#x2F;kubelet                                      100%  117   139.2KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl enable --now kubelet[root@k8s-node01 ~]# systemctl enable --now kubelet[root@k8s-node02 ~]# systemctl enable --now kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="五、Kubernetes集群初始化"><a href="#五、Kubernetes集群初始化" class="headerlink" title="五、Kubernetes集群初始化"></a>五、Kubernetes集群初始化</h2><h3 id="1-在Master节点准备初始化文件"><a href="#1-在Master节点准备初始化文件" class="headerlink" title="1.在Master节点准备初始化文件"></a>1.在<code>Master</code>节点准备初始化文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubeadm config print init-defaults &gt; new.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim new.yaml#配置文件并不完整，仅展示修改部分localAPIEndpoint:  advertiseAddress: 192.168.140.10#指定API server监听地址  bindPort: 6443apiServer:  certSANs:#手动添加此行内容  - 192.168.140.10#指定证书颁发服务器地址  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io&#x2F;v1beta2certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pkiclusterName: kubernetescontrolPlaneEndpoint: 192.168.140.10:6443#指定证书服务器地址，此行需要手动添加controllerManager: &#123;&#125;imageRepository: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers#修改镜像下载地址为国内地址kind: ClusterConfigurationkubernetesVersion: v1.20.7#指定kubernetes版本networking:  dnsDomain: cluster.local  podSubnet: 10.88.0.0&#x2F;16#根据规划，这里填写pod网段，此段需要手动添加  serviceSubnet: 172.16.0.0&#x2F;16#根据规划，这里修改网段scheduler: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在Master节点下载初始化需要的镜像"><a href="#2-在Master节点下载初始化需要的镜像" class="headerlink" title="2.在Master节点下载初始化需要的镜像"></a>2.在<code>Master</code>节点下载初始化需要的镜像</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubeadm config images pull --config &#x2F;root&#x2F;new.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-在Master节点初始化集群"><a href="#3-在Master节点初始化集群" class="headerlink" title="3.在Master节点初始化集群"></a>3.在<code>Master</code>节点初始化集群</h3><blockquote><p><strong>注意：这里生成的信息，每个人的都不一样！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubeadm init --config &#x2F;root&#x2F;new.yaml --upload-certsYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME&#x2F;.kube  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;configAlternatively, if you are the root user, you can run:  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf#配置环境变量You should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;You can now join any number of the control-plane node running the following command on each as root:#当集群存在多个Master节点的时候，使用这条命令  kubeadm join 192.168.140.10:6443 --token abcdef.0123456789abcdef \    --discovery-token-ca-cert-hash sha256:9f7a17bdb794de39d777c0a0301f5979ce1faeee6df833223d455c8c45728ec0 \    --control-plane --certificate-key 4d69a847667698d461dbe235ed30b8fbd973d430f2ec8ee89f2b064a4183c714Please note that the certificate-key gives access to cluster sensitive data, keep it secret!As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.Then you can join any number of worker nodes by running the following on each as root:#node节点加入master节点用到的命令kubeadm join 192.168.140.10:6443 --token abcdef.0123456789abcdef \    --discovery-token-ca-cert-hash sha256:9f7a17bdb794de39d777c0a0301f5979ce1faeee6df833223d455c8c45728ec0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-定义环境变量"><a href="#4-定义环境变量" class="headerlink" title="4.定义环境变量"></a>4.定义环境变量</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;profile#在文件末尾添加内容export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf[root@k8s-master ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-将node工作节点加入集群"><a href="#5-将node工作节点加入集群" class="headerlink" title="5.将node工作节点加入集群"></a>5.将<code>node</code>工作节点加入集群</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node01 ~]# kubeadm join 192.168.140.10:6443 --token abcdef.0123456789abcdef \&gt;     --discovery-token-ca-cert-hash sha256:9f7a17bdb794de39d777c0a0301f5979ce1faeee6df833223d455c8c45728ec0[root@k8s-node02 ~]# kubeadm join 192.168.140.10:6443 --token abcdef.0123456789abcdef \&gt;     --discovery-token-ca-cert-hash sha256:9f7a17bdb794de39d777c0a0301f5979ce1faeee6df833223d455c8c45728ec0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-回到Master节点，查看集群节点状态"><a href="#6-回到Master节点，查看集群节点状态" class="headerlink" title="6.回到Master节点，查看集群节点状态"></a>6.回到<code>Master</code>节点，查看集群节点状态</h3><blockquote><p><strong>由于容器之前是跨物理机的，所以节点与节点之间没有网络连接，所以容器的状态是<code>NotReady</code>，这需要单独部署跨物理机的网络。</strong><br><strong>这里可以选择<code>flannel</code>或者<code>calico</code>部署跨物理机通信，本期教程将选择<code>calico</code></strong><br><strong>关于<code>flannel</code>部署教程参考：<a href="https://www.wsjj.top/archives/133">https://www.wsjj.top/archives/133</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nodeNAME                   STATUS     ROLES                  AGE     VERSIONk8s-master.linux.com   NotReady   control-plane,master   8m20s   v1.20.7k8s-node01.linux.com   NotReady   &lt;none&gt;                 92s     v1.20.7k8s-node02.linux.com   NotReady   &lt;none&gt;                 84s     v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -ANAMESPACE     NAME                                           READY   STATUS    RESTARTS   AGEkube-system   coredns-54d67798b7-6ll5q                       0&#x2F;1     Pending   0          113mkube-system   coredns-54d67798b7-sgczg                       0&#x2F;1     Pending   0          113mkube-system   etcd-k8s-master.linux.com                      1&#x2F;1     Running   0          113mkube-system   kube-apiserver-k8s-master.linux.com            1&#x2F;1     Running   0          113mkube-system   kube-controller-manager-k8s-master.linux.com   1&#x2F;1     Running   0          113mkube-system   kube-proxy-6pq4t                               1&#x2F;1     Running   0          107mkube-system   kube-proxy-gb66k                               1&#x2F;1     Running   0          113mkube-system   kube-proxy-zcjrc                               1&#x2F;1     Running   0          107mkube-system   kube-scheduler-k8s-master.linux.com            1&#x2F;1     Running   0          113m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、部署calico网络，实现容器间的通信"><a href="#六、部署calico网络，实现容器间的通信" class="headerlink" title="六、部署calico网络，实现容器间的通信"></a>六、部署calico网络，实现容器间的通信</h2><ul><li><code>calico</code>基于<code>BGP</code>协议实现通信 </li><li>只需要在<code>master</code>节点上进行操作即可</li></ul><h3 id="1-准备calico部署文件"><a href="#1-准备calico部署文件" class="headerlink" title="1.准备calico部署文件"></a>1.准备<code>calico</code>部署文件</h3><blockquote><p><strong>下载连接：<a href="https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7">https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7</a></strong></p></blockquote><h3 id="2-指定etcd数据库连接地址"><a href="#2-指定etcd数据库连接地址" class="headerlink" title="2.指定etcd数据库连接地址"></a>2.指定etcd数据库连接地址</h3><blockquote><p><strong>以下方式二选其一即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim calico-etcd.yaml#配置文件不完整，仅展示修改部分kind: ConfigMapapiVersion: v1metadata:  name: calico-config  namespace: kube-systemdata:  # Configure this with the location of your etcd cluster.  etcd_endpoints: &quot;https:&#x2F;&#x2F;192.168.140.10:2379&quot;#指定etcd连接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="或"><a href="#或" class="headerlink" title="或"></a>或</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sed -i &#39;s#etcd_endpoints: &quot;http:&#x2F;&#x2F;&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;#etcd_endpoints: &quot;https:&#x2F;&#x2F;192.168.140.10:2379&quot;#g&#39; calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-指定连接etcd数据库用到的秘钥和证书文件内容"><a href="#3-指定连接etcd数据库用到的秘钥和证书文件内容" class="headerlink" title="3.指定连接etcd数据库用到的秘钥和证书文件内容"></a>3.指定连接etcd数据库用到的秘钥和证书文件内容</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# ETCD_CA&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master ~]# ETCD_CERT&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.crt | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master ~]# ETCD_KEY&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.key | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master ~]# sed -i &quot;s@# etcd-key: null@etcd-key: $&#123;ETCD_KEY&#125;@g; s@# etcd-cert: null@etcd-cert: $&#123;ETCD_CERT&#125;@g; s@# etcd-ca: null@etcd-ca: $&#123;ETCD_CA&#125;@g&quot; calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定证书文件和秘钥文件位置"><a href="#指定证书文件和秘钥文件位置" class="headerlink" title="指定证书文件和秘钥文件位置"></a>指定证书文件和秘钥文件位置</h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sed -i &#39;s#etcd_ca: &quot;&quot;#etcd_ca: &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;#g; s#etcd_cert: &quot;&quot;#etcd_cert: &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;#g; s#etcd_key: &quot;&quot; #etcd_key: &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot; #g&#39; calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-指定calico的通信网段"><a href="#4-指定calico的通信网段" class="headerlink" title="4.指定calico的通信网段"></a>4.指定<code>calico</code>的通信网段</h3><blockquote><p><strong>以下方法任选其一即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim calico-etcd.yaml#配置文件不完整，仅展示修改部分# no effect. This should fall within &#96;--cluster-cidr&#96;.            - name: CALICO_IPV4POOL_CIDR#删除注释，和下面的对齐              value: &quot;192.168.0.0&#x2F;16&quot;#删除注释，和下面的对齐            # Disable file logging so &#96;kubectl logs&#96; works.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="或-1"><a href="#或-1" class="headerlink" title="或"></a>或</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sed -ri -e &#39;s|            # - name: CALICO_IPV4POOL_CIDR|            - name: CALICO_IPV4POOL_CIDR|&#39; -e &#39;s|            #   value: &quot;192.168.0.0&#x2F;16&quot;|              value: &quot;192.168.0.0&#x2F;16&quot;|&#39; calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-部署calico网络"><a href="#5-部署calico网络" class="headerlink" title="5.部署calico网络"></a>5.部署<code>calico</code>网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl create -f calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-查看容器状态"><a href="#6-查看容器状态" class="headerlink" title="6.查看容器状态"></a>6.查看容器状态</h3><blockquote><p><strong>可以看到所有节点变成<code>ready</code>状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nodeNAME                   STATUS   ROLES                  AGE    VERSIONk8s-master.linux.com   Ready    control-plane,master   179m   v1.20.7k8s-node01.linux.com   Ready    &lt;none&gt;                 172m   v1.20.7k8s-node02.linux.com   Ready    &lt;none&gt;                 172m   v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>可以看到所有关于<code>calico</code>的容器都启动了</strong><br><strong>如果遇到没有进入<code>running</code>状态的容器，请使用<code>kubectl delete pod &lt;name&gt; -n kube-system</code>重试</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -ANAMESPACE     NAME                                           READY   STATUS              RESTARTS   AGEkube-system   calico-kube-controllers-5f6d4b864b-2pqz6       1&#x2F;1     Running             0          12mkube-system   calico-node-fld77                              1&#x2F;1     Running             0          86skube-system   calico-node-h2kxd                              1&#x2F;1     Running             0          73skube-system   calico-node-vfltp                              1&#x2F;1     Running             0          62skube-system   coredns-54d67798b7-6ll5q                       0&#x2F;1     Pending    0          50skube-system   coredns-54d67798b7-sgczg                       0&#x2F;1     Pending    0          28skube-system   etcd-k8s-master.linux.com                      1&#x2F;1     Running             0          145mkube-system   kube-apiserver-k8s-master.linux.com            1&#x2F;1     Running             0          145mkube-system   kube-controller-manager-k8s-master.linux.com   1&#x2F;1     Running             0          145mkube-system   kube-proxy-6pq4t                               1&#x2F;1     Running             0          138mkube-system   kube-proxy-gb66k                               1&#x2F;1     Running             0          145mkube-system   kube-proxy-zcjrc                               1&#x2F;1     Running             0          138mkube-system   kube-scheduler-k8s-master.linux.com            1&#x2F;1     Running             0          145m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解决coredns容器启动失败"><a href="#解决coredns容器启动失败" class="headerlink" title="解决coredns容器启动失败"></a>解决<code>coredns</code>容器启动失败</h4><blockquote><p><strong>删除等待自动重新创建即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl delete pod coredns-54d67798b7-6ll5q -n kube-system[root@k8s-master ~]# kubectl delete pod coredns-54d67798b7-sgczg -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>再次查看，变成创建状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -ANAMESPACE     NAME                                           READY   STATUS              RESTARTS   AGEkube-system   calico-kube-controllers-5f6d4b864b-2pqz6       1&#x2F;1     Running             0          12mkube-system   calico-node-fld77                              1&#x2F;1     Running             0          78skube-system   calico-node-h2kxd                              1&#x2F;1     Running             0          65skube-system   calico-node-vfltp                              0&#x2F;1     Running             0          54skube-system   coredns-54d67798b7-cbq9r                       0&#x2F;1     ContainerCreating   0          42skube-system   coredns-54d67798b7-ch5hw                       0&#x2F;1     ContainerCreating   0          20skube-system   etcd-k8s-master.linux.com                      1&#x2F;1     Running             0          145mkube-system   kube-apiserver-k8s-master.linux.com            1&#x2F;1     Running             0          145mkube-system   kube-controller-manager-k8s-master.linux.com   1&#x2F;1     Running             0          145mkube-system   kube-proxy-6pq4t                               1&#x2F;1     Running             0          138mkube-system   kube-proxy-gb66k                               1&#x2F;1     Running             0          144mkube-system   kube-proxy-zcjrc                               1&#x2F;1     Running             0          138mkube-system   kube-scheduler-k8s-master.linux.com            1&#x2F;1     Running             0          145m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>过一会，变成<code>running</code>状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -ANAMESPACE     NAME                                           READY   STATUS    RESTARTS   AGEkube-system   calico-kube-controllers-5f6d4b864b-2pqz6       1&#x2F;1     Running   0          13mkube-system   calico-node-fld77                              1&#x2F;1     Running   0          2m13skube-system   calico-node-h2kxd                              1&#x2F;1     Running   0          2mkube-system   calico-node-vfltp                              1&#x2F;1     Running   0          109skube-system   coredns-54d67798b7-cbq9r                       1&#x2F;1     Running   0          97skube-system   coredns-54d67798b7-ch5hw                       1&#x2F;1     Running   0          75skube-system   etcd-k8s-master.linux.com                      1&#x2F;1     Running   0          146mkube-system   kube-apiserver-k8s-master.linux.com            1&#x2F;1     Running   0          146mkube-system   kube-controller-manager-k8s-master.linux.com   1&#x2F;1     Running   0          146mkube-system   kube-proxy-6pq4t                               1&#x2F;1     Running   0          139mkube-system   kube-proxy-gb66k                               1&#x2F;1     Running   0          145mkube-system   kube-proxy-zcjrc                               1&#x2F;1     Running   0          139mkube-system   kube-scheduler-k8s-master.linux.com            1&#x2F;1     Running   0          146m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、安装metric插件-可选的"><a href="#七、安装metric插件-可选的" class="headerlink" title="七、安装metric插件(可选的)"></a>七、安装metric插件(可选的)</h2><blockquote><p><strong>搜集、监控<code>node</code>节点<code>CPU</code>、内存使用情况</strong></p></blockquote><h3 id="1-准备Metric配置文件"><a href="#1-准备Metric配置文件" class="headerlink" title="1.准备Metric配置文件"></a>1.准备<code>Metric</code>配置文件</h3><blockquote><p><strong>下载连接：<a href="https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7">https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7</a></strong></p></blockquote><h3 id="2-将front-proxy-ca-crt证书拷贝到所有的工作节点"><a href="#2-将front-proxy-ca-crt证书拷贝到所有的工作节点" class="headerlink" title="2.将front-proxy-ca.crt证书拷贝到所有的工作节点"></a>2.将<code>front-proxy-ca.crt</code>证书拷贝到所有的工作节点</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt root@192.168.140.11:&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt front-proxy-ca.crt[root@k8s-master ~]# scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt root@192.168.140.11:&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt front-proxy-ca.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-部署Metric插件"><a href="#3-部署Metric插件" class="headerlink" title="3.部署Metric插件"></a>3.部署<code>Metric</code>插件</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl create -f comp.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-查看Metric状态"><a href="#4-查看Metric状态" class="headerlink" title="4.查看Metric状态"></a>4.查看<code>Metric</code>状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -Akube-system   metrics-server-545b8b99c6-r68jk                1&#x2F;1     Running   0          2m41s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl top nodesNAME                   CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%     k8s-node01.linux.com   89m          2%     1197Mi          43%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="八、部署dashboard插件-可选的"><a href="#八、部署dashboard插件-可选的" class="headerlink" title="八、部署dashboard插件(可选的)"></a>八、部署dashboard插件(可选的)</h2><blockquote><p><strong>提供<code>web UI</code>界面</strong></p></blockquote><h3 id="1-准备文件"><a href="#1-准备文件" class="headerlink" title="1.准备文件"></a>1.准备文件</h3><blockquote><p><strong>下载连接：<a href="https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7">https://pan.baidu.com/s/14c8lth005DuGjcsBUCJrOA?pwd=ezn7</a></strong></p></blockquote><h3 id="2-部署dashboard"><a href="#2-部署dashboard" class="headerlink" title="2.部署dashboard"></a>2.部署<code>dashboard</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# cd dashboard&#x2F;[root@k8s-master dashboard]# kubectl create -f .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-将dashboard服务类型修改为nodePort-默认ClusterIP模式，其他机器不能访问"><a href="#3-将dashboard服务类型修改为nodePort-默认ClusterIP模式，其他机器不能访问" class="headerlink" title="3.将dashboard服务类型修改为nodePort(默认ClusterIP模式，其他机器不能访问)"></a>3.将<code>dashboard</code>服务类型修改为<code>nodePort</code>(默认ClusterIP模式，其他机器不能访问)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard#配置文件不完整，仅展示修改部分ports:  - port: 443    protocol: TCP    targetPort: 8443  selector:    k8s-app: kubernetes-dashboard  sessionAffinity: None  type: NodePort#修改为NodePort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl get service -n kubernetes-dashboardNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGEdashboard-metrics-scraper   ClusterIP   172.16.90.167    &lt;none&gt;        8000&#x2F;TCP        2m34skubernetes-dashboard        NodePort #这里变了   172.16.180.168   &lt;none&gt;        443:31343&#x2F;TCP#记住这里的映射端口   2m34s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看运行的主机"><a href="#查看运行的主机" class="headerlink" title="查看运行的主机"></a>查看运行的主机</h4><blockquote><p><strong>可以看到跑在<code>node02</code>上，我这里<code>node02</code>的<code>IP</code>是<code>192.168.140.12</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl get pods -n kubernetes-dashboard -o wideNAME                                         READY   STATUS    RESTARTS   AGE     IP                NODE                   NOMINATED NODE   READINESS GATESdashboard-metrics-scraper-7645f69d8c-dtsqp   1&#x2F;1     Running   0          8m37s   192.168.242.130   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;kubernetes-dashboard-78cb679857-z96n4        1&#x2F;1     Running   0          8m37s   192.168.242.131   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-访问dashboard"><a href="#4-访问dashboard" class="headerlink" title="4.访问dashboard"></a>4.访问<code>dashboard</code></h3><h4 id="获取令牌token"><a href="#获取令牌token" class="headerlink" title="获取令牌token"></a>获取令牌<code>token</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &#39;&#123;print $1&#125;&#39;)Name:         admin-user-token-hdhktNamespace:    kube-systemLabels:       &lt;none&gt;Annotations:  kubernetes.io&#x2F;service-account.name: admin-user              kubernetes.io&#x2F;service-account.uid: b1b41cb8-0d42-4dfc-826e-ffe9eebac3e6Type:  kubernetes.io&#x2F;service-account-tokenData&#x3D;&#x3D;&#x3D;&#x3D;namespace:  11 bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IklVSVl5QVkyRm9EeFNxUHdDY0gzT2phYkxUUklHRlhUcUk3S1JHSDRubEEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWhkaGt0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJiMWI0MWNiOC0wZDQyLTRkZmMtODI2ZS1mZmU5ZWViYWMzZTYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.jJxwXb73WLTpJHu0CCJLFkp8AYoCn_zuJNWvtYFPvkZirkoGIB8o5AOlmSz9zp5hJDdD_weEksC8NK9CIwDP0botkqcDBGwkVM2GD7xdOZ24K1t4CTkhatNoaRT5cIdeSLgD4_c1ky0BOQS-Et9PYknQHAVI81bNCUpti15tkkPqRdI2-7WnB1SS0cYUm2C_TXcWY_YjRjDSpKp9ZsycbsDLCfGU2C1YWTURbT_m70kTYG2pioSlyvqV1SX9dXKK_jvq50_YkvhiLSuRnPmVaIwlgjE_OxgC8tyC55Us5f0OT5nOamLOdsngG33hYZ6DNXq7atd39W2VU0SyG7EqHA#记住上面的token，这是我们登录的唯一凭据，每个人都不一样。ca.crt:     1066 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h4><blockquote><p><strong><code>node02的IP+31343</code>访问，端口每个人都不一样，请自己查看上面的您的端口<a href="https://192.168.140.12:31343/">https://192.168.140.12:31343/</a></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes04.png" alt="kubernetes04"></p><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes05.png" alt="kubernetes05"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 集群 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Kubernetes介绍</title>
      <link href="/2023/06/09/137/"/>
      <url>/2023/06/09/137/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Kubernetes介绍"><a href="#【容器应用系列教程】Kubernetes介绍" class="headerlink" title="【容器应用系列教程】Kubernetes介绍"></a>【容器应用系列教程】Kubernetes介绍</h1><h2 id="一、Kubernetes介绍"><a href="#一、Kubernetes介绍" class="headerlink" title="一、Kubernetes介绍"></a>一、Kubernetes介绍</h2><h3 id="1-Kubernetes是什么"><a href="#1-Kubernetes是什么" class="headerlink" title="1.Kubernetes是什么"></a>1.<code>Kubernetes</code>是什么</h3><ul><li>是容器编排工具</li><li>由<code>google</code>公司开源的应用，基于<code>go</code>语言编写</li><li>简称<code>k8s</code></li></ul><h3 id="2-Kubernetes的作用"><a href="#2-Kubernetes的作用" class="headerlink" title="2.Kubernetes的作用"></a>2.<code>Kubernetes</code>的作用</h3><ul><li>服务发现和负载均衡</li><li>存储编排</li><li>自动部署和回滚</li><li>资源调度分配 </li><li>自我修复</li></ul><blockquote><p><strong>总而言之，<code>kubernetes</code>的目的就是让容器部署应用变得更简单、高效</strong></p></blockquote><h2 id="二、Kubernetes组件介绍"><a href="#二、Kubernetes组件介绍" class="headerlink" title="二、Kubernetes组件介绍"></a>二、Kubernetes组件介绍</h2><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes01.png" alt="kubernetes01"></p><h3 id="1-Master节点"><a href="#1-Master节点" class="headerlink" title="1.Master节点"></a>1.<code>Master</code>节点</h3><blockquote><p><strong><code>Master</code>负责管理整个集群。 <code>Master</code>协调集群中的所有活动，例如调度应用、维护应用的所需状态、应用扩容以及推出新的更新</strong></p></blockquote><h4 id="API-Server组件"><a href="#API-Server组件" class="headerlink" title="API Server组件"></a><code>API Server</code>组件</h4><ul><li>与<code>etcd</code>数据库进行交互，读写集群状态信息</li><li>接收客户端操作请求, 验证身份</li><li>接收<code>kubelet</code>发送过来的注册请求</li></ul><h4 id="Scheduler组件"><a href="#Scheduler组件" class="headerlink" title="Scheduler组件"></a><code>Scheduler</code>组件</h4><ul><li>调度客户端操作请求，选择合适的<code>Node</code>节点运行资源</li></ul><h4 id="Controller-Manager组件"><a href="#Controller-Manager组件" class="headerlink" title="Controller Manager组件"></a><code>Controller Manager</code>组件</h4><ul><li>管理集群控制器，例如<code>replication controller</code>负责维护容器的副本数量</li></ul><h3 id="2-Node节点"><a href="#2-Node节点" class="headerlink" title="2.Node节点"></a>2.<code>Node</code>节点</h3><blockquote><p><strong>运行<code>pod</code>的主机，可以是物理服务器，也可以是虚拟机</strong><br><strong>处理生产级流量的<code>Kubernetes</code>集群至少应具有三个<code>Node</code></strong></p></blockquote><h4 id="container-engine组件"><a href="#container-engine组件" class="headerlink" title="container engine组件"></a><code>container engine</code>组件</h4><blockquote><p><strong>容器引擎</strong><br><strong><code>K8s</code>支持包括<code>Docker</code>和<code>Podman</code>在内的主流容器管理软件</strong></p></blockquote><h4 id="kubelet组件"><a href="#kubelet组件" class="headerlink" title="kubelet组件"></a><code>kubelet</code>组件</h4><ul><li>调度容器引擎创建容器</li></ul><h4 id="kube-proxy组件"><a href="#kube-proxy组件" class="headerlink" title="kube-proxy组件"></a><code>kube-proxy</code>组件</h4><ul><li>在多个容器间实现负载均衡(LVS)</li><li>同样负责容器的发布服务(iptables)</li></ul><h3 id="3-etcd数据库"><a href="#3-etcd数据库" class="headerlink" title="3.etcd数据库"></a>3.<code>etcd</code>数据库</h3><blockquote><p><strong>记录集群状态数据，例如<code>node</code>节点信息、<code>pod</code>信息、<code>service</code>等</strong><br><strong>同样也是<code>k8s</code>环境中，最重要的部分</strong></p></blockquote><h2 id="三、Kubernets组件详解"><a href="#三、Kubernets组件详解" class="headerlink" title="三、Kubernets组件详解"></a>三、Kubernets组件详解</h2><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes02.png" alt="kubernetes02"></p><h3 id="通过k8s集群创建一个pod的过程说明组件间的交互过程"><a href="#通过k8s集群创建一个pod的过程说明组件间的交互过程" class="headerlink" title="通过k8s集群创建一个pod的过程说明组件间的交互过程"></a>通过<code>k8s</code>集群创建一个<code>pod</code>的过程说明组件间的交互过程</h3><ol><li>用户通过客户端工具向<code>api server</code>组件发送创建pod&#96;的请求</li><li><code>api server</code>接收到该请求后，会将请求信息(pod名称、镜像、卷、网络等信息)记录到<code>etcd</code>数据库</li><li><code>scheduler</code>组件会周期性的请求<code>api server</code>，以询问是否有操作请求<code>api server</code>组件查询<code>etcd</code>数据库响应<code>scheduler</code>组件，<code>scheduler</code>组件会得知存在创建<code>pod</code>的请求 </li><li><code>scheduler</code>按一定的算法选择一个合适的<code>node</code>节点计划创建<code>Pod</code>, 并将选定的节点信息返回给<code>api server</code>；<code>api server</code>会将该<code>node</code>节点要与创建的<code>pod</code>对应关系写入<code>etcd</code>数据库</li><li><code>kublet</code>组件启动后，会先<code>api server</code>注册自己，以让<code>api server</code>得知有运行起<code>kublet</code>服务的<code>node</code>节点的存在，并将<code>node</code>节点信息记录到<code>etcd</code>数据库；这样<code>scheduler</code>组件才可以根据数据库的记录选择合适的节点创建<code>pod</code></li><li><code>kubelet</code>组件也会周期性的请求<code>api server</code>, 以询问是否有自己要做的操作，<code>api server</code>查询数据库响应<code>kubelet</code>， <code>kubele</code>t获知到要创建的<code>pod</code>的信息后，调用<code>container engine</code>创建容器</li><li>容器创建完成后，为便于访问，由<code>kube-proxy</code>提供负载均衡</li></ol><h2 id="三、Kubernetes集群对象"><a href="#三、Kubernetes集群对象" class="headerlink" title="三、Kubernetes集群对象"></a>三、Kubernetes集群对象</h2><h3 id="1-Node"><a href="#1-Node" class="headerlink" title="1.Node"></a>1.Node</h3><blockquote><p><strong>运行<code>pod</code>的主机，可以是物理服务器，也可以是虚拟机；每个<code>node</code>节点上都要运行容器引擎（docker或rkt)、<code>kubelet</code>组件及<code>kube-proxy</code>组件</strong></p></blockquote><h3 id="2-Namespace"><a href="#2-Namespace" class="headerlink" title="2.Namespace"></a>2.Namespace</h3><blockquote><p><strong>命名空间，是资源或对象的抽象集合</strong><br><strong><code>kubernetes</code>集群默认会自动创建<code>3</code>个<code>namespace</code></strong></p></blockquote><ul><li>default——默认namespace</li><li>kube-system</li><li>k8s集群内部组件<ul><li>kube-public</li></ul></li></ul><h3 id="3-Container"><a href="#3-Container" class="headerlink" title="3.Container"></a>3.Container</h3><blockquote><p><strong>容器</strong></p></blockquote><h3 id="4-Pod"><a href="#4-Pod" class="headerlink" title="4.Pod"></a>4.Pod</h3><ul><li><code>kubernetes</code>所能管理的最小单元， 一个<code>pod</code>中可以放一个容器，也可以放多个容器</li><li><code>pod</code>的设计理念是支持多个容器在一个<code>pod</code>中共享网络地址和文件系统</li><li><code>k8s</code>集群会为每个<code>pod</code>分配一个<code>IP</code>，称为<code>podIP</code></li><li>从实际应用角度讲，多数应用都是一个<code>pod</code>中只放一个容器</li><li>本质上讲, <code>k8s</code>创建一个<code>pod</code>后，每个<code>Pod</code>中至少存在两个容器，一个是用户自定义的容器，另一个是<code>k8s</code>自动创建的名称为<code>pause-amd64</code>的容器， 实际上<code>Pod</code>的<code>IP</code>是配置在<code>pause</code>容器上的</li></ul><h3 id="5-Label"><a href="#5-Label" class="headerlink" title="5.Label"></a>5.Label</h3><ul><li>一个<code>key-value</code>键值对的数据结构，用于在<code>k8s</code>集群中标识对象；例如每创建一个<code>pod</code>都应该为其分配一个或多个<code>label</code></li><li>一个对象可以被分配一个<code>label</code>或多个<code>label</code></li><li><code>label</code>分配完成后，k8s集群会使用<code>Label selector</code>来选择具有相同标签的一组资源</li></ul><h3 id="6-Annotations"><a href="#6-Annotations" class="headerlink" title="6.Annotations"></a>6.Annotations</h3><ul><li><code>key-value</code>键值对的数据结构，用于为对象添加注释说明信息</li><li>默认情况下可以不写</li><li>在特殊应用场景下，可以通过<code>Annotations</code>辅助部署应用；例如特定的镜像结合特定的说明信息时</li></ul><h3 id="7-Replication-Controller复制控制器-RC"><a href="#7-Replication-Controller复制控制器-RC" class="headerlink" title="7.Replication Controller复制控制器  RC"></a>7.Replication Controller复制控制器  RC</h3><ul><li><code>RC</code>是<code>k8s</code>集群中保证<code>Pod</code>高可用的对象。通过监控运行中的<code>Pod</code>来保证集群中运行指定数量的<code>Pod</code>副本</li><li><code>RC</code>通过<code>Label Selector</code>机制实现对<code>Pod</code>副本的自动控制</li></ul><h3 id="8-Replica-Set-副本集-RS"><a href="#8-Replica-Set-副本集-RS" class="headerlink" title="8.Replica Set 副本集  RS"></a>8.Replica Set 副本集  RS</h3><blockquote><p><strong><code>RS</code>是新一代的<code>RC</code>，提供同样的高可用能力。</strong></p></blockquote><h3 id="9-Deployment部署"><a href="#9-Deployment部署" class="headerlink" title="9.Deployment部署"></a>9.Deployment部署</h3><ul><li>通过<code>Deployment</code>来管理集群中的<code>RS</code>、<code>Pod</code></li><li>在实际操作中，很少直接去操作<code>RS</code>或<code>Pod</code>，在<code>k8s</code>集群中要完成对<code>RS</code>和<code>Pod</code>的管理，都是通过操作<code>Deployment</code>完成 </li><li><code>Deployment</code>自动创建<code>RS</code>保证<code>Pod</code>副本</li><li>在升级操作时，<code>Deployment</code>会做滚动升级</li><li>在升级操作时，如果检测到升级失败，会自动回滚</li></ul><h3 id="10-HPAHorizontal-Pod-Autoscaler"><a href="#10-HPAHorizontal-Pod-Autoscaler" class="headerlink" title="10.HPAHorizontal Pod Autoscaler"></a>10.HPAHorizontal Pod Autoscaler</h3><ul><li>用于实现<code>Pod</code>自动横向扩容</li><li><code>HPA</code>会实时监测<code>RC</code>中的<code>Pod</code>的负载情况，完成自动扩展</li><li>可通过<code>CPU</code>百分比、自定义指标<code>QPS</code>实现</li></ul><h3 id="11-Service服务"><a href="#11-Service服务" class="headerlink" title="11.Service服务"></a>11.Service服务</h3><p><img src="https://www.wsjj.top/upload/2023/06/kubernetes03.png" alt="kubernetes03"></p><ul><li>将具有相同<code>label</code>的<code>Pod</code>标记为一组，由集群为<code>service</code>分配固定<code>IP</code>，便于用户访问</li><li>可以理解为一个<code>service</code>是一组具有相同标签的<code>Pod</code>的集合</li><li>由<code>kube-proxy</code>组件实现，<code>kube-proxy</code>创建<code>service</code>类似于负载均衡器，后端<code>Pod</code>类似于<code>real server</code></li><li><code>Pod</code>宕机产生新<code>Pod</code>时，<code>kube-proxy</code>会自动更新<code>etcd</code>数据库关于<code>service</code>与<code>Pod</code>的对应关系</li></ul><h3 id="12-服务发现"><a href="#12-服务发现" class="headerlink" title="12.服务发现"></a>12.服务发现</h3><ul><li>借助<code>DNS</code>实现，<code>coreDNS</code>组件 </li><li>创建<code>service</code>时，<code>k8s</code>集群会为其分配一个域名<code>www.default.svc.cluster.local</code></li><li>域名格式:<ul><li>服务名称.命名空间.svc.cluster.local</li></ul></li><li><code>service</code>创建完成后，会自动形成<code>IP</code>与域名的解析关系，集群内多个<code>service</code>相互通信时，依靠域名实现</li></ul><h3 id="13-Job任务"><a href="#13-Job任务" class="headerlink" title="13.Job任务"></a>13.Job任务</h3><ul><li><code>k8s</code>集群执行批处理任务的对象 </li><li>用于运行一次性任务，任务成功完成后<code>Pod</code>自动退出，类似于一次性计划任务</li></ul><h3 id="14-DaemonSet"><a href="#14-DaemonSet" class="headerlink" title="14.DaemonSet"></a>14.DaemonSet</h3><ul><li>保证选定的业务在所有的节点运行一个<code>Pod</code></li><li>典型场景：监控<code>agent</code>, 日志收集工具<code>filebeat</code></li></ul><h3 id="15-StatefulSet有状态服务"><a href="#15-StatefulSet有状态服务" class="headerlink" title="15.StatefulSet有状态服务"></a>15.StatefulSet有状态服务</h3><ul><li>通过<code>Statefulset</code>创建的<code>Pod</code>，集群会为其分配一个固定的名称，而且该名称创建后是不能修改的、也是集群全局唯一的；用于让构建业务集群的多个<code>Pod</code>间通过名称通信，而不是借助<code>IP</code>，来保证服务的有状态性</li><li><code>stateful</code>的实现要依赖于存储<code>volume</code>，例如一个<code>Pod</code>挂载一个独立的存储，该<code>Pod</code>宕机后，自动创建一个新的<code>Pod</code>，新<code>Pod</code>一样会去挂载存储获取数据，这就相当于新<code>Pod</code>继承的原有<code>Pod</code>的所有数据及状态</li><li>典型应用场景：数据库集群</li></ul><h3 id="16-Volume卷"><a href="#16-Volume卷" class="headerlink" title="16.Volume卷"></a>16.Volume卷</h3><blockquote><p><strong>用于实现数据持久化保存</strong></p></blockquote><h3 id="17-Federation集群联邦"><a href="#17-Federation集群联邦" class="headerlink" title="17.Federation集群联邦"></a>17.Federation集群联邦</h3><ul><li>存在多个不同的<code>k8s</code>集群时，常规情况下，我们连接哪个集群创建资源，资源就会被创建在哪个集群里</li><li><code>Federation</code>基于全局控制器，可实现将多个不同的集群放到一个全局控制器中，创建资源时，向该全局控制器发送请求，全局控制器会选择一个集群创建资源</li><li><code>Fderation</code>基于全局调度器，在访问资源时，向全局调度器发送请求，它会将请求转交到合适的集群处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> k8s </category>
          
          <category> 笔记 </category>
          
          <category> 集群 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> k8s </tag>
            
            <tag> 容器编排工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Docker-compose容器编排工具</title>
      <link href="/2023/06/08/136/"/>
      <url>/2023/06/08/136/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Docker-compose容器编排工具"><a href="#【容器应用系列教程】Docker-compose容器编排工具" class="headerlink" title="【容器应用系列教程】Docker-compose容器编排工具"></a>【容器应用系列教程】Docker-compose容器编排工具</h1><h2 id="一、关于Docker-compose"><a href="#一、关于Docker-compose" class="headerlink" title="一、关于Docker-compose"></a>一、关于<code>Docker-compose</code></h2><ul><li><code>单机版</code>容器编排工具</li><li>批量操作容器</li><li>官方开源地址：<a href="https://github.com/docker/compose">https://github.com/docker/compose</a></li></ul><h2 id="二、Docker-compose工具安装"><a href="#二、Docker-compose工具安装" class="headerlink" title="二、Docker-compose工具安装"></a>二、<code>Docker-compose</code>工具安装</h2><h3 id="1-下载Docker-compose"><a href="#1-下载Docker-compose" class="headerlink" title="1.下载Docker-compose"></a>1.下载<code>Docker-compose</code></h3><blockquote><p><strong>截止教程撰写日期，最新版为<code>v2.8.0</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.18.0&#x2F;docker-compose-linux-x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-给予执行权限"><a href="#2-给予执行权限" class="headerlink" title="2.给予执行权限"></a>2.给予执行权限</h3><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看版本信息"><a href="#3-查看版本信息" class="headerlink" title="3.查看版本信息"></a>3.查看版本信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# docker-compose -vDocker Compose version v2.18.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、Docker-compose工具使用教程"><a href="#三、Docker-compose工具使用教程" class="headerlink" title="三、Docker-compose工具使用教程"></a>三、<code>Docker-compose</code>工具使用教程</h2><h3 id="1-Docker-compose使用流程"><a href="#1-Docker-compose使用流程" class="headerlink" title="1.Docker-compose使用流程"></a>1.<code>Docker-compose</code>使用流程</h3><h4 id="A-规划目录"><a href="#A-规划目录" class="headerlink" title="A.规划目录"></a>A.规划目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# mkdir -p &#x2F;opt&#x2F;test&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-编写docker-compose-yml文件"><a href="#B-编写docker-compose-yml文件" class="headerlink" title="B.编写docker-compose.yml文件"></a>B.编写<code>docker-compose.yml</code>文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# cd &#x2F;opt&#x2F;test&#x2F;[root@harbor test]# vim docker-compose.ymlversion: &#39;3&#39;services:    web:        image: nginx:latest    redis:        image: redis:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-创建容器"><a href="#C-创建容器" class="headerlink" title="C.创建容器"></a>C.创建容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker-compose up -d[+] Building 0.0s (0&#x2F;0)                                                  [+] Running 3&#x2F;3 ✔ Network test_default    Created                                  0.0s  ✔ Container test-redis-1  Started                                  0.6s  ✔ Container test-web-1    Started                                  0.6s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>容器的命名规则：<ul><li>当前目录_容器名称_数字</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker-compose ps -aNAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTStest-redis-1        redis:latest        &quot;docker-entrypoint.s…&quot;   redis               15 minutes ago      Up 15 minutes       6379&#x2F;tcptest-web-1          nginx:latest        &quot;&#x2F;docker-entrypoint.…&quot;   web                 15 minutes ago      Up 15 minutes       80&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Docker-compose常用操作"><a href="#2-Docker-compose常用操作" class="headerlink" title="2.Docker-compose常用操作"></a>2.<code>Docker-compose</code>常用操作</h3><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><blockquote><p><strong>需要提前准备好<code>docker-compose.yml</code>文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--scale web=2</code>横向扩展，将名称为web的容器启动两个</li><li><code>-f</code>默认名称为<code>docker-compose.yml</code>文件，<code>-f</code>可指定其他文件名，不建议使用</li></ul><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker-compose ps#查看正在运行的容器NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTStest-redis-1        redis:latest        &quot;docker-entrypoint.s…&quot;   redis               22 minutes ago      Up 22 minutes       6379&#x2F;tcptest-web-1          nginx:latest        &quot;&#x2F;docker-entrypoint.…&quot;   web                 22 minutes ago      Up 22 minutes       80&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker-compose ps -a#查看所有容器(包括停止的)NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTStest-redis-1        redis:latest        &quot;docker-entrypoint.s…&quot;   redis               15 minutes ago      Up 15 minutes       6379&#x2F;tcptest-web-1          nginx:latest        &quot;&#x2F;docker-entrypoint.…&quot;   web                 15 minutes ago      Up 15 minutes       80&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="容器行为管理的操作"><a href="#容器行为管理的操作" class="headerlink" title="容器行为管理的操作"></a>容器行为管理的操作</h4><pre class="line-numbers language-none"><code class="language-none"># docker-compose &#123;start|stop|restart&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="停止并删除容器"><a href="#停止并删除容器" class="headerlink" title="停止并删除容器"></a>停止并删除容器</h4><pre class="line-numbers language-none"><code class="language-none"># docker-compose down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看容器进程信息"><a href="#查看容器进程信息" class="headerlink" title="查看容器进程信息"></a>查看容器进程信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker-compose toptest-redis-1UID       PID     PPID    C    STIME   TTY   TIME       CMDpolkitd   11451   11415   0    11:05   ?     00:00:01   redis-server *:6379   test-web-1UID    PID     PPID    C    STIME   TTY   TIME       CMDroot   11431   11398   0    11:05   ?     00:00:00   nginx: master process nginx -g daemon off;   101    11524   11431   0    11:05   ?     00:00:00   nginx: worker process                        101    11525   11431   0    11:05   ?     00:00:00   nginx: worker process                        101    11526   11431   0    11:05   ?     00:00:00   nginx: worker process                        101    11527   11431   0    11:05   ?     00:00:00   nginx: worker process<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-compose-build"><a href="#docker-compose-build" class="headerlink" title="docker-compose build"></a><code>docker-compose build</code></h4><blockquote><p><strong>当目录下的<code>dockerfile</code>发生变动时，默认情况下，<code>docker-compose</code>并不会重构镜像，需要执行该命令手动重新构建，再执行<code>docker-compose up -d</code>重建容器</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost testCompose]# tree .&#x2F;.&#x2F;├── docker-compose.yml├── Dockerfile├── file01.txt└── file02.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost testCompose]# cat docker-compose.yml version: &#39;3&#39;services:   web_server:       build: .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost testCompose]# cat Dockerfile FROM nginx:latestADD file01.txt &#x2F;tmpADD file02.txt &#x2F;tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Docker-compose-yml文件"><a href="#四、Docker-compose-yml文件" class="headerlink" title="四、Docker-compose.yml文件"></a>四、<code>Docker-compose.yml</code>文件</h2><h3 id="1-整体结构"><a href="#1-整体结构" class="headerlink" title="1.整体结构"></a>1.整体结构</h3><ul><li><code>version</code>指定<code>docker-compose API</code>的版本</li><li>关于<code>version</code>版本兼容详情</li><li><a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></li><li><code>services</code>描述创建容器信息</li><li><code>networks</code>定义容器网络信息</li><li><code>volumes</code>定义数据卷</li></ul><pre class="line-numbers language-none"><code class="language-none">version: &quot;3&quot;services:    容器名称:        .........        .........    容器名称:        .............        .............networks:volumes:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-容器命令下面的命令"><a href="#2-容器命令下面的命令" class="headerlink" title="2.容器命令下面的命令"></a>2.容器命令下面的命令</h3><h4 id="指定创建容器的时候，使用的镜像"><a href="#指定创建容器的时候，使用的镜像" class="headerlink" title="指定创建容器的时候，使用的镜像"></a>指定创建容器的时候，使用的镜像</h4><pre class="line-numbers language-none"><code class="language-none">image: 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:    webserver:        image: nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据持久化存储"><a href="#数据持久化存储" class="headerlink" title="数据持久化存储"></a>数据持久化存储</h4><pre class="line-numbers language-none"><code class="language-none">volumes:    - 物理目录:容器目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:    dbserver:        image: mysql:5.7        volumes:            - &#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建容器的时候，执行的操作"><a href="#创建容器的时候，执行的操作" class="headerlink" title="创建容器的时候，执行的操作"></a>创建容器的时候，执行的操作</h4><pre class="line-numbers language-none"><code class="language-none">command: &quot;shell命令&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:    server:        image: centos:7        command: &quot;sleep 120&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker psCONTAINER ID   IMAGE      COMMAND       CREATED         STATUS         PORTS     NAMES328381ee82db   centos:7   &quot;sleep 120&quot;   3 seconds ago   Up 2 seconds             test-server-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="指定容器的网络连接"><a href="#指定容器的网络连接" class="headerlink" title="指定容器的网络连接"></a>指定容器的网络连接</h4><pre class="line-numbers language-none"><code class="language-none">links:    - 容器名称:别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:    webserver:        image: centos:7        command: &quot;sleep 120&quot;    server:        image: centos:7        tty: true#用于模拟一个可持续运行的终端        links:            - webserver:web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker-compose up -d[+] Building 0.0s (0&#x2F;0)                                                  [+] Running 3&#x2F;3 ✔ Network test_default        Created                              0.0s  ✔ Container test-webserver-1  Star...                              0.2s  ✔ Container test-server-1     Started                              0.4s [root@harbor test]# docker psCONTAINER ID   IMAGE      COMMAND       CREATED         STATUS         PORTS     NAMESff57f35756ff   centos:7   &quot;&#x2F;bin&#x2F;bash&quot;   8 seconds ago   Up 8 seconds             test-server-181f759b5b95e   centos:7   &quot;sleep 120&quot;   8 seconds ago   Up 8 seconds             test-webserver-1[root@harbor test]# docker exec -it ff57 bash[root@ff57f35756ff &#x2F;]# ping webPING web (172.20.0.2) 56(84) bytes of data.64 bytes from test-webserver-1.test_default (172.20.0.2): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.107 ms64 bytes from test-webserver-1.test_default (172.20.0.2): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.047 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="发布服务-端口映射-和指定容器端口"><a href="#发布服务-端口映射-和指定容器端口" class="headerlink" title="发布服务(端口映射)和指定容器端口"></a>发布服务(端口映射)和指定容器端口</h4><pre class="line-numbers language-none"><code class="language-none">ports:    - 物理机端口:容器端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">expose:    - 端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:    webserver:        image: nginx        expose:            - 80&#x2F;tcp        ports:            - 80:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传递环境变量"><a href="#传递环境变量" class="headerlink" title="传递环境变量"></a>传递环境变量</h4><pre class="line-numbers language-none"><code class="language-none">environment:    key: value    key: value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:    dbserver:        image: mysql:5.7        expose:            - 3306&#x2F;tcp        ports:            - 3306:3306        environment:            MYSQL_ROOT_PASSWORD: WWW.1.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor test]# docker psCONTAINER ID   IMAGE       COMMAND                   CREATED          STATUS          PORTS                                                  NAMES591e6c5bd257   mysql:5.7   &quot;docker-entrypoint.s…&quot;   29 seconds ago   Up 28 seconds   0.0.0.0:3306-&gt;3306&#x2F;tcp, :::3306-&gt;3306&#x2F;tcp, 33060&#x2F;tcp   test-dbserver-1[root@harbor test]# docker exec -it 591e bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义容器的依赖关系"><a href="#定义容器的依赖关系" class="headerlink" title="定义容器的依赖关系"></a>定义容器的依赖关系</h4><blockquote><p><strong>指定容器的创建顺序</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">depends_on:    - 容器名称    - 容器名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="定义容器部署参数"><a href="#定义容器部署参数" class="headerlink" title="定义容器部署参数"></a>定义容器部署参数</h4><pre class="line-numbers language-none"><code class="language-none">deploy:     replicas: 3#指定容器的副本数    resources:#限制容器资源        limits:#硬限制            cpus: &quot;2&quot;            memory: 2G        reservations:#软限制            cpus: &quot;1&quot;            memory: 1G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="容器健康状态监测"><a href="#容器健康状态监测" class="headerlink" title="容器健康状态监测"></a>容器健康状态监测</h4><pre class="line-numbers language-none"><code class="language-none">healthcheck:test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http:&#x2F;&#x2F;localhost&quot;]interval: 10s#监测10stimeout: 10s#超时10s未相应，就判定容器挂掉retries: 3#重试3次start_period: 40s#容器启动40s后开始监测<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="容器网络模式"><a href="#容器网络模式" class="headerlink" title="容器网络模式"></a>容器网络模式</h4><pre class="line-numbers language-none"><code class="language-none">network_mode: &quot;bridge&quot;network_mode: &quot;host&quot;network_mode: &quot;none&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-实验"><a href="#3-实验" class="headerlink" title="3.实验"></a>3.实验</h3><h4 id="A-使用docker-compose部署Wordpress论坛，并且数据库需要配置主从复制环境"><a href="#A-使用docker-compose部署Wordpress论坛，并且数据库需要配置主从复制环境" class="headerlink" title="A.使用docker-compose部署Wordpress论坛，并且数据库需要配置主从复制环境"></a>A.使用<code>docker-compose</code>部署<code>Wordpress</code>论坛，并且数据库需要配置<code>主从复制</code>环境</h4><h5 id="创建数据库用到的数据目录"><a href="#创建数据库用到的数据目录" class="headerlink" title="创建数据库用到的数据目录"></a>创建数据库用到的数据目录</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# mkdir -p &#x2F;mysql&#x2F;&#123;master_data,slave,data&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="配置主库配置文件"><a href="#配置主库配置文件" class="headerlink" title="配置主库配置文件"></a>配置主库配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# vim &#x2F;mysql&#x2F;master_my.cnf[mysqld]server_id&#x3D;10log_bin&#x3D;mastergtid_mode&#x3D;onenforce_gtid_consistency&#x3D;truecollation-server &#x3D; utf8_general_cicharacter-set-server &#x3D; utf8#设置默认建库使用utf8字符集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置从库配置文件"><a href="#配置从库配置文件" class="headerlink" title="配置从库配置文件"></a>配置从库配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# vim &#x2F;mysql&#x2F;slave_my.cnf[mysqld]server_id&#x3D;11log_bin&#x3D;slavegtid_mode&#x3D;onenforce_gtid_consistency&#x3D;truecollation-server &#x3D; utf8_general_cicharacter-set-server &#x3D; utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="编写docker-compose"><a href="#编写docker-compose" class="headerlink" title="编写docker-compose"></a>编写<code>docker-compose</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# mkdir &#x2F;wordpress[root@harbor wordpress]# cd &#x2F;wordpress[root@harbor wordpress]# vim docker-compose.ymlversion: &#39;3&#39;services:     master_db:        image: mysql:5.7        volumes:             - &#x2F;mysql&#x2F;master_data:&#x2F;var&#x2F;lib&#x2F;mysql            - &#x2F;mysql&#x2F;master_my.cnf:&#x2F;etc&#x2F;my.cnf        environment:             MYSQL_ROOT_PASSWORD: WWW.1.com            MYSQL_DATABASE: wordpress            MYSQL_USER: wordpress            MYSQL_PASSWORD: WWW.1.com    slave_db:        image: mysql:5.7        volumes:             - &#x2F;mysql&#x2F;slave_data:&#x2F;var&#x2F;lib&#x2F;mysql            - &#x2F;mysql&#x2F;slave_my.cnf:&#x2F;etc&#x2F;my.cnf        environment:             MYSQL_ROOT_PASSWORD: WWW.1.com        links:            - master_db:masterdb    redis:        image: redis        ports:            - 6379:6379    wp:        image: wordpress        links:            - master_db:masterdb        environment:            WORDPRESS_DB_HOST: masterdb            WORDPRESS_DB_USER: wordpress            WORDPRESS_DB_PASSWORD: WWW.1.com            WORDPRESS_DB_NAME: wordpress            WORDPRESS_TABLE_PREFIX: wp_        ports:            - 80:80        depends_on:            - master_db            - slave_db            - redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="创建容器-1"><a href="#创建容器-1" class="headerlink" title="创建容器"></a>创建容器</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# docker-compose up -d[+] Building 0.0s (0&#x2F;0)                                                  [+] Running 5&#x2F;5 ✔ Network wordpress_default        Created                         0.0s  ✔ Container wordpress-redis-1      Started                         0.4s  ✔ Container wordpress-master_db-1  Started                         0.4s  ✔ Container wordpress-slave_db-1   Started                         0.6s  ✔ Container wordpress-wp-1         S...                            0.8s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置主从复制环境"><a href="#配置主从复制环境" class="headerlink" title="配置主从复制环境"></a>配置主从复制环境</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# docker exec -it wordpress-master_db-1 &#x2F;bin&#x2F;bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;mysql&gt; exitByebash-4.2# exitexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# docker exec -it wordpress-slave_db-1 &#x2F;bin&#x2F;bashbash-4.2# mysql -uroot -pWWW.1.commysql&gt; change master to    -&gt; master_host&#x3D;&quot;masterdb&quot;,    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1;Query OK, 0 rows affected, 2 warnings (0.01 sec)mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: masterdb                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000003          Read_Master_Log_Pos: 481               Relay_Log_File: 9e6207d2c18b-relay-bin.000003                Relay_Log_Pos: 688        Relay_Master_Log_File: master.000003             Slave_IO_Running: Yes            Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="安装Wordpress"><a href="#安装Wordpress" class="headerlink" title="安装Wordpress"></a>安装<code>Wordpress</code></h5><blockquote><p><strong>过程省略</strong></p></blockquote><h5 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置<code>redis</code></h5><p><img src="https://www.wsjj.top/upload/2023/06/docker-compose01.png" alt="docker-compose01"></p><h5 id="修改redis配置文件"><a href="#修改redis配置文件" class="headerlink" title="修改redis配置文件"></a>修改<code>redis</code>配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# docker cp wordpress-wp-1:&#x2F;var&#x2F;www&#x2F;html&#x2F;wp-content&#x2F;plugins&#x2F;redis-cache&#x2F;includes&#x2F;object-cache.php &#x2F;root&#x2F;[root@harbor wordpress]# vim &#x2F;root&#x2F;object-cache.phpprotected function build_parameters() &#123;        $parameters &#x3D; [            &#39;scheme&#39; &#x3D;&gt; &#39;tcp&#39;,            &#39;host&#39; &#x3D;&gt; &#39;192.168.140.16&#39;,            &#39;port&#39; &#x3D;&gt; 6379,            &#39;database&#39; &#x3D;&gt; 0,            &#39;timeout&#39; &#x3D;&gt; 1,            &#39;read_timeout&#39; &#x3D;&gt; 1,            &#39;retry_interval&#39; &#x3D;&gt; null,            &#39;persistent&#39; &#x3D;&gt; false,        ];[root@harbor wordpress]# docker cp &#x2F;root&#x2F;object-cache.php wordpress-wp-1:&#x2F;var&#x2F;www&#x2F;html&#x2F;wp-content&#x2F;plugins&#x2F;redis-cache&#x2F;includes&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor wordpress]# docker cp wordpress-wp-1:&#x2F;var&#x2F;www&#x2F;html&#x2F;wp-config.php &#x2F;root&#x2F;[root@harbor wordpress]# vim &#x2F;root&#x2F;wp-config.php#在文件末尾添加以下内容define(&#39;WP_REDIS_HOST&#39;, &#39;192.168.140.16&#39;);      #物理机IPdefine(&#39;WP_REDIS_PORT&#39;, &#39;6379&#39;);define(&#39;WP_REDIS_DATABASE&#39;, &#39;0&#39;);[root@harbor wordpress]# docker cp &#x2F;root&#x2F;wp-config.php wordpress-wp-1:&#x2F;var&#x2F;www&#x2F;html&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动redis插件"><a href="#启动redis插件" class="headerlink" title="启动redis插件"></a>启动<code>redis</code>插件</h5><p><img src="https://www.wsjj.top/upload/2023/06/container07.png" alt="container07"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 笔记 </category>
          
          <category> wordpress </category>
          
          <category> 容器 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> cetnos </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】基于Harbor构建企业级镜像仓库</title>
      <link href="/2023/06/07/135/"/>
      <url>/2023/06/07/135/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】基于Harbor构建企业级镜像仓库"><a href="#【容器应用系列教程】基于Harbor构建企业级镜像仓库" class="headerlink" title="【容器应用系列教程】基于Harbor构建企业级镜像仓库"></a>【容器应用系列教程】基于Harbor构建企业级镜像仓库</h1><h2 id="一、仓库类型"><a href="#一、仓库类型" class="headerlink" title="一、仓库类型"></a>一、仓库类型</h2><ul><li>公有仓库<ul><li><code>DockerHub</code><ul><li><code>https://hub.docker.com/</code></li></ul></li></ul></li><li>私有仓库<ul><li><code>registry</code></li><li><code>harbor</code></li></ul></li></ul><h2 id="二、Dockerhub的使用"><a href="#二、Dockerhub的使用" class="headerlink" title="二、Dockerhub的使用"></a>二、Dockerhub的使用</h2><blockquote><p><strong>需要自行去官网注册账号：<a href="https://hub.docker.com/">https://hub.docker.com</a></strong></p></blockquote><h3 id="1-登录Docker"><a href="#1-登录Docker" class="headerlink" title="1.登录Docker"></a>1.登录<code>Docker</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https:&#x2F;&#x2F;hub.docker.com to create one.Username: wangshengjjPassword: WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.Configure a credential helper to remove this warning. Seehttps:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-storeLogin Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-上传镜像到Dockerhub"><a href="#2-上传镜像到Dockerhub" class="headerlink" title="2.上传镜像到Dockerhub"></a>2.上传镜像到<code>Dockerhub</code></h3><blockquote><p><strong>每次<code>push</code>镜像之前，都需要打标签，仓库地址这取决于您在<code>Dockerhub</code>上注册的用户名</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># docker tag 镜像名:tag  仓库地址&#x2F;镜像名:tag# docker push 仓库地址&#x2F;镜像名:tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker tag nginx:1.14 wangshengjj&#x2F;nginx:1.14[root@localhost ~]# docker push wangshengjj&#x2F;nginx:1.14 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-登出"><a href="#3-登出" class="headerlink" title="3.登出"></a>3.登出</h3><blockquote><p><strong>每次上传完镜像，记得退出登录</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker logout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、关于Harbor"><a href="#三、关于Harbor" class="headerlink" title="三、关于Harbor"></a>三、关于Harbor</h2><blockquote><p><strong><code>Harbor</code>是一个<code>Vmware</code>开源的，用于存储和分发<code>Docker</code>镜像的企业级<code>Registry</code>服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等。</strong><br><strong><code>Harbor</code>官网：<a href="https://goharbor.io/">https://goharbor.io/</a></strong></p></blockquote><h3 id="1-Harbor的特性"><a href="#1-Harbor的特性" class="headerlink" title="1.Harbor的特性"></a>1.<code>Harbor</code>的特性</h3><ul><li>基于角色的访问控制</li><li>镜像复制</li><li>图形化用户界面</li><li><code>AD/LDAP</code>支持</li><li>审计管理</li><li>国际化</li><li><code>RESTful API</code></li><li>部署简单</li></ul><h3 id="2-Harbor部署的方式"><a href="#2-Harbor部署的方式" class="headerlink" title="2.Harbor部署的方式"></a>2.<code>Harbor</code>部署的方式</h3><ul><li><code>on-line</code>在线部署</li><li><code>off-line</code>离线部署</li></ul><h2 id="四、单机部署Harbor"><a href="#四、单机部署Harbor" class="headerlink" title="四、单机部署Harbor"></a>四、单机部署<code>Harbor</code></h2><blockquote><p><strong>本教程采用离线部署方式，截止教程编写日志，使用最新版本<code>v2.8.2</code></strong></p></blockquote><h3 id="关闭防火墙和SElinux、配置时间同步"><a href="#关闭防火墙和SElinux、配置时间同步" class="headerlink" title="关闭防火墙和SElinux、配置时间同步"></a>关闭防火墙和SElinux、配置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="1-添加主机名解析"><a href="#1-添加主机名解析" class="headerlink" title="1.添加主机名解析"></a>1.添加主机名解析</h3><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# vim &#x2F;etc&#x2F;hosts192.168.140.10 harbor.linux.com harbor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-安装Docker-ce"><a href="#2-安装Docker-ce" class="headerlink" title="2.安装Docker-ce"></a>2.安装<code>Docker-ce</code></h3><blockquote><p><strong>安装过程省略</strong><br><strong>请查看<code>Docker</code>安装教程：<a href="https://www.wsjj.top/archives/132">https://www.wsjj.top/archives/132</a></strong></p></blockquote><h3 id="3-安装Docker-compose"><a href="#3-安装Docker-compose" class="headerlink" title="3.安装Docker-compose"></a>3.安装<code>Docker-compose</code></h3><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.18.0&#x2F;docker-compose-linux-x86_64[root@harbor ~]# chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose[root@harbor ~]# docker-compose -vDocker Compose version v2.18.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-安装Harbor"><a href="#4-安装Harbor" class="headerlink" title="4.安装Harbor"></a>4.安装<code>Harbor</code></h3><h4 id="A-下载Harbor"><a href="#A-下载Harbor" class="headerlink" title="A.下载Harbor"></a>A.下载<code>Harbor</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# wget https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v2.8.2&#x2F;harbor-offline-installer-v2.8.2.tgz[root@harbor ~]# tar xf harbor-offline-installer-v2.8.2.tgz -C &#x2F;usr&#x2F;local&#x2F;[root@harbor ~]# cp &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;harbor.yml.tmpl &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;harbor.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-为Harbor配置SSL证书"><a href="#B-为Harbor配置SSL证书" class="headerlink" title="B.为Harbor配置SSL证书"></a>B.为<code>Harbor</code>配置<code>SSL</code>证书</h4><blockquote><p><strong>注意：<code>Harbor</code>需要<code>V3</code>版<code>SSL</code>证书</strong></p></blockquote><h5 id="配置私有ca"><a href="#配置私有ca" class="headerlink" title="配置私有ca"></a>配置私有<code>ca</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# mkdir -p &#x2F;opt&#x2F;ssl[root@harbor ~]# cd &#x2F;opt&#x2F;ssl[root@harbor ssl]# openssl genrsa -out &#x2F;opt&#x2F;ssl&#x2F;ca.key 4096[root@harbor ssl]# openssl req -x509 -new -nodes -sha512 -days 3650  -subj &quot;&#x2F;CN&#x3D;harbor.linux.com&quot;  -key &#x2F;opt&#x2F;ssl&#x2F;ca.key  -out &#x2F;opt&#x2F;ssl&#x2F;ca.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="为Harbor颁发证书"><a href="#为Harbor颁发证书" class="headerlink" title="为Harbor颁发证书"></a>为<code>Harbor</code>颁发证书</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor ssl]# openssl genrsa -out &#x2F;opt&#x2F;ssl&#x2F;server.key 4096[root@harbor ssl]# openssl req  -new -sha512  -subj &quot;&#x2F;CN&#x3D;harbor.linux.com&quot;  -key &#x2F;opt&#x2F;ssl&#x2F;server.key  -out &#x2F;opt&#x2F;ssl&#x2F;server.csr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="准备v3-ext文件-重要"><a href="#准备v3-ext文件-重要" class="headerlink" title="准备v3.ext文件(重要)"></a>准备<code>v3.ext</code>文件(重要)</h6><pre class="line-numbers language-none"><code class="language-none">[root@harbor ssl]# vim &#x2F;opt&#x2F;ssl&#x2F;v3.extauthorityKeyIdentifier&#x3D;keyid,issuerbasicConstraints&#x3D;CA:FALSEkeyUsage &#x3D; digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage &#x3D; serverAuth  subjectAltName &#x3D; @alt_names[alt_names]DNS.1&#x3D;harbor.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="颁发自签证书"><a href="#颁发自签证书" class="headerlink" title="颁发自签证书"></a>颁发自签证书</h6><pre class="line-numbers language-none"><code class="language-none">[root@harbor ssl]# openssl x509 -req -sha512 -days 3650 -extfile &#x2F;opt&#x2F;ssl&#x2F;v3.ext A &#x2F;opt&#x2F;ssl&#x2F;ca.crt -CAkey &#x2F;opt&#x2F;ssl&#x2F;ca.key -CAcreateserial -in &#x2F;opt&#x2F;ssl&#x2F;server.csr ut &#x2F;opt&#x2F;ssl&#x2F;server.crt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-编辑Harbor配置文件"><a href="#C-编辑Harbor配置文件" class="headerlink" title="C.编辑Harbor配置文件"></a>C.编辑<code>Harbor</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# vim &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;harbor.ymlhostname: harbor.linux.com#指定域名，和刚才自签的域名保持一致http:  # port for http, default is 80. If https enabled, this port will redirect to https port  port: 80# https related confighttps:  # https port for harbor, default is 443  port: 443  # The path of cert and key files for nginx  certificate: &#x2F;opt&#x2F;ssl&#x2F;server.crt#指定SSL证书路径  private_key: &#x2F;opt&#x2F;ssl&#x2F;server.key#指定SSL秘钥路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-启动Harbor"><a href="#D-启动Harbor" class="headerlink" title="D.启动Harbor"></a>D.启动<code>Harbor</code></h4><h5 id="生成必要的配置文件"><a href="#生成必要的配置文件" class="headerlink" title="生成必要的配置文件"></a>生成必要的配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# bash &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;prepareprepare base dir is set to &#x2F;usr&#x2F;local&#x2F;harborGenerated configuration file: &#x2F;config&#x2F;portal&#x2F;nginx.confGenerated configuration file: &#x2F;config&#x2F;log&#x2F;logrotate.confGenerated configuration file: &#x2F;config&#x2F;log&#x2F;rsyslog_docker.confGenerated configuration file: &#x2F;config&#x2F;nginx&#x2F;nginx.confGenerated configuration file: &#x2F;config&#x2F;core&#x2F;envGenerated configuration file: &#x2F;config&#x2F;core&#x2F;app.confGenerated configuration file: &#x2F;config&#x2F;registry&#x2F;config.ymlGenerated configuration file: &#x2F;config&#x2F;registryctl&#x2F;envGenerated configuration file: &#x2F;config&#x2F;registryctl&#x2F;config.ymlGenerated configuration file: &#x2F;config&#x2F;db&#x2F;envGenerated configuration file: &#x2F;config&#x2F;jobservice&#x2F;envGenerated configuration file: &#x2F;config&#x2F;jobservice&#x2F;config.ymlGenerated and saved secret to file: &#x2F;data&#x2F;secret&#x2F;keys&#x2F;secretkeySuccessfully called func: create_root_certGenerated configuration file: &#x2F;compose_location&#x2F;docker-compose.ymlClean up the input dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装<code>Harbor</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# bash &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;install.sh[+] Building 0.0s (0&#x2F;0)                                                          [+] Running 10&#x2F;10 ✔ Network harbor_harbor        Created                                     0.0s  ✔ Container harbor-log         Started                                     0.3s  ✔ Container registryctl        Started                                     0.7s  ✔ Container harbor-db          Started                                     1.0s  ✔ Container registry           Started                                     1.0s  ✔ Container harbor-portal      Started                                     0.9s  ✔ Container redis              Started                                     0.9s  ✔ Container harbor-core        Started                                     1.2s  ✔ Container harbor-jobservice  Started                                     1.7s  ✔ Container nginx              Started                                     1.7s ✔ ----Harbor has been installed and started successfully.----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# docker imagesREPOSITORY                      TAG       IMAGE ID       CREATED      SIZEgoharbor&#x2F;harbor-exporter        v2.8.2    63341a78f287   4 days ago   98.1MBgoharbor&#x2F;redis-photon           v2.8.2    6f4498a430ca   4 days ago   121MBgoharbor&#x2F;trivy-adapter-photon   v2.8.2    06de9f1c733d   4 days ago   460MBgoharbor&#x2F;notary-server-photon   v2.8.2    ef7c8ea2dc49   4 days ago   114MBgoharbor&#x2F;notary-signer-photon   v2.8.2    4e5b1746a124   4 days ago   111MBgoharbor&#x2F;harbor-registryctl     v2.8.2    fa61a236a6d6   4 days ago   142MBgoharbor&#x2F;registry-photon        v2.8.2    f80e71363231   4 days ago   79.3MBgoharbor&#x2F;nginx-photon           v2.8.2    3d009028f260   4 days ago   120MBgoharbor&#x2F;harbor-log             v2.8.2    2914d282d9bf   4 days ago   127MBgoharbor&#x2F;harbor-jobservice      v2.8.2    40118f1568a8   4 days ago   141MBgoharbor&#x2F;harbor-core            v2.8.2    0bbbd1f379fc   4 days ago   165MBgoharbor&#x2F;harbor-portal          v2.8.2    3e74e0758aa4   4 days ago   127MBgoharbor&#x2F;harbor-db              v2.8.2    5126635ae9f0   4 days ago   174MBgoharbor&#x2F;prepare                v2.8.2    eb3cf3cdd17a   4 days ago   163MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# docker psCONTAINER ID   IMAGE                                COMMAND                   CREATED              STATUS                        PORTS                                                                            NAMES1e00e179acd2   goharbor&#x2F;harbor-jobservice:v2.8.2    &quot;&#x2F;harbor&#x2F;entrypoint.…&quot;   About a minute ago   Up 55 seconds (healthy)                                                                                        harbor-jobserviced5fffbe5823d   goharbor&#x2F;nginx-photon:v2.8.2         &quot;nginx -g &#39;daemon of…&quot;   About a minute ago   Up 58 seconds (healthy)       0.0.0.0:80-&gt;8080&#x2F;tcp, :::80-&gt;8080&#x2F;tcp, 0.0.0.0:443-&gt;8443&#x2F;tcp, :::443-&gt;8443&#x2F;tcp   nginxf1dbfee71407   goharbor&#x2F;harbor-core:v2.8.2          &quot;&#x2F;harbor&#x2F;entrypoint.…&quot;   About a minute ago   Up 59 seconds (healthy)                                                                                        harbor-core36aff7d14ee1   goharbor&#x2F;harbor-portal:v2.8.2        &quot;nginx -g &#39;daemon of…&quot;   About a minute ago   Up 59 seconds (healthy)                                                                                        harbor-portal87db46acedac   goharbor&#x2F;registry-photon:v2.8.2      &quot;&#x2F;home&#x2F;harbor&#x2F;entryp…&quot;   About a minute ago   Up 59 seconds (healthy)                                                                                        registryb42157ee30e2   goharbor&#x2F;harbor-registryctl:v2.8.2   &quot;&#x2F;home&#x2F;harbor&#x2F;start.…&quot;   About a minute ago   Up 59 seconds (healthy)                                                                                        registryctl6c57d8b4f315   goharbor&#x2F;harbor-db:v2.8.2            &quot;&#x2F;docker-entrypoint.…&quot;   About a minute ago   Up 59 seconds (healthy)                                                                                        harbor-dbaeb76f6a1ecd   goharbor&#x2F;redis-photon:v2.8.2         &quot;redis-server &#x2F;etc&#x2F;r…&quot;   About a minute ago   Up 59 seconds (healthy)                                                                                        redis7a3d7f5a487d   goharbor&#x2F;harbor-log:v2.8.2           &quot;&#x2F;bin&#x2F;sh -c &#x2F;usr&#x2F;loc…&quot;   About a minute ago   Up About a minute (healthy)   127.0.0.1:1514-&gt;10514&#x2F;tcp                                                        harbor-log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Windows配置hosts域名解析"><a href="#5-Windows配置hosts域名解析" class="headerlink" title="5.Windows配置hosts域名解析"></a>5.<code>Windows</code>配置<code>hosts</code>域名解析</h3><blockquote><p><strong>修改文件：<code>C:\Windows\System32\drivers\etc\hosts</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/harbor01.png" alt="harbor01"></p><h3 id="6-登录测试"><a href="#6-登录测试" class="headerlink" title="6.登录测试"></a>6.登录测试</h3><p><img src="https://www.wsjj.top/upload/2023/06/harbor02.png" alt="harbor02"></p><p><img src="https://www.wsjj.top/upload/2023/06/harbor03.png" alt="harbor03"></p><p><img src="https://www.wsjj.top/upload/2023/06/harbor04.png" alt="harbor04"></p><h3 id="7-创建测试项目"><a href="#7-创建测试项目" class="headerlink" title="7.创建测试项目"></a>7.创建测试项目</h3><p><img src="https://www.wsjj.top/upload/2023/06/harbor05.png" alt="harbor05"></p><h3 id="8-创建用户，并授权项目"><a href="#8-创建用户，并授权项目" class="headerlink" title="8.创建用户，并授权项目"></a>8.创建用户，并授权项目</h3><p><img src="https://www.wsjj.top/upload/2023/06/harbor06.png" alt="harbor06"></p><p><img src="https://www.wsjj.top/upload/2023/06/harbor07.png" alt="harbor07"></p><h3 id="9-上传镜像"><a href="#9-上传镜像" class="headerlink" title="9.上传镜像"></a>9.上传镜像</h3><h4 id="由于我们启用了https访问，并且是未经互联网认证的私有CA，需要手动拷贝证书给docker"><a href="#由于我们启用了https访问，并且是未经互联网认证的私有CA，需要手动拷贝证书给docker" class="headerlink" title="由于我们启用了https访问，并且是未经互联网认证的私有CA，需要手动拷贝证书给docker"></a>由于我们启用了https访问，并且是未经互联网认证的私有CA，需要手动拷贝证书给docker</h4><blockquote><p><strong>这一步一定要做，否则<code>Docker</code>登录失败</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# mkdir -p &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;harbor.linux.com[root@harbor ~]# cp &#x2F;opt&#x2F;ssl&#x2F;server.crt &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;harbor.linux.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="登录私有仓库"><a href="#登录私有仓库" class="headerlink" title="登录私有仓库"></a>登录私有仓库</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# docker login harbor.linux.comUsername: wsjjPassword: WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.Configure a credential helper to remove this warning. Seehttps:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-storeLogin Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="上传测试镜像"><a href="#上传测试镜像" class="headerlink" title="上传测试镜像"></a>上传测试镜像</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# docker tag centos:7 harbor.linux.com&#x2F;project&#x2F;centos:v1[root@harbor ~]# docker push harbor.linux.com&#x2F;project&#x2F;centos:v1The push refers to repository [harbor.linux.com&#x2F;project&#x2F;centos]174f56854903: Pushed v1: digest: sha256:dead07b4d8ed7e29e98de0f4504d87e8880d4347859d839686a31da35a3b532f size: 529<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看web端项目仓库"><a href="#查看web端项目仓库" class="headerlink" title="查看web端项目仓库"></a>查看<code>web</code>端项目仓库</h4><p><img src="https://www.wsjj.top/upload/2023/06/harbor08.png" alt="harbor08"></p><p><img src="https://www.wsjj.top/upload/2023/06/harbor09.png" alt="harbor09"></p><h4 id="上传完镜像别忘了退出登录"><a href="#上传完镜像别忘了退出登录" class="headerlink" title="上传完镜像别忘了退出登录"></a>上传完镜像别忘了退出登录</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor ~]# docker logout harbor.linux.comRemoving login credentials for harbor.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10-Harbor组件"><a href="#10-Harbor组件" class="headerlink" title="10.Harbor组件"></a>10.<code>Harbor</code>组件</h3><p><img src="https://www.wsjj.top/upload/2023/06/harbor10.png" alt="harbor10"></p><ul><li><code>redis</code><ul><li>负责存储会话信息</li></ul></li><li><code>harbor-db</code><ul><li>负责存储仓库数据(项目名称、镜像名称)</li></ul></li><li><code>registry</code><ul><li>镜像的上传、下载</li></ul></li><li><code>Log collector</code><ul><li>记录日志</li></ul></li><li><code>harbor-core</code><ul><li>提供<code>web UI</code>界面 </li><li>颁发令牌<code>token</code></li><li><code>webhook</code><ul><li>负责搜集镜像变化的信息，通知给<code>UI</code>进行展示</li></ul></li></ul></li><li><code>proxy</code><ul><li>提供反向代理</li></ul></li><li><code>Job service</code><ul><li>提供镜像复制功能</li></ul></li></ul><h2 id="五、Harbor高可用集群部署"><a href="#五、Harbor高可用集群部署" class="headerlink" title="五、Harbor高可用集群部署"></a>五、Harbor高可用集群部署</h2><h3 id="1-Harbor高可用进群介绍"><a href="#1-Harbor高可用进群介绍" class="headerlink" title="1.Harbor高可用进群介绍"></a>1.<code>Harbor</code>高可用进群介绍</h3><ul><li>利用<code>Harbor</code>自带的复制功能<ul><li>两个<code>harbor</code>节点在进行镜像复制时，如果其中一个节点故障, 此时有新镜像的话，并不会复制到故障节点，而且故障的<code>harbor</code>修复后也不会自动复制数据，会导致数据不一致问题</li></ul></li><li>基于共享存储的方式实现<ul><li>将数据库(postgreSQL)、<code>redis</code>独立出来<ul><li><code>harbor 1.6</code>版本后，数据库仅支持<code>postgreSQL</code></li></ul></li><li>利用共享存储<code>nfs</code>、<code>ipsan</code>、<code>glusterfs</code>存储镜像</li></ul></li></ul><h3 id="2-部署Harbor集群"><a href="#2-部署Harbor集群" class="headerlink" title="2.部署Harbor集群"></a>2.部署<code>Harbor</code>集群</h3><h4 id="A-环境准备"><a href="#A-环境准备" class="headerlink" title="A.环境准备"></a>A.环境准备</h4><table><thead><tr><th>主机名</th><th>IP地址</th><th>软件</th></tr></thead><tbody><tr><td>node1.linux.com</td><td>192.168.140.10</td><td>Docker、Harbor、NFS、keepalived</td></tr><tr><td>node2.linux.com</td><td>192.168.140.11</td><td>Docker、Harbor、NFS、keepalived</td></tr><tr><td>node3.linux.com</td><td>192.168.140.12</td><td>NFS、postgreSQL、Redis</td></tr></tbody></table><h4 id="B-所有主机关闭防火墙和SElinux、配置时间同步"><a href="#B-所有主机关闭防火墙和SElinux、配置时间同步" class="headerlink" title="B.所有主机关闭防火墙和SElinux、配置时间同步"></a>B.所有主机关闭防火墙和SElinux、配置时间同步</h4><blockquote><p><strong>过程省略</strong></p></blockquote><h4 id="C-配置NFS服务器"><a href="#C-配置NFS服务器" class="headerlink" title="C.配置NFS服务器"></a>C.配置NFS服务器</h4><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# mkdir &#x2F;data[root@node3 ~]# chmod a+w &#x2F;data[root@node3 ~]# yum install -y nfs-utils rpcbind<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# vim &#x2F;etc&#x2F;exports&#x2F;data   192.168.140.10(rw,no_root_squash)       192.168.140.11(rw,no_root_squash)[root@node3 ~]# systemctl enable --now nfs-server[root@node3 ~]# showmount -e localhostExport list for localhost:&#x2F;data 192.168.140.11,192.168.140.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="给node1和node2挂载NFS"><a href="#给node1和node2挂载NFS" class="headerlink" title="给node1和node2挂载NFS"></a>给<code>node1</code>和<code>node2</code>挂载<code>NFS</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y nfs-utils[root@node2 ~]# yum install -y nfs-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mkdir &#x2F;data[root@node2 ~]# mkdir &#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;fstab192.168.140.12:&#x2F;data&#x2F;datanfsdefaults0 0[root@node2 ~]# vim &#x2F;etc&#x2F;fstab192.168.140.12:&#x2F;data&#x2F;datanfsdefaults0 0[root@node1 ~]# mount -a[root@node2 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-回到node3部署redis"><a href="#D-回到node3部署redis" class="headerlink" title="D.回到node3部署redis"></a>D.回到<code>node3</code>部署<code>redis</code></h4><h5 id="配置epel源"><a href="#配置epel源" class="headerlink" title="配置epel源"></a>配置<code>epel</code>源</h5><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装<code>redis</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# yum install -y redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改redis配置文件"><a href="#修改redis配置文件" class="headerlink" title="修改redis配置文件"></a>修改<code>redis</code>配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# vim &#x2F;etc&#x2F;redis.confbind 192.168.140.12#指定监听地址daemonize yes#开启后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动<code>redis</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# systemctl enable --now redis[root@node3 ~]# netstat -tunlp | grep redistcp        0      0 192.168.140.12:6379     0.0.0.0:*               LISTEN      13102&#x2F;redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="E-安装postgreSQL"><a href="#E-安装postgreSQL" class="headerlink" title="E.安装postgreSQL"></a>E.安装<code>postgreSQL</code></h4><h5 id="下载postgreSQL安装包"><a href="#下载postgreSQL安装包" class="headerlink" title="下载postgreSQL安装包"></a>下载<code>postgreSQL</code>安装包</h5><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# wget --no-check-certificate https:&#x2F;&#x2F;ftp.postgresql.org&#x2F;pub&#x2F;source&#x2F;v12.2&#x2F;postgresql-12.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="安装必要的依赖"><a href="#安装必要的依赖" class="headerlink" title="安装必要的依赖"></a>安装必要的依赖</h5><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# yum install -y cmake gcc gcc-c++ perl readline readline-devel openssl openssl-devel zlib zlib-devel ncurses-devel readline readline-devel zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="安装postgreSQL"><a href="#安装postgreSQL" class="headerlink" title="安装postgreSQL"></a>安装<code>postgreSQL</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# tar xf postgresql-12.2.tar.gz[root@node3 ~]# cd postgresql-12.2&#x2F;[root@node3 postgresql-12.2]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;postsql[root@node3 postgresql-12.2]# make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="初始化postgreSQL"><a href="#初始化postgreSQL" class="headerlink" title="初始化postgreSQL"></a>初始化<code>postgreSQL</code></h5><blockquote><p><strong>启动<code>postgreSQL</code>需要普通用户</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# useradd postgres[root@node3 ~]# mkdir -p &#x2F;work&#x2F;harbor-db&#x2F;&#123;data,temp,log&#125;[root@node3 ~]# chown -R postgres.postgres &#x2F;work&#x2F;harbor-db&#x2F;[root@node3 ~]# su - postgres[postgres@node3 ~]$ &#x2F;usr&#x2F;local&#x2F;postsql&#x2F;bin&#x2F;initdb --username&#x3D;postgres -D &#x2F;work&#x2F;harbor-db&#x2F;data&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改postgreSQL配置文件"><a href="#修改postgreSQL配置文件" class="headerlink" title="修改postgreSQL配置文件"></a>修改<code>postgreSQL</code>配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[postgres@node3 ~]$ vim &#x2F;work&#x2F;harbor-db&#x2F;data&#x2F;postgresql.conf#配置文件并不完整，仅展示修改部分data_directory &#x3D; &#39;&#x2F;work&#x2F;harbor-db&#x2F;data&#39;         # use data in another directory                                        # (change requires restart)hba_file &#x3D; &#39;&#x2F;work&#x2F;harbor-db&#x2F;data&#x2F;pg_hba.conf&#39;   # host-based authentication file                                        # (change requires restart)ident_file &#x3D; &#39;&#x2F;work&#x2F;harbor-db&#x2F;data&#x2F;pg_ident.conf&#39;listen_addresses &#x3D; &#39;*&#39;port &#x3D; 5432unix_socket_directories &#x3D; &#39;&#x2F;work&#x2F;harbor-db&#x2F;temp&#39;timezone &#x3D; &#39;Asia&#x2F;Shanghai&#39;logging_collector &#x3D; on#启用日志功能log_rotation_size &#x3D; 1GB#启动日志重写功能，超过1GB，创建新的日志文件log_timezone &#x3D; &#39;Asia&#x2F;Shanghai&#39;log_min_duration_statement &#x3D; 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="设置允许连接的远程客户端"><a href="#设置允许连接的远程客户端" class="headerlink" title="设置允许连接的远程客户端"></a>设置允许连接的远程客户端</h5><pre class="line-numbers language-none"><code class="language-none">[postgres@node3 ~]$ vim &#x2F;work&#x2F;harbor-db&#x2F;data&#x2F;pg_hba.conf#把以下内容加到文件末尾host    all             harbor          192.168.140.10&#x2F;24                 trusthost    all             harbor          192.168.140.11&#x2F;24                 trust<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动postgreSQL数据库"><a href="#启动postgreSQL数据库" class="headerlink" title="启动postgreSQL数据库"></a>启动<code>postgreSQL</code>数据库</h5><pre class="line-numbers language-none"><code class="language-none">[postgres@node3 ~]$ &#x2F;usr&#x2F;local&#x2F;postsql&#x2F;bin&#x2F;pg_ctl -D &#x2F;work&#x2F;harbor-db&#x2F;data&#x2F; -l &#x2F;work&#x2F;harbor-db&#x2F;log&#x2F;start.log start[postgres@node3 ~]$ netstat -tunlp | grep postgres(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      22578&#x2F;postgres      tcp6       0      0 :::5432                 :::*                    LISTEN      22578&#x2F;postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="创建Harbor用到的用户和库"><a href="#创建Harbor用到的用户和库" class="headerlink" title="创建Harbor用到的用户和库"></a>创建<code>Harbor</code>用到的用户和库</h5><pre class="line-numbers language-none"><code class="language-none">[postgres@node3 ~]$ &#x2F;usr&#x2F;local&#x2F;postsql&#x2F;bin&#x2F;psql -h 127.0.0.1 -p 5432 -U postgres#登录数据库psql (12.2)#postgres用户是数据库的管理员用户#修改管理员密码postgres&#x3D;# \password postgresEnter new password: WWW.1.comEnter it again:WWW.1.com#创建Harbor用到的用户postgres&#x3D;# create user harbor with password &#39;WWW.1.com&#39;;CREATE ROLE#创建Harbor用到的库postgres&#x3D;# create database harbor;CREATE DATABASEpostgres&#x3D;# create database harbor_clair;CREATE DATABASEpostgres&#x3D;# create database harbor_notary_server;CREATE DATABASEpostgres&#x3D;# create database harbor_notary_signer;CREATE DATABASE#授权harbor用户对这些库有操作权限postgres&#x3D;# grant all on database harbor to harbor;GRANTpostgres&#x3D;# grant all on database harbor_clair to harbor;GRANTpostgres&#x3D;# grant all on database harbor_notary_server to harbor;GRANTpostgres&#x3D;# grant all on database harbor_notary_signer to harbor;GRANT#退出数据库postgres&#x3D;# \q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="node1、node2主机连接数据库测试"><a href="#node1、node2主机连接数据库测试" class="headerlink" title="node1、node2主机连接数据库测试"></a><code>node1</code>、<code>node2</code>主机连接数据库测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y postgresql[root@node2 ~]# yum install -y postgresql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# psql -h 192.168.140.12 -p 5432 -U harbor -W用户 harbor 的口令：WWW.1.comharbor&#x3D;&gt; harbor&#x3D;&gt; \q[root@node2 ~]# psql -h 192.168.140.12 -p 5432 -U harbor -W用户 harbor 的口令：WWW.1.comharbor&#x3D;&gt; harbor&#x3D;&gt; \q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-给node1和node2安装Harbor"><a href="#F-给node1和node2安装Harbor" class="headerlink" title="F.给node1和node2安装Harbor"></a>F.给<code>node1</code>和<code>node2</code>安装<code>Harbor</code></h4><h5 id="node1和node2安装Docker-ce"><a href="#node1和node2安装Docker-ce" class="headerlink" title="node1和node2安装Docker-ce"></a><code>node1</code>和<code>node2</code>安装<code>Docker-ce</code></h5><blockquote><p><strong>安装过程省略</strong><br><strong>关于<code>Docker</code>的安装教程：<a href="https://www.wsjj.top/archives/132">https://www.wsjj.top/archives/132</a></strong></p></blockquote><h5 id="安装Docker-compose"><a href="#安装Docker-compose" class="headerlink" title="安装Docker-compose"></a>安装<code>Docker-compose</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.18.0&#x2F;docker-compose-linux-x86_64[root@node1 ~]# chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose[root@node2 ~]# wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.18.0&#x2F;docker-compose-linux-x86_64[root@node2 ~]# chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="下载并且安装Harbor"><a href="#下载并且安装Harbor" class="headerlink" title="下载并且安装Harbor"></a>下载并且安装<code>Harbor</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# wget https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v2.8.2&#x2F;harbor-offline-installer-v2.8.2.tgz[root@node2 ~]# tar xf harbor-offline-installer-v2.8.2.tgz -C &#x2F;usr&#x2F;local&#x2F;[root@node2 ~]# cp &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;harbor.yml.tmpl &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;harbor.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="配置SSL证书"><a href="#配置SSL证书" class="headerlink" title="配置SSL证书"></a>配置<code>SSL</code>证书</h5><blockquote><p><strong>过程省略，参考上面的<code>SSL</code>证书申请过程</strong></p></blockquote><h5 id="修改Harbor配置文件"><a href="#修改Harbor配置文件" class="headerlink" title="修改Harbor配置文件"></a>修改<code>Harbor</code>配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;harbor.yml#配置文件并不完整，仅展示修改部分hostname: harbor.linux.com#把原来自带的本地数据库配置注释掉# database:  # password: root123  # max_idle_conns: 100  # max_open_conns: 900  # conn_max_lifetime: 5m  # conn_max_idle_time: 0#删除注释并配置harbor连接外部数据库external_database:  harbor:    host: 192.168.140.12    port: 5432    db_name: harbor    username: harbor    password: WWW.1.com    ssl_mode: disable    max_idle_conns: 2    max_open_conns: 0  notary_signer:    host: 192.168.140.12    port: 5432    db_name: harbor_notary_signer    username: harbor    password: WWW.1.com    ssl_mode: disable  notary_server:    host: 192.168.140.12    port: 5432    db_name: harbor_notary_server    username: harbor    password: WWW.1.com    ssl_mode: disable#删除注释，并配置远程redisexternal_redis:#   # support redis, redis+sentinel#   # host for redis: &lt;host_redis&gt;:&lt;port_redis&gt;#   # host for redis+sentinel:#   #  &lt;host_sentinel1&gt;:&lt;port_sentinel1&gt;,&lt;host_sentinel2&gt;:&lt;port_sentinel2&gt;,&lt;host_sentinel3&gt;:&lt;port_sentinel3&gt;  host: 192.168.140.12:6379#   password: #   # Redis AUTH command was extended in Redis 6, it is possible to use it in the two-arguments AUTH &lt;username&gt; &lt;password&gt; form.#   # username:#   # sentinel_master_set must be set to support redis+sentinel#   #sentinel_master_set:#   # db_index 0 is for core, it&#39;s unchangeable  registry_db_index: 1  jobservice_db_index: 2  trivy_db_index: 5  idle_timeout_seconds: 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="拷贝Harbor给node2"><a href="#拷贝Harbor给node2" class="headerlink" title="拷贝Harbor给node2"></a>拷贝<code>Harbor</code>给<code>node2</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# scp -r &#x2F;usr&#x2F;local&#x2F;harbor&#x2F; root@192.168.140.11:&#x2F;usr&#x2F;local&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动Harbor"><a href="#启动Harbor" class="headerlink" title="启动Harbor"></a>启动<code>Harbor</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# hostnamectl set-hostname harbor.linux.com[root@node2 ~]# hostnamectl set-hostname harbor.linux.com[root@node1 ~]# vim &#x2F;etc&#x2F;hosts192.168.140.10 harbor.linux.com harbor[root@node2 ~]# vim &#x2F;etc&#x2F;hosts192.168.140.11 harbor.linux.com harbor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# bash &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;prepare[root@harbor2 ~]# bash &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;prepare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# bash &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;install.sh[root@harbor2 ~]# bash &#x2F;usr&#x2F;local&#x2F;harbor&#x2F;install.sh[+] Running 8&#x2F;8 ✔ Network harbor_harbor        Created                                     0.0s  ✔ Container harbor-log         Started                                     0.3s  ✔ Container harbor-portal      Started                                     0.9s  ✔ Container registry           Started                                     0.8s  ✔ Container registryctl        Started                                     0.8s  ✔ Container harbor-core        Started                                     1.0s  ✔ Container nginx              Started                                     1.5s  ✔ Container harbor-jobservice  Started                                     1.5s ✔ ----Harbor has been installed and started successfully.----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# docker psCONTAINER ID   IMAGE                                COMMAND                   CREATED          STATUS                             PORTS                                                                            NAMES4d56ca0cbd90   goharbor&#x2F;nginx-photon:v2.8.2         &quot;nginx -g &#39;daemon of…&quot;   24 seconds ago   Up 22 seconds (health: starting)   0.0.0.0:80-&gt;8080&#x2F;tcp, :::80-&gt;8080&#x2F;tcp, 0.0.0.0:443-&gt;8443&#x2F;tcp, :::443-&gt;8443&#x2F;tcp   nginx786118e99ce2   goharbor&#x2F;harbor-jobservice:v2.8.2    &quot;&#x2F;harbor&#x2F;entrypoint.…&quot;   24 seconds ago   Up 21 seconds (health: starting)                                                                                    harbor-jobservice7fbd1fe0f1af   goharbor&#x2F;harbor-core:v2.8.2          &quot;&#x2F;harbor&#x2F;entrypoint.…&quot;   24 seconds ago   Up 22 seconds (health: starting)                                                                                    harbor-core9fb5740c51b9   goharbor&#x2F;harbor-portal:v2.8.2        &quot;nginx -g &#39;daemon of…&quot;   24 seconds ago   Up 22 seconds (health: starting)                                                                                    harbor-portal723e839195bf   goharbor&#x2F;registry-photon:v2.8.2      &quot;&#x2F;home&#x2F;harbor&#x2F;entryp…&quot;   24 seconds ago   Up 22 seconds (health: starting)                                                                                    registrybc4287d96147   goharbor&#x2F;harbor-registryctl:v2.8.2   &quot;&#x2F;home&#x2F;harbor&#x2F;start.…&quot;   24 seconds ago   Up 22 seconds (health: starting)                                                                                    registryctl5b62a3cbbc47   goharbor&#x2F;harbor-log:v2.8.2           &quot;&#x2F;bin&#x2F;sh -c &#x2F;usr&#x2F;loc…&quot;   24 seconds ago   Up 23 seconds (health: starting)   127.0.0.1:1514-&gt;10514&#x2F;tcp                                                        harbor-log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-测试Harbor"><a href="#G-测试Harbor" class="headerlink" title="G.测试Harbor"></a>G.测试Harbor</h4><p><img src="https://www.wsjj.top/upload/2023/06/harbor01.png" alt="harbor01"></p><p><img src="https://www.wsjj.top/upload/2023/06/harbor03.png" alt="harbor03"></p><h5 id="上传项目测试"><a href="#上传项目测试" class="headerlink" title="上传项目测试"></a>上传项目测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# docker login harbor.linux.comUsername: adminPassword:[root@harbor1 ~]# docker tag centos:7 harbor.linux.com&#x2F;project1&#x2F;centos:v1[root@harbor1 ~]# docker push harbor.linux.com&#x2F;project1&#x2F;centos:v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/06/harbor11.png" alt="harbor11"></p><h5 id="修改hosts文件解析地址"><a href="#修改hosts文件解析地址" class="headerlink" title="修改hosts文件解析地址"></a>修改<code>hosts</code>文件解析地址</h5><p><img src="https://www.wsjj.top/upload/2023/06/harbor12.png" alt="harbor12"></p><h5 id="还是正常访问项目"><a href="#还是正常访问项目" class="headerlink" title="还是正常访问项目"></a>还是正常访问项目</h5><p><img src="https://www.wsjj.top/upload/2023/06/harbor11.png" alt="harbor11"></p><h3 id="3-配置Harbor高可用"><a href="#3-配置Harbor高可用" class="headerlink" title="3.配置Harbor高可用"></a>3.配置<code>Harbor</code>高可用</h3><h4 id="A-编写高可用脚本"><a href="#A-编写高可用脚本" class="headerlink" title="A.编写高可用脚本"></a>A.编写高可用脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# vim &#x2F;opt&#x2F;harbor.sh#! &#x2F;bin&#x2F;bashnetstat -tunlp | grep 443 &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -ne 0 ]; then    systemctl stop dockerfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# chmod a+x &#x2F;opt&#x2F;harbor.sh[root@harbor1 ~]# scp -r &#x2F;opt&#x2F;harbor.sh root@192.168.140.11:&#x2F;opt&#x2F;[root@harbor2 ~]# chmod a+x &#x2F;opt&#x2F;harbor.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B安装keepalived"><a href="#B安装keepalived" class="headerlink" title="B安装keepalived"></a>B安装<code>keepalived</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# yum install -y keepalived[root@harbor2 ~]# yum install -y keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-修改keepalived配置文件"><a href="#C-修改keepalived配置文件" class="headerlink" title="C.修改keepalived配置文件"></a>C.修改<code>keepalived</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id master_harbor&#125;vrrp_script check_harbor &#123;#引用外部脚本，并且定义名字    script &quot;&#x2F;opt&#x2F;harbor.sh&quot;#外部脚本路径    interval 1#每1秒执行一次脚本&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_harbor#调用外部脚本，名字是我们上面自己起的    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@harbor2 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id slave_harbor&#125;vrrp_script check_harbor &#123;#引用外部脚本，并且定义名字    script &quot;&#x2F;opt&#x2F;harbor.sh&quot;#外部脚本路径    interval 1#每1秒执行一次脚本&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    virtual_router_id 51    priority 50    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_harbor#调用外部脚本，名字是我们上面自己起的    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-启动keepalived"><a href="#D-启动keepalived" class="headerlink" title="D.启动keepalived"></a>D.启动<code>keepalived</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# systemctl enable --now keepalived.service[root@harbor2 ~]# systemctl enable --now keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-测试访问"><a href="#E-测试访问" class="headerlink" title="E.测试访问"></a>E.测试访问</h4><h5 id="修改hosts解析"><a href="#修改hosts解析" class="headerlink" title="修改hosts解析"></a>修改<code>hosts</code>解析</h5><p><img src="https://www.wsjj.top/upload/2023/06/harbor13.png" alt="harbor13"></p><p><img src="https://www.wsjj.top/upload/2023/06/harbor14.png" alt="harbor14"></p><h4 id="F-模拟容器挂掉"><a href="#F-模拟容器挂掉" class="headerlink" title="F.模拟容器挂掉"></a>F.模拟容器挂掉</h4><pre class="line-numbers language-none"><code class="language-none">[root@harbor1 ~]# docker stop nginxnginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="网页测试"><a href="#网页测试" class="headerlink" title="网页测试"></a>网页测试</h5><blockquote><p><strong>还是正常访问</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/harbor14.png" alt="harbor14"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Docker镜像管理</title>
      <link href="/2023/06/06/134/"/>
      <url>/2023/06/06/134/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Docker镜像管理"><a href="#【容器应用系列教程】Docker镜像管理" class="headerlink" title="【容器应用系列教程】Docker镜像管理"></a>【容器应用系列教程】Docker镜像管理</h1><h2 id="一、关于镜像"><a href="#一、关于镜像" class="headerlink" title="一、关于镜像"></a>一、关于镜像</h2><h3 id="1-镜像的基本概念"><a href="#1-镜像的基本概念" class="headerlink" title="1.镜像的基本概念"></a>1.镜像的基本概念</h3><p><img src="https://www.wsjj.top/upload/2023/06/docker_image01.png" alt="docker_image01"></p><ul><li>分层的文件系统</li><li>镜像是只读的</li><li>基于镜像创建容器时，镜像最上面会添加一个可写层，用户的所有操作都会存到这个可写层内</li></ul><h3 id="2-镜像的核心技术"><a href="#2-镜像的核心技术" class="headerlink" title="2.镜像的核心技术"></a>2.镜像的核心技术</h3><ul><li><code>COW</code>机制<ul><li><code>Copy On Write</code>写时复制<ul><li>创建容器时，镜像会在最上层添加一个读写层，只有修改文件时，该才会被复制到读写层进行修改</li><li>容器删除时，读写层会随之删除，所有容器对关键数据进行持久化存储</li></ul></li></ul></li><li><code>Union fs</code>联合文件系统<ul><li>支持将多个不同的文件系统挂载到同一个虚拟文件系统中<ul><li><code>overlay2</code>文件系统，是<code>Docker</code>默认使用的</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker infoClient: Docker Engine - Community Version:    24.0.2 Context:    default Debug Mode: false Plugins:  buildx: Docker Buildx (Docker Inc.)    Version:  v0.10.5    Path:     &#x2F;usr&#x2F;libexec&#x2F;docker&#x2F;cli-plugins&#x2F;docker-buildx  compose: Docker Compose (Docker Inc.)    Version:  v2.18.1    Path:     &#x2F;usr&#x2F;libexec&#x2F;docker&#x2F;cli-plugins&#x2F;docker-composeServer: Containers: 1  Running: 1  Paused: 0  Stopped: 0 Images: 11 Server Version: 24.0.2 Storage Driver: overlay2#默认使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、镜像管理操作"><a href="#二、镜像管理操作" class="headerlink" title="二、镜像管理操作"></a>二、镜像管理操作</h2><h3 id="1-镜像命名格式"><a href="#1-镜像命名格式" class="headerlink" title="1.镜像命名格式"></a>1.镜像命名格式</h3><ul><li><code>仓库名称</code>&#x2F;<code>镜像名称</code>:<code>标签</code><ul><li>标记<code>tag</code>默认是<code>latest</code> &gt;&gt; 如果不写标签默认会使用<code>latest</code>标签<ul><li>几个镜像名的展示<ul><li><code>test.linux.com</code>&#x2F;<code>tomcat</code>:<code>8.9</code></li><li><code>polinux</code>&#x2F;<code>stress</code></li><li><code>nginx</code></li><li><code>hub.docker.com</code>&#x2F;<code>nginx</code>:<code>latest</code></li></ul></li></ul></li></ul></li></ul><h3 id="2-下载镜像和查看镜像"><a href="#2-下载镜像和查看镜像" class="headerlink" title="2.下载镜像和查看镜像"></a>2.下载镜像和查看镜像</h3><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker pull nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker imagesREPOSITORY     TAG       IMAGE ID       CREATED             SIZEhalohub&#x2F;halo   2.6       da836bfd0ddc   5 days ago          367MBhaproxy        latest    95eb357b4726   5 days ago          108MBnginx          latest    f9c14fe76d50   12 days ago         143MBwordpress      latest    5174bdcbb532   13 days ago         616MBredis          latest    0ec8ab59a35f   13 days ago         117MBtomcat         8         b0d447aaf3db   2 weeks ago         475MBbusybox        latest    8135583d97fe   2 weeks ago         4.86MBmysql          5.7       dd6675b5cfea   7 weeks ago         569MBcentos         7         eeb6ee3f44bd   20 months ago       204MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-导出镜像"><a href="#3-导出镜像" class="headerlink" title="3.导出镜像"></a>3.导出镜像</h3><pre class="line-numbers language-none"><code class="language-none">docker save -o 要导出的tar包名 镜像名:标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker save -o busybox.tar busybox:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-导入镜像"><a href="#4-导入镜像" class="headerlink" title="4.导入镜像"></a>4.导入镜像</h3><pre class="line-numbers language-none"><code class="language-none">docker load -i tar包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker load -i busybox.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5.删除镜像"></a>5.删除镜像</h3><pre class="line-numbers language-none"><code class="language-none">docker rmi 镜像名:标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker rmi halohub&#x2F;halo:2.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-查看镜像的详细信息"><a href="#6-查看镜像的详细信息" class="headerlink" title="6.查看镜像的详细信息"></a>6.查看镜像的详细信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker image inspect nginx:latest[    &#123;        &quot;Id&quot;: &quot;sha256:f9c14fe76d502861ba0939bc3189e642c02e257f06f4c0214b1f8ca329326cda&quot;,        &quot;RepoTags&quot;: [            &quot;nginx:latest&quot;        ],        &quot;RepoDigests&quot;: [            &quot;nginx@sha256:af296b188c7b7df99ba960ca614439c99cb7cf252ed7bbc23e90cfda59092305&quot;        ],        &quot;Parent&quot;: &quot;&quot;,        &quot;Comment&quot;: &quot;&quot;,        &quot;Created&quot;: &quot;2023-05-24T22:43:48.18207587Z&quot;,        &quot;Container&quot;: &quot;23b0fce2f40be83daa129eacbf79b8a57c6524a7898bf3aba06e10c15b433d0d&quot;,        &quot;ContainerConfig&quot;: &#123;            &quot;Hostname&quot;: &quot;23b0fce2f40b&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;ExposedPorts&quot;: &#123;                &quot;80&#x2F;tcp&quot;: &#123;&#125;            &#125;,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;,                &quot;NGINX_VERSION&#x3D;1.25.0&quot;,                &quot;NJS_VERSION&#x3D;0.7.12&quot;,                &quot;PKG_RELEASE&#x3D;1~bullseye&quot;            ],            &quot;Cmd&quot;: [                &quot;&#x2F;bin&#x2F;sh&quot;,                &quot;-c&quot;,                &quot;#(nop) &quot;,                &quot;CMD [\&quot;nginx\&quot; \&quot;-g\&quot; \&quot;daemon off;\&quot;]&quot;            ],            &quot;Image&quot;: &quot;sha256:a14a5803cbf095a0268663fe3235681c2f7fd5d0b59c242d99e7b1ebb59284f3&quot;,            &quot;Volumes&quot;: null,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: [                &quot;&#x2F;docker-entrypoint.sh&quot;            ],            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;maintainer&quot;: &quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;            &#125;,            &quot;StopSignal&quot;: &quot;SIGQUIT&quot;        &#125;,        &quot;DockerVersion&quot;: &quot;20.10.23&quot;,        &quot;Author&quot;: &quot;&quot;,        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;ExposedPorts&quot;: &#123;                &quot;80&#x2F;tcp&quot;: &#123;&#125;            &#125;,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;,                &quot;NGINX_VERSION&#x3D;1.25.0&quot;,                &quot;NJS_VERSION&#x3D;0.7.12&quot;,                &quot;PKG_RELEASE&#x3D;1~bullseye&quot;            ],            &quot;Cmd&quot;: [                &quot;nginx&quot;,                &quot;-g&quot;,                &quot;daemon off;&quot;            ],            &quot;Image&quot;: &quot;sha256:a14a5803cbf095a0268663fe3235681c2f7fd5d0b59c242d99e7b1ebb59284f3&quot;,            &quot;Volumes&quot;: null,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: [                &quot;&#x2F;docker-entrypoint.sh&quot;            ],            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;maintainer&quot;: &quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;            &#125;,            &quot;StopSignal&quot;: &quot;SIGQUIT&quot;        &#125;,        &quot;Architecture&quot;: &quot;amd64&quot;,        &quot;Os&quot;: &quot;linux&quot;,        &quot;Size&quot;: 142560184,        &quot;VirtualSize&quot;: 142560184,        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;2e6bb5febb75810654c0852225e655e8657d622b2c80c709e337eae4147cc8b9&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;a05acf6a7360cd9eae05721a0ba74653a4ac44b03b47311771ad426e84b1a451&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;d077b39b99d40c2061689e86bf9dab74f7e86616fc40bf546fd5184c44d5770f&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;ea246994c98a9e5745f3b8c9f43dd930e16dcffdd2950aa88be853b80f2d0c4d&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;5a6d22d946e4843397c18c2b2d4df28aa6b7e119733c8421ea2db86ed77495d8&#x2F;diff&quot;,                &quot;MergedDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;15e2f7bf56991df7a0c49aad6dfad5aa75eb0465b58d03c8103b780e222d3757&#x2F;merged&quot;,                &quot;UpperDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;15e2f7bf56991df7a0c49aad6dfad5aa75eb0465b58d03c8103b780e222d3757&#x2F;diff&quot;,                &quot;WorkDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;15e2f7bf56991df7a0c49aad6dfad5aa75eb0465b58d03c8103b780e222d3757&#x2F;work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,        &quot;RootFS&quot;: &#123;            &quot;Type&quot;: &quot;layers&quot;,            &quot;Layers&quot;: [                &quot;sha256:8cbe4b54fa88d8fc0198ea0cc3a5432aea41573e6a0ee26eca8c79f9fbfa40e3&quot;,                &quot;sha256:4b8862fe7056d8a3c2c0910eb38ebb8fc08785eaa1f9f53b2043bf7ca8adbafb&quot;,                &quot;sha256:e60266289ce4a890aaf52b93228090998e28220aef04f128704141864992dd15&quot;,                &quot;sha256:7daac92f43be84ad9675f94875c1a00357b975d6c58b11d17104e0a0e04da370&quot;,                &quot;sha256:5e099cf3f3c83c449b8c062f944ac025c9bf2dd7ec255837c53430021f5a1517&quot;,                &quot;sha256:4fd83434130318dede62defafcc5853d03dae8636eccfa1b9dcd385d92e3ff19&quot;            ]        &#125;,        &quot;Metadata&quot;: &#123;            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;    &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Dockerfile定制镜像"><a href="#三、Dockerfile定制镜像" class="headerlink" title="三、Dockerfile定制镜像"></a>三、Dockerfile定制镜像</h2><blockquote><p><strong>作用：基于已有的镜像，定制符合自身需求的镜像</strong></p></blockquote><h3 id="1-规划目录"><a href="#1-规划目录" class="headerlink" title="1.规划目录"></a>1.规划目录</h3><blockquote><p><strong>建议提前规划目录，一个<code>Dockerfile</code>对应一个镜像</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# mkdir &#x2F;centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-编写Dockerfile"><a href="#2-编写Dockerfile" class="headerlink" title="2.编写Dockerfile"></a>2.编写<code>Dockerfile</code></h3><blockquote><p><strong>注意<code>Dockerfile</code>的大小写</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# vim &#x2F;centos&#x2F;DockerfileFROM centos:7#配置Centos的yum源为国内源RUN yum install -y wget &amp;&amp; wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo &amp;&amp; wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo &amp;&amp; yum clean all &amp;&amp; yum makecache#安装基本命令RUN yum install -y vim &amp;&amp; yum install -y net-tools#创建一个名为wangshengjj的用户RUN useradd wangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-构建镜像"><a href="#3-构建镜像" class="headerlink" title="3.构建镜像"></a>3.构建镜像</h3><pre class="line-numbers language-none"><code class="language-none">docker build -t 镜像名:标签 Dockerfile目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker build -t centos_wang:0.1 &#x2F;centos&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="验证镜像"><a href="#验证镜像" class="headerlink" title="验证镜像"></a>验证镜像</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker run -itd --name centos centos_wang:0.1[root@flannet ~]# docker exec -it centos &#x2F;bin&#x2F;bash[root@935de887e27f &#x2F;]# id wangshengjjuid&#x3D;1000(wangshengjj) gid&#x3D;1000(wangshengjj) groups&#x3D;1000(wangshengjj)[root@935de887e27f &#x2F;]# ifconfigeth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1472        inet 10.100.43.2  netmask 255.255.255.0  broadcast 10.100.43.255        ether 02:42:0a:64:2b:02  txqueuelen 0  (Ethernet)        RX packets 8  bytes 656 (656.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Dockerfile常用指令"><a href="#4-Dockerfile常用指令" class="headerlink" title="4.Dockerfile常用指令"></a>4.<code>Dockerfile</code>常用指令</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><blockquote><p><strong>当本地不存在指定镜像，将会自动联网下载指定镜像</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">FROM 镜像名:标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h4><blockquote><p><strong>用于指定镜像作者信息</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">MAINTAINER &lt;user&gt; &lt;email&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><blockquote><p><strong>用于指定在构建镜像的时候，执行的操作</strong><br><strong><code>RUN</code>指令后面的命令，必须在原镜像中存在命令</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">RUN cmd1 &amp;&amp; cmd2 &amp;&amp; cmd3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><blockquote><p><strong>用于指定创建容器的时候，自动执行的命令</strong></p></blockquote><ul><li>一个<code>Dockerfile</code>中只能出现一个<code>CMD</code></li><li>一般都是写前台启动服务的指令</li><li>创建容器时指定的命令会覆盖<code>CMD</code>指令的命令</li></ul><pre class="line-numbers language-none"><code class="language-none">CMD  &#x2F;usr&#x2F;sbin&#x2F;httpd -D FOREGROUND#前台启动httpdCMD [ &quot;&#x2F;usr&#x2F;sbin&#x2F;httpd&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot; ]#上面的命令另外一种写法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><blockquote><p><strong>用于创建容器的时候，自动执行的命令</strong><br><strong>跟<code>CMD</code>的区别：当用户创建容器指定自定义命令的时候，不会被覆盖</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">ENTRYPOINT &#x2F;usr&#x2F;sbin&#x2F;httpd -D FOREGROUNDENTRYPOINT [ &quot;&#x2F;usr&#x2F;sbin&#x2F;httpd&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong><code>CMD</code>指令可以作为<code>ENTRYPOINT</code>的参数用</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">CMD [ &quot;-D&quot;, &quot;FOREGROUND&quot; ]ENTRYPOINT &#x2F;usr&#x2F;sbin&#x2F;httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><blockquote><p><strong>拷贝本地文件、目录到镜像中</strong><br><strong>源文件以相对路径的方式写，一般源文件位于和<code>Dockerfile</code>同级目录</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">COPY &lt;源文件&gt; &lt;目的文件&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><blockquote><p>拷贝文件、目录</p></blockquote><ul><li>与<code>COPY</code>区别：<ul><li>源文件支持<code>本地文件</code>、<code>网络文件</code>、<code>压缩包拷贝后自动解压</code></li></ul></li></ul><h4 id="EXPOSE指令"><a href="#EXPOSE指令" class="headerlink" title="EXPOSE指令"></a>EXPOSE指令</h4><blockquote><p><strong>说明容器要发布的端口</strong><br><strong>真正发布端口的时候，还是要靠<code>docker run -p</code>命令</strong><br><strong>使用<code>docker image inspect</code>命令可查看到信息</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">EXPOSE 80&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><blockquote><p><strong>指定并说明持久化存储的目录</strong><br><strong>一般用于用户在创建容器的时候，使用<code>docker run -v</code>的时候</strong><br><strong>使用<code>docker image inspect</code>命令可查看到信息</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">VOLUME 容器内目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>如果用户在创建容器的时候，未指定<code>-v</code>参数，那么<code>Docker</code>会默认生成一个隐藏卷，用于存放数据</strong><br><strong>一般位于目录<code>/var/lib/docker/volumes/容器ID/_data/</code>下</strong></p></blockquote><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><blockquote><p><strong>在容器中定义环境变量</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">ENV 变量名称  值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><blockquote><p><strong>指定容器的当前目录&#x2F;工作目录</strong><br><strong>用户创建完容器，进入容器后自动进入的目录</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">WORKDIR &lt;目录名称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><blockquote><p><strong>指定容器当前登录用户</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">USER &lt;用户名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-使用Dockerfile构建Nginx镜像-基于Centos7"><a href="#6-使用Dockerfile构建Nginx镜像-基于Centos7" class="headerlink" title="6.使用Dockerfile构建Nginx镜像(基于Centos7)"></a>6.使用<code>Dockerfile</code>构建<code>Nginx</code>镜像(基于Centos7)</h3><h4 id="准备Dockerfile目录"><a href="#准备Dockerfile目录" class="headerlink" title="准备Dockerfile目录"></a>准备<code>Dockerfile</code>目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# mkdir &#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="准备Ningx安装包"><a href="#准备Ningx安装包" class="headerlink" title="准备Ningx安装包"></a>准备<code>Ningx</code>安装包</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.20.2.tar.gz[root@flannet ~]# cp nginx-1.20.2.tar.gz &#x2F;nginx&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写<code>Dockerfile</code>文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# vim &#x2F;nginx&#x2F;DockerfileFROM centos:7#配置国内yum源RUN yum install -y wget &amp;&amp; wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo &amp;&amp; wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo &amp;&amp; yum clean all &amp;&amp; yum makecache#拷贝Nginx安装包ADD nginx-1.20.2.tar.gz &#x2F;tmp&#x2F;#安装Nginx需要的依赖RUN yum install -y gcc openssl-devel pcre-devel zlib-devel make#准备Nginx目录RUN mkdir -p &#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;&#123;client,proxy,fastcgi,uwsgi,scgi&#125; &amp;&amp; useradd -s &#x2F;sbin&#x2F;nologin nginx#编译NginxRUN cd &#x2F;tmp&#x2F;nginx-1.20.2 &amp;&amp; .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-stream --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F; &amp;&amp; make &amp;&amp; make install#指定端口为80EXPOSE 80&#x2F;tcp#删除临时文件RUN rm -rf &#x2F;tmp&#x2F;nginx*#启动容器时执行的命令CMD &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -g &quot;daemon off;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker build -t nginx:v1 &#x2F;nginx&#x2F;[root@flannet ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED         SIZEnginx        v1        a705ccd9164b   2 minutes ago   1.14GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker run -itd --name nginx -p 80:80 nginx:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/06/docker_image02.png" alt="docker_image02"></p><h3 id="7-使用Dockerfle构建Tomcat镜像-基于Centos7"><a href="#7-使用Dockerfle构建Tomcat镜像-基于Centos7" class="headerlink" title="7.使用Dockerfle构建Tomcat镜像(基于Centos7)"></a>7.使用<code>Dockerfle</code>构建<code>Tomcat</code>镜像(基于Centos7)</h3><h4 id="准备Dockerfile目录-1"><a href="#准备Dockerfile目录-1" class="headerlink" title="准备Dockerfile目录"></a>准备<code>Dockerfile</code>目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# mkdir &#x2F;tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="下载jdk和tomcat"><a href="#下载jdk和tomcat" class="headerlink" title="下载jdk和tomcat"></a>下载<code>jdk</code>和<code>tomcat</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# cd &#x2F;tomcat[root@flannet tomcat]# wget https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;java&#x2F;jdk&#x2F;8u191-b12&#x2F;jdk-8u191-linux-x64.tar.gz[root@flannet tomcat]# wget --no-check-certificate https:&#x2F;&#x2F;dlcdn.apache.org&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.88&#x2F;bin&#x2F;apache-tomcat-8.5.88.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写<code>Dockerfile</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet tomcat]# vim &#x2F;tomcat&#x2F;DockerfileFROM centos:7#拷贝jdk17ADD jdk-8u191-linux-x64.tar.gz &#x2F;usr&#x2F;local#配置jdk17环境变量ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191#拷贝tomcatADD apache-tomcat-8.5.88.tar.gz &#x2F;usr&#x2F;local#改目录名称RUN mv &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.88 &#x2F;usr&#x2F;local&#x2F;tomcat85#配置tomcat环境变量ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;tomcat85#配置工作目录WORKDIR &#x2F;usr&#x2F;local&#x2F;tomcat85#指定端口是8080EXPOSE 8080&#x2F;tcpCMD &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;catalina.sh run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet tomcat]# docker build -t tomcat:v1 &#x2F;tomcat&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet tomcat]# docker run -itd --name tomcat -p 8080:8080 tomcat:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://www.wsjj.top/upload/2023/06/docker_image03.png" alt="docker_image03"></p><h3 id="8-使用Dockerfile构建MariaDB镜像-Centos7"><a href="#8-使用Dockerfile构建MariaDB镜像-Centos7" class="headerlink" title="8.使用Dockerfile构建MariaDB镜像(Centos7)"></a>8.使用<code>Dockerfile</code>构建<code>MariaDB</code>镜像(Centos7)</h3><h4 id="创建Dockerfile目录"><a href="#创建Dockerfile目录" class="headerlink" title="创建Dockerfile目录"></a>创建<code>Dockerfile</code>目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet tomcat]# mkdir &#x2F;mariadb&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="准备改数据库root密码脚本"><a href="#准备改数据库root密码脚本" class="headerlink" title="准备改数据库root密码脚本"></a>准备改数据库root密码脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# vim &#x2F;mariadb&#x2F;docker-entrypoint.sh#!&#x2F;bin&#x2F;bash&#x2F;usr&#x2F;bin&#x2F;mysqld_safe --skip-grant-tables &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;mysql --socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock -uroot -e &quot;set password for &#39;root&#39;@&#39;localhost&#39; &#x3D; PASSWORD(&#39;$MYSQL_ROOT_PASSWORD&#39;)&quot;exec &quot;$@&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="准备Dockerfile"><a href="#准备Dockerfile" class="headerlink" title="准备Dockerfile"></a>准备<code>Dockerfile</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# vim &#x2F;mariadb&#x2F;DockerfileFROM centos:7#安装国内源RUN yum install -y wget &amp;&amp; wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo &amp;&amp; wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo#安装MariaDBRUN  yum install -y mariadb-server#配置永久挂载VOLUME &#x2F;var&#x2F;lib&#x2F;mysql#拷贝脚本到指定路径COPY docker-entrypoint.sh &#x2F;usr&#x2F;local&#x2F;bin#给予脚本执行权限RUN chmod a+x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-entrypoint.sh#执行脚本ENTRYPOINT docker-entrypoint.sh#容器创建的时候执行的操作CMD &#x2F;usr&#x2F;bin&#x2F;mysqld_safe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构建镜像-1"><a href="#构建镜像-1" class="headerlink" title="构建镜像"></a>构建镜像</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker build -t mariadb:v1 &#x2F;mariadb&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="测试镜像"><a href="#测试镜像" class="headerlink" title="测试镜像"></a>测试镜像</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet mariadb]# docker run -itd --name mariadb01 -e MYSQL_ROOT_PASSWORD&#x3D;WWW.1.com  mariadb:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet mariadb]# docker exec -it mariadb01 &#x2F;bin&#x2F;bash[root@85ab03eb1d92 &#x2F;]# mysql -uroot -pWWW.1.comWelcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 1Server version: 5.5.68-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.MariaDB [(none)]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> 镜像 </tag>
            
            <tag> cetnos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】Docker网络管理</title>
      <link href="/2023/06/05/133/"/>
      <url>/2023/06/05/133/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】Docker网络管理"><a href="#【容器应用系列教程】Docker网络管理" class="headerlink" title="【容器应用系列教程】Docker网络管理"></a>【容器应用系列教程】Docker网络管理</h1><blockquote><p><strong>上期教程：<a href="https://www.wsjj.top/archives/132">Docker的安装和基本操作</a></strong></p></blockquote><h2 id="一、Docker的几个网络工作模式"><a href="#一、Docker的几个网络工作模式" class="headerlink" title="一、Docker的几个网络工作模式"></a>一、Docker的几个网络工作模式</h2><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker network lsNETWORK ID     NAME      DRIVER    SCOPE5c8d7aaa6302   bridge    bridge    local6d9af871e429   host      host      localc5ff52b498d6   none      null      local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>bridge</code>模式<ul><li>类似<code>NAT</code>的工作模式</li><li><code>-p</code>参数</li><li><code>docker run -itd -p 80:80 nginx:latest</code></li></ul></li><li><code>host</code>模式<ul><li>容器、物理机共享同一个网络命名空间</li><li>服务运行在容器中，端口监听在物理机</li><li>端口不可以和物理机端口冲突</li><li><code>docker run -itd --net=host centos:7</code></li></ul></li><li><code>container</code>模式<ul><li>新建的容器会与一个已有的容器共享同一个网络命名空间 </li><li>前提<ul><li>事先存在一个bridge模式的容器</li></ul></li><li>优势<ul><li>减少网络消耗，增加网络通信效率</li></ul></li><li>劣势<ul><li>原有的容器故障，所有容器均失效</li></ul></li><li><code>docker run -itd --name=centos01 centos:7</code></li><li><code>docker run -itd --net=container:centos01 --name=centos02 centos:7</code></li></ul></li><li><code>none</code>模式<ul><li>容器不会连接任何网络</li><li><code>docker run -itd --net=none --name=centos03 centos:7</code></li></ul></li></ul><h2 id="二、网络管理操作"><a href="#二、网络管理操作" class="headerlink" title="二、网络管理操作"></a>二、网络管理操作</h2><h3 id="1-创建网络"><a href="#1-创建网络" class="headerlink" title="1.创建网络"></a>1.创建网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker network create --subnet&#x3D;192.168.1.0&#x2F;24 --gateway&#x3D;192.168.1.1 mynet0183cc2918bd37e7ed565e35b687b609507e2a6548fdb55e93bb966518c3de8cd0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>network create</code>创建网络</li><li><code>--subent=</code>网段</li><li><code>--gateway=</code>网关</li></ul><h3 id="2-查看网络"><a href="#2-查看网络" class="headerlink" title="2.查看网络"></a>2.查看网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker network lsNETWORK ID     NAME      DRIVER    SCOPE5c8d7aaa6302   bridge    bridge    local6d9af871e429   host      host      local83cc2918bd37   mynet01   bridge    localc5ff52b498d6   none      null      local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-指定容器网络"><a href="#3-指定容器网络" class="headerlink" title="3.指定容器网络"></a>3.指定容器网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --net&#x3D;mynet01 --name centos centos:7 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="指定静态地址"><a href="#指定静态地址" class="headerlink" title="指定静态地址"></a>指定静态地址</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --net&#x3D;mynet01 --ip&#x3D;192.168.1.100 --name centos03 centos:7 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-为容器接入网络"><a href="#4-为容器接入网络" class="headerlink" title="4.为容器接入网络"></a>4.为容器接入网络</h3><blockquote><p><strong>在原有网络的基础上，在容器内部再创建一个虚拟网卡，接入新的网络</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name centos01 centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker network connect mynet01 centos01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>可以看到有<code>2</code>块虚拟网卡</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker exec -it centos01 bash[root@167c809218c9 &#x2F;]# ifconfigeth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)        RX packets 11333  bytes 29620333 (28.2 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 8657  bytes 471037 (459.9 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0eth1: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.1.3  netmask 255.255.255.0  broadcast 192.168.1.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除网络"><a href="#5-删除网络" class="headerlink" title="5.删除网络"></a>5.删除网络</h3><blockquote><p><strong>在删除网络之前，要先删除连接自定义网络的容器</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker network rm mynet01mynet01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、flannel-etcd实现Docker网络管理"><a href="#三、flannel-etcd实现Docker网络管理" class="headerlink" title="三、flannel+etcd实现Docker网络管理"></a>三、flannel+etcd实现Docker网络管理</h2><blockquote><p><strong><code>flannel</code>开源项目地址：<a href="https://github.com/flannel-io/flannel">https://github.com/flannel-io/flannel</a></strong></p></blockquote><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><ul><li>跨物理机的容器相互通信</li><li>改变容器分配<code>IP</code>的方式</li><li><code>etcd</code>负责记录网络分配信息</li></ul><p><img src="https://www.wsjj.top/upload/2023/06/docker_net01.png" alt="docker_net01"></p><h3 id="2-配置flannet-etcd环境"><a href="#2-配置flannet-etcd环境" class="headerlink" title="2.配置flannet+etcd环境"></a>2.配置<code>flannet+etcd</code>环境</h3><h4 id="A-环境描述"><a href="#A-环境描述" class="headerlink" title="A.环境描述"></a>A.环境描述</h4><table><thead><tr><th>主机名</th><th>IP地址</th><th>软件</th></tr></thead><tbody><tr><td>flannet.linux.com</td><td>192.168.140.16</td><td>Docker、flannet、etcd</td></tr><tr><td>docker.linux.com</td><td>192.168.140.15</td><td>Docker、flannet</td></tr></tbody></table><h4 id="B-两台机器分别安装Docker"><a href="#B-两台机器分别安装Docker" class="headerlink" title="B.两台机器分别安装Docker"></a>B.两台机器分别安装<code>Docker</code></h4><blockquote><p><strong>过程省略</strong><br><strong>关于<a href="https://www.wsjj.top/archives/132">Docker安装教程</a></strong></p></blockquote><h4 id="C-配置etcd数据库"><a href="#C-配置etcd数据库" class="headerlink" title="C.配置etcd数据库"></a>C.配置<code>etcd</code>数据库</h4><blockquote><p><strong>在<code>flannet.linux.com</code>上操作</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# yum install -y etcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# vim &#x2F;etc&#x2F;etcd&#x2F;etcd.confETCD_LISTEN_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;0.0.0.0:2379&quot;ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;0.0.0.0:2379&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# systemctl enable --now etcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>如果没有<code>netstat</code>命令，请<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# netstat -tunlp | grep etcdtcp        0      0 127.0.0.1:2380          0.0.0.0:*               LISTEN      4517&#x2F;etcd           tcp6       0      0 :::2379                 :::*                    LISTEN      4517&#x2F;etcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="测试etcd数据库"><a href="#测试etcd数据库" class="headerlink" title="测试etcd数据库"></a>测试<code>etcd</code>数据库</h5><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# etcdctl set file1&#x2F;name wangshengjjwangshengjj[root@flannet ~]# etcdctl get file1&#x2F;namewangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-在两台服务器安装flannel"><a href="#D-在两台服务器安装flannel" class="headerlink" title="D.在两台服务器安装flannel"></a>D.在两台服务器安装<code>flannel</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# yum install -y flannel[root@docker ~]# yum install -y flannel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-修改flannel配置文件"><a href="#E-修改flannel配置文件" class="headerlink" title="E.修改flannel配置文件"></a>E.修改<code>flannel</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;flanneldFLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;192.168.140.16:2379&quot;#修改数据库连接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@docker ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;flanneldFLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;192.168.140.16:2379&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="F-在etcd数据库写入flannel网络使用的网段信息"><a href="#F-在etcd数据库写入flannel网络使用的网段信息" class="headerlink" title="F.在etcd数据库写入flannel网络使用的网段信息"></a>F.在<code>etcd</code>数据库写入<code>flannel</code>网络使用的网段信息</h4><blockquote><p><strong>这一步需要在安装<code>etcd</code>的机器上操作</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# etcdctl mk &#x2F;atomic.io&#x2F;network&#x2F;config &#39;&#123;&quot;Network&quot;:&quot;10.100.0.0&#x2F;16&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-启动flannel"><a href="#G-启动flannel" class="headerlink" title="G.启动flannel"></a>G.启动<code>flannel</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# systemctl enable --now flanneld[root@docker ~]# systemctl enable --now flanneld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>启动成功后，会自动创建一个名为<code>flannel0</code>的虚拟网卡</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# ifconfig flannel0flannel0: flags&#x3D;4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472        inet 10.100.43.0  netmask 255.255.0.0  destination 10.100.43.0        inet6 fe80::b66e:c6d:1274:ced2  prefixlen 64  scopeid 0x20&lt;link&gt;        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)        [root@docker ~]# ifconfig flannel0flannel0: flags&#x3D;4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472        inet 10.100.84.0  netmask 255.255.0.0  destination 10.100.84.0        inet6 fe80::9c50:c025:d601:9a65  prefixlen 64  scopeid 0x20&lt;link&gt;        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-修改Docker启动脚本-重要"><a href="#H-修改Docker启动脚本-重要" class="headerlink" title="H.修改Docker启动脚本(重要)"></a>H.修改<code>Docker</code>启动脚本(重要)</h4><blockquote><p><strong>这一步，主要是让<code>flannel</code>接管<code>docker</code>的默认网络</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service#在这条参数后边，加上变量ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock $DOCKER_NETWORK_OPTIONS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@docker ~]# vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.serviceExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H fd:&#x2F;&#x2F; --containerd&#x3D;&#x2F;run&#x2F;containerd&#x2F;containerd.sock $DOCKER_NETWORK_OPTIONS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>让配置生效，然后重启<code>Docker</code>服务</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# systemctl daemon-reload[root@docker ~]# systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# systemctl restart docker[root@docker ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查看docker0网卡"><a href="#查看docker0网卡" class="headerlink" title="查看docker0网卡"></a>查看<code>docker0</code>网卡</h5><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# ifconfig docker0docker0: flags&#x3D;4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        inet 10.100.43.1  netmask 255.255.255.0  broadcast 10.100.43.255        inet6 fe80::42:1cff:fe49:a90c  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 02:42:1c:49:a9:0c  txqueuelen 0  (Ethernet)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@docker ~]# ifconfig docker0docker0: flags&#x3D;4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        inet 10.100.84.1  netmask 255.255.255.0  broadcast 10.100.84.255        ether 02:42:98:67:f0:77  txqueuelen 0  (Ethernet)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="I-修改iptables防火墙规则-重要"><a href="#I-修改iptables防火墙规则-重要" class="headerlink" title="I.修改iptables防火墙规则(重要)"></a>I.修改<code>iptables</code>防火墙规则(重要)</h4><blockquote><p><strong>由于<code>yum</code>安装的<code>flannel</code>默认会修改<code>FORWARD</code>规则为拒绝，所以我们要改回默认的允许</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# iptables -P FORWARD ACCEPT[root@docker ~]# iptables -P FORWARD ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="J-两台服务器创建容器，测试通信"><a href="#J-两台服务器创建容器，测试通信" class="headerlink" title="J.两台服务器创建容器，测试通信"></a>J.两台服务器创建容器，测试通信</h4><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker run -itd --name centos centos:7[root@docker ~]# docker run -itd --name centos centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@flannet ~]# docker exec -it centos &#x2F;bin&#x2F;bash[root@docker ~]# docker exec -it centos &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="进行ping测试"><a href="#进行ping测试" class="headerlink" title="进行ping测试"></a>进行<code>ping</code>测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@7e24d4cbba8f &#x2F;]# ping 10.100.84.2PING 10.100.84.2 (10.100.84.2) 56(84) bytes of data.64 bytes from 10.100.84.2: icmp_seq&#x3D;1 ttl&#x3D;60 time&#x3D;0.815 ms64 bytes from 10.100.84.2: icmp_seq&#x3D;2 ttl&#x3D;60 time&#x3D;0.309 ms64 bytes from 10.100.84.2: icmp_seq&#x3D;3 ttl&#x3D;60 time&#x3D;0.371 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ca24d303731e &#x2F;]# ping 10.100.43.2PING 10.100.43.2 (10.100.43.2) 56(84) bytes of data.64 bytes from 10.100.43.2: icmp_seq&#x3D;1 ttl&#x3D;60 time&#x3D;0.326 ms64 bytes from 10.100.43.2: icmp_seq&#x3D;2 ttl&#x3D;60 time&#x3D;0.502 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
            <tag> linux网络 </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Nginx给原神游戏服务端做负载均衡</title>
      <link href="/2023/06/04/gc/"/>
      <url>/2023/06/04/gc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="利用Nginx给原神游戏服务端做负载均衡"><a href="#利用Nginx给原神游戏服务端做负载均衡" class="headerlink" title="利用Nginx给原神游戏服务端做负载均衡"></a>利用Nginx给原神游戏服务端做负载均衡</h1><blockquote><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除</strong><br><strong>本教程使用<code>Ansible</code>自动化部署工具部署，仅适用机器不超过<code>10-20</code>台左右的机器</strong></p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><table><thead><tr><th>系统版本</th><th>主机名</th><th>IP</th><th>软件</th></tr></thead><tbody><tr><td>Centos7.9</td><td>nginx.linux.com</td><td>192.168.140.10</td><td>Nginx、Ansible</td></tr><tr><td>Centos7.9</td><td>server1.linux.com</td><td>192.168.140.11</td><td>jdk17、Grasscutter</td></tr><tr><td>Centos7.9</td><td>server2.linux.com</td><td>192.168.140.12</td><td>jdk17、Grasscutter</td></tr><tr><td>Centos7.9</td><td>db.linux.com</td><td>192.168.140.13</td><td>MongoDB</td></tr></tbody></table><h3 id="1-关闭防火墙、SElinux配置时间同步"><a href="#1-关闭防火墙、SElinux配置时间同步" class="headerlink" title="1.关闭防火墙、SElinux配置时间同步"></a>1.关闭防火墙、SElinux配置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="2-配置SSH免密"><a href="#2-配置SSH免密" class="headerlink" title="2.配置SSH免密"></a>2.配置<code>SSH</code>免密</h3><h4 id="所有机器关闭SSH配置文件中的DNS解析"><a href="#所有机器关闭SSH配置文件中的DNS解析" class="headerlink" title="所有机器关闭SSH配置文件中的DNS解析"></a>所有机器关闭<code>SSH</code>配置文件中的<code>DNS</code>解析</h4><blockquote><p><strong>这一步优化<code>SSH</code>连接的速度，后续需要用到<code>Ansible</code>统一部署</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@server1 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@server2 ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config[root@db ~]# sed -ri &#39;s|#UseDNS yes|UseDNS no|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# systemctl restart sshd[root@server1 ~]# systemctl restart sshd[root@server2 ~]# systemctl restart sshd[root@db ~]# systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置免密SSH"><a href="#配置免密SSH" class="headerlink" title="配置免密SSH"></a>配置免密SSH</h4><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# ssh-keygen -t rsaGenerating public&#x2F;private rsa key pair.Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa): Created directory &#39;&#x2F;root&#x2F;.ssh&#39;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub.The key fingerprint is:SHA256:m+9ZOtUfzxDyvTaiHYXuAzrTlFCHawHPqYiFVEetMZU root@nginx.linux.comThe key&#39;s randomart image is:+---[RSA 2048]----+|     ....++.o    ||    . . .ooE..   ||     . .  &#x3D;++    ||      o .o.o. o  ||     . .S.o .&#x3D; + ||         o +o &#x3D;..||        o +.oo ++||         &#x3D;.&#x3D;oo.++||         .Bo.o+ .|+----[SHA256]-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# ssh-copy-id root@192.168.140.11[root@nginx ~]# ssh-copy-id root@192.168.140.12[root@nginx ~]# ssh-copy-id root@192.168.140.13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><blockquote><p><strong>登录的时候，不需要输入密码</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# for i in 11 12 13 \do \ssh root@192.168.140.$i hostname \done#查询结果server1.linux.comserver2.linux.comdb.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置Ansible"><a href="#二、配置Ansible" class="headerlink" title="二、配置Ansible"></a>二、配置Ansible</h2><blockquote><p><strong>此软件在<code>nginx.linux.com</code>上安装</strong><br><strong>关于<code>Ansible</code>更多详细教程：<a href="https://www.wsjj.top/archives/115">https://www.wsjj.top/archives/115</a></strong></p></blockquote><h3 id="1-安装Ansible"><a href="#1-安装Ansible" class="headerlink" title="1.安装Ansible"></a>1.安装<code>Ansible</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# yum install -y ansible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置主机名解析"><a href="#2-配置主机名解析" class="headerlink" title="2.配置主机名解析"></a>2.配置主机名解析</h3><blockquote><p><strong>我这只是测试环境，请根据您的真实环境做修改</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;etc&#x2F;hosts#把以下内容加入文件末行192.168.140.10 nginx.linux.com nginx192.168.140.11 server1.linux.com server1192.168.140.12 server2.linux.com server2192.168.140.13 db.linux.com db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# ping server1PING server1.linux.com (192.168.140.11) 56(84) bytes of data.64 bytes from server1.linux.com (192.168.140.11): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.140 ms[root@nginx ~]# ping server2PING server2.linux.com (192.168.140.12) 56(84) bytes of data.64 bytes from server2.linux.com (192.168.140.12): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.451 ms[root@nginx ~]# ping dbPING db.linux.com (192.168.140.13) 56(84) bytes of data.64 bytes from db.linux.com (192.168.140.13): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.117 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拷贝hosts文件给其他机器"><a href="#拷贝hosts文件给其他机器" class="headerlink" title="拷贝hosts文件给其他机器"></a>拷贝<code>hosts</code>文件给其他机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# for i in 11 12 13 \do \scp -r &#x2F;etc&#x2F;hosts root@192.168.140.$i:&#x2F;etc&#x2F; \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修改ansible配置文件"><a href="#3-修改ansible配置文件" class="headerlink" title="3.修改ansible配置文件"></a>3.修改<code>ansible</code>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;etc&#x2F;ansible&#x2F;ansible.cfgremote_user&#x3D; root#指定远程用户为roothost_key_checking&#x3D; False#免除远程yes操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-配置Ansible清单文件-重要"><a href="#4-配置Ansible清单文件-重要" class="headerlink" title="4.配置Ansible清单文件(重要)"></a>4.配置<code>Ansible</code>清单文件(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;etc&#x2F;ansible&#x2F;hosts#找个地方，加入以下内容[gcserver]server1server2[dbserver]db[all:vars]ansible_password&#x3D;centos#此配置用于配置密码，我这里所有机器的登录密码都是centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# ansible all -m shell -a &#39;hostname&#39;server1 | CHANGED | rc&#x3D;0 &gt;&gt;server1.linux.comserver2 | CHANGED | rc&#x3D;0 &gt;&gt;server2.linux.comdb | CHANGED | rc&#x3D;0 &gt;&gt;db.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-m</code>模块名称</li><li><code>-a</code>要执行的操作</li></ul><blockquote><p><strong>更多关于<code>Ansible</code>模块说明请看：<a href="https://www.wsjj.top/archives/115">https://www.wsjj.top/archives/115</a></strong></p></blockquote><h2 id="三、使用Ansible给db-linux-com安装MongoDB"><a href="#三、使用Ansible给db-linux-com安装MongoDB" class="headerlink" title="三、使用Ansible给db.linux.com安装MongoDB"></a>三、使用<code>Ansible</code>给<code>db.linux.com</code>安装<code>MongoDB</code></h2><h3 id="1-配置MongoDB安装源"><a href="#1-配置MongoDB安装源" class="headerlink" title="1.配置MongoDB安装源"></a>1.配置<code>MongoDB</code>安装源</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb.repo[mongodb42]name&#x3D;mongodb42baseurl&#x3D;https:&#x2F;&#x2F;repo.mongodb.org&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;mongodb-org&#x2F;4.2&#x2F;x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;pgp.mongodb.com&#x2F;server-4.2.asc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-编写platybook剧本"><a href="#2-编写platybook剧本" class="headerlink" title="2.编写platybook剧本"></a>2.编写<code>platybook</code>剧本</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim mongodb.yaml- hosts: dbserver #指定群组  user: root  #指定用户  tasks:    - name: copy mongodb repo #拷贝MongoDB安装源      copy: src&#x3D;&#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb.repo dest&#x3D;&#x2F;etc&#x2F;yum.repos.d&#x2F;mongodb.repo    - name: install mongodb #安装MongoDB      yum: name&#x3D;mongodb-org state&#x3D;present    - name: revise mongodb.conf #修改MongoDB配置文件      shell: &quot;sed -ri &#39;s|bindIp: 127.0.0.1|bindIp: 0.0.0.0|&#39; &#x2F;etc&#x2F;mongod.conf&quot;    - name: start mongodb #启动MongoDB服务，并设置开机自启动      service: name&#x3D;mongod state&#x3D;started enabled&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-执行剧本"><a href="#3-执行剧本" class="headerlink" title="3.执行剧本"></a>3.执行剧本</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# ansible-playbook &#x2F;root&#x2F;mongodb.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-检查数据库是否启动成功"><a href="#4-检查数据库是否启动成功" class="headerlink" title="4.检查数据库是否启动成功"></a>4.检查数据库是否启动成功</h3><blockquote><p><strong>如果您的系统没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# ssh root@192.168.140.13 netstat -tunlp | grep mongodtcp        0      0 0.0.0.0:27017           0.0.0.0:*               LISTEN      2669&#x2F;mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、使用Ansible配置grasscutter服务器"><a href="#四、使用Ansible配置grasscutter服务器" class="headerlink" title="四、使用Ansible配置grasscutter服务器"></a>四、使用<code>Ansible</code>配置<code>grasscutter</code>服务器</h2><blockquote><p><strong>先捋一下思路：</strong><br><strong>1.准备<code>jdk17</code>环境</strong><br><strong>2.拷贝<code>gc</code>本体</strong><br><strong>3.解压<code>gc</code>本体</strong><br><strong>4.准备<code>config.j2</code>的<code>jinjia</code>模板，调用<code>setup</code>模块</strong><br><strong>5.替换<code>config.json</code>配置文件</strong></p></blockquote><h3 id="1-准备数据目录和用到的文件"><a href="#1-准备数据目录和用到的文件" class="headerlink" title="1.准备数据目录和用到的文件"></a>1.准备数据目录和用到的文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# mkdir -p &#x2F;gc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# mv &#x2F;gc&#x2F;config.json &#x2F;gc&#x2F;config.j2[root@nginx ~]# ls &#x2F;gcconfig.j2  Grasscutter3.7.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-准备jinjia模板"><a href="#2-准备jinjia模板" class="headerlink" title="2.准备jinjia模板"></a>2.准备<code>jinjia</code>模板</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;gc&#x2F;config.j2#仅展示修改的地方&quot;databaseInfo&quot;: &#123;    &quot;server&quot;: &#123;      &quot;connectionUri&quot;: &quot;mongodb:&#x2F;&#x2F;192.168.140.13:27017&quot;,#指定数据库连接地址      &quot;collection&quot;: &quot;grasscutter&quot;    &#125;,    &quot;game&quot;: &#123;      &quot;connectionUri&quot;: &quot;mongodb:&#x2F;&#x2F;192.168.140.13:27017&quot;,#指定数据库连接地址      &quot;collection&quot;: &quot;grasscutter&quot;http&quot;: &#123;      &quot;bindAddress&quot;: &quot;0.0.0.0&quot;,      &quot;bindPort&quot;: 444,      &quot;accessAddress&quot;: &quot;&#123;&#123; ansible_default_ipv4.address &#125;&#125;&quot;,#ansible中的setup模块会自动帮我们替换IP地址&quot;game&quot;: &#123;      &quot;bindAddress&quot;: &quot;0.0.0.0&quot;,      &quot;bindPort&quot;: 22102,      &quot;accessAddress&quot;: &quot;&#123;&#123; ansible_default_ipv4.address &#125;&#125;&quot;,#ansible中的setup模块会自动帮我们替换IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写playbook剧本"><a href="#3-编写playbook剧本" class="headerlink" title="3.编写playbook剧本"></a>3.编写<code>playbook</code>剧本</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;gc&#x2F;gc.yaml- hosts: gcserver #指定群组  user: root  #指定用户  tasks:     - name: install jdk17 #安装jdk17      shell: &quot;yum install -y https:&#x2F;&#x2F;download.oracle.com&#x2F;java&#x2F;17&#x2F;latest&#x2F;jdk-17_linux-x64_bin.rpm&quot;    - name: mkdir gc  #创建用到的目录      file: path&#x3D;&#x2F;gc state&#x3D;directory    - name: copy grasscutter  #拷贝gc本体      copy: src&#x3D;&#x2F;gc&#x2F;Grasscutter3.7.zip dest&#x3D;&#x2F;gc&#x2F;Grasscutter3.7.zip    - name: install unzip #安装unzip命令      yum: name&#x3D;unzip state&#x3D;present    - name: unzip Grasscutter #解压gc      shell: chdir&#x3D;&#x2F;gc unzip Grasscutter3.7.zip    - name: remove config.json  #删除自带的config      shell: chdir&#x3D;&#x2F;gc&#x2F;Grasscutter3.7 rm -rf config.json    - name: copy config #拷贝config模板      template: src&#x3D;&#x2F;gc&#x2F;config.j2 dest&#x3D;&#x2F;gc&#x2F;Grasscutter3.7&#x2F;config.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-执行剧本"><a href="#4-执行剧本" class="headerlink" title="4.执行剧本"></a>4.执行剧本</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx gc]# ansible-playbook &#x2F;gc&#x2F;gc.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检查GC本体"><a href="#检查GC本体" class="headerlink" title="检查GC本体"></a>检查<code>GC</code>本体</h4><pre class="line-numbers language-none"><code class="language-none">[root@server1 ~]# cd &#x2F;gc&#x2F;Grasscutter3.7&#x2F;[root@server1 Grasscutter3.7]# java -jar grasscutter.jar 21:02:24 &lt;INFO:Grasscutter&gt; Starting Grasscutter...21:02:24 &lt;INFO:Grasscutter&gt; Game version: 3.7.021:02:24 &lt;INFO:Grasscutter&gt; Grasscutter version: 1.5.0-10e99ba21:02:24 &lt;INFO:ResourceLoader&gt; Loading resources...21:02:29 &lt;INFO:ResourceLoader&gt; Finished loading resources.21:02:29 &lt;INFO:Language&gt; Loading cached &#39;TextMaps&#39;...21:02:33 &lt;INFO:PluginManager&gt; Loading plugin: CharacterBuilder21:02:33 &lt;INFO:PluginManager&gt; Loading plugin: MobWave21:02:33 &lt;INFO:PluginManager&gt; Loading plugin: QuickER21:02:33 &lt;INFO:PluginManager&gt; Loading plugin: setLevel21:02:33 &lt;INFO:PluginManager&gt; Loading plugin: Switch Element Plugin21:02:33 &lt;INFO:Switchele&gt; The SwitchElement has been loaded.21:02:34 &lt;INFO:HttpServer&gt; [Dispatch] Dispatch server started at 192.168.140.11:44421:02:34 &lt;INFO:GameServer&gt; Grasscutter is FREE software. If you have paid for this, you may have been scammed. Homepage: https:&#x2F;&#x2F;github.com&#x2F;Grasscutters&#x2F;Grasscutter21:02:34 &lt;INFO:GameServer&gt; Game Server started at 192.168.140.11:2210221:02:34 &lt;INFO:PluginManager&gt; Enabling plugin: CharacterBuilder21:02:34 &lt;INFO:CharacterBuilder&gt; The CharacterBuilder plugin has been enabled.21:02:34 &lt;INFO:PluginManager&gt; Enabling plugin: MobWave21:02:34 &lt;INFO:MobWave&gt; The MobWave plugin has been enabled.21:02:34 &lt;INFO:PluginManager&gt; Enabling plugin: QuickER21:02:34 &lt;INFO:QuickER&gt; QuickER has been enabled21:02:34 &lt;INFO:PluginManager&gt; Enabling plugin: setLevel21:02:34 &lt;INFO:setLevel&gt; The setLevel plugin has been enabled.21:02:34 &lt;INFO:PluginManager&gt; Enabling plugin: Switch Element Plugin21:02:34 &lt;INFO:Switchele&gt; The SwitchElement has been enabled.21:02:34 &lt;INFO:Grasscutter&gt; Done! For help, type &quot;help&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server2 ~]# cd &#x2F;gc&#x2F;Grasscutter3.7&#x2F;[root@server2 Grasscutter3.7]# java -jar grasscutter.jar 21:02:40 &lt;INFO:Grasscutter&gt; Starting Grasscutter...21:02:40 &lt;INFO:Grasscutter&gt; Game version: 3.7.021:02:40 &lt;INFO:Grasscutter&gt; Grasscutter version: 1.5.0-10e99ba21:02:40 &lt;INFO:ResourceLoader&gt; Loading resources...21:02:45 &lt;INFO:ResourceLoader&gt; Finished loading resources.21:02:45 &lt;INFO:Language&gt; Loading cached &#39;TextMaps&#39;...21:02:49 &lt;INFO:PluginManager&gt; Loading plugin: CharacterBuilder21:02:49 &lt;INFO:PluginManager&gt; Loading plugin: MobWave21:02:49 &lt;INFO:PluginManager&gt; Loading plugin: QuickER21:02:49 &lt;INFO:PluginManager&gt; Loading plugin: setLevel21:02:49 &lt;INFO:PluginManager&gt; Loading plugin: Switch Element Plugin21:02:49 &lt;INFO:Switchele&gt; The SwitchElement has been loaded.21:02:50 &lt;INFO:HttpServer&gt; [Dispatch] Dispatch server started at 192.168.140.12:44421:02:50 &lt;INFO:GameServer&gt; Grasscutter is FREE software. If you have paid for this, you may have been scammed. Homepage: https:&#x2F;&#x2F;github.com&#x2F;Grasscutters&#x2F;Grasscutter21:02:50 &lt;INFO:GameServer&gt; Game Server started at 192.168.140.12:2210221:02:50 &lt;INFO:PluginManager&gt; Enabling plugin: CharacterBuilder21:02:50 &lt;INFO:CharacterBuilder&gt; The CharacterBuilder plugin has been enabled.21:02:50 &lt;INFO:PluginManager&gt; Enabling plugin: MobWave21:02:50 &lt;INFO:MobWave&gt; The MobWave plugin has been enabled.21:02:50 &lt;INFO:PluginManager&gt; Enabling plugin: QuickER21:02:50 &lt;INFO:QuickER&gt; QuickER has been enabled21:02:50 &lt;INFO:PluginManager&gt; Enabling plugin: setLevel21:02:50 &lt;INFO:setLevel&gt; The setLevel plugin has been enabled.21:02:50 &lt;INFO:PluginManager&gt; Enabling plugin: Switch Element Plugin21:02:50 &lt;INFO:Switchele&gt; The SwitchElement has been enabled.21:02:50 &lt;INFO:Grasscutter&gt; Done! For help, type &quot;help&quot;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-关于后续的升级维护"><a href="#5-关于后续的升级维护" class="headerlink" title="5.关于后续的升级维护"></a>5.关于后续的升级维护</h3><blockquote><p><strong><code>jinjia</code>模板可以不用更改，在未来升级版本的时候，还是同样的操作，在拷贝文件的时候，修改文件名即可，可以增加删除旧版本的操作</strong><br><strong>关于文件管理模块：<a href="https://www.wsjj.top/archives/115">https://www.wsjj.top/archives/115</a></strong><br><strong>关于<code>Playbook</code>教程：<a href="https://www.wsjj.top/archives/116">https://www.wsjj.top/archives/116</a></strong></p></blockquote><h2 id="五、配置Nginx负载均衡"><a href="#五、配置Nginx负载均衡" class="headerlink" title="五、配置Nginx负载均衡"></a>五、配置Nginx负载均衡</h2><blockquote><p><strong>在<code>nginx.linux.com</code>主机上操作</strong></p></blockquote><h3 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1.安装Nginx"></a>1.安装<code>Nginx</code></h3><blockquote><p><strong>关于<code>Nginx</code>更详细的安装教程：<a href="https://www.wsjj.top/archives/83">https://www.wsjj.top/archives/83</a></strong><br><strong>注意：本教程在编译Nginx的时候和之前的教程略有不同！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.20.2.tar.gz[root@nginx ~]# yum install -y gcc openssl-devel pcre-devel zlib-devel[root@nginx ~]# mkdir -p &#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;&#123;client,proxy,fastcgi,uwsgi,scgi&#125;[root@nginx ~]# useradd -s &#x2F;sbin&#x2F;nologin nginx[root@nginx ~]# tar xf nginx-1.20.2.tar.gz [root@nginx ~]# cd nginx-1.20.2&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a>编译安装<code>Nginx</code></h4><blockquote><p><strong>注意一定要有<code>--with-stream</code>模块，后续我们需要这个模块做负载均衡</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nginx nginx-1.20.2]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-stream --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --with-stream --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nginx nginx-1.20.2]# make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="把Nginx加入开机启动项-可选"><a href="#把Nginx加入开机启动项-可选" class="headerlink" title="把Nginx加入开机启动项(可选)"></a>把<code>Nginx</code>加入开机启动项(可选)</h4><pre class="line-numbers language-none"><code class="language-none">[root@nginx nginx-1.20.2]# sed -ri &#39;$a \&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&#39; &#x2F;etc&#x2F;rc.d&#x2F;rc.local[root@nginx nginx-1.20.2]# chmod a+x &#x2F;etc&#x2F;rc.d&#x2F;rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="给命令创建一个软连接"><a href="#给命令创建一个软连接" class="headerlink" title="给命令创建一个软连接"></a>给命令创建一个软连接</h4><pre class="line-numbers language-none"><code class="language-none">[root@nginx nginx-1.20.2]# ln -s &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;sbin&#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-启动Nginx"><a href="#2-启动Nginx" class="headerlink" title="2.启动Nginx"></a>2.启动<code>Nginx</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx nginx-1.20.2]# nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# netstat -tunlp | grep nginxtcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      24108&#x2F;nginx: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-编写子配置文件"><a href="#3-编写子配置文件" class="headerlink" title="3.编写子配置文件"></a>3.编写子配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;gc&#x2F;gc.confstream &#123;    upstream proxyserver &#123;least_conn;#最少连接调度算法        server 192.168.140.11:444 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;2;#后端真实服务器        server 192.168.140.12:444 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;2;#后端真实服务器    &#125;    server &#123;        listen 54321;#监听地址        proxy_pass proxyserver;    &#125;    upstream gameserver &#123;least_conn;#最少连接调度算法        server 192.168.140.11:22102 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;2;#后端真实服务器        server 192.168.140.12:22102 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;2;#后端真实服务器    &#125;    server &#123;        listen 22102 udp;#基于udp服务的监听地址        proxy_pass gameserver;        proxy_timeout 3s;        proxy_responses 1;        proxy_bind 0.0.0.0:22102;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关于调度算法：<ul><li><code>least_conn</code>最少连接<ul><li><code>nginx</code>会计算哪个服务器的连接最少，优先把新的请求调度到最少连接的服务器上</li></ul></li><li><code>rr</code>轮询<ul><li><code>nginx</code>会按照权重依次调度服务器上，当然权重越高，收到的请求也就越多</li></ul></li></ul></li></ul><h3 id="4-加载子配置文件到主配置文件中"><a href="#4-加载子配置文件到主配置文件中" class="headerlink" title="4.加载子配置文件到主配置文件中"></a>4.加载子配置文件到主配置文件中</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf#配置文件不完整，仅展示修改的部分events &#123;    worker_connections  1024;&#125;    include &#x2F;gc&#x2F;gc.conf;#加载子配置文件，一定要写在events模块的下面，http模块的上面！http &#123;    include       mime.types;    default_type  application&#x2F;octet-stream;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Nginx重新加载配置文件"><a href="#5-Nginx重新加载配置文件" class="headerlink" title="5.Nginx重新加载配置文件"></a>5.<code>Nginx</code>重新加载配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# nginx -t#检查配置文件是否有问题nginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is oknginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-检查Nginx是否开启负载均衡"><a href="#6-检查Nginx是否开启负载均衡" class="headerlink" title="6.检查Nginx是否开启负载均衡"></a>6.检查<code>Nginx</code>是否开启负载均衡</h3><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# netstat -tunlp | grep nginxtcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      24108&#x2F;nginx: master tcp        0      0 0.0.0.0:54321           0.0.0.0:*               LISTEN      24108&#x2F;nginx: master udp        0      0 0.0.0.0:22102           0.0.0.0:*                           24108&#x2F;nginx: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-增加状态页面-用于监控Nginx"><a href="#7-增加状态页面-用于监控Nginx" class="headerlink" title="7.增加状态页面(用于监控Nginx)"></a>7.增加状态页面(用于监控Nginx)</h3><blockquote><p><strong>此页面可以配合<code>Zabbix</code>监控<code>Nginx</code></strong></p></blockquote><h4 id="修改Nginx主配置文件"><a href="#修改Nginx主配置文件" class="headerlink" title="修改Nginx主配置文件"></a>修改Nginx主配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confhttp &#123;    include       mime.types;    default_type  application&#x2F;octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;#删除注释，启用日志功能                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;#删除注释，启用日志功能                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;#删除注释，启用日志功能    access_log  logs&#x2F;access.log  main;#删除注释，启用日志功能server &#123;        listen       80;        server_name  localhost;location &#x2F; &#123;            root   html;            index  index.html index.htm;        &#125;        #新的location要配合Nginx文件，写到指定位置，必须是server的下面        location &#x2F;status &#123;#新增status状态页面，当用户访问status的时候，就可以看到状态页面了            stub_status on;#此段为新增内容            access_log on;#此段为新增内容        &#125;#此段为新增内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重新加载Nginx配置文件"><a href="#重新加载Nginx配置文件" class="headerlink" title="重新加载Nginx配置文件"></a>重新加载<code>Nginx</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@nginx ~]# nginx -tnginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is oknginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful[root@nginx ~]# nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浏览器访问测试"><a href="#浏览器访问测试" class="headerlink" title="浏览器访问测试"></a>浏览器访问测试</h4><p><img src="https://www.wsjj.top/upload/2023/06/ng_gc04.png" alt="ng_gc04"></p><h3 id="8-Windows连接测试"><a href="#8-Windows连接测试" class="headerlink" title="8.Windows连接测试"></a>8.<code>Windows</code>连接测试</h3><p><img src="https://www.wsjj.top/upload/2023/06/ng_gc01.png" alt="ng_gc01"></p><p><img src="https://www.wsjj.top/upload/2023/06/ng_gc02.png" alt="ng_gc02"></p><h4 id="后台可以看到Nginx自动把我的请求转到了server2上面"><a href="#后台可以看到Nginx自动把我的请求转到了server2上面" class="headerlink" title="后台可以看到Nginx自动把我的请求转到了server2上面"></a>后台可以看到<code>Nginx</code>自动把我的请求转到了<code>server2</code>上面</h4><p><img src="https://www.wsjj.top/upload/2023/06/ng_gc03.png" alt="ng_gc03"></p><h3 id="9-模拟其中一个服务器挂掉"><a href="#9-模拟其中一个服务器挂掉" class="headerlink" title="9.模拟其中一个服务器挂掉"></a>9.模拟其中一个服务器挂掉</h3><h4 id="故意关掉正在连接的服务器"><a href="#故意关掉正在连接的服务器" class="headerlink" title="故意关掉正在连接的服务器"></a>故意关掉正在连接的服务器</h4><p><img src="https://www.wsjj.top/upload/2023/06/ng_gc05.png" alt="ng_gc05"></p><h4 id="可以看到Nginx成功把我们的请求转到了另外一个服务器上"><a href="#可以看到Nginx成功把我们的请求转到了另外一个服务器上" class="headerlink" title="可以看到Nginx成功把我们的请求转到了另外一个服务器上"></a>可以看到<code>Nginx</code>成功把我们的请求转到了另外一个服务器上</h4><p><img src="https://www.wsjj.top/upload/2023/06/ng_gc06.png" alt="ng_gc06"></p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote><p><strong>可能需要重新登录才会登录新的服务器，教程有待完善，欢迎前来补充！</strong></p></blockquote><h3 id="10-进阶"><a href="#10-进阶" class="headerlink" title="10.进阶"></a>10.进阶</h3><h4 id="利用keepalived实现Nginx的高可用集群"><a href="#利用keepalived实现Nginx的高可用集群" class="headerlink" title="利用keepalived实现Nginx的高可用集群"></a>利用<code>keepalived</code>实现<code>Nginx</code>的高可用集群</h4><blockquote><p><strong>除了可以使用<code>Nginx</code>实现负载均衡，同样也可以准备<code>2</code>个<code>Nginx</code>服务器，再配和<code>keepalived</code>可以实现<code>Nginx</code>的高可用</strong><br><strong>关于<code>Nginx</code>配合<code>keepalived</code>实现高可用集群教程：<a href="https://www.wsjj.top/archives/100">https://www.wsjj.top/archives/100</a></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> 负载均衡集群 </tag>
            
            <tag> centos </tag>
            
            <tag> 原神 </tag>
            
            <tag> grasscutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker容器环境部署halo2博客+MySQL</title>
      <link href="/2023/06/04/halo2/"/>
      <url>/2023/06/04/halo2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用Docker容器环境部署halo2博客-MySQL"><a href="#使用Docker容器环境部署halo2博客-MySQL" class="headerlink" title="使用Docker容器环境部署halo2博客+MySQL"></a>使用Docker容器环境部署halo2博客+MySQL</h1><blockquote><p><strong>关于<code>Halo</code>博客官网：<a href="https://halo.run/">https://halo.run/</a></strong><br><strong>本教程参考了<code>Halo</code>官方文档：<a href="https://docs.halo.run/getting-started/install/docker">https://docs.halo.run/getting-started/install/docker</a></strong></p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><blockquote><p><strong>由于本人公网服务器有限，所以拿虚拟机和局域网演示</strong></p></blockquote><table><thead><tr><th>主机名</th><th>IP</th><th>软件</th></tr></thead><tbody><tr><td>server.linux.com</td><td>192.168.140.10</td><td>Docker、halo2、MySQL</td></tr><tr><td>slave.linux.com</td><td>192.168.140.11</td><td>Docker、MySQL</td></tr></tbody></table><h2 id="二、给两台服务器安装Docker"><a href="#二、给两台服务器安装Docker" class="headerlink" title="二、给两台服务器安装Docker"></a>二、给两台服务器安装<code>Docker</code></h2><blockquote><p><strong>安装步骤省略</strong><br><strong>关于Docker的安装教程：<a href="https://www.wsjj.top/archives/132">https://www.wsjj.top/archives/132</a></strong></p></blockquote><h2 id="三、准备MySQL主从复制环境"><a href="#三、准备MySQL主从复制环境" class="headerlink" title="三、准备MySQL主从复制环境"></a>三、准备<code>MySQL</code>主从复制环境</h2><table><thead><tr><th>主机名</th><th>IP</th><th>软件名</th></tr></thead><tbody><tr><td>server.linux.com</td><td>192.168.140.10</td><td>MySQL主库</td></tr><tr><td>slave.linux.com</td><td>192.168.140.11</td><td>MySQL从库</td></tr></tbody></table><h3 id="1-准备MySQL配置文件和数据目录"><a href="#1-准备MySQL配置文件和数据目录" class="headerlink" title="1.准备MySQL配置文件和数据目录"></a>1.准备<code>MySQL</code>配置文件和数据目录</h3><blockquote><p><strong>如果想让<code>Docker</code>运行<code>MySQL</code>，并且开启二进制日志，是需要提前准备个配置文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# mkdir -p &#x2F;mysql_master&#x2F;&#123;data,etc&#125;[root@slave ~]# mkdir -p &#x2F;mysql_slave&#x2F;&#123;data,etc&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# vim &#x2F;mysql_master&#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;10log_bin&#x3D;mastergtid_mode&#x3D;onenforce_gtid_consistency&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# vim &#x2F;mysql_slave&#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;11log_bin&#x3D;slavegtid_mode&#x3D;onenforce_gtid_consistency&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# docker run -itd -e MYSQL_ROOT_PASSWORD&#x3D;&quot;WWW.1.com&quot; -v &#x2F;mysql_master&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;mysql_master&#x2F;etc&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf --restart&#x3D;always --name&#x3D;masterDB -p 3306:3306 mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# docker run -itd -e MYSQL_ROOT_PASSWORD&#x3D;&quot;WWW.1.com&quot; -v &#x2F;mysql_slave&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;mysql_slave&#x2F;etc&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf --restart&#x3D;always --name&#x3D;slaveDB -p 3306:3306 mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-it</code>模拟终端</li><li><code>-d</code>后台保持运行</li><li><code>-e</code>传递参数，用于指定<code>MySQL</code>内<code>root</code>用户的密码</li><li><code>-v</code>用于MySQL做数据永久保存</li><li><code>--restart</code>重启后自动启动容器</li><li><code>--name</code>给容器指定一个名字</li><li><code>-p</code>映射端口，用于从库连接和未来的主从切换</li></ul><h3 id="2-配置主从环境用户、准备halo库和用户"><a href="#2-配置主从环境用户、准备halo库和用户" class="headerlink" title="2.配置主从环境用户、准备halo库和用户"></a>2.配置主从环境用户、准备<code>halo</code>库和用户</h3><blockquote><p><strong>需要在主库操作！</strong><br><strong>关于<code>MySQL</code>主从复制教程：<a href="https://www.wsjj.top/archives/76">https://www.wsjj.top/archives/76</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# docker exec -it masterDB &#x2F;bin&#x2F;bashbash-4.2# mysql -uroot -pWWW.1.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;192.168.140.%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; create database halo2 charset utf8mb4;Query OK, 1 row affected (0.00 sec)mysql&gt; grant all on halo2.* to &#39;halo2&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-回到从库，配置主从复制"><a href="#3-回到从库，配置主从复制" class="headerlink" title="3.回到从库，配置主从复制"></a>3.回到从库，配置主从复制</h3><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# docker exec -it slaveDB &#x2F;bin&#x2F;bashbash-4.2# mysql -uroot -pWWW.1.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; change master to    -&gt; master_host&#x3D;&quot;192.168.140.10&quot;,    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1;Query OK, 0 rows affected, 2 warnings (0.01 sec)mysql&gt; start slave;#启动slaveQuery OK, 0 rows affected (0.00 sec)mysql&gt; show slave status\G;#查看状态*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.140.10                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000003          Read_Master_Log_Pos: 964               Relay_Log_File: d8ff05681692-relay-bin.000003                Relay_Log_Pos: 1171        Relay_Master_Log_File: master.000003             Slave_IO_Running: Yes#正常运行            Slave_SQL_Running: Yes#正常运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、安装halo2"><a href="#四、安装halo2" class="headerlink" title="四、安装halo2"></a>四、安装halo2</h2><h3 id="1-创建数据目录"><a href="#1-创建数据目录" class="headerlink" title="1.创建数据目录"></a>1.创建数据目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# mkdir -p &#x2F;root&#x2F;.halo2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2.创建容器"></a>2.创建容器</h3><blockquote><p><strong><code>halo2</code>官方部署文档：<a href="https://docs.halo.run/getting-started/install/docker">https://docs.halo.run/getting-started/install/docker</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">docker run \  -it -d \  --name halo \  -p 8090:8090 \  -v ~&#x2F;.halo2:&#x2F;root&#x2F;.halo2 \  --link&#x3D;masterDB:masterdb \  --restart&#x3D;always \  halohub&#x2F;halo:2.6 \  --halo.external-url&#x3D;http:&#x2F;&#x2F;localhost:8090&#x2F; \  --halo.security.initializer.superadminusername&#x3D;admin \  --halo.security.initializer.superadminpassword&#x3D;password \  --spring.r2dbc.url&#x3D;r2dbc:pool:mysql:&#x2F;&#x2F;masterdb:3306&#x2F;halo2 \  --spring.r2dbc.username&#x3D;halo2 \  --spring.r2dbc.password&#x3D;WWW.1.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--link</code>&#x3D;<code>容器名</code>:<code>容器别名</code><ul><li>用于连接数据库</li><li>当你指定了一个别名后，在下面的数据库连接地址，就可以写成容器别名，这样子<code>halo</code>就会以容器别名的方式连接其他容器<h3 id="3-浏览器测试"><a href="#3-浏览器测试" class="headerlink" title="3.浏览器测试"></a>3.浏览器测试</h3></li></ul></li></ul><p><img src="https://www.wsjj.top/upload/2023/06/halo2_01.png" alt="halo2_01"></p><p><img src="https://www.wsjj.top/upload/2023/06/halo2_02.png" alt="halo2_02"></p><blockquote><p><strong>到这里，我们的博客就算部署完啦！</strong></p></blockquote><h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h2><p><strong><a href="https://docs.halo.run/">Halo文档</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> halo </tag>
            
            <tag> halo2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容器应用系列教程】容器介绍、Docker的安装和基本操作</title>
      <link href="/2023/06/02/132/"/>
      <url>/2023/06/02/132/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【容器应用系列教程】容器介绍、Docker的安装和基本操作"><a href="#【容器应用系列教程】容器介绍、Docker的安装和基本操作" class="headerlink" title="【容器应用系列教程】容器介绍、Docker的安装和基本操作"></a>【容器应用系列教程】容器介绍、Docker的安装和基本操作</h1><h2 id="一、关于容器container"><a href="#一、关于容器container" class="headerlink" title="一、关于容器container"></a>一、关于容器<code>container</code></h2><p><img src="https://www.wsjj.top/upload/2023/06/container01.png" alt="container01"></p><blockquote><p><strong>创建保证某业务可正常运行的必备的应用程序&#x2F;指令</strong></p></blockquote><h3 id="1-常用的容器管理工具"><a href="#1-常用的容器管理工具" class="headerlink" title="1.常用的容器管理工具"></a>1.常用的容器管理工具</h3><ul><li><code>docker</code><ul><li>基于<code>golang</code>语言开发</li><li>开源的</li><li><code>c/s</code>架构<code>client/server</code>架构</li><li><code>docker-ce</code>社区版、<code>docker-ee</code>企业版</li></ul></li><li><code>podman</code><ul><li>红帽公司开发</li></ul></li></ul><h3 id="2-容器的优势"><a href="#2-容器的优势" class="headerlink" title="2.容器的优势"></a>2.容器的优势</h3><ul><li>创建速度快、秒级</li><li>便于业务的部署、迁移</li><li>容器间共享物理机的内核</li><li>缺点：安全性低</li></ul><h3 id="3-容器的核心技术"><a href="#3-容器的核心技术" class="headerlink" title="3.容器的核心技术"></a>3.容器的核心技术</h3><ul><li><code>namespace</code>命名空间<ul><li>实现容器间的资源(用户、进程)隔离</li></ul></li><li><code>cgroup</code><ul><li>实现容器的资源(CPU、内存)限制</li></ul></li><li>容器的三要素：<code>容器</code>、<code>镜像</code>、<code>仓库</code></li></ul><h2 id="二、Centos7安装Docker-ce"><a href="#二、Centos7安装Docker-ce" class="headerlink" title="二、Centos7安装Docker-ce"></a>二、<code>Centos7</code>安装<code>Docker-ce</code></h2><h3 id="1-配置yum源和docker国内源"><a href="#1-配置yum源和docker国内源" class="headerlink" title="1.配置yum源和docker国内源"></a>1.配置<code>yum</code>源和<code>docker</code>国内源</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>如果没有<code>vim</code>请安装<code>yum install -y vim</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo[docker-ce]name&#x3D;docker-cebaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建立yum缓存"><a href="#建立yum缓存" class="headerlink" title="建立yum缓存"></a>建立<code>yum</code>缓存</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# yum clean all &amp;&amp; yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装Docker-ce"><a href="#2-安装Docker-ce" class="headerlink" title="2.安装Docker-ce"></a>2.安装<code>Docker-ce</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# yum install -y docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-启动Docker-ce"><a href="#3-启动Docker-ce" class="headerlink" title="3.启动Docker-ce"></a>3.启动<code>Docker-ce</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# systemctl enable --now docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-配置Docker-ce国内镜像加速"><a href="#4-配置Docker-ce国内镜像加速" class="headerlink" title="4.配置Docker-ce国内镜像加速"></a>4.配置<code>Docker-ce</code>国内镜像加速</h3><blockquote><p><strong>由于国内已经无法访问<code>https://hub.docker.com</code>，请一定要做这一步！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json&#123;&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重启Docker，让配置文件生效"><a href="#重启Docker，让配置文件生效" class="headerlink" title="重启Docker，让配置文件生效"></a>重启<code>Docker</code>，让配置文件生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看<code>Docker</code>版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker versionClient: Docker Engine - Community Version:           24.0.2 API version:       1.43 Go version:        go1.20.4 Git commit:        cb74dfc Built:             Thu May 25 21:55:21 2023 OS&#x2F;Arch:           linux&#x2F;amd64 Context:           defaultServer: Docker Engine - Community Engine:  Version:          24.0.2  API version:      1.43 (minimum version 1.12)  Go version:       go1.20.4  Git commit:       659604f  Built:            Thu May 25 21:54:24 2023  OS&#x2F;Arch:          linux&#x2F;amd64  Experimental:     false containerd:  Version:          1.6.21  GitCommit:        3dce8eb055cbb6872793272b4f20ed16117344f8 runc:  Version:          1.1.7  GitCommit:        v1.1.7-0-g860f061 docker-init:  Version:          0.19.0  GitCommit:        de40ad0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Docker命令基本的操作"><a href="#三、Docker命令基本的操作" class="headerlink" title="三、Docker命令基本的操作"></a>三、Docker命令基本的操作</h2><h3 id="1-查找镜像"><a href="#1-查找镜像" class="headerlink" title="1.查找镜像"></a>1.查找镜像</h3><pre class="line-numbers language-none"><code class="language-none"># docker search 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker search nginxNAME                                              DESCRIPTION                                      STARS     OFFICIAL   AUTOMATEDnginx                                             Official build of Nginx.                         18582     [OK]       unit                                              Official build of NGINX Unit: Universal Web …   5         [OK]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h3><pre class="line-numbers language-none"><code class="language-none"># docker pull 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker pull nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong><code>Nginx</code>软件名:标签</strong><br><strong><code>latest</code>代表最新版，如果不写标签，默认同样拉取的是最新版的镜像</strong></p></blockquote><h3 id="3-查看本地镜像"><a href="#3-查看本地镜像" class="headerlink" title="3.查看本地镜像"></a>3.查看本地镜像</h3><pre class="line-numbers language-none"><code class="language-none"># docker images或# docker image ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED         SIZEnginx        latest    f9c14fe76d50   8 days ago      143MBbusybox      latest    8135583d97fe   13 days ago     4.86MBcentos       7         eeb6ee3f44bd   20 months ago   204MB[root@lvm ~]# docker image lsREPOSITORY   TAG       IMAGE ID       CREATED         SIZEnginx        latest    f9c14fe76d50   8 days ago      143MBbusybox      latest    8135583d97fe   13 days ago     4.86MBcentos       7         eeb6ee3f44bd   20 months ago   204MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建容器"><a href="#4-创建容器" class="headerlink" title="4.创建容器"></a>4.创建容器</h3><pre class="line-numbers language-none"><code class="language-none"># docker run &lt;选项&gt; [镜像名] 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker run -tid centos:7 sleep 10[root@localhost ~]# docker run -tid centos:7 &#x2F;bin&#x2F;bash[root@localhost ~]# docker run -tid centos:7[root@localhost ~]# docker run -tid centos:7 ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-it</code>在容器内部模拟一个终端</li><li><code>-d</code>容器保持后台运行</li><li>重要核心：<ul><li>容器的运行是依赖于持续的进程 </li><li>一个容器只运行一个任务</li><li>创建容器后面的命令，决定容器是否可持续运行。</li></ul></li></ul><h3 id="5-查看容器"><a href="#5-查看容器" class="headerlink" title="5.查看容器"></a>5.查看容器</h3><h4 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker ps -aCONTAINER ID   IMAGE      COMMAND       CREATED       STATUS                           PORTS     NAMES528a4264f3ae   centos:7   &quot;&#x2F;bin&#x2F;bash&quot;   3 hours ago   Exited (137) About an hour ago             centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-删除容器"><a href="#6-删除容器" class="headerlink" title="6.删除容器"></a>6.删除容器</h3><h4 id="在删除容器前，先停止容器，或者添加-f强制删除"><a href="#在删除容器前，先停止容器，或者添加-f强制删除" class="headerlink" title="在删除容器前，先停止容器，或者添加-f强制删除"></a>在删除容器前，先停止容器，或者添加<code>-f</code>强制删除</h4><blockquote><p><strong>关于容器<code>ID</code>，可以使用<code>docker ps -a</code>查看容器<code>ID</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># docker stop 容器名&#x2F;容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># docker rm 容器名&#x2F;容器ID# docker rm -f 容器名&#x2F;容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-删除镜像"><a href="#7-删除镜像" class="headerlink" title="7.删除镜像"></a>7.删除镜像</h3><blockquote><p><strong>可以使用<code>docker images</code>查看镜像</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># docker rmi 镜像名&#x2F;镜像ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-连接容器"><a href="#8-连接容器" class="headerlink" title="8.连接容器"></a>8.连接容器</h3><pre class="line-numbers language-none"><code class="language-none"># docker exec -it 容器名&#x2F;容器ID 要执行的命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker exec -it centos &#x2F;bin&#x2F;bash[root@lvm &#x2F;]# ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-查看容器的详细信息"><a href="#9-查看容器的详细信息" class="headerlink" title="9.查看容器的详细信息"></a>9.查看容器的详细信息</h3><pre class="line-numbers language-none"><code class="language-none"># docker inspect 容器名&#x2F;容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-查看容器日志"><a href="#10-查看容器日志" class="headerlink" title="10.查看容器日志"></a>10.查看容器日志</h3><pre class="line-numbers language-none"><code class="language-none"># docker logs 容器名&#x2F;容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-拷贝物理机文件到容器内"><a href="#11-拷贝物理机文件到容器内" class="headerlink" title="11.拷贝物理机文件到容器内"></a>11.拷贝物理机文件到容器内</h3><pre class="line-numbers language-none"><code class="language-none"># docker ps 文件 容器名&#x2F;容器ID:容器内路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker cp &#x2F;root&#x2F;file01 centos:&#x2F;tmp&#x2F;Successfully copied 1.54kB to centos:&#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12-拷贝容器内文件到物理机"><a href="#12-拷贝容器内文件到物理机" class="headerlink" title="12.拷贝容器内文件到物理机"></a>12.拷贝容器内文件到物理机</h3><pre class="line-numbers language-none"><code class="language-none"># docker cp 容器名&#x2F;容器ID:要拷贝的文件 物理机路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker cp centos:&#x2F;123.mp3 &#x2F;root&#x2F;Successfully copied 1.54kB to &#x2F;root&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="13-导出容器"><a href="#13-导出容器" class="headerlink" title="13.导出容器"></a>13.导出容器</h3><pre class="line-numbers language-none"><code class="language-none"># docker export -o 文件路径 容器名&#x2F;容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker export -o &#x2F;root&#x2F;centos.tar centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="14-导入容器"><a href="#14-导入容器" class="headerlink" title="14.导入容器"></a>14.导入容器</h3><pre class="line-numbers language-none"><code class="language-none"># docker import 文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、创建容器时的选项参数"><a href="#四、创建容器时的选项参数" class="headerlink" title="四、创建容器时的选项参数"></a>四、创建容器时的选项参数</h2><pre class="line-numbers language-none"><code class="language-none"># docker run &lt;选项&gt; [镜像名] 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-模拟终端"><a href="#1-模拟终端" class="headerlink" title="1.模拟终端"></a>1.模拟终端</h3><ul><li><code>-it</code></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker run -it centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-保持后台运行"><a href="#2-保持后台运行" class="headerlink" title="2.保持后台运行"></a>2.保持后台运行</h3><ul><li><code>-d</code></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker run -itd centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-指定容器名字"><a href="#3-指定容器名字" class="headerlink" title="3.指定容器名字"></a>3.指定容器名字</h3><ul><li><code>--name</code>名字</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker run -itd --name centos01 centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-指定容器主机名"><a href="#4-指定容器主机名" class="headerlink" title="4.指定容器主机名"></a>4.指定容器主机名</h3><ul><li><code>--hostname=</code>主机名</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker run -itd --name centos02  --hostname&#x3D;web_server centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-映射容器内部端口-发布服务"><a href="#5-映射容器内部端口-发布服务" class="headerlink" title="5.映射容器内部端口(发布服务)"></a>5.映射容器内部端口(发布服务)</h3><ul><li><code>-p</code>物理机端口:容器内部端口</li><li><code>-P</code>(大写P)随机映射端口</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name nginx01 -p 8888:80 nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name nginx02 -P nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>可以看到<code>小写p</code>指定端口是<code>8888</code>，而<code>大写P</code>是个随机端口<code>32768</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker psCONTAINER ID   IMAGE      COMMAND                   CREATED          STATUS          PORTS                                     NAMES89d81e09cb12   nginx      &quot;&#x2F;docker-entrypoint.…&quot;   5 seconds ago    Up 5 seconds    0.0.0.0:32768-&gt;80&#x2F;tcp, :::32768-&gt;80&#x2F;tcp   nginx02297bc0b75f48   nginx      &quot;&#x2F;docker-entrypoint.…&quot;   24 seconds ago   Up 23 seconds   0.0.0.0:8888-&gt;80&#x2F;tcp, :::8888-&gt;80&#x2F;tcp     nginx01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-设置容器重启策略"><a href="#6-设置容器重启策略" class="headerlink" title="6.设置容器重启策略"></a>6.设置容器重启策略</h3><blockquote><p><strong>一般用于容器开机自启动</strong></p></blockquote><ul><li><code>--restart</code>&#x3D;<code>always/unless-stopped</code><ul><li><code>always</code>在容器退出时总是重启容器</li><li><code>unless-stopped</code>在容器退出时总是重启容器，但是不考虑在<code>Docker</code>守护进程启动时就已经停止了的容器</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -it -d -p 8090:80 --name nginx03 --restart&#x3D;always nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-对容器做资源限制"><a href="#7-对容器做资源限制" class="headerlink" title="7.对容器做资源限制"></a>7.对容器做资源限制</h3><ul><li>针对<code>CPU</code>、内存进行限制</li><li>默认创建容器时，物理机是不会对容器做资源限制的，如果容器数量过多，导致<code>oom</code>现象，物理机启动<code>oom-killler</code>机制随机杀进程，可能会容器不能正常工作</li></ul><h4 id="A-对容器CPU限制"><a href="#A-对容器CPU限制" class="headerlink" title="A.对容器CPU限制"></a>A.对容器<code>CPU</code>限制</h4><ul><li><code>--cpus=</code>限制数量</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -tid --cpus&#x3D;2 centos &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-对容器内存限制"><a href="#B-对容器内存限制" class="headerlink" title="B.对容器内存限制"></a>B.对容器内存限制</h4><ul><li><code>--memory=</code>限制大小</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -tid --memory&#x3D;1024M centos &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-向容器内部传递参数-重要"><a href="#8-向容器内部传递参数-重要" class="headerlink" title="8.向容器内部传递参数(重要)"></a>8.向容器内部传递参数(重要)</h3><ul><li><code>-e</code> 变量名&#x3D;要传递的参数</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd -e USER&#x3D;wangshengjj --name centos01 centos:7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看容器内的变量"><a href="#查看容器内的变量" class="headerlink" title="查看容器内的变量"></a>查看容器内的变量</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker exec -it centos01 bash[root@b67cb71fc38f &#x2F;]# echo $USERwangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-实现容器数据持久化保存-重要"><a href="#9-实现容器数据持久化保存-重要" class="headerlink" title="9.实现容器数据持久化保存(重要)"></a>9.实现容器数据持久化保存(重要)</h3><ul><li><code>-v</code> <code>物理机目录</code>:<code>容器内目录</code></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# mkdir -p &#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name mysql01 -p 3306:3306 -v &#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;&quot;WWW.1.com&quot; mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>容器内部<code>/var/lib/mysql</code>目录下的内容，已经被映射到了物理机的<code>/mysql/data</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# ls &#x2F;mysql&#x2F;data&#x2F;auto.cnf         client-key.pem  ib_logfile1  performance_schema  server-key.pemca-key.pem       ib_buffer_pool  ibtmp1       private_key.pem     sysca.pem           ibdata1         mysql        public_key.pemclient-cert.pem  ib_logfile0     mysql.sock   server-cert.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-设置容器之间的网络别名"><a href="#10-设置容器之间的网络别名" class="headerlink" title="10.设置容器之间的网络别名"></a>10.设置容器之间的网络别名</h3><blockquote><p><strong>如果我们无法直接控制容器之间的网络(因为容器都是<code>DHCP</code>网络)，所以当有容器要经常互相通信的时候，就可以在创建的时候设置网络别名</strong></p></blockquote><ul><li><code>--link</code>&#x3D;<code>要连接的容器名</code>:<code>自己起个别名</code></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name demo centos:782b7d2b1d0255142eefc69f87682fed04074b38be2ccd03c9da3abfd84456af8[root@lvm ~]# docker run -itd --link&#x3D;demo:web_server centos:74b4fbcc4aae145c3f064212e44bda9c9e986d2d8e8147c9fa51a64ad5600dac9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进入第二个容器测试"><a href="#进入第二个容器测试" class="headerlink" title="进入第二个容器测试"></a>进入第二个容器测试</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker exec -it 4b4fbcc &#x2F;bin&#x2F;bash[root@4b4fbcc4aae1 &#x2F;]# ping web_serverPING web_server (172.17.0.3) 56(84) bytes of data.64 bytes from web_server (172.17.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.105 ms64 bytes from web_server (172.17.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.045 ms64 bytes from web_server (172.17.0.3): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.208 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="本质上Docker自动帮我们加入了主机名解析"><a href="#本质上Docker自动帮我们加入了主机名解析" class="headerlink" title="本质上Docker自动帮我们加入了主机名解析"></a>本质上<code>Docker</code>自动帮我们加入了主机名解析</h4><pre class="line-numbers language-none"><code class="language-none">[root@4b4fbcc4aae1 &#x2F;]# cat &#x2F;etc&#x2F;hosts127.0.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters172.17.0.3web_server 82b7d2b1d025 demo172.17.0.54b4fbcc4aae1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、示例"><a href="#五、示例" class="headerlink" title="五、示例"></a>五、示例</h2><h3 id="1-利用Docker部署一个Wordpress"><a href="#1-利用Docker部署一个Wordpress" class="headerlink" title="1.利用Docker部署一个Wordpress"></a>1.利用<code>Docker</code>部署一个<code>Wordpress</code></h3><h4 id="准备数据目录"><a href="#准备数据目录" class="headerlink" title="准备数据目录"></a>准备数据目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# mkdir -p &#x2F;mysql&#x2F;&#123;master_data,slave_data&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="准备主从复制配置文件"><a href="#准备主从复制配置文件" class="headerlink" title="准备主从复制配置文件"></a>准备主从复制配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;mysql&#x2F;master_my.cnf[mysqld]server_id&#x3D;10log_bin&#x3D;mastergtid_mode&#x3D;onenforce_gtid_consistency&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;mysql&#x2F;slave_my.cnf[mysqld]server_id&#x3D;11log_bin&#x3D;slavegtid_mode&#x3D;onenforce_gtid_consistency&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="先部署2个数据库"><a href="#先部署2个数据库" class="headerlink" title="先部署2个数据库"></a>先部署<code>2</code>个数据库</h4><pre class="line-numbers language-none"><code class="language-none">root@lvm ~]# docker run -itd -e MYSQL_ROOT_PASSWORD&#x3D;&quot;WWW.1.com&quot; -v &#x2F;mysql&#x2F;master_data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;mysql&#x2F;master_my.cnf:&#x2F;etc&#x2F;my.cnf --restart&#x3D;always --name&#x3D;masterDB mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --link&#x3D;masterDB:masterdb --name&#x3D;slaveDB -e MYSQL_ROOT_PASSWORD&#x3D;&quot;WWW.1.com&quot; -v &#x2F;mysql&#x2F;slave_data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;mysql&#x2F;slave_my.cnf:&#x2F;etc&#x2F;my.cnf --restart&#x3D;always mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--link</code>用于配置主从复制连接</li></ul><h5 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h5><blockquote><p><strong>关于<code>MySQL</code>主从复制教程：<a href="https://www.wsjj.top/archives/76">https://www.wsjj.top/archives/76</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker exec -it masterDB &#x2F;bin&#x2F;bashbash-4.2# mysql -uroot -pmysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; create database wordpress;Query OK, 1 row affected (0.00 sec)mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; exitByebash-4.2# exitexit[root@lvm ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker exec -it slaveDB &#x2F;bin&#x2F;bashbash-4.2# mysql -uroot -pmysql&gt; change master to    -&gt; master_host&#x3D;&quot;masterdb&quot;,    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1;Query OK, 0 rows affected, 2 warnings (0.01 sec)mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: masterdb                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000003          Read_Master_Log_Pos: 960               Relay_Log_File: e286493f40f4-relay-bin.000003                Relay_Log_Pos: 1167        Relay_Master_Log_File: master.000003             Slave_IO_Running: Yes            Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建WordPress容器"><a href="#创建WordPress容器" class="headerlink" title="创建WordPress容器"></a>创建<code>WordPress</code>容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name wordpress --link&#x3D;masterDB:masterdb -p 80:80 --restart&#x3D;always -e WORDPRESS_DB_HOST&#x3D;&quot;masterdb&quot; -e WORDPRESS_DB_USER&#x3D;&quot;wordpress&quot; -e WORDPRESS_DB_PASSWORD&#x3D;&quot;WWW.1.com&quot; -e WORDPRESS_DB_NAME&#x3D;&quot;wordpress&quot; -e WORDPRESS_TABLE_PREFIX&#x3D;&quot;wp_&quot; wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h5><p><img src="https://www.wsjj.top/upload/2023/06/container02.png" alt="container02"></p><p><img src="https://www.wsjj.top/upload/2023/06/container03.png" alt="container03"></p><h4 id="Wordpress安装redis插件"><a href="#Wordpress安装redis插件" class="headerlink" title="Wordpress安装redis插件"></a><code>Wordpress</code>安装<code>redis</code>插件</h4><h5 id="启用redis容器"><a href="#启用redis容器" class="headerlink" title="启用redis容器"></a>启用<code>redis</code>容器</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name redis --restart&#x3D;always -p 6379:6379 redis:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="在Wordpress网页端安装redis插件"><a href="#在Wordpress网页端安装redis插件" class="headerlink" title="在Wordpress网页端安装redis插件"></a>在<code>Wordpress</code>网页端安装<code>redis</code>插件</h5><blockquote><p><strong>下载完，先不要启动插件</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/container06.png" alt="container06"></p><h5 id="修改Wordpress配置文件"><a href="#修改Wordpress配置文件" class="headerlink" title="修改Wordpress配置文件"></a>修改<code>Wordpress</code>配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker cp wordpress:&#x2F;var&#x2F;www&#x2F;html&#x2F;wp-config.php &#x2F;root&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;root&#x2F;wp-config.php#在配置文件末尾添加以下几行内容define(&#39;WP_REDIS_HOST&#39;, &#39;192.168.140.16&#39;);#物理机IPdefine(&#39;WP_REDIS_PORT&#39;, &#39;6379&#39;);define(&#39;WP_REDIS_DATABASE&#39;, &#39;0&#39;);#define(&#39;WP_REDIS_PASSWORD&#39;, &#39;123456&#39;);#redis连接密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker cp &#x2F;root&#x2F;wp-config.php wordpress:&#x2F;var&#x2F;www&#x2F;html&#x2F;wp-config.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="回到wordpress后台，启动redis插件"><a href="#回到wordpress后台，启动redis插件" class="headerlink" title="回到wordpress后台，启动redis插件"></a>回到<code>wordpress</code>后台，启动<code>redis</code>插件</h5><p><img src="https://www.wsjj.top/upload/2023/06/container07.png" alt="container07"></p><h3 id="2-利用Docker搭建一个haproy负载均衡和2个tomcat站点"><a href="#2-利用Docker搭建一个haproy负载均衡和2个tomcat站点" class="headerlink" title="2.利用Docker搭建一个haproy负载均衡和2个tomcat站点"></a>2.利用<code>Docker</code>搭建一个<code>haproy</code>负载均衡和<code>2</code>个<code>tomcat</code>站点</h3><blockquote><p><strong>先部署<code>2</code>个<code>tomcat</code>站点，然后再配置<code>haproxy</code>做负载均衡</strong></p></blockquote><h4 id="创建网页目录和准备java项目"><a href="#创建网页目录和准备java项目" class="headerlink" title="创建网页目录和准备java项目"></a>创建网页目录和准备<code>java</code>项目</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# mkdir -p &#x2F;tomcat&#x2F;webapps[root@lvm ~]# ls &#x2F;tomcat&#x2F;webappsphone_war.war<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="创建2个tomcat容器"><a href="#创建2个tomcat容器" class="headerlink" title="创建2个tomcat容器"></a>创建2个<code>tomcat</code>容器</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# docker run -itd --name tomcat01 --restart&#x3D;always -v &#x2F;tomcat&#x2F;webapps:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps -p 8080:8080 tomcat:8[root@lvm ~]# docker run -itd --name tomcat02 --restart&#x3D;always -v &#x2F;tomcat&#x2F;webapps:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps -p 8080:8080 tomcat:8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="准备HAproxy的配置文件"><a href="#准备HAproxy的配置文件" class="headerlink" title="准备HAproxy的配置文件"></a>准备<code>HAproxy</code>的配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# mkdir -p &#x2F;haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;haproxy&#x2F;haproxy.cfgglobal  stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats user haproxy group haproxy mode 660 level admin expose-fd listeners  log stdout format raw local0 infodefaults  mode http  timeout client 10s  timeout connect 5s  timeout server 10s  timeout http-request 10s  log globalfrontend stats  bind *:8888  stats enable  stats uri &#x2F;  stats refresh 10sfrontend myfrontend  bind :81  default_backend webserversbackend webservers  server s1 tomcat01:8080 check  server s2 tomcat02:8080 check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动HAproxy容器"><a href="#启动HAproxy容器" class="headerlink" title="启动HAproxy容器"></a>启动<code>HAproxy</code>容器</h4><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name haproxy --restart&#x3D;always --user&#x3D;root -p 81:81 -p 8888:8888 --link&#x3D;tomcat01:tomcat01 --link&#x3D;tomcat02:tomcat02 -v &#x2F;haproxy&#x2F;:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy:ro haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="浏览器访问测试"><a href="#浏览器访问测试" class="headerlink" title="浏览器访问测试"></a>浏览器访问测试</h4><p><img src="https://www.wsjj.top/upload/2023/06/container04.png" alt="container04"></p><p><img src="https://www.wsjj.top/upload/2023/06/container05.png" alt="container05"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 笔记 </category>
          
          <category> 容器 </category>
          
          <category> 应用 </category>
          
          <category> 虚拟化应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚拟化应用系列教程】OpenStack组件</title>
      <link href="/2023/06/01/131/"/>
      <url>/2023/06/01/131/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【虚拟化应用系列教程】OpenStack组件"><a href="#【虚拟化应用系列教程】OpenStack组件" class="headerlink" title="【虚拟化应用系列教程】OpenStack组件"></a>【虚拟化应用系列教程】OpenStack组件</h1><h2 id="一、关于云平台"><a href="#一、关于云平台" class="headerlink" title="一、关于云平台"></a>一、关于云平台</h2><blockquote><p><strong>云平台像是一个大型的资源池，在这个资源池里提供着大量的虚拟化资源服务。</strong><br><strong>是一个提供着虚拟化服务和资源的平台。</strong></p></blockquote><h3 id="1-云平台的分类"><a href="#1-云平台的分类" class="headerlink" title="1.云平台的分类"></a>1.云平台的分类</h3><h4 id="根据云平台提供的服务不同分类"><a href="#根据云平台提供的服务不同分类" class="headerlink" title="根据云平台提供的服务不同分类"></a>根据云平台提供的服务不同分类</h4><ul><li><code>Laas</code> <code>lnfrastracture As a Service</code><ul><li>基础设施即服务</li><li>提供虚拟化平台、服务器、存储、网络等</li></ul></li><li><code>Paas</code> <code>Platform As A service</code><ul><li>平台即服务</li><li>在基础设施服务基础上，提供操作系统、数据库、中间件、运行库等</li></ul></li><li><code>Saas</code> <code>Software As A Service</code><ul><li>软件即服务</li><li>在平台服务基础上，数据和应用</li></ul></li></ul><blockquote><p><strong>蓝色为云服务商提供的服务</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/openstack01.png" alt="openstack01"></p><h4 id="根据云平台提供服务为的范围不同"><a href="#根据云平台提供服务为的范围不同" class="headerlink" title="根据云平台提供服务为的范围不同"></a>根据云平台提供服务为的范围不同</h4><ul><li>公有云<ul><li>云服务提供商部署IT基础设施并进行运营维护，将基础设施所承载的标准化、无差别的IT资源提供给公众客户的服务模式。</li></ul></li><li>私有云<ul><li>云服务商为单一客户构建IT基础设施，相应的IT资源仅供该客户内部员工使用的产品交付模式。私有云的核心特征是云端资源仅供某一客户使用，其他客户无权访问。</li></ul></li><li>混合云<ul><li>用户同时使用公有云和私有云的模式。一方面，用户在本地数据中心搭建私有云，处理大部分业务并存储核心数据；另一方面，用户通过网络获取公有云服务，满足峰值时期的IT资源需求。</li></ul></li></ul><h2 id="二、OpenStack核心组件"><a href="#二、OpenStack核心组件" class="headerlink" title="二、OpenStack核心组件"></a>二、OpenStack核心组件</h2><p><img src="https://www.wsjj.top/upload/2023/06/openstack02.png" alt="openstack02"></p><p><img src="https://www.wsjj.top/upload/2023/06/openstack04.png" alt="openstack04"></p><ul><li><code>nova</code>组件<ul><li>提供<code>compute</code>服务</li><li>类似于<code>Amazon</code>的<code>EC2</code>，提供计算资源池的自动化管理服务</li><li>切记<code>Nova</code>不是虚拟机管理软件（Hypervisor）而是处于其上的编排调度可用的计算资源</li><li>负责云服务器整个生命周期管理 </li><li>调用<code>Hypervisor</code><ul><li><code>nova-api</code><ul><li>负责接收创建、销毁虚拟机请求</li></ul></li><li><code>nova-scheduler</code><ul><li>调度计算请求</li></ul></li><li><code>nova-compute</code><ul><li>调用<code>Hypervisor</code>实现创建、销毁操作</li></ul></li><li><code>nova-condutor</code><ul><li>负责与数据库交互、读取云服务的元数据信息</li></ul></li><li><code>nova-novncproxy</code><ul><li>实现<code>vnc</code>连接</li></ul></li></ul></li></ul></li></ul><p><img src="https://www.wsjj.top/upload/2023/06/openstack05.png" alt="openstack05"></p><ul><li><code>glance</code>组件<ul><li>提供虚拟机磁盘镜像的注册、发现和分发的服务</li><li>提供<code>image</code>镜像服务</li><li>负责磁盘镜像文件的管理 <ul><li><code>glance-api</code><ul><li>负责接收上传、下载、查看镜像的请求</li></ul></li><li><code>glance-registry</code><ul><li>与数据库交互，保存镜像的元数据信息</li></ul></li></ul></li></ul></li><li><code>swift</code>组件<ul><li>提供<code>object storage</code>对象存储服务</li><li>负责磁盘镜像文件、磁盘文件存储管理</li></ul></li><li><code>neutron</code>组件<ul><li>提供<code>network</code>网络服务</li><li>用户可以利用它管理虚拟网络资源和<code>IP</code>地址</li><li>用户可以通过门户面板，命令行和应用编程接口来创建、查看、修改和删除自己的网络，子网，端口，防火墙规则和路由器</li><li>负责对云服务器提供网络管理功能</li><li>调用各大网络厂商提供网络插件<ul><li><code>neutron-server</code><ul><li>接收、转发网络操作请求</li><li>插件<ul><li><code>L2 Agent</code>、<code>L3 Agent</code>、<code>DHCP Agent</code> </li><li><code>LinuxBridge</code>、<code>VXLAN</code></li></ul></li></ul></li></ul></li></ul></li><li><code>cinder</code>组件<ul><li>提供<code>block storage</code>块存储服务</li><li>用户可以利用它创建卷，并由<code>Nova</code>实例加载为磁盘设备</li><li>块存储可以创建启动卷</li><li>块存储支持快照，用于备份保护</li><li>负责为云服务器提供块存储(虚拟硬盘)能力<ul><li><code>cinder-api</code><ul><li>接收客户端操作请求</li></ul></li><li><code>cinder-scheduler</code><ul><li>调度客户端操作请求</li></ul></li><li><code>cinder-volume</code><ul><li>调用存储节点的存储接口实现块存储创建、查看、销毁</li></ul></li><li><code>cinder-backup</code><ul><li>块存储设备的备份</li></ul></li></ul></li></ul></li><li><code>keystone</code>组件<ul><li>提供<code>identity</code>认证服务</li><li>负责各组件间通信时，进行身份验证</li><li><code>Keystone</code>存储了服务目录、用户、域、项目、组、角色和配额等信息</li></ul></li><li><code>Cellometer</code>组件<ul><li>提供计费服务</li></ul></li><li><code>dashboard</code>(Horizon)组件<ul><li>提供<code>web UI</code>界面</li><li>可以访问和管理基于云计算的资源：计算，存储，网络等。</li></ul></li></ul><h3 id="客户前端创建虚拟机，后端流程"><a href="#客户前端创建虚拟机，后端流程" class="headerlink" title="客户前端创建虚拟机，后端流程"></a>客户前端创建虚拟机，后端流程</h3><p><img src="https://www.wsjj.top/upload/2023/06/openstack03.png" alt="openstack03"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> 虚拟化应用 </category>
          
          <category> OpenStack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> kvm </tag>
            
            <tag> openstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚拟化应用系列教程】KVM存储管理</title>
      <link href="/2023/05/31/130/"/>
      <url>/2023/05/31/130/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【虚拟化应用系列教程】KVM存储管理"><a href="#【虚拟化应用系列教程】KVM存储管理" class="headerlink" title="【虚拟化应用系列教程】KVM存储管理"></a>【虚拟化应用系列教程】KVM存储管理</h1><blockquote><p><strong>上一期教程：<a href="https://www.wsjj.top/archives/129">KVM网络管理</a></strong></p></blockquote><h2 id="一、通过命令行添加磁盘"><a href="#一、通过命令行添加磁盘" class="headerlink" title="一、通过命令行添加磁盘"></a>一、通过命令行添加磁盘</h2><h3 id="通过图形化界面添加"><a href="#通过图形化界面添加" class="headerlink" title="通过图形化界面添加"></a>通过图形化界面添加</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/kvm20.png" alt="kvm20"></p><p><img src="https://www.wsjj.top/upload/2023/05/kvm21.png" alt="kvm21"></p><h3 id="1-查看虚拟机所有磁盘"><a href="#1-查看虚拟机所有磁盘" class="headerlink" title="1.查看虚拟机所有磁盘"></a>1.查看虚拟机所有磁盘</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh domblklist vm01目标     源------------------------------------------------hda        &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm01.qcow2hdb        -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建磁盘文件"><a href="#2-创建磁盘文件" class="headerlink" title="2.创建磁盘文件"></a>2.创建磁盘文件</h3><blockquote><p><strong><code>qemu-img</code>是个很强大的工具，除了可以创建<code>qcow2</code>格式的文件，还可以创建其他格式的磁盘文件，包含<code>vmdk</code>、<code>vhdx</code>、<code>vdi</code>、<code>raw</code>、<code>qcow2</code>、<code>qcow</code>、<code>iscsi</code>、<code>gluster</code>、<code>dmg</code>等</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# qemu-img create -f qcow2 &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk01.qcow2 5G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-f</code>虚拟磁盘格式</li></ul><h3 id="3-添加磁盘"><a href="#3-添加磁盘" class="headerlink" title="3.添加磁盘"></a>3.添加磁盘</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh attach-disk vm01 --source &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk01.qcow2 --target vdc --cache writeback --subdriver qcow2 --persistent 成功附加磁盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>--source</code>虚拟磁盘文件位置</li><li><code>--targer</code>磁盘名</li><li><code>--cache</code> <code>writeback/writethrough</code>指定硬盘缓存工作模式<ul><li><code>writeback</code>回写<ul><li>当磁盘缓存空间不足时，才会将所有数据写入硬盘</li></ul></li><li><code>writethrough</code>通写<ul><li>磁盘缓存接收数据，立刻会写入磁盘</li></ul></li></ul></li><li><code>--subdriver</code>虚拟磁盘格式</li><li><code>--persistent</code>立即并永久生效</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh domblklist vm01目标     源------------------------------------------------hda        &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm01.qcow2hdb        -vdc        &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk01.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看虚拟机内的磁盘"><a href="#查看虚拟机内的磁盘" class="headerlink" title="查看虚拟机内的磁盘"></a>查看虚拟机内的磁盘</h4><p><img src="https://www.wsjj.top/upload/2023/05/kvm22.png" alt="kvm22"></p><h3 id="4-删除磁盘"><a href="#4-删除磁盘" class="headerlink" title="4.删除磁盘"></a>4.删除磁盘</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh detach-disk vm01 vdc --persistent 成功分离磁盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh domblklist vm01目标     源------------------------------------------------hda        &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm01.qcow2hdb        -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、磁盘镜像文件"><a href="#二、磁盘镜像文件" class="headerlink" title="二、磁盘镜像文件"></a>二、磁盘镜像文件</h2><h3 id="1-磁盘镜像文件格式"><a href="#1-磁盘镜像文件格式" class="headerlink" title="1.磁盘镜像文件格式"></a>1.磁盘镜像文件格式</h3><ul><li><code>raw</code><ul><li>一次性分配所有空间</li></ul></li><li><code>qcow2</code><ul><li>稀疏格式 </li><li>快照、压缩、加密</li><li>后端镜像&#x2F;差量镜像 </li><li>快速创建虚拟机</li></ul></li></ul><h3 id="2-创建磁盘文件-1"><a href="#2-创建磁盘文件-1" class="headerlink" title="2.创建磁盘文件"></a>2.创建磁盘文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# qemu-img create -f qcow2 &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk02.qcow2 5GFormatting &#39;&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk02.qcow2&#39;, fmt&#x3D;qcow2 size&#x3D;5368709120 encryption&#x3D;off cluster_size&#x3D;65536 lazy_refcounts&#x3D;off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-查看磁盘文件详细信息"><a href="#3-查看磁盘文件详细信息" class="headerlink" title="3.查看磁盘文件详细信息"></a>3.查看磁盘文件详细信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# qemu-img info &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk02.qcow2image: &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk02.qcow2file format: qcow2virtual size: 5.0G (5368709120 bytes)disk size: 196Kcluster_size: 65536Format specific information:    compat: 1.1    lazy refcounts: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建差量镜像"><a href="#4-创建差量镜像" class="headerlink" title="4.创建差量镜像"></a>4.创建差量镜像</h3><blockquote><p><strong>用于快速部署虚拟机，源文件可以用作模板</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# qemu-img create -f qcow2 -b &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk02.qcow2 &#x2F;kvm&#x2F;data&#x2F;disk02_backup.qcow2Formatting &#39;&#x2F;kvm&#x2F;data&#x2F;disk02_backup.qcow2&#39;, fmt&#x3D;qcow2 size&#x3D;5368709120 backing_file&#x3D;&#39;&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk02.qcow2&#39; encryption&#x3D;off cluster_size&#x3D;65536 lazy_refcounts&#x3D;off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>-f</code>指定格式</li><li><code>-b</code>原文件 目的文件</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# ls &#x2F;kvm&#x2F;data&#x2F;disk02_backup.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h4><blockquote><p><strong><code>qemu-img: /home/student/vm01.qcow2: Could not open backing file: Could not open &#39;/var/lib/libvirt/images/vm01.qcow2&#39;: No such file or directory</code></strong></p></blockquote><blockquote><p><strong>如果你遇到了这样的报错，那么很抱歉，原模板文件(差异镜像)已经被您删除了，唯一的解决方法是重新再部署一个虚拟机，作为模板文件(差异镜像)</strong></p></blockquote><h3 id="5-快速创建虚拟机"><a href="#5-快速创建虚拟机" class="headerlink" title="5.快速创建虚拟机"></a>5.快速创建虚拟机</h3><h4 id="A-创建差量镜像"><a href="#A-创建差量镜像" class="headerlink" title="A.创建差量镜像"></a>A.创建差量镜像</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# qemu-img create -f qcow2 -b &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;disk02.qcow2 &#x2F;kvm&#x2F;data&#x2F;disk02_backup.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-准备虚拟机配置文件"><a href="#B-准备虚拟机配置文件" class="headerlink" title="B.准备虚拟机配置文件"></a>B.准备虚拟机配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# cp &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm01.xml &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm02.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改虚拟机配置文件"><a href="#修改虚拟机配置文件" class="headerlink" title="修改虚拟机配置文件"></a>修改虚拟机配置文件</h5><blockquote><p><strong>大概需要修改虚拟机的名字、UUID、MAC地址、磁盘文件、VNC端口</strong><br><strong>关于<code>UUID</code>可以使用<code>uuidgen</code>命令随机生成一个</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm02.xml#配置文件并不完整，仅展示修改的部分&lt;domain type&#x3D;&#39;kvm&#39;&gt;  &lt;name&gt;vm02&lt;&#x2F;name&gt;  &lt;uuid&gt;bc78a88e-a0a1-47c2-9531-1d5852209ace&lt;&#x2F;uuid&gt;&lt;source file&#x3D;&#39;&#x2F;kvm&#x2F;data&#x2F;vm02.qcow2&#39;&#x2F;&gt;&lt;mac address&#x3D;&#39;52:54:00:5f:e5:05&#39;&#x2F;&gt;#MAC地址前三位不用修改&lt;graphics type&#x3D;&#39;vnc&#39; port&#x3D;&#39;5920&#39; autoport&#x3D;&#39;no&#39; listen&#x3D;&#39;0.0.0.0&#39; keymap&#x3D;&#39;en-us&#39;&gt;#可以是精确的端口号，也可以是-1随机端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-创建虚拟机"><a href="#C-创建虚拟机" class="headerlink" title="C.创建虚拟机"></a>C.创建虚拟机</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh define &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm02.xml定义域 vm02（从 &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm02.xml）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh list --all Id    名称                         状态---------------------------------------------------- 5     vm01                           running -     vm02                           关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-测试虚拟机是否正常"><a href="#D-测试虚拟机是否正常" class="headerlink" title="D.测试虚拟机是否正常"></a>D.测试虚拟机是否正常</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh start vm02域 vm02 已开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vncviewer 127.0.0.1:5920<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/kvm23.png" alt="kvm23"></p><h3 id="6-利用脚本批量创建虚拟机"><a href="#6-利用脚本批量创建虚拟机" class="headerlink" title="6.利用脚本批量创建虚拟机"></a>6.利用脚本批量创建虚拟机</h3><blockquote><p><strong>大概步骤：</strong><br><strong>1.准备模板磁盘镜像(差量镜像)</strong><br><strong>2.准备虚拟机模板配置文件</strong><br><strong>3.批量加入到域中</strong></p></blockquote><h4 id="A-准备差量镜像"><a href="#A-准备差量镜像" class="headerlink" title="A.准备差量镜像"></a>A.准备差量镜像</h4><blockquote><p><strong><code>vm01.qcow2</code>是我已经提前装好的虚拟机磁盘文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# mkdir -p &#x2F;kvm&#x2F;template[root@lvm ~]# cp &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm01.qcow2 &#x2F;kvm&#x2F;template&#x2F;vm_base.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-准备虚拟机配置文件模板"><a href="#B-准备虚拟机配置文件模板" class="headerlink" title="B.准备虚拟机配置文件模板"></a>B.准备虚拟机配置文件模板</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# cp &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm01.xml &#x2F;kvm&#x2F;template&#x2F;vm_base.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改配置文件内容-便于脚本编写"><a href="#修改配置文件内容-便于脚本编写" class="headerlink" title="修改配置文件内容(便于脚本编写)"></a>修改配置文件内容(便于脚本编写)</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;kvm&#x2F;template&#x2F;vm_base.xml#仅展示修改的地方&lt;domain type&#x3D;&#39;kvm&#39;&gt;  &lt;name&gt;vm_base&lt;&#x2F;name&gt;&lt;source file&#x3D;&#39;&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm_base.qcow2&#39;&#x2F;&gt;&lt;graphics type&#x3D;&#39;vnc&#39; port&#x3D;&#39;-1&#39; autoport&#x3D;&#39;yes&#39; listen&#x3D;&#39;0.0.0.0&#39; keymap&#x3D;&#39;en-us&#39;&gt;#VNC开启自动随机端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-编写脚本"><a href="#C-编写脚本" class="headerlink" title="C.编写脚本"></a>C.编写脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;opt&#x2F;kvm.sh#脚本仅供参考#! &#x2F;bin&#x2F;bashmenu() &#123;cat &lt;&lt; eof&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;虚拟机管理脚本&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1.批量创建虚拟机2.删除所有虚拟机3.创建单个的虚拟机4.删除单个虚拟机5.退出脚本eof&#125;#创建多个虚拟机createVM() &#123;    read -p &quot;请输入你想要创建的虚拟机数量：&quot; numberfor num in $(seq $number); do    kvm_disk_file&#x3D;&#x2F;kvm&#x2F;template&#x2F;vm_base.qcow2    #复制虚拟机配置文件    qemu-img create -f qcow2 -b $&#123;kvm_disk_file&#125; &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm$&#123;num&#125;_Centos79.qcow2 &amp;&gt; &#x2F;dev&#x2F;null    cp -r &#x2F;kvm&#x2F;template&#x2F;vm_base.xml &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm$&#123;num&#125;_Centos79.xml    #修改虚拟机配置文件    mac1&#x3D;$(grep &quot;&lt;mac address&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm$&#123;num&#125;_Centos79.xml | awk -v FS&#x3D;&quot;&#39;&quot; &#39;&#123;print $2&#125;&#39; | awk -F: &#39;&#123;print $1&quot;:&quot;$2&quot;:&quot;$3&quot;:&quot;&#125;&#39;)    mac2&#x3D;$(openssl rand -hex 10 | sed -r &#39;s&#x2F;(..)(..)(..).*&#x2F;\1:\2:\3&#x2F;&#39;)    mac_address&#x3D;$&#123;mac1&#125;$&#123;mac2&#125;    sed -ri &quot;s|vm_base|vm$&#123;num&#125;_Centos79|g&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm$&#123;num&#125;_Centos79.xml    sed -ri &quot;&#x2F;uuid&#x2F;c \  &lt;uuid&gt;$(uuidgen)&lt;&#x2F;uuid&gt;&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm$&#123;num&#125;_Centos79.xml    sed -ri &quot;&#x2F;&lt;mac&#x2F;c \      &lt;mac address&#x3D;&#39;$&#123;mac_address&#125;&#39;&#x2F;&gt;&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm$&#123;num&#125;_Centos79.xml    #创建虚拟机    virsh define &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm$&#123;num&#125;_Centos79.xml &amp;&gt; &#x2F;dev&#x2F;null    #把虚拟机加入开启启动项并且开机    virsh autostart vm$&#123;num&#125;_Centos79    virsh start vm$&#123;num&#125;_Centos79    #列出当前系统虚拟机    virsh list --alldone&#125;#删除所有虚拟机deleteVM() &#123;    echo &quot;已列出当前系统所有虚拟机&quot;    virsh list --all    echo &quot;正在执行删除所有虚拟机&quot;    for i in $(virsh list --all | awk &#39;&#x2F;vm&#x2F;&#123;print $2&#125;&#39;); do    virsh destroy $i &amp;&gt; &#x2F;dev&#x2F;null    virsh undefine $i &amp;&gt; &#x2F;dev&#x2F;null    done    rm -rf &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;* &amp;&gt; &#x2F;dev&#x2F;null    echo &quot;已列出当前系统所有虚拟机&quot;    virsh list --all&#125;#创建单个虚拟机createoneVM() &#123;    read -p &quot;请输入你想要创建的虚拟机名称：&quot; name    kvm_disk_file&#x3D;&#x2F;kvm&#x2F;template&#x2F;vm_base.qcow2    #复制虚拟机配置文件    qemu-img create -f qcow2 -b $&#123;kvm_disk_file&#125; &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;$name.qcow2 &amp;&gt; &#x2F;dev&#x2F;null    cp -r &#x2F;kvm&#x2F;template&#x2F;vm_base.xml &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;$name.xml    #修改虚拟机配置文件    mac1&#x3D;$(grep &quot;&lt;mac address&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;$name.xml | awk -v FS&#x3D;&quot;&#39;&quot; &#39;&#123;print $2&#125;&#39; | awk -F: &#39;&#123;print $1&quot;:&quot;$2&quot;:&quot;$3&quot;:&quot;&#125;&#39;)    mac2&#x3D;$(openssl rand -hex 10 | sed -r &#39;s&#x2F;(..)(..)(..).*&#x2F;\1:\2:\3&#x2F;&#39;)    mac_address&#x3D;$&#123;mac1&#125;$&#123;mac2&#125;    sed -ri &quot;s|vm_base|$&#123;name&#125;|g&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;$name.xml    sed -ri &quot;&#x2F;uuid&#x2F;c \  &lt;uuid&gt;$(uuidgen)&lt;&#x2F;uuid&gt;&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;$name.xml    sed -ri &quot;&#x2F;&lt;mac&#x2F;c \      &lt;mac address&#x3D;&#39;$&#123;mac_address&#125;&#39;&#x2F;&gt;&quot; &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;$name.xml    #创建虚拟机    virsh define &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;$name.xml &amp;&gt; &#x2F;dev&#x2F;null    #把虚拟机加入开启启动项并且开机    virsh autostart $name    virsh start $name    #列出当前系统虚拟机    virsh list --all&#125;#删除单个虚拟机deleteoneVM() &#123;    echo &quot;已列出当前系统所有虚拟机&quot;    virsh list --all    read -p &quot;请输入你要删除的虚拟机名字：&quot; choice    virsh destroy $choice &amp;&gt; &#x2F;dev&#x2F;null    virsh undefine $choice &amp;&gt; &#x2F;dev&#x2F;null    rm -rf &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;$choice.qcow2 &amp;&gt; &#x2F;dev&#x2F;null    echo &quot;$choice删除成功&quot;    echo &quot;已列出当前系统剩余虚拟机&quot;    virsh list --all&#125;while true; do    menu    read -p &quot;请选择选项：&quot; choose    case $choose in        1)            createVM            ;;        2)            deleteVM            ;;        3)            createoneVM            ;;        4)            deleteoneVM            ;;        5)            echo &quot;用户选择退出&quot;            exit 0            ;;        *)            echo &quot;选择有误，请重新选择&quot;            continue            ;;    esacdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-给予执行权限"><a href="#D-给予执行权限" class="headerlink" title="D.给予执行权限"></a>D.给予执行权限</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# chmod a+x &#x2F;opt&#x2F;kvm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-执行脚本"><a href="#E-执行脚本" class="headerlink" title="E.执行脚本"></a>E.执行脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# bash &#x2F;opt&#x2F;kvm.sh或[root@lvm ~]# .&#x2F;opt&#x2F;kvm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、存储池"><a href="#三、存储池" class="headerlink" title="三、存储池"></a>三、存储池</h2><blockquote><p><strong>作用：用于存储磁盘镜像文件的位置</strong></p></blockquote><h3 id="1-查看所有存储池"><a href="#1-查看所有存储池" class="headerlink" title="1.查看所有存储池"></a>1.查看所有存储池</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh pool-list --all 名称               状态     自动开始------------------------------------------- default              活动     是        img                  活动     是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看存储池详细信息"><a href="#查看存储池详细信息" class="headerlink" title="查看存储池详细信息"></a>查看存储池详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh pool-dumpxml default&lt;pool type&#x3D;&#39;dir&#39;&gt;  &lt;name&gt;default&lt;&#x2F;name&gt;  &lt;uuid&gt;65ae9c3d-2d2d-4dab-b704-9e1cb33bf995&lt;&#x2F;uuid&gt;  &lt;capacity unit&#x3D;&#39;bytes&#39;&gt;104647094272&lt;&#x2F;capacity&gt;  &lt;allocation unit&#x3D;&#39;bytes&#39;&gt;17794945024&lt;&#x2F;allocation&gt;  &lt;available unit&#x3D;&#39;bytes&#39;&gt;86852149248&lt;&#x2F;available&gt;  &lt;source&gt;  &lt;&#x2F;source&gt;  &lt;target&gt;    &lt;path&gt;&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&lt;&#x2F;path&gt;    &lt;permissions&gt;      &lt;mode&gt;0711&lt;&#x2F;mode&gt;      &lt;owner&gt;0&lt;&#x2F;owner&gt;      &lt;group&gt;0&lt;&#x2F;group&gt;      &lt;label&gt;system_u:object_r:virt_image_t:s0&lt;&#x2F;label&gt;    &lt;&#x2F;permissions&gt;  &lt;&#x2F;target&gt;&lt;&#x2F;pool&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="存储池配置文件"><a href="#存储池配置文件" class="headerlink" title="存储池配置文件"></a>存储池配置文件</h4><blockquote><p><strong>配置文件存放路径：<code>/etc/libvirt/storage/</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# cat &#x2F;etc&#x2F;libvirt&#x2F;storage&#x2F;default.xml&lt;!--WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BEOVERWRITTEN AND LOST. Changes to this xml configuration should be made using:  virsh pool-edit defaultor other application using the libvirt API.--&gt;&lt;pool type&#x3D;&#39;dir&#39;&gt;  &lt;name&gt;default&lt;&#x2F;name&gt;  &lt;uuid&gt;65ae9c3d-2d2d-4dab-b704-9e1cb33bf995&lt;&#x2F;uuid&gt;  &lt;capacity unit&#x3D;&#39;bytes&#39;&gt;0&lt;&#x2F;capacity&gt;  &lt;allocation unit&#x3D;&#39;bytes&#39;&gt;0&lt;&#x2F;allocation&gt;  &lt;available unit&#x3D;&#39;bytes&#39;&gt;0&lt;&#x2F;available&gt;  &lt;source&gt;  &lt;&#x2F;source&gt;  &lt;target&gt;    &lt;path&gt;&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&lt;&#x2F;path&gt;  &lt;&#x2F;target&gt;&lt;&#x2F;pool&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建存储池"><a href="#2-创建存储池" class="headerlink" title="2.创建存储池"></a>2.创建存储池</h3><h4 id="图形化创建"><a href="#图形化创建" class="headerlink" title="图形化创建"></a>图形化创建</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# mkdir -p &#x2F;kvm&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/06/kvm24.png" alt="kvm24"></p><p><img src="https://www.wsjj.top/upload/2023/06/kvm25.png" alt="kvm25"></p><p><img src="https://www.wsjj.top/upload/2023/06/kvm26.png" alt="kvm26"></p><p><img src="https://www.wsjj.top/upload/2023/06/kvm27.png" alt="kvm27"></p><p><img src="https://www.wsjj.top/upload/2023/06/kvm28.png" alt="kvm28"></p><h3 id="3-存储池类型"><a href="#3-存储池类型" class="headerlink" title="3.存储池类型"></a>3.存储池类型</h3><ul><li>本地存储池</li><li>网络存储池</li></ul><h3 id="4-实验：KVM虚拟机的在线迁移"><a href="#4-实验：KVM虚拟机的在线迁移" class="headerlink" title="4.实验：KVM虚拟机的在线迁移"></a>4.实验：<code>KVM</code>虚拟机的在线迁移</h3><blockquote><p><strong>关于虚拟机离线迁移教程：<a href="https://www.wsjj.top/archives/128">https://www.wsjj.top/archives/128</a></strong></p></blockquote><h4 id="关于在线迁移online-migrate"><a href="#关于在线迁移online-migrate" class="headerlink" title="关于在线迁移online-migrate"></a>关于在线迁移<code>online-migrate</code></h4><blockquote><p><strong>硬性要求：存储必须是网络存储</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/06/kvm29.png" alt="kvm29"></p><h4 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h4><table><thead><tr><th>IP地址</th><th>主机名</th><th>软件</th></tr></thead><tbody><tr><td>192.168.140.10</td><td>kvm.linux.com</td><td>KVM</td></tr><tr><td>192.168.140.11</td><td>kvm1.linux.com</td><td>KVM</td></tr><tr><td>192.168.140.12</td><td>nfs.linux.com</td><td>NFS</td></tr></tbody></table><h4 id="配置NFS服务器"><a href="#配置NFS服务器" class="headerlink" title="配置NFS服务器"></a>配置<code>NFS</code>服务器</h4><blockquote><p><strong>关于<code>NFS</code>搭建教程：<a href="https://www.wsjj.top/archives/62">https://www.wsjj.top/archives/62</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nfs_server ~]# yum install -y nfs-server rpcbind nfs-utils[root@nfs_server ~]# mkdir &#x2F;kvmdata[root@nfs_server ~]# chmod o+w &#x2F;kvmdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nfs_server ~]# cat &#x2F;etc&#x2F;exports&#x2F;kvmdata192.168.43.10(rw,no_root_squash) 192.168.43.11(rw,no_root_squash)[root@nfs_server ~]# systemctl start nfs-server[root@nfs_server ~]# systemctl enable nfs-server[root@nfs_server ~]# showmount -e localhostExport list for localhost:&#x2F;kvmdata 192.168.43.11,192.168.43.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建议在2台KVM服务器上以相同的目录创建存储池"><a href="#建议在2台KVM服务器上以相同的目录创建存储池" class="headerlink" title="建议在2台KVM服务器上以相同的目录创建存储池"></a>建议在2台KVM服务器上以相同的目录创建存储池</h4><h4 id="创建虚拟机，将磁盘镜像文件保存到NFS服务器共享的目录"><a href="#创建虚拟机，将磁盘镜像文件保存到NFS服务器共享的目录" class="headerlink" title="创建虚拟机，将磁盘镜像文件保存到NFS服务器共享的目录"></a>创建虚拟机，将磁盘镜像文件保存到NFS服务器共享的目录</h4><h4 id="添加主机名解析"><a href="#添加主机名解析" class="headerlink" title="添加主机名解析"></a>添加主机名解析</h4><blockquote><p><strong>在线迁移依靠<code>SSH</code>服务</strong></p></blockquote><h4 id="迁移虚拟机"><a href="#迁移虚拟机" class="headerlink" title="迁移虚拟机"></a>迁移虚拟机</h4><pre class="line-numbers language-none"><code class="language-none"># virsh migrate 被迁移的虚拟机名 ‐‐live qemu+ssh:&#x2F;&#x2F;服务器地址&#x2F;system_file ‐‐unsafe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> 虚拟化应用 </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> kvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚拟化应用系列教程】KVM网络管理</title>
      <link href="/2023/05/31/129/"/>
      <url>/2023/05/31/129/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【虚拟化应用系列教程】KVM网络管理"><a href="#【虚拟化应用系列教程】KVM网络管理" class="headerlink" title="【虚拟化应用系列教程】KVM网络管理"></a>【虚拟化应用系列教程】KVM网络管理</h1><blockquote><p><strong>下期教程：<a href="https://www.wsjj.top/archives/130">KVM存储管理</a></strong></p></blockquote><h2 id="一、关于网卡驱动"><a href="#一、关于网卡驱动" class="headerlink" title="一、关于网卡驱动"></a>一、关于网卡驱动</h2><blockquote><p><strong>效果最好的是<code>virtio</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/kvm12.png" alt="kvm12"></p><h2 id="二、通过命令行的方式添加虚拟网卡"><a href="#二、通过命令行的方式添加虚拟网卡" class="headerlink" title="二、通过命令行的方式添加虚拟网卡"></a>二、通过命令行的方式添加虚拟网卡</h2><blockquote><p><strong>这个网卡是给我们自己创建的虚拟机添加网卡，类似<code>Vmware</code>给虚拟机添加多块网卡</strong></p></blockquote><h3 id="1-图形化工具添加虚拟网卡"><a href="#1-图形化工具添加虚拟网卡" class="headerlink" title="1.图形化工具添加虚拟网卡"></a>1.图形化工具添加虚拟网卡</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/kvm13.png" alt="kvm13"></p><p><img src="https://www.wsjj.top/upload/2023/05/kvm15.png" alt="kvm14"></p><h3 id="2-命令行添加虚拟网卡"><a href="#2-命令行添加虚拟网卡" class="headerlink" title="2.命令行添加虚拟网卡"></a>2.命令行添加虚拟网卡</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh attach-interface vm01 --type network --source default --model virtio --persistent 成功附加接口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>--persistent</code>虚拟机立即生效、永久生效</li><li><code>--config</code>永久生效、需要重启虚拟机</li><li><code>--live</code>立即生效、临时生效，虚拟机重启后无效</li></ul><h3 id="3-查看虚拟机的网卡"><a href="#3-查看虚拟机的网卡" class="headerlink" title="3.查看虚拟机的网卡"></a>3.查看虚拟机的网卡</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh domiflist vm01接口     类型     源        型号      MAC-------------------------------------------------------vnet0      network    default    virtio      52:54:00:4f:35:95vnet1      network    default    virtio      52:54:00:e6:c2:70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进入虚拟机查看网卡"><a href="#进入虚拟机查看网卡" class="headerlink" title="进入虚拟机查看网卡"></a>进入虚拟机查看网卡</h4><p><img src="https://www.wsjj.top/upload/2023/05/kvm16.png" alt="kvm16"></p><h3 id="4-删除虚拟网卡"><a href="#4-删除虚拟网卡" class="headerlink" title="4.删除虚拟网卡"></a>4.删除虚拟网卡</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh detach-interface vm01 --type network --mac 52:54:00:e6:c2:70 --persistent成功分离接口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh domiflist vm01接口     类型     源        型号      MAC-------------------------------------------------------vnet0      network    default    virtio      52:54:00:4f:35:95<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/kvm17.png" alt="kvm17"></p><h2 id="三、KVM虚拟网络工作模式"><a href="#三、KVM虚拟网络工作模式" class="headerlink" title="三、KVM虚拟网络工作模式"></a>三、KVM虚拟网络工作模式</h2><h3 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h3><ul><li><code>NAT</code>模式</li><li><code>bridge</code>桥接模式</li><li>隔离模式</li></ul><h3 id="1-NAT模式"><a href="#1-NAT模式" class="headerlink" title="1.NAT模式"></a>1.NAT模式</h3><p><img src="https://www.wsjj.top/upload/2023/05/kvm18.png" alt="kvm18"></p><blockquote><p><strong>适用于虚拟机主动访问外部网络</strong></p></blockquote><ul><li>需要注意的地方：<ul><li>检查网关 </li><li>路由转发功能是否开启</li><li>snat规则是否合理</li><li>如果想要发布服务(端口映射)，不可以和实体机的端口有冲突</li></ul></li></ul><h4 id="创建NAT网络"><a href="#创建NAT网络" class="headerlink" title="创建NAT网络"></a>创建<code>NAT</code>网络</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-manager <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/kvm13.png" alt="kvm13"></p><p><img src="https://www.wsjj.top/upload/2023/05/kvm14.png" alt="kvm14"></p><h4 id="发布服务-端口映射"><a href="#发布服务-端口映射" class="headerlink" title="发布服务(端口映射)"></a>发布服务(端口映射)</h4><blockquote><p><strong>以<code>httpd</code>服务为例子</strong><br><strong>把虚拟机的<code>192.168.122.51:80</code>端口映射到实体机<code>8080</code>端口上</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  iptables -t nat -I PREROUTING -d 192.168.140.16 -p tcp --dport 8080 -j DNAT --to-destination 192.168.122.51:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Bridge桥接模式"><a href="#2-Bridge桥接模式" class="headerlink" title="2.Bridge桥接模式"></a>2.<code>Bridge</code>桥接模式</h3><blockquote><p><strong>作用：一般用于<code>2</code>台虚拟机跨物理相互通信</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/kvm19.png" alt="kvm19"></p><ul><li>注意事项：<ul><li>在配置之前需要关闭<code>NetworkManager</code>服务</li><li>物理网卡必须是静态地址</li></ul></li></ul><h4 id="A-先停止NetworkManager服务"><a href="#A-先停止NetworkManager服务" class="headerlink" title="A.先停止NetworkManager服务"></a>A.先停止NetworkManager服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# systemctl stop NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-备份网卡配置文件"><a href="#B-备份网卡配置文件" class="headerlink" title="B.备份网卡配置文件"></a>B.备份网卡配置文件</h4><blockquote><p><strong><code>ens33</code>是网卡名</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# cp &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-命令行手动创建虚拟网络"><a href="#C-命令行手动创建虚拟网络" class="headerlink" title="C.命令行手动创建虚拟网络"></a>C.命令行手动创建虚拟网络</h4><blockquote><p><strong><code>virsh iface-bridge 物理网卡名 虚拟网卡名</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh iface-bridge ens33 br1已启动桥接接口 br1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-查看网卡"><a href="#D-查看网卡" class="headerlink" title="D.查看网卡"></a>D.查看网卡</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# ifconfigbr1: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.140.16  netmask 255.255.255.0  broadcast 192.168.140.255#可以看到我们的物理机的IP地址跑到了br1虚拟网卡上        inet6 fe80::20c:29ff:fe49:9ac5  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 00:0c:29:49:9a:c5  txqueuelen 1000  (Ethernet)        RX packets 78  bytes 4562 (4.4 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 74  bytes 137427 (134.2 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        ether 00:0c:29:49:9a:c5  txqueuelen 1000  (Ethernet)        RX packets 108369  bytes 12390650 (11.8 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 120804  bytes 149676848 (142.7 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-删除桥接网络"><a href="#E-删除桥接网络" class="headerlink" title="E.删除桥接网络"></a>E.删除桥接网络</h4><h5 id="先关闭网卡"><a href="#先关闭网卡" class="headerlink" title="先关闭网卡"></a>先关闭网卡</h5><blockquote><p><strong>注意：如果你是<code>SSH</code>连接，那么<code>SSH</code>会断开连接！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># ifconfig br1 down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删除连接"><a href="#删除连接" class="headerlink" title="删除连接"></a>删除连接</h5><pre class="line-numbers language-none"><code class="language-none"># brctl delbr br1# brctl delif br1 ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="恢复原来的网卡配置文件"><a href="#恢复原来的网卡配置文件" class="headerlink" title="恢复原来的网卡配置文件"></a>恢复原来的网卡配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# cp &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33.bak &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-隔离模式"><a href="#3-隔离模式" class="headerlink" title="3.隔离模式"></a>3.隔离模式</h3><blockquote><p><strong>和<code>VMware</code>的仅主机模式网络类似，只能虚拟机互相访问，外部无法访问</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 虚拟化应用 </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> centos7 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> kvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚拟化应用系列教程】KVM虚拟机管理</title>
      <link href="/2023/05/30/128/"/>
      <url>/2023/05/30/128/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【虚拟化应用系列教程】KVM虚拟机管理"><a href="#【虚拟化应用系列教程】KVM虚拟机管理" class="headerlink" title="【虚拟化应用系列教程】KVM虚拟机管理"></a>【虚拟化应用系列教程】KVM虚拟机管理</h1><blockquote><p><strong>上一期教程：<a href="https://www.wsjj.top/archives/127">虚拟化的类型和KVM虚拟化应用安装</a></strong></p></blockquote><h2 id="一、创建虚拟机"><a href="#一、创建虚拟机" class="headerlink" title="一、创建虚拟机"></a>一、创建虚拟机</h2><h3 id="1-图形化创建虚拟机"><a href="#1-图形化创建虚拟机" class="headerlink" title="1.图形化创建虚拟机"></a>1.图形化创建虚拟机</h3><blockquote><p><strong>建议您的实体机已经安装<code>GUI</code>图形化界面</strong><br><strong>或者使用<code>Xmanager</code>软件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/kvm08.png" alt="kvm08"></p><p><img src="https://www.wsjj.top/upload/2023/05/kvm09.png" alt="kvm09"></p><h3 id="2-命令行创建虚拟机"><a href="#2-命令行创建虚拟机" class="headerlink" title="2.命令行创建虚拟机"></a>2.命令行创建虚拟机</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-install --name&#x3D;vm02 \--graphics vnc,listen&#x3D;0.0.0.0,port&#x3D;5920,keymap&#x3D;en_us \--memory&#x3D;1024,maxmemory&#x3D;2048 \--vcpus 1,maxvcpus&#x3D;2 \--disk path&#x3D;&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm02.qcow2,size&#x3D;10,format&#x3D;qcow2 \--bridge&#x3D;virbr0 \--cdrom&#x3D;&#x2F;img&#x2F;CentOS-7-x86_64-DVD-2009.iso \--autostart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--name=</code>虚拟机名字</li><li><code>--graphics</code>远程连接协议</li><li><code>keymap=</code>键盘映射语言</li><li><code>--memory=</code>虚拟机内存，<code>maxmemory=</code>最大允许内存</li><li><code>vcpus</code>处理器核数，<code>maxvcpus</code>处理器最大核数</li><li><code>--disk path=</code>硬盘文件存储位置和名字，<code>size=</code>硬盘大小，<code>format=</code>磁盘镜像格式</li><li><code>--bridge=</code>网卡名</li><li><code>--cdrom=</code>安装镜像路径</li><li><code>--autostart</code>开机自启动虚拟机</li></ul><h3 id="3-查看所有虚拟机"><a href="#3-查看所有虚拟机" class="headerlink" title="3.查看所有虚拟机"></a>3.查看所有虚拟机</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh list --all Id    名称                         状态---------------------------------------------------- 4     vm01                           running 6     vm02                           running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-停止-x2F-启动虚拟机"><a href="#4-停止-x2F-启动虚拟机" class="headerlink" title="4.停止&#x2F;启动虚拟机"></a>4.停止&#x2F;启动虚拟机</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh shutdown vm01域 vm01 被关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh start vm01域 vm01 已开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、连接KVM虚拟机"><a href="#二、连接KVM虚拟机" class="headerlink" title="二、连接KVM虚拟机"></a>二、连接KVM虚拟机</h2><h3 id="1-SSH"><a href="#1-SSH" class="headerlink" title="1.SSH"></a>1.SSH</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# ssh root@192.168.122.51<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-virt-manager图形化工具"><a href="#2-virt-manager图形化工具" class="headerlink" title="2.virt-manager图形化工具"></a>2.virt-manager图形化工具</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-viewer 虚拟机名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virt-viewer vm01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-VNC远程"><a href="#3-VNC远程" class="headerlink" title="3.VNC远程"></a>3.VNC远程</h3><h4 id="先安装VNC依赖"><a href="#先安装VNC依赖" class="headerlink" title="先安装VNC依赖"></a>先安装<code>VNC</code>依赖</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# yum install -y vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="连接KVM虚拟机"><a href="#连接KVM虚拟机" class="headerlink" title="连接KVM虚拟机"></a>连接KVM虚拟机</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vncviewer 物理机IP：端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看VNC端口号"><a href="#查看VNC端口号" class="headerlink" title="查看VNC端口号"></a>查看<code>VNC</code>端口号</h5><blockquote><p><strong>关于<code>grep</code>过滤教程：<a href="https://www.wsjj.top/archives/39">https://www.wsjj.top/archives/39</a></strong><br><strong>过滤结果并不是<code>VNC</code>的真正端口号！！！</strong><br><strong><code>VNC</code>有个默认行为，列：端口号为<code>5910</code>，那么过滤出来的只有后<code>2</code>位数字，就是<code>10</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# ps -aux  | grep &quot;vnc&quot; | grep -E &quot;[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\:[0-9]&#123;1,5&#125;&quot;0.0.0.0:100.0.0.0:20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用VNC连接KVM虚拟机"><a href="#使用VNC连接KVM虚拟机" class="headerlink" title="使用VNC连接KVM虚拟机"></a>使用<code>VNC</code>连接<code>KVM</code>虚拟机</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vncviewer 192.168.140.16:5910TigerVNC 查看器 64 位 v1.8.0构建于：2023-04-05 13:47版权所有 1999-2017 TigerVNC 团队及众多开发者（参见 README.txt）访问 http:&#x2F;&#x2F;www.tigervnc.org 以获取更多关于 TigerVNC 的信息。Tue May 30 19:27:28 2023 DecodeManager: Detected 4 CPU core(s) DecodeManager: Creating 4 decoder thread(s) CConn:       已连接到主机 192.168.140.16 的端口 5910 CConnection: Server supports RFB protocol version 3.8 CConnection: Using RFB protocol version 3.8 CConnection: Choosing security type None(1) CConn:       正在使用像素格式 depth 24 (32bpp) little-endian rgb888 CConn:       使用 Tight 编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/kvm10.png" alt="kvm10"></p><h2 id="三、CPU热添加、内存气球"><a href="#三、CPU热添加、内存气球" class="headerlink" title="三、CPU热添加、内存气球"></a>三、CPU热添加、内存气球</h2><h3 id="1-CPU热添加"><a href="#1-CPU热添加" class="headerlink" title="1.CPU热添加"></a>1.CPU热添加</h3><ul><li>前提: 设置最大<code>CPU</code>数量</li><li>作用：提升<code>CPU</code>利用率</li></ul><h4 id="A-查看当前虚拟机CPU数量"><a href="#A-查看当前虚拟机CPU数量" class="headerlink" title="A.查看当前虚拟机CPU数量"></a>A.查看当前虚拟机<code>CPU</code>数量</h4><pre class="line-numbers language-none"><code class="language-none"># virsh dominfo 虚拟机名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh dominfo vm01Id:             4名称：       vm01UUID:           edbc2be7-4aa8-4980-a7da-a29b078cd610OS 类型：    hvm状态：       runningCPU：          1CPU 时间：   68.7s最大内存： 2097152 KiB使用的内存： 1048576 KiB持久：       是自动启动： 启用管理的保存： 否安全性模式： none安全性 DOI： 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-在线调整CPU"><a href="#B-在线调整CPU" class="headerlink" title="B.在线调整CPU"></a>B.在线调整CPU</h4><pre class="line-numbers language-none"><code class="language-none"># virsh setvcpus 虚拟机名 CPU数量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh setvcpus vm01 2 --live<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--live</code>立即生效</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh dominfo vm01Id:             4名称：       vm01UUID:           edbc2be7-4aa8-4980-a7da-a29b078cd610OS 类型：    hvm状态：       runningCPU：          2#CPU变成2了CPU 时间：   73.0s最大内存： 2097152 KiB使用的内存： 1048576 KiB持久：       是自动启动： 启用管理的保存： 否安全性模式： none安全性 DOI： 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-内存气球memballoon"><a href="#2-内存气球memballoon" class="headerlink" title="2.内存气球memballoon"></a>2.内存气球memballoon</h3><ul><li>前提：<ul><li>设置最大的内存量</li><li>确保虚拟机支持内存气球驱动<code>virtio</code></li></ul></li><li>作用：提升内存利用率</li></ul><h4 id="A-检查虚拟机是否支持virtio驱动"><a href="#A-检查虚拟机是否支持virtio驱动" class="headerlink" title="A.检查虚拟机是否支持virtio驱动"></a>A.检查虚拟机是否支持<code>virtio</code>驱动</h4><blockquote><p><strong>能查到结果，代表支持</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># virsh dumpxml 虚拟机名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh dumpxml vm01 | grep -i &quot;memballoon&quot;    &lt;memballoon model&#x3D;&#39;virtio&#39;&gt;    &lt;&#x2F;memballoon&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-查看当前虚拟机内存"><a href="#B-查看当前虚拟机内存" class="headerlink" title="B.查看当前虚拟机内存"></a>B.查看当前虚拟机内存</h4><pre class="line-numbers language-none"><code class="language-none"># virsh qemu-monitor-command 虚拟机名 --hmp info balloon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh qemu-monitor-command vm01 --hmp info balloonballoon: actual&#x3D;1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-增加内存"><a href="#C-增加内存" class="headerlink" title="C.增加内存"></a>C.增加内存</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh qemu-monitor-command vm01 --hmp balloon 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh qemu-monitor-command vm01 --hmp info balloonballoon: actual&#x3D;2048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-缩减内存"><a href="#D-缩减内存" class="headerlink" title="D.缩减内存"></a>D.缩减内存</h4><blockquote><p><strong>此操作存在危险，请谨慎操作！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh qemu-monitor-command vm01 --hmp balloon 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-关于Linux的OOM机制"><a href="#E-关于Linux的OOM机制" class="headerlink" title="E.关于Linux的OOM机制"></a>E.关于<code>Linux</code>的<code>OOM</code>机制</h4><blockquote><p>**<code>OOM</code>全称<code>Out Of Memeroy</code>内存泄露 **<br><strong>当系统内存不足的时候，会触发<code>OOM</code>机制，保证内核的正常运行</strong><br><strong>当系统发生<code>oom</code>时，内核会产生<code>oom killer</code>机制，根据进程的<code>oom_score</code>随机杀进程</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/kvm11.png" alt="kvm11"></p><h2 id="四、KVM虚拟机相关文件"><a href="#四、KVM虚拟机相关文件" class="headerlink" title="四、KVM虚拟机相关文件"></a>四、KVM虚拟机相关文件</h2><blockquote><p><strong><code>KVM</code>虚拟机的组成包括：<code>xml</code>配置文件+虚拟磁盘镜像文件</strong></p></blockquote><h3 id="1-虚拟机配置文件"><a href="#1-虚拟机配置文件" class="headerlink" title="1.虚拟机配置文件"></a>1.虚拟机配置文件</h3><blockquote><p><strong>配置文件路径：<code>/etc/libvirt/qemu/</code></strong><br><strong>虚拟机加入开机自启动配置文件路径：<code>/etc/libvirt/qemu/autostart/</code></strong><br><strong>虚拟机网络配置文件路径：<code>/etc/libvirt/qemu/networks/</code></strong><br><strong>虚拟机网络开机自启动配置文件路径：<code>/etc/libvirt/qemu/networks/autostart/</code></strong><br><strong>虚拟机虚拟磁盘文件路径：<code>/var/lib/libvirt/images/</code></strong></p></blockquote><h3 id="2-修改虚拟机配置文件"><a href="#2-修改虚拟机配置文件" class="headerlink" title="2.修改虚拟机配置文件"></a>2.修改虚拟机配置文件</h3><blockquote><p><strong>注意：不支持使用<code>vim</code>编辑器直接修改</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># virsh edit 虚拟机名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh edit vm01&lt;domain type&#x3D;&#39;kvm&#39;&gt;  &lt;name&gt;vm01&lt;&#x2F;name&gt;  &lt;uuid&gt;edbc2be7-4aa8-4980-a7da-a29b078cd610&lt;&#x2F;uuid&gt;  &lt;memory unit&#x3D;&#39;KiB&#39;&gt;2097152&lt;&#x2F;memory&gt;  &lt;currentMemory unit&#x3D;&#39;KiB&#39;&gt;1048576&lt;&#x2F;currentMemory&gt;  &lt;vcpu placement&#x3D;&#39;static&#39; current&#x3D;&#39;1&#39;&gt;2&lt;&#x2F;vcpu&gt;  &lt;os&gt;    &lt;type arch&#x3D;&#39;x86_64&#39; machine&#x3D;&#39;pc-i440fx-rhel7.0.0&#39;&gt;hvm&lt;&#x2F;type&gt;    &lt;boot dev&#x3D;&#39;hd&#39;&#x2F;&gt;  &lt;&#x2F;os&gt;  &lt;features&gt;    &lt;acpi&#x2F;&gt;    &lt;apic&#x2F;&gt;  &lt;&#x2F;features&gt;  &lt;cpu mode&#x3D;&#39;custom&#39; match&#x3D;&#39;exact&#39; check&#x3D;&#39;partial&#39;&gt;    &lt;model fallback&#x3D;&#39;allow&#39;&gt;Broadwell-noTSX-IBRS&lt;&#x2F;model&gt;    &lt;feature policy&#x3D;&#39;require&#39; name&#x3D;&#39;md-clear&#39;&#x2F;&gt;    &lt;feature policy&#x3D;&#39;require&#39; name&#x3D;&#39;spec-ctrl&#39;&#x2F;&gt;    &lt;feature policy&#x3D;&#39;require&#39; name&#x3D;&#39;ssbd&#39;&#x2F;&gt;  &lt;&#x2F;cpu&gt;  &lt;clock offset&#x3D;&#39;utc&#39;&gt;    &lt;timer name&#x3D;&#39;rtc&#39; tickpolicy&#x3D;&#39;catchup&#39;&#x2F;&gt;    &lt;timer name&#x3D;&#39;pit&#39; tickpolicy&#x3D;&#39;delay&#39;&#x2F;&gt;    &lt;timer name&#x3D;&#39;hpet&#39; present&#x3D;&#39;no&#39;&#x2F;&gt;  &lt;&#x2F;clock&gt;  &lt;on_poweroff&gt;destroy&lt;&#x2F;on_poweroff&gt;  &lt;on_reboot&gt;restart&lt;&#x2F;on_reboot&gt;  &lt;on_crash&gt;destroy&lt;&#x2F;on_crash&gt;  &lt;pm&gt;    &lt;suspend-to-mem enabled&#x3D;&#39;no&#39;&#x2F;&gt;    &lt;suspend-to-disk enabled&#x3D;&#39;no&#39;&#x2F;&gt;  &lt;&#x2F;pm&gt;  &lt;devices&gt;    &lt;emulator&gt;&#x2F;usr&#x2F;libexec&#x2F;qemu-kvm&lt;&#x2F;emulator&gt;    &lt;disk type&#x3D;&#39;file&#39; device&#x3D;&#39;disk&#39;&gt;      &lt;driver name&#x3D;&#39;qemu&#39; type&#x3D;&#39;qcow2&#39;&#x2F;&gt;      &lt;source file&#x3D;&#39;&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm01.qcow2&#39;&#x2F;&gt;      &lt;target dev&#x3D;&#39;hda&#39; bus&#x3D;&#39;ide&#39;&#x2F;&gt;      &lt;address type&#x3D;&#39;drive&#39; controller&#x3D;&#39;0&#39; bus&#x3D;&#39;0&#39; target&#x3D;&#39;0&#39; unit&#x3D;&#39;0&#39;&#x2F;&gt;    &lt;&#x2F;disk&gt;    &lt;disk type&#x3D;&#39;file&#39; device&#x3D;&#39;cdrom&#39;&gt;      &lt;driver name&#x3D;&#39;qemu&#39; type&#x3D;&#39;raw&#39;&#x2F;&gt;      &lt;target dev&#x3D;&#39;hdb&#39; bus&#x3D;&#39;ide&#39;&#x2F;&gt;      &lt;readonly&#x2F;&gt;      &lt;address type&#x3D;&#39;drive&#39; controller&#x3D;&#39;0&#39; bus&#x3D;&#39;0&#39; target&#x3D;&#39;0&#39; unit&#x3D;&#39;1&#39;&#x2F;&gt;    &lt;&#x2F;disk&gt;    &lt;controller type&#x3D;&#39;usb&#39; index&#x3D;&#39;0&#39; model&#x3D;&#39;ich9-ehci1&#39;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x04&#39; function&#x3D;&#39;0x7&#39;&#x2F;&gt;    &lt;&#x2F;controller&gt;    &lt;controller type&#x3D;&#39;usb&#39; index&#x3D;&#39;0&#39; model&#x3D;&#39;ich9-uhci1&#39;&gt;      &lt;master startport&#x3D;&#39;0&#39;&#x2F;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x04&#39; function&#x3D;&#39;0x0&#39; multifunction&#x3D;&#39;on&#39;&#x2F;&gt;    &lt;&#x2F;controller&gt;    &lt;controller type&#x3D;&#39;usb&#39; index&#x3D;&#39;0&#39; model&#x3D;&#39;ich9-uhci2&#39;&gt;      &lt;master startport&#x3D;&#39;2&#39;&#x2F;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x04&#39; function&#x3D;&#39;0x1&#39;&#x2F;&gt;    &lt;&#x2F;controller&gt;    &lt;controller type&#x3D;&#39;usb&#39; index&#x3D;&#39;0&#39; model&#x3D;&#39;ich9-uhci3&#39;&gt;      &lt;master startport&#x3D;&#39;4&#39;&#x2F;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x04&#39; function&#x3D;&#39;0x2&#39;&#x2F;&gt;    &lt;&#x2F;controller&gt;    &lt;controller type&#x3D;&#39;pci&#39; index&#x3D;&#39;0&#39; model&#x3D;&#39;pci-root&#39;&#x2F;&gt;    &lt;controller type&#x3D;&#39;ide&#39; index&#x3D;&#39;0&#39;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x01&#39; function&#x3D;&#39;0x1&#39;&#x2F;&gt;    &lt;&#x2F;controller&gt;    &lt;interface type&#x3D;&#39;bridge&#39;&gt;      &lt;mac address&#x3D;&#39;52:54:00:4f:35:95&#39;&#x2F;&gt;      &lt;source bridge&#x3D;&#39;virbr0&#39;&#x2F;&gt;      &lt;model type&#x3D;&#39;rtl8139&#39;&#x2F;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x03&#39; function&#x3D;&#39;0x0&#39;&#x2F;&gt;    &lt;&#x2F;interface&gt;    &lt;serial type&#x3D;&#39;pty&#39;&gt;      &lt;target type&#x3D;&#39;isa-serial&#39; port&#x3D;&#39;0&#39;&gt;        &lt;model name&#x3D;&#39;isa-serial&#39;&#x2F;&gt;      &lt;&#x2F;target&gt;    &lt;&#x2F;serial&gt;    &lt;console type&#x3D;&#39;pty&#39;&gt;      &lt;target type&#x3D;&#39;serial&#39; port&#x3D;&#39;0&#39;&#x2F;&gt;    &lt;&#x2F;console&gt;    &lt;input type&#x3D;&#39;mouse&#39; bus&#x3D;&#39;ps2&#39;&#x2F;&gt;    &lt;input type&#x3D;&#39;keyboard&#39; bus&#x3D;&#39;ps2&#39;&#x2F;&gt;    &lt;graphics type&#x3D;&#39;vnc&#39; port&#x3D;&#39;5910&#39; autoport&#x3D;&#39;no&#39; listen&#x3D;&#39;0.0.0.0&#39; keymap&#x3D;&#39;en-us&#39;&gt;      &lt;listen type&#x3D;&#39;address&#39; address&#x3D;&#39;0.0.0.0&#39;&#x2F;&gt;    &lt;&#x2F;graphics&gt;    &lt;video&gt;      &lt;model type&#x3D;&#39;cirrus&#39; vram&#x3D;&#39;16384&#39; heads&#x3D;&#39;1&#39; primary&#x3D;&#39;yes&#39;&#x2F;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x02&#39; function&#x3D;&#39;0x0&#39;&#x2F;&gt;    &lt;&#x2F;video&gt;    &lt;memballoon model&#x3D;&#39;virtio&#39;&gt;      &lt;address type&#x3D;&#39;pci&#39; domain&#x3D;&#39;0x0000&#39; bus&#x3D;&#39;0x00&#39; slot&#x3D;&#39;0x05&#39; function&#x3D;&#39;0x0&#39;&#x2F;&gt;    &lt;&#x2F;memballoon&gt;  &lt;&#x2F;devices&gt;&lt;&#x2F;domain&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-把虚拟机加入开机自启动"><a href="#3-把虚拟机加入开机自启动" class="headerlink" title="3.把虚拟机加入开机自启动"></a>3.把虚拟机加入开机自启动</h3><pre class="line-numbers language-none"><code class="language-none"># virsh autostart 虚拟机名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh autostart vm02域 vm02标记为自动开始<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-删除虚拟机-重要"><a href="#4-删除虚拟机-重要" class="headerlink" title="4.删除虚拟机(重要)"></a>4.删除虚拟机(重要)</h3><blockquote><p><strong>大概过程：1.关闭虚拟机–&gt;2.先删除虚拟机配置文件–&gt;3.删除虚拟磁盘文件</strong></p></blockquote><h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh destroy vm02域 vm02 被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除配置文件"><a href="#删除配置文件" class="headerlink" title="删除配置文件"></a>删除配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh undefine vm02域 vm02 已经被取消定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除虚拟磁盘文件"><a href="#删除虚拟磁盘文件" class="headerlink" title="删除虚拟磁盘文件"></a>删除虚拟磁盘文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# rm -rf &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm02.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-离线迁移虚拟机"><a href="#5-离线迁移虚拟机" class="headerlink" title="5.离线迁移虚拟机"></a>5.离线迁移虚拟机</h3><blockquote><p><strong>被迁移的机器，需要安装<code>KVM</code>环境</strong></p></blockquote><h4 id="A-先关闭要迁移的虚拟机"><a href="#A-先关闭要迁移的虚拟机" class="headerlink" title="A.先关闭要迁移的虚拟机"></a>A.先关闭要迁移的虚拟机</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh shutdown vm01域 vm01 被关闭[root@lvm ~]# virsh list --all Id    名称                         状态---------------------------------------------------- -     vm01                           关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-拷贝配置文件"><a href="#B-拷贝配置文件" class="headerlink" title="B.拷贝配置文件"></a>B.拷贝配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# scp -r &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm01.xml root@192.168.140.10:&#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-拷贝虚拟磁盘文件"><a href="#C-拷贝虚拟磁盘文件" class="headerlink" title="C.拷贝虚拟磁盘文件"></a>C.拷贝虚拟磁盘文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# scp -r &#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;vm01.qcow2 root@192.168.140.10:&#x2F;var&#x2F;lib&#x2F;libvirt&#x2F;images&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-在新服务器上，定义虚拟机"><a href="#D-在新服务器上，定义虚拟机" class="headerlink" title="D.在新服务器上，定义虚拟机"></a>D.在新服务器上，定义虚拟机</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm2 ~]# virsh define &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;vm01.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-启动虚拟机"><a href="#E-启动虚拟机" class="headerlink" title="E.启动虚拟机"></a>E.启动虚拟机</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm2 ~]# virsh start vm01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-设置开启自启动"><a href="#F-设置开启自启动" class="headerlink" title="F.设置开启自启动"></a>F.设置开启自启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm2 ~]# virsh autostart vm01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-虚拟网络配置"><a href="#6-虚拟网络配置" class="headerlink" title="6.虚拟网络配置"></a>6.虚拟网络配置</h3><blockquote><p><strong>虚拟机网络配置文件路径：<code>/etc/libvirt/qemu/networks/</code></strong><br><strong>虚拟机网络开机自启动配置文件路径：<code>/etc/libvirt/qemu/networks/autostart/</code></strong></p></blockquote><h4 id="A-查看所有虚拟网络"><a href="#A-查看所有虚拟网络" class="headerlink" title="A.查看所有虚拟网络"></a>A.查看所有虚拟网络</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh net-list --all 名称               状态     自动开始  持久---------------------------------------------------------- default              活动     是           是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-创建一个自定义网络test"><a href="#B-创建一个自定义网络test" class="headerlink" title="B.创建一个自定义网络test"></a>B.创建一个自定义网络<code>test</code></h4><h5 id="复制模板文件"><a href="#复制模板文件" class="headerlink" title="复制模板文件"></a>复制模板文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# cp &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;networks&#x2F;default.xml &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;networks&#x2F;test.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><blockquote><p><strong>可以使用<code>uuidgen</code>命令让系统随机生成一个<code>uuid</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# vim &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;networks&#x2F;test.xml&lt;network&gt;  &lt;name&gt;test&lt;&#x2F;name&gt;  &lt;uuid&gt;0b8cd119-dfde-4f6c-bf18-a0822d867d72&lt;&#x2F;uuid&gt;#可以使用注释中的uuidgen命令随机生成  &lt;forward mode&#x3D;&#39;nat&#39;&#x2F;&gt;  &lt;bridge name&#x3D;&#39;test&#39; stp&#x3D;&#39;on&#39; delay&#x3D;&#39;0&#39;&#x2F;&gt;  &lt;mac address&#x3D;&#39;52:54:00:53:e6:5c&#39;&#x2F;&gt;#MAC地址随机，前6个字节52:54:00所有都是一样的，不用修改  &lt;ip address&#x3D;&#39;192.168.123.1&#39; netmask&#x3D;&#39;255.255.255.0&#39;&gt;    &lt;dhcp&gt;      &lt;range start&#x3D;&#39;192.168.123.2&#39; end&#x3D;&#39;192.168.123.254&#39;&#x2F;&gt;    &lt;&#x2F;dhcp&gt;  &lt;&#x2F;ip&gt;&lt;&#x2F;network&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定义新配置文件"><a href="#定义新配置文件" class="headerlink" title="定义新配置文件"></a>定义新配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh net-define &#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;networks&#x2F;test.xml从 test定义网络&#x2F;etc&#x2F;libvirt&#x2F;qemu&#x2F;networks&#x2F;test.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh net-list --all 名称               状态     自动开始  持久---------------------------------------------------------- default              活动     是           是 test                 不活跃  否           是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启用自定义网络，并且加入开机自启动"><a href="#启用自定义网络，并且加入开机自启动" class="headerlink" title="启用自定义网络，并且加入开机自启动"></a>启用自定义网络，并且加入开机自启动</h5><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh net-start test网络 test 已开始[root@lvm ~]# virsh net-autostart test网络test标记为自动启动[root@lvm ~]# virsh net-list --all 名称               状态     自动开始  持久---------------------------------------------------------- default              活动     是           是 test                 活动     是           是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-删除自定义虚拟网络"><a href="#C-删除自定义虚拟网络" class="headerlink" title="C.删除自定义虚拟网络"></a>C.删除自定义虚拟网络</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh net-destroy test网络 test 被删除[root@lvm ~]# virsh net-undefine test网络 test 已经被取消定义[root@lvm ~]# virsh net-list --all 名称               状态     自动开始  持久---------------------------------------------------------- default              活动     是           是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 虚拟化应用 </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> centos7 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> kvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚拟化应用系列教程】虚拟化的类型和KVM虚拟化应用安装</title>
      <link href="/2023/05/30/127/"/>
      <url>/2023/05/30/127/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【虚拟化应用系列教程】虚拟化的类型和KVM虚拟化应用安装"><a href="#【虚拟化应用系列教程】虚拟化的类型和KVM虚拟化应用安装" class="headerlink" title="【虚拟化应用系列教程】虚拟化的类型和KVM虚拟化应用安装"></a>【虚拟化应用系列教程】虚拟化的类型和KVM虚拟化应用安装</h1><blockquote><p><strong>下一期教程：<a href="https://www.wsjj.top/archives/128">KVM虚拟机管理</a></strong></p></blockquote><h2 id="一、关于虚拟化"><a href="#一、关于虚拟化" class="headerlink" title="一、关于虚拟化"></a>一、关于虚拟化</h2><h3 id="1-不同的虚拟化架构"><a href="#1-不同的虚拟化架构" class="headerlink" title="1.不同的虚拟化架构"></a>1.不同的虚拟化架构</h3><h4 id="基于平台的虚拟化"><a href="#基于平台的虚拟化" class="headerlink" title="基于平台的虚拟化"></a>基于平台的虚拟化</h4><p><img src="https://www.wsjj.top/upload/2023/05/kvm01.png" alt="kvm01"></p><h4 id="基于操作系统的虚拟化"><a href="#基于操作系统的虚拟化" class="headerlink" title="基于操作系统的虚拟化"></a>基于操作系统的虚拟化</h4><p><img src="https://www.wsjj.top/upload/2023/05/kvm02.png" alt="kvm02"></p><h3 id="2-Hypervisor的部署方式"><a href="#2-Hypervisor的部署方式" class="headerlink" title="2.Hypervisor的部署方式"></a>2.Hypervisor的部署方式</h3><p>寄居虚拟化<br><code>vmware workstation</code>、<code>virtual box</code>、<code>kvm</code>、<code>Hyper-V</code><br>原生虚拟化<br><code>ESXI</code>、<code>Xen</code>、<code>Proxmox VE(PVE)</code></p><h3 id="3-虚拟化技术实现原理"><a href="#3-虚拟化技术实现原理" class="headerlink" title="3.虚拟化技术实现原理"></a>3.虚拟化技术实现原理</h3><ul><li>软件虚拟化<code>qemu</code> </li><li>半虚拟化<code>para-virtualization</code><ul><li>由思杰<code>critix</code>公司推出</li><li><code>redhat</code>公司提供<code>virtIO</code>驱动实现半虚拟化</li></ul></li><li>硬件辅助虚拟化<ul><li><code>Intel</code><ul><li><code>VT-x</code></li><li><code>vmx</code></li></ul></li><li><code>AMD</code><ul><li><code>amd-v</code></li><li><code>svm</code></li></ul></li></ul></li></ul><h2 id="二、KVM虚拟化"><a href="#二、KVM虚拟化" class="headerlink" title="二、KVM虚拟化"></a>二、KVM虚拟化</h2><blockquote><p><strong><code>KVM</code>全称<code>Kernel-based Virtual Machine</code>是一个基于内核的虚拟机</strong></p></blockquote><h3 id="借助QEMU-I-O实现虚拟硬件的模拟管理"><a href="#借助QEMU-I-O实现虚拟硬件的模拟管理" class="headerlink" title="借助QEMU I/O实现虚拟硬件的模拟管理"></a>借助<code>QEMU I/O</code>实现虚拟硬件的模拟管理</h3><p><img src="https://www.wsjj.top/upload/2023/05/kvm03.png" alt="kvm03"></p><h3 id="KVM的管理工具"><a href="#KVM的管理工具" class="headerlink" title="KVM的管理工具"></a>KVM的管理工具</h3><blockquote><p><strong>依赖于<code>libvirtd</code>服务，管理命令有<code>virt-manager</code>、<code>virsh</code></strong></p></blockquote><h2 id="三、KVM安装"><a href="#三、KVM安装" class="headerlink" title="三、KVM安装"></a>三、KVM安装</h2><h3 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1.准备阶段"></a>1.准备阶段</h3><blockquote><p><strong>1.准备一台高配置的虚拟机，或者实体机，并且预装好<code>Centos7</code>的系统</strong><br><strong>2.确保您的<code>CPU</code>支持虚拟化功能，并且在<code>BIOS</code>中开启虚拟化的支持</strong></p></blockquote><h4 id="Windows系统确认是否开启虚拟化支持"><a href="#Windows系统确认是否开启虚拟化支持" class="headerlink" title="Windows系统确认是否开启虚拟化支持"></a><code>Windows</code>系统确认是否开启虚拟化支持</h4><p><img src="https://www.wsjj.top/upload/2023/05/kvm04.png" alt="kvm04"></p><h4 id="防止和VMware虚拟机冲突，确保您Windows的虚拟化平台的支持是关闭的状态"><a href="#防止和VMware虚拟机冲突，确保您Windows的虚拟化平台的支持是关闭的状态" class="headerlink" title="防止和VMware虚拟机冲突，确保您Windows的虚拟化平台的支持是关闭的状态"></a>防止和<code>VMware</code>虚拟机冲突，确保您<code>Windows</code>的虚拟化平台的支持是关闭的状态</h4><blockquote><p><strong><code>开始菜单</code>&gt;<code>搜索</code>&gt;<code>Windows功能</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/kvm05.png" alt="kvm05"></p><p><img src="https://www.wsjj.top/upload/2023/05/kvm06.png" alt="kvm06"></p><h4 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h4><blockquote><p><strong>安装系统过程省略</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/kvm07.png" alt="kvm07"></p><h3 id="2-确保虚拟硬件的CPU支持虚拟化功能"><a href="#2-确保虚拟硬件的CPU支持虚拟化功能" class="headerlink" title="2.确保虚拟硬件的CPU支持虚拟化功能"></a>2.确保虚拟硬件的<code>CPU</code>支持虚拟化功能</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# lscpu | grep -E -i &quot;vt-x|amd-v&quot;虚拟化：           VT-x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-安装KVM相关软件和依赖"><a href="#3-安装KVM相关软件和依赖" class="headerlink" title="3.安装KVM相关软件和依赖"></a>3.安装<code>KVM</code>相关软件和依赖</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# yum install -y qemu-kvm qemu-img libvirt virt-install virt-manager libvirt-python libvirt-client virt-viewer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="确认KVM安装成功"><a href="#确认KVM安装成功" class="headerlink" title="确认KVM安装成功"></a>确认<code>KVM</code>安装成功</h4><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# lsmod | grep -i kvmkvm_intel             188740  0 kvm                   637289  1 kvm_intel#AMD的CPU没有这个是正常的irqbypass              13503  1 kvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-确认libvirtd服务正常运行"><a href="#4-确认libvirtd服务正常运行" class="headerlink" title="4.确认libvirtd服务正常运行"></a>4.确认<code>libvirtd</code>服务正常运行</h3><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# systemctl status libvirtd● libvirtd.service - Virtualization daemon   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;libvirtd.service; enabled; vendor preset: enabled)   Active: active (running) since 二 2023-05-30 13:19:05 CST; 1min 38s ago     Docs: man:libvirtd(8)           https:&#x2F;&#x2F;libvirt.org Main PID: 5318 (libvirtd)    Tasks: 19 (limit: 32768)   CGroup: &#x2F;system.slice&#x2F;libvirtd.service           ├─1660 &#x2F;usr&#x2F;sbin&#x2F;dnsmasq --conf-file&#x3D;&#x2F;var&#x2F;l...           ├─1661 &#x2F;usr&#x2F;sbin&#x2F;dnsmasq --conf-file&#x3D;&#x2F;var&#x2F;l...           └─5318 &#x2F;usr&#x2F;sbin&#x2F;libvirtd5月 30 13:19:05 lvm.linux.com systemd[1]: Starting Vi...5月 30 13:19:05 lvm.linux.com systemd[1]: Started Vir...5月 30 13:19:05 lvm.linux.com dnsmasq[1660]: read &#x2F;et...5月 30 13:19:05 lvm.linux.com dnsmasq[1660]: read &#x2F;va...5月 30 13:19:05 lvm.linux.com dnsmasq-dhcp[1660]: rea...Hint: Some lines were ellipsized, use -l to show in full.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、网络环境变化"><a href="#四、网络环境变化" class="headerlink" title="四、网络环境变化"></a>四、网络环境变化</h2><blockquote><p><strong>安装完<code>LVM</code>后，会自动生成一块虚拟网卡</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# ifconfig virbr0virbr0: flags&#x3D;4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255        ether 52:54:00:47:c3:5c  txqueuelen 1000  (Ethernet)        RX packets 166  bytes 12565 (12.2 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 139  bytes 14068 (13.7 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>作用：<ul><li>让物理机通过<code>virbr0</code>和接入到<code>default</code>虚拟网络中的所有虚拟机通信 </li><li>作为<code>default</code>虚拟网络中所有<code>kvm</code>虚拟机的网关</li></ul></li></ul><h3 id="查看虚拟网络"><a href="#查看虚拟网络" class="headerlink" title="查看虚拟网络"></a>查看虚拟网络</h3><blockquote><p><strong><code>KVM</code>默认的虚拟网络叫<code>default</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh net-list 名称               状态     自动开始  持久---------------------------------------------------------- default              活动     是           是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看虚拟网络详细信息"><a href="#查看虚拟网络详细信息" class="headerlink" title="查看虚拟网络详细信息"></a>查看虚拟网络详细信息</h3><blockquote><p><strong>在实体机中，<code>virbr0</code>上的IP地址<code>192.168.122.1</code>除了可以和<code>KVM</code>虚拟机建立连接，还是他们的网关</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@lvm ~]# virsh net-dumpxml default&lt;network&gt;  &lt;name&gt;default&lt;&#x2F;name&gt;  &lt;uuid&gt;c11cc1df-37cc-4947-93d1-fee1b4d22052&lt;&#x2F;uuid&gt;  &lt;forward mode&#x3D;&#39;nat&#39;&gt;    &lt;nat&gt;      &lt;port start&#x3D;&#39;1024&#39; end&#x3D;&#39;65535&#39;&#x2F;&gt;    &lt;&#x2F;nat&gt;  &lt;&#x2F;forward&gt;  &lt;bridge name&#x3D;&#39;virbr0&#39; stp&#x3D;&#39;on&#39; delay&#x3D;&#39;0&#39;&#x2F;&gt;  &lt;mac address&#x3D;&#39;52:54:00:47:c3:5c&#39;&#x2F;&gt;  &lt;ip address&#x3D;&#39;192.168.122.1&#39; netmask&#x3D;&#39;255.255.255.0&#39;&gt;    &lt;dhcp&gt;      &lt;range start&#x3D;&#39;192.168.122.2&#39; end&#x3D;&#39;192.168.122.254&#39;&#x2F;&gt;    &lt;&#x2F;dhcp&gt;  &lt;&#x2F;ip&gt;&lt;&#x2F;network&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> 虚拟化应用 </category>
          
          <category> KVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> kvm </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【经典面试题系列】浏览器访问公网上某个站点的过程</title>
      <link href="/2023/05/29/126/"/>
      <url>/2023/05/29/126/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【经典面试题系列】浏览器访问公网上某个站点的过程"><a href="#【经典面试题系列】浏览器访问公网上某个站点的过程" class="headerlink" title="【经典面试题系列】浏览器访问公网上某个站点的过程"></a>【经典面试题系列】浏览器访问公网上某个站点的过程</h1><blockquote><p><strong>以下拿访问百度举例子</strong><br><strong>详细过程(转自知乎)：<a href="https://zhuanlan.zhihu.com/p/565427100">https://zhuanlan.zhihu.com/p/565427100</a></strong></p></blockquote><h2 id="第一步：先通过DNS"><a href="#第一步：先通过DNS" class="headerlink" title="第一步：先通过DNS"></a>第一步：先通过DNS</h2><blockquote><p><strong>通过<code>DNS</code>解析<code>ip</code>,首先会去浏览器里找是否有百度域名解析过的<code>ip</code>，没有的话就去&#x3D;&#x3D;本机&#x3D;&#x3D;的<code>hosts</code>文件里，<code>hosts</code>文件还没有的话就得去请求本地<code>dns</code>服务器去要<code>ip</code>,然后<code>dns</code>服务器返回给客户端。</strong></p></blockquote><h2 id="第二步：ARP"><a href="#第二步：ARP" class="headerlink" title="第二步：ARP"></a>第二步：ARP</h2><blockquote><p><strong>当<code>dns</code>域名解析到<code>ip</code>就开始访问百度服务器，为了数据封装，就得需要目标的<code>mac</code>地址，<code>arp</code>在获取对方<code>mac</code>先是看<code>arp</code>缓存表，没有的话就通过<code>arp</code>获取。</strong></p></blockquote><h2 id="第三步：IP"><a href="#第三步：IP" class="headerlink" title="第三步：IP"></a>第三步：IP</h2><blockquote><p><strong>当二层完成封装后，把数据发往网关路由器</strong></p></blockquote><h2 id="第四步：NAT网络地址转换。"><a href="#第四步：NAT网络地址转换。" class="headerlink" title="第四步：NAT网络地址转换。"></a>第四步：NAT网络地址转换。</h2><blockquote><p><strong>由于客户端访问的资源不在内网，就得通过公网访问到目的的内网服务器，在内网访问外网的时候就得将内网<code>ip</code>转换成公网<code>ip</code>,这时候就得需要在网络出口的设备上有<code>nat</code>功能。</strong></p></blockquote><h2 id="第五步：TCP"><a href="#第五步：TCP" class="headerlink" title="第五步：TCP"></a>第五步：TCP</h2><blockquote><p><strong>当客户端拿到百度服务器的<code>ip</code>后，就会像百度服务器发<code>http</code>请求，而<code>http</code>协议请求是基于<code>tcp</code>协议</strong></p></blockquote><h2 id="最后一步：HTTP"><a href="#最后一步：HTTP" class="headerlink" title="最后一步：HTTP"></a>最后一步：HTTP</h2><blockquote><p><strong>浏览器会给百度服务器的一个<code>http</code>请求，请求头为<code>get</code>,然后百度服务器就会给客户端浏览器<code>http</code>响应</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> 网络 </tag>
            
            <tag> linux网络 </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安全系列教程】Firewalld防火墙</title>
      <link href="/2023/05/29/125/"/>
      <url>/2023/05/29/125/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux安全系列教程】Firewalld防火墙"><a href="#【Linux安全系列教程】Firewalld防火墙" class="headerlink" title="【Linux安全系列教程】Firewalld防火墙"></a>【Linux安全系列教程】Firewalld防火墙</h1><blockquote><p><strong>上期教程：<a href="https://www.wsjj.top/archives/124">iptables防火墙</a></strong></p></blockquote><h2 id="一、关于firewalld防火墙"><a href="#一、关于firewalld防火墙" class="headerlink" title="一、关于firewalld防火墙"></a>一、关于firewalld防火墙</h2><ul><li>管理工具:<ul><li><code>firewall-cmd</code>命令行工具</li><li><code>firewall-config</code>图形化工具</li><li>依赖于<code>firewalld</code>服务</li></ul></li></ul><h3 id="一共有9个域"><a href="#一共有9个域" class="headerlink" title="一共有9个域"></a>一共有<code>9</code>个域</h3><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --get-zones block dmz drop external home internal public trusted work<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>public</code>默认域</li><li><code>trusted</code>白名单域</li><li><code>drop</code>黑名单域</li><li><code>block</code>黑名单域</li></ul><h2 id="二、数据过滤"><a href="#二、数据过滤" class="headerlink" title="二、数据过滤"></a>二、数据过滤</h2><h3 id="1-开启firewalld服务"><a href="#1-开启firewalld服务" class="headerlink" title="1.开启firewalld服务"></a>1.开启<code>firewalld</code>服务</h3><blockquote><p><strong>如果您已经开启，请忽略此步骤</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# systemctl unmask firewalldRemoved symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;firewalld.service.[root@client ~]# systemctl start firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看区域"><a href="#2-查看区域" class="headerlink" title="2.查看区域"></a>2.查看区域</h3><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --get-zonesblock dmz drop external home internal public trusted work<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-查看默认区域"><a href="#3-查看默认区域" class="headerlink" title="3.查看默认区域"></a>3.查看默认区域</h3><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --get-default-zone public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-查看区域详细信息"><a href="#4-查看区域详细信息" class="headerlink" title="4.查看区域详细信息"></a>4.查看区域详细信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --list-all --zone&#x3D;publicpublic (active)  target: default  icmp-block-inversion: no#是否禁止icmp协议  interfaces: ens33  sources:   services: dhcpv6-client ssh#允许通过防火墙的服务名  ports: #允许通过防火墙的端口  protocols:   masquerade: no#开启网络地址自动转换  forward-ports:   source-ports: #源端口  icmp-blocks:   rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-放行http服务-基于服务名"><a href="#5-放行http服务-基于服务名" class="headerlink" title="5.放行http服务(基于服务名)"></a>5.放行http服务(基于服务名)</h3><h4 id="启动httpd"><a href="#启动httpd" class="headerlink" title="启动httpd"></a>启动httpd</h4><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# systemctl start httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h4><blockquote><p><strong>可以看到访问报错</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# curl 192.168.233.10curl: (7) Failed connect to 192.168.233.10:80; 没有到主机的路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="防火墙添加规则"><a href="#防火墙添加规则" class="headerlink" title="防火墙添加规则"></a>防火墙添加规则</h4><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --permanent --add-service&#x3D;http --zone&#x3D;publicsuccess[root@client ~]# firewall-cmd --reload#刷新防火墙规则success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--permanent</code>参数用于永久保存规则，如果不加此参数，重启后规则失效</li><li><code>--add-service=</code>服务名</li><li><code>--zone=</code>指定域</li><li><code>--reload</code>重新加载规则</li></ul><h4 id="查看区域详细信息"><a href="#查看区域详细信息" class="headerlink" title="查看区域详细信息"></a>查看区域详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --list-all --zone&#x3D;publicpublic (active)  target: default  icmp-block-inversion: no  interfaces: ens33  sources:   services: dhcpv6-client http ssh#可以看到服务这里，多了http服务  ports:   protocols:   masquerade: no  forward-ports:   source-ports:   icmp-blocks:   rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="再次访问测试"><a href="#再次访问测试" class="headerlink" title="再次访问测试"></a>再次访问测试</h4><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# curl 192.168.233.10192.168.233.10 webserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-删除规则-基于服务名"><a href="#6-删除规则-基于服务名" class="headerlink" title="6.删除规则(基于服务名)"></a>6.删除规则(基于服务名)</h3><blockquote><p><strong>删除刚刚的<code>http</code>规则</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --permanent --zone&#x3D;public --remove-service&#x3D;httpsuccess[root@client ~]# firewall-cmd --reloadsuccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--permanent</code>同样是持久删除，如果不加就是临时删除</li></ul><h3 id="7-放行http服务-基于端口"><a href="#7-放行http服务-基于端口" class="headerlink" title="7.放行http服务(基于端口)"></a>7.放行http服务(基于端口)</h3><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;80&#x2F;tcpsuccess[root@client ~]# firewall-cmd --reloadsuccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--add-port=端口号/协议</code></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --list-all --zone&#x3D;publicpublic (active)  target: default  icmp-block-inversion: no  interfaces: ens33  sources:   services: dhcpv6-client ssh  ports: 80&#x2F;tcp#刚刚我们添加的规则  protocols:   masquerade: no  forward-ports:   source-ports:   icmp-blocks:   rich rules: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-删除规则-基于端口"><a href="#8-删除规则-基于端口" class="headerlink" title="8.删除规则(基于端口)"></a>8.删除规则(基于端口)</h3><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --permanent --zone&#x3D;public --remove-port&#x3D;80&#x2F;tcpsuccess[root@client ~]# firewall-cmd --reloadsuccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --list-all --zone&#x3D;publicpublic (active)  target: default  icmp-block-inversion: no  interfaces: ens33  sources:   services: dhcpv6-client ssh  ports:   protocols:   masquerade: no  forward-ports:   source-ports:   icmp-blocks:   rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-修改默认服务的开放端口"><a href="#9-修改默认服务的开放端口" class="headerlink" title="9.修改默认服务的开放端口"></a>9.修改默认服务的开放端口</h3><blockquote><p><strong><code>firewalld</code>给我们提供了各式各样现成的开放相应服务的规则，同样也可以通过修改文件内容，修改默认的服务端口</strong><br><strong>例子：以下我将修改默认<code>ssh</code>服务的端口和防火墙规则</strong></p></blockquote><h4 id="先修改sshd的端口"><a href="#先修改sshd的端口" class="headerlink" title="先修改sshd的端口"></a>先修改<code>sshd</code>的端口</h4><blockquote><p><strong>修改默认的<code>ssh</code>的<code>22</code>号端口为<code>54321</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# sed -ri &#39;s|#Port 22|Port 54321|&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改防火墙提供服务的默认规则"><a href="#修改防火墙提供服务的默认规则" class="headerlink" title="修改防火墙提供服务的默认规则"></a>修改防火墙提供服务的默认规则</h4><blockquote><p><strong>在<code>/usr/lib/firewalld/services/</code>下提供了很多服务的模板，修改之前，要把相应的服务复制到<code>/etc/firewalld/services/</code>目录下</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# cp &#x2F;usr&#x2F;lib&#x2F;firewalld&#x2F;services&#x2F;ssh.xml &#x2F;etc&#x2F;firewalld&#x2F;services&#x2F;ssh.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改默认规则"><a href="#修改默认规则" class="headerlink" title="修改默认规则"></a>修改默认规则</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# vim &#x2F;etc&#x2F;firewalld&#x2F;services&#x2F;ssh.xml&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;service&gt;  &lt;short&gt;SSH&lt;&#x2F;short&gt;  &lt;description&gt;Secure Shell (SSH) is a protocol for logging into and executing commands on remote machines. It provides secure encrypted communications. If you plan on accessing your machine remotely via SSH over a firewalled interface, enable this option. You need the openssh-server package installed for this option to be useful.&lt;&#x2F;description&gt;  &lt;port protocol&#x3D;&quot;tcp&quot; port&#x3D;&quot;54321&quot;&#x2F;&gt;#这里的端口默认是22&lt;&#x2F;service&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="让配置生效"><a href="#让配置生效" class="headerlink" title="让配置生效"></a>让配置生效</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# firewall-cmd --reloadsuccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><blockquote><p><strong>随便找另外一台机器测试</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# ssh root@192.168.233.10 -p 54321[root@client ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10-自定义服务"><a href="#10-自定义服务" class="headerlink" title="10.自定义服务"></a>10.自定义服务</h3><blockquote><p><strong>随便找个<code>xml</code>文件作为模板，改改就可以了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# cp &#x2F;etc&#x2F;firewalld&#x2F;services&#x2F;ssh.xml &#x2F;etc&#x2F;firewalld&#x2F;services&#x2F;serviceAA.xml[root@client ~]# cat &#x2F;etc&#x2F;firewalld&#x2F;services&#x2F;serviceAA.xml&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;&lt;service&gt;  &lt;short&gt;serviceAA&lt;&#x2F;short&gt;  &lt;description&gt;This is a test service&lt;&#x2F;description&gt;  &lt;port protocol&#x3D;&quot;tcp&quot; port&#x3D;&quot;33333&quot;&#x2F;&gt;&lt;&#x2F;service&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>--add-service=</code>填写我们自定义的服务名即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# firewall-cmd --permanent --add-service&#x3D;serviceAA success[root@server ~]# firewall-cmd --reload <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、NAT地址转换"><a href="#三、NAT地址转换" class="headerlink" title="三、NAT地址转换"></a>三、NAT地址转换</h2><h3 id="1-源地址转换"><a href="#1-源地址转换" class="headerlink" title="1.源地址转换"></a>1.源地址转换</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>作用</th></tr></thead><tbody><tr><td>client.linux.com</td><td>192.168.233.10</td><td>模拟客户端</td></tr><tr><td>nat.linux.com</td><td>192.168.233.100、30.30.30.128</td><td>模拟NAT</td></tr><tr><td>server.linux.com</td><td>30.30.30.10</td><td>模拟公网服务器</td></tr></tbody></table><blockquote><p><strong>在配置之前，请提前准备好<code>httpd</code>的服务</strong></p></blockquote><h5 id="A-先给NAT主机添加一块网卡"><a href="#A-先给NAT主机添加一块网卡" class="headerlink" title="A.先给NAT主机添加一块网卡"></a>A.先给NAT主机添加一块网卡</h5><p><img src="https://www.wsjj.top/upload/2023/05/wall05.png" alt="wall05"></p><h5 id="B-修改另外2台主机的网卡"><a href="#B-修改另外2台主机的网卡" class="headerlink" title="B.修改另外2台主机的网卡"></a>B.修改另外2台主机的网卡</h5><p><img src="https://www.wsjj.top/upload/2023/05/wall06.png" alt="wall06"></p><p><img src="https://www.wsjj.top/upload/2023/05/wall07.png" alt="wall07"></p><h5 id="C-配置IP地址和网关地址"><a href="#C-配置IP地址和网关地址" class="headerlink" title="C.配置IP地址和网关地址"></a>C.配置IP地址和网关地址</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.233.10NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.233.100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.233.100#NETMASK&#x3D;255.255.255.0#GATEWAY&#x3D;192.168.140.2#DNS1&#x3D;114.114.114.114#DNS2&#x3D;8.8.8.8[root@nat ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens36TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;30.30.30.128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;30.30.30.10NETMASK&#x3D;255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="D-在服务器上发布测试网页"><a href="#D-在服务器上发布测试网页" class="headerlink" title="D.在服务器上发布测试网页"></a>D.在服务器上发布测试网页</h5><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# rm -rf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# echo &quot;&lt;h1&gt;30.30.30.10 webserver&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="E-配置NAT"><a href="#E-配置NAT" class="headerlink" title="E.配置NAT"></a>E.配置NAT</h5><blockquote><p><strong>先修改内核参数，开启路由地址转发功能</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# sed -ri &#39;$a \net.ipv4.ip_forward &#x3D; 1&#39; &#x2F;etc&#x2F;sysctl.conf[root@nat ~]# sysctl -pnet.ipv4.ip_forward &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="F-配置防火墙规则"><a href="#F-配置防火墙规则" class="headerlink" title="F.配置防火墙规则"></a>F.配置防火墙规则</h5><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# firewall-cmd --permanent --add-masquerade success[root@nat ~]# firewall-cmd --reload success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="查看防火墙规则"><a href="#查看防火墙规则" class="headerlink" title="查看防火墙规则"></a>查看防火墙规则</h6><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# firewall-cmd --list-all --zone&#x3D;publicpublic (active)  target: default  icmp-block-inversion: no  interfaces: ens33 ens36  sources:   services: dhcpv6-client ssh  ports:   protocols:   masquerade: yes#可以看到已经开启地址自动转换了  forward-ports:   source-ports:   icmp-blocks:   rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="G-client端测试访问"><a href="#G-client端测试访问" class="headerlink" title="G.client端测试访问"></a>G.<code>client</code>端测试访问</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# curl 30.30.30.10&lt;h1&gt;30.30.30.10 webserver&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="H。查看server端访问日志"><a href="#H。查看server端访问日志" class="headerlink" title="H。查看server端访问日志"></a>H。查看server端访问日志</h5><blockquote><p><strong>可以看到确确实实是<code>NAT</code>转换的公网<code>IP</code>地址</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# tail -n3 &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log 30.30.30.128 - - [29&#x2F;May&#x2F;2023:14:20:51 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;30.30.30.128 - - [29&#x2F;May&#x2F;2023:14:20:52 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;30.30.30.128 - - [29&#x2F;May&#x2F;2023:19:59:42 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-发布服务-端口映射"><a href="#2-发布服务-端口映射" class="headerlink" title="2.发布服务(端口映射)"></a>2.发布服务(端口映射)</h3><blockquote><p><strong>模拟公网客户端，访问内网的服务器</strong><br><strong>注意：<code>NAT</code>上面<code>wan口</code>绑定的<code>IP</code>必须是<code>公网IP</code></strong><br><strong>端口映射的端口不可以冲突！</strong></p></blockquote><table><thead><tr><th>主机名</th><th>IP地址</th><th>作用</th></tr></thead><tbody><tr><td>server.linux.com</td><td>192.168.233.10</td><td>模拟服务端</td></tr><tr><td>nat.linux.com</td><td>192.168.233.100、30.30.30.128</td><td>模拟NAT</td></tr><tr><td>client.linux.com</td><td>30.30.30.10</td><td>模拟客户端</td></tr></tbody></table><h5 id="A-服务端发布测试页面"><a href="#A-服务端发布测试页面" class="headerlink" title="A.服务端发布测试页面"></a>A.服务端发布测试页面</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# rm -rf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf[root@client ~]# echo &quot;192.168.233.10 webserver&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html[root@client ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="B-公网客户端测试"><a href="#B-公网客户端测试" class="headerlink" title="B.公网客户端测试"></a>B.公网客户端测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# curl 30.30.30.128curl: (7) Failed connect to 30.30.30.128:80; 没有到主机的路由#这是正常现象，我们还没有做端口映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="C-回到NAT服务器，配置防火墙策略"><a href="#C-回到NAT服务器，配置防火墙策略" class="headerlink" title="C.回到NAT服务器，配置防火墙策略"></a>C.回到NAT服务器，配置防火墙策略</h5><blockquote><p><strong>把内网<code>192.168.233.10</code>上的<code>80</code>端口，映射到公网<code>30.30.30.128</code>的<code>8080</code>端口</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# firewall-cmd --permanent --add-forward-port&#x3D;port&#x3D;8080:proto&#x3D;tcp:toport&#x3D;80:toaddr&#x3D;192.168.233.10success[root@nat ~]# firewall-cmd --reloadsuccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>port=</code>映射端口</li><li><code>proto=</code>协议</li><li><code>toport=</code>源端口</li><li><code>toaddr=</code>源地址</li></ul><h4 id="D-查看防火墙规则"><a href="#D-查看防火墙规则" class="headerlink" title="D.查看防火墙规则"></a>D.查看防火墙规则</h4><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# firewall-cmd --list-all --zone&#x3D;publicpublic (active)  target: default  icmp-block-inversion: no  interfaces: ens33 ens36  sources:   services: dhcpv6-client ssh  ports:   protocols:   masquerade: yes  forward-ports: port&#x3D;8080:proto&#x3D;tcp:toport&#x3D;80:toaddr&#x3D;192.168.233.10  source-ports:   icmp-blocks:   rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-测试"><a href="#E-测试" class="headerlink" title="E.测试"></a>E.测试</h4><blockquote><p><strong>可以看到公网客户端，成功访问到了内网的服务器上</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# curl 30.30.30.128:8080192.168.233.10 webserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="F-拓展"><a href="#F-拓展" class="headerlink" title="F.拓展"></a>F.拓展</h4><h5 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h5><blockquote><p><strong>刚刚的是远程端口转发</strong><br><strong>不用添加<code>toaddr</code>参数</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat_device ~]# firewall-cmd --permanent --add-forward-port&#x3D;port&#x3D;8888:proto&#x3D;tcp:toport&#x3D;22success[root@nat_device ~]# firewall-cmd --reload success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> Linux安全 </category>
          
          <category> 防火墙 </category>
          
          <category> firewalld防火墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux安全 </tag>
            
            <tag> linux防火墙 </tag>
            
            <tag> firewalld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7升级内核版本教程</title>
      <link href="/2023/05/26/kernel/"/>
      <url>/2023/05/26/kernel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7升级内核版本教程"><a href="#Centos7升级内核版本教程" class="headerlink" title="Centos7升级内核版本教程"></a>Centos7升级内核版本教程</h1><blockquote><p><strong><code>Centos7</code>默认的内核版本太低了，已经不适应现在的大多数软件了</strong><br><strong>所以本期教程，带大家如何给<code>Centos7</code>升级内核版本</strong></p></blockquote><ul><li>教程用到的系统版本：<code>Centos7.9</code></li></ul><h2 id="一、检查自己系统的发行版本"><a href="#一、检查自己系统的发行版本" class="headerlink" title="一、检查自己系统的发行版本"></a>一、检查自己系统的发行版本</h2><blockquote><p><strong>不会吧不会吧，既然你刷到这个教程，不会连自己系统的，发行版本是什么都不知道吧！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# cat &#x2F;etc&#x2F;redhat-release CentOS Linux release 7.9.2009 (Core)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h3><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# uname -r3.10.0-1160.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、导入elrepo公钥"><a href="#二、导入elrepo公钥" class="headerlink" title="二、导入elrepo公钥"></a>二、导入elrepo公钥</h2><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# rpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、安装elrepo源"><a href="#三、安装elrepo源" class="headerlink" title="三、安装elrepo源"></a>三、安装elrepo源</h2><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# yum install -y https:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.el7.elrepo.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、下载最新版内核"><a href="#四、下载最新版内核" class="headerlink" title="四、下载最新版内核"></a>四、下载最新版内核</h2><blockquote><p><strong><code>kernel-ml</code>是最新的稳定版本</strong><br><strong><code>kernel-lt</code>是长期支持版本</strong><br><strong>我个人可能更偏向于长期支持版本，因为他更稳定一些</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# yum --enablerepo&#x3D;elrepo-kernel install -y kernel-lt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>执行完上面的命令，大概要等<code>30分钟-1小时</code>不等，请耐心等待，国外网站下载确实慢很多</strong></p></blockquote><h2 id="五、修改系统默认内核"><a href="#五、修改系统默认内核" class="headerlink" title="五、修改系统默认内核"></a>五、修改系统默认内核</h2><h3 id="1-查看系统所有可用内核"><a href="#1-查看系统所有可用内核" class="headerlink" title="1.查看系统所有可用内核"></a>1.查看系统所有可用内核</h3><blockquote><p><strong>请务必记住不同版本内核的编号！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# awk -F \&#39; &#39;$1&#x3D;&#x3D;&quot;menuentry &quot; &#123;print i++ &quot; : &quot; $2&#125;&#39; &#x2F;etc&#x2F;grub2.cfg0 : CentOS Linux (6.3.4-1.el7.elrepo.x86_64) 7 (Core)1 : CentOS Linux (5.4.243-1.el7.elrepo.x86_64) 7 (Core)2 : CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core)3 : CentOS Linux (0-rescue-69b30c004d1a456fb5a27f5306213572) 7 (Core)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改文件-x2F-etc-x2F-default-x2F-grub-重要"><a href="#2-修改文件-x2F-etc-x2F-default-x2F-grub-重要" class="headerlink" title="2.修改文件&#x2F;etc&#x2F;default&#x2F;grub(重要)"></a>2.修改文件&#x2F;etc&#x2F;default&#x2F;grub(重要)</h3><blockquote><p><strong><code>kernel 6.x</code>版本需要下载<code>kernel-ml</code>版本</strong><br><strong>在我的配置文件中是<code>数字1</code>使用的是<code>kernel 5.4.243</code>版本，如果想使用最新的<code>kernel 6.3.4</code>版本，就需要修改为<code>数字0</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# vim &#x2F;etc&#x2F;default&#x2F;grubGRUB_TIMEOUT&#x3D;5GRUB_DISTRIBUTOR&#x3D;&quot;$(sed &#39;s, release .*$,,g&#39; &#x2F;etc&#x2F;system-release)&quot;GRUB_DEFAULT&#x3D;1#修改这里的参数，我这里的0对应上面刚刚查到的内核编号GRUB_DISABLE_SUBMENU&#x3D;trueGRUB_TERMINAL_OUTPUT&#x3D;&quot;console&quot;GRUB_CMDLINE_LINUX&#x3D;&quot;crashkernel&#x3D;auto rd.lvm.lv&#x3D;centos&#x2F;root rd.lvm.lv&#x3D;centos&#x2F;swap rhgb quiet&quot;GRUB_DISABLE_RECOVERY&#x3D;&quot;true&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重新生成grub文件-重要"><a href="#3-重新生成grub文件-重要" class="headerlink" title="3.重新生成grub文件(重要)"></a>3.重新生成grub文件(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-重启系统"><a href="#4-重启系统" class="headerlink" title="4.重启系统"></a>4.重启系统</h3><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、查看升级后的内核版本"><a href="#六、查看升级后的内核版本" class="headerlink" title="六、查看升级后的内核版本"></a>六、查看升级后的内核版本</h2><blockquote><p><strong>恭喜你，内核升级成功啦！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# uname -r5.4.243-1.el7.elrepo.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> centos7 </tag>
            
            <tag> kernel </tag>
            
            <tag> centos升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安全系列教程】iptables防火墙</title>
      <link href="/2023/05/24/124/"/>
      <url>/2023/05/24/124/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux安全系列教程】iptables防火墙"><a href="#【Linux安全系列教程】iptables防火墙" class="headerlink" title="【Linux安全系列教程】iptables防火墙"></a>【Linux安全系列教程】iptables防火墙</h1><blockquote><p><strong>下一期教程：<a href="https://www.wsjj.top/archives/125">Firewalld防火墙</a></strong></p></blockquote><h2 id="一、防火墙的类型"><a href="#一、防火墙的类型" class="headerlink" title="一、防火墙的类型"></a>一、防火墙的类型</h2><ul><li>硬件防火墙</li><li>软件防火墙<ul><li><code>netfilter</code>内核模块 </li><li><code>Centos7.x</code> <code>firewall-cmd命令</code> <code>firewalld服务</code></li><li><code>iptables</code>命令</li></ul></li></ul><h2 id="二、防火墙的作用"><a href="#二、防火墙的作用" class="headerlink" title="二、防火墙的作用"></a>二、防火墙的作用</h2><ul><li>数据过滤<ul><li>根据数据基本五元素<ul><li><code>源IP</code>、<code>目的IP</code>、<code>协议</code>、<code>源端口</code>、<code>目的端口</code></li></ul></li></ul></li></ul><h2 id="三、关于四表五链"><a href="#三、关于四表五链" class="headerlink" title="三、关于四表五链"></a>三、关于四表五链</h2><p><img src="https://www.wsjj.top/upload/2023/05/wall01.png" alt="wall01"></p><h3 id="1-filler表中的链"><a href="#1-filler表中的链" class="headerlink" title="1.filler表中的链"></a>1.filler表中的链</h3><blockquote><p><strong><code>INPUT</code>、<code>FORWARD</code>、<code>OUTPUT</code></strong></p></blockquote><h3 id="2-NAT表中的链"><a href="#2-NAT表中的链" class="headerlink" title="2.NAT表中的链"></a>2.NAT表中的链</h3><blockquote><p><strong><code>PREROUTING</code>、<code>INPUT</code>、<code>OUTPUT</code>、<code>POSTROUTING</code></strong></p></blockquote><h3 id="3-mangle表中的链"><a href="#3-mangle表中的链" class="headerlink" title="3.mangle表中的链"></a>3.mangle表中的链</h3><blockquote><p><strong><code>PREROUTING</code>、<code>INPUT</code>、<code>FORWARD</code>、<code>OUTPUT</code>、<code>POSTROUTING</code></strong></p></blockquote><h3 id="4-raw表中的链"><a href="#4-raw表中的链" class="headerlink" title="4.raw表中的链"></a>4.raw表中的链</h3><blockquote><p><strong><code>PREROUTING</code>、<code>OUTPUT</code></strong></p></blockquote><h3 id="编写规则注意事项"><a href="#编写规则注意事项" class="headerlink" title="编写规则注意事项"></a>编写规则注意事项</h3><ul><li>自上而下，依次匹配<ul><li>允许在要拒绝上面</li><li>访问频率高的服务规则尽量放在上面</li></ul></li><li>链的默认行为</li></ul><h2 id="四、数据过滤规则管理-filter表"><a href="#四、数据过滤规则管理-filter表" class="headerlink" title="四、数据过滤规则管理(filter表)"></a>四、数据过滤规则管理(filter表)</h2><h3 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1.关闭防火墙"></a>1.关闭防火墙</h3><blockquote><p><strong><code>Centos7</code>有<code>2</code>个防火墙，一个现在的<code>iptables</code>，还有一个是基于<code>firewalld</code>服务的<code>firewall</code>防火墙</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# systemctl stop firewalld[root@node4 ~]# systemctl disable firewalld[root@node4 ~]# systemctl mask firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看防火墙规则"><a href="#2-查看防火墙规则" class="headerlink" title="2.查看防火墙规则"></a>2.查看防火墙规则</h3><h4 id="A-查看规则"><a href="#A-查看规则" class="headerlink" title="A.查看规则"></a>A.查看规则</h4><blockquote><p><strong><code>-L</code>列出规则</strong><br><strong><code>-n</code>以阿拉伯数字显示</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nLChain INPUT (policy ACCEPT)#防火墙默认规则，允许所有通过target     prot opt source               destination         #默认是没有规则的Chain FORWARD (policy ACCEPT)target     prot opt source               destination         Chain OUTPUT (policy ACCEPT)target     prot opt source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="t-lt-表名-gt-查看指定表规则"><a href="#t-lt-表名-gt-查看指定表规则" class="headerlink" title="-t&lt;表名&gt;查看指定表规则"></a><code>-t&lt;表名&gt;</code>查看指定表规则</h4><blockquote><p><strong>如果不加<code>-t</code>参数，默认查看的是<code>filter表</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nL -t natChain PREROUTING (policy ACCEPT)target     prot opt source               destination         Chain INPUT (policy ACCEPT)target     prot opt source               destination         Chain OUTPUT (policy ACCEPT)target     prot opt source               destination         Chain POSTROUTING (policy ACCEPT)target     prot opt source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="line-number显示行号"><a href="#line-number显示行号" class="headerlink" title="--line-number显示行号"></a><code>--line-number</code>显示行号</h4><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nL -t filter -v --line-numberChain INPUT (policy ACCEPT 0 packets, 0 bytes)num   pkts bytes target     prot opt in     out     source               destination         1     4247  374K ACCEPT     tcp  --  *      *       192.168.140.1        192.168.140.14       tcp dpt:222        0     0 DROP       all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)num   pkts bytes target     prot opt in     out     source               destination         Chain OUTPUT (policy ACCEPT 4028 packets, 647K bytes)num   pkts bytes target     prot opt in     out     source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v查看详细信息"><a href="#v查看详细信息" class="headerlink" title="-v查看详细信息"></a><code>-v</code>查看详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nL -t nat -vChain PREROUTING (policy ACCEPT 56 packets, 3092 bytes) pkts bytes target     prot opt in     out     source               destination         Chain INPUT (policy ACCEPT 8 packets, 424 bytes) pkts bytes target     prot opt in     out     source               destination         Chain OUTPUT (policy ACCEPT 216 packets, 16757 bytes) pkts bytes target     prot opt in     out     source               destination         Chain POSTROUTING (policy ACCEPT 216 packets, 16757 bytes) pkts bytes target     prot opt in     out     source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除规则"><a href="#3-删除规则" class="headerlink" title="3.删除规则"></a>3.删除规则</h3><h4 id="A-删除单条规则"><a href="#A-删除单条规则" class="headerlink" title="A.删除单条规则"></a>A.删除单条规则</h4><h5 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h5><pre class="line-numbers language-none"><code class="language-none"># iptables -D 链名 行号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看所有规则"><a href="#查看所有规则" class="headerlink" title="查看所有规则"></a>查看所有规则</h5><blockquote><p><strong>我这里加了<code>2</code>条测试规则</strong><br><strong>可以添加<code>--line-number</code>参数，显示行号</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nL -t filter -v --line-numberChain INPUT (policy ACCEPT 0 packets, 0 bytes)num   pkts bytes target     prot opt in     out     source               destination         1     4247  374K ACCEPT     tcp  --  *      *       192.168.140.1        192.168.140.14       tcp dpt:222        0     0 DROP       all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)num   pkts bytes target     prot opt in     out     source               destination         Chain OUTPUT (policy ACCEPT 4028 packets, 647K bytes)num   pkts bytes target     prot opt in     out     source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="例：我想删除第2条数据"><a href="#例：我想删除第2条数据" class="headerlink" title="例：我想删除第2条数据"></a>例：我想删除第2条数据</h5><blockquote><p><strong>如果不添加<code>-t</code>参数，默认删除<code>filter</code>表中的规则</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -D INPUT 2[root@node4 ~]# iptables -D INPUT 2#这是另外一种写法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h5><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nL -t filter -v --line-numberChain INPUT (policy ACCEPT 0 packets, 0 bytes)num   pkts bytes target     prot opt in     out     source               destination         1     7339  647K ACCEPT     tcp  --  *      *       192.168.140.1        192.168.140.14       tcp dpt:22Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)num   pkts bytes target     prot opt in     out     source               destination         Chain OUTPUT (policy ACCEPT 72 packets, 12372 bytes)num   pkts bytes target     prot opt in     out     source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-删除所有规则"><a href="#B-删除所有规则" class="headerlink" title="B.删除所有规则"></a>B.删除所有规则</h4><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -F<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看规则-1"><a href="#查看规则-1" class="headerlink" title="查看规则"></a>查看规则</h5><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nLChain INPUT (policy ACCEPT)target     prot opt source               destination         #表中没有规则了Chain FORWARD (policy ACCEPT)target     prot opt source               destination         Chain OUTPUT (policy ACCEPT)target     prot opt source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-添加规则"><a href="#4-添加规则" class="headerlink" title="4.添加规则"></a>4.添加规则</h3><h4 id="A-命令格式"><a href="#A-命令格式" class="headerlink" title="A.命令格式"></a>A.命令格式</h4><blockquote><p><strong>如果不写<code>-t</code>参数&#x3D;&#x3D;指定表名&#x3D;&#x3D;，默认添加到<code>filter</code>表中</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># iptables -t &lt;表名&gt; &#123;-A|-I&#125; &lt;链名&gt; [匹配数据的条件] -j &lt;行为&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong><code>iptables</code>规则查询有默认的策略</strong><br><strong>从写的<code>第一条</code>匹配规则开始，一直<code>向后</code>匹配。</strong><br><strong>如果从<code>第一条</code>开始就<code>匹配到了</code>相应的规则，那么<code>后面</code>的规则都<code>不会继续</code>匹配，而是直接<code>应用第一条</code>规则，所以<code>合理</code>的规则是必要的！</strong></p></blockquote><ul><li><code>-A</code>新的规则连续向后插入，也就是会插入到已有规则的后面</li><li><code>-I</code>新的规则永远插入到第一个，当然<code>-I</code>参数也可以指定你想插入到哪一行</li></ul><h5 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h5><ul><li><code>ACCEPT</code>允许</li><li><code>DROP</code>拒绝</li><li><code>REJECT</code>拒绝</li></ul><h5 id="匹配数据条件的常用选项"><a href="#匹配数据条件的常用选项" class="headerlink" title="匹配数据条件的常用选项"></a>匹配数据条件的常用选项</h5><ul><li><code>-s</code>源<code>IP</code>地址<ul><li><code>-s 192.168.1.1</code>单独的<code>IP</code></li><li><code>-s 192.168.1.0/24</code>网段</li><li><code>!  -s 192.168.2.1</code>取反</li></ul></li><li><code>-d</code>目的<code>IP</code>地址<ul><li><code>-d 10.1.1.1</code></li><li><code>-d 10.1.1.0/24</code></li><li><code>!  -d 10.1.1.1</code></li></ul></li><li><code>-i</code>流入网卡<ul><li><code>-i ens33</code>网卡名</li></ul></li><li><code>-o</code>流出网卡<ul><li><code>-o ens33</code></li></ul></li><li><code>-p &#123;tcp|udp|icmp&#125;</code>#icmp用于授权ping<ul><li><code>--sport</code>源端口<ul><li><code>--sport 22</code></li><li><code>--sport 22:80</code>连续的端口</li></ul></li><li><code>--dport</code>目的端口<ul><li><code>--dport 80</code></li><li><code>--dport 80:3306</code>连续的端口</li></ul></li><li><code>--icmp-type &#123;8|0&#125;</code><ul><li><code>8</code>: <code>ping请求</code></li><li><code>0</code>: <code>ping响应</code></li></ul></li></ul></li></ul><h4 id="B-几个例子"><a href="#B-几个例子" class="headerlink" title="B.几个例子"></a>B.几个例子</h4><h5 id="a-仅允许Windows访问服务器上的ssh服务，并且拒绝其他所有服务"><a href="#a-仅允许Windows访问服务器上的ssh服务，并且拒绝其他所有服务" class="headerlink" title="a.仅允许Windows访问服务器上的ssh服务，并且拒绝其他所有服务"></a>a.仅允许<code>Windows</code>访问服务器上的<code>ssh</code>服务，并且拒绝其他所有服务</h5><blockquote><p><strong>我的<code>windows</code>地址是<code>192.168.140.1</code>，众所周知<code>SSH</code>服务依靠<code>TCP</code>协议的<code>22</code>号端口</strong><br><strong>关于<code>SSH</code>服务的教程：<a href="https://www.wsjj.top/archives/58">https://www.wsjj.top/archives/58</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -A INPUT -s 192.168.140.1 -d 192.168.140.14 -p tcp --dport 22 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>拒绝所有服务，不需要指定源<code>IP</code>和目的<code>IP</code>，也不需要指定协议和端口</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -A INPUT -j DROP#执行这条命令有风险，请确认上面的规则完全匹配你的环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>可以看到<code>2</code>条已经生效的规则</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nLChain INPUT (policy ACCEPT)target     prot opt source               destination         ACCEPT     tcp  --  192.168.140.1        192.168.140.14       tcp dpt:22DROP       all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           Chain FORWARD (policy ACCEPT)target     prot opt source               destination         Chain OUTPUT (policy ACCEPT)target     prot opt source               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="测试其他机器能否通过SSH连接服务器"><a href="#测试其他机器能否通过SSH连接服务器" class="headerlink" title="测试其他机器能否通过SSH连接服务器"></a>测试其他机器能否通过<code>SSH</code>连接服务器</h6><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# ssh root@192.168.140.14^C#可以看到无法建立连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="b-仅允许Windows可以ping通服务器，拒绝其他连接"><a href="#b-仅允许Windows可以ping通服务器，拒绝其他连接" class="headerlink" title="b.仅允许Windows可以ping通服务器，拒绝其他连接"></a>b.仅允许<code>Windows</code>可以<code>ping</code>通服务器，拒绝其他连接</h5><blockquote><p><strong><code>-I&lt;链名&gt; 行号</code>用于插入规则到指定行数</strong><br><strong><code>--icmp-type &#123;8|0&#125;</code></strong><br><strong><code>8</code>: <code>ping请求</code></strong><br><strong><code>0</code>: <code>ping响应</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT 2 -s 192.168.140.1 -d 192.168.140.14 -p icmp --icmp-type 8 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查询规则"><a href="#查询规则" class="headerlink" title="查询规则"></a>查询规则</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nLChain INPUT (policy ACCEPT)target     prot opt source               destination         ACCEPT     tcp  --  192.168.140.1        192.168.140.14       tcp dpt:22ACCEPT     icmp --  192.168.140.1        192.168.140.14       icmptype 8DROP       all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Windows测试"><a href="#Windows测试" class="headerlink" title="Windows测试"></a><code>Windows</code>测试</h6><blockquote><p><strong>在添加规则之前，<code>Widnows</code>是无法<code>ping</code>通服务器的</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">C:\Users\wangshengjj&gt;ping 192.168.140.14正在 Ping 192.168.140.14 具有 32 字节的数据:来自 192.168.140.14 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.140.14 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.140.14 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.140.14 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-允许服务器ping通其他主机，而其他主机-比如Windows-无法ping通服务器"><a href="#c-允许服务器ping通其他主机，而其他主机-比如Windows-无法ping通服务器" class="headerlink" title="c.允许服务器ping通其他主机，而其他主机(比如Windows)无法ping通服务器"></a>c.允许服务器<code>ping</code>通其他主机，而其他主机(比如Windows)无法<code>ping</code>通服务器</h5><h6 id="删除之前的ping规则"><a href="#删除之前的ping规则" class="headerlink" title="删除之前的ping规则"></a>删除之前的<code>ping</code>规则</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -D INPUT 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="新增规则"><a href="#新增规则" class="headerlink" title="新增规则"></a>新增规则</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT 2 -d 192.168.140.14 -p icmp --icmp-type 0 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="Windows测试-1"><a href="#Windows测试-1" class="headerlink" title="Windows测试"></a><code>Windows</code>测试</h6><pre class="line-numbers language-none"><code class="language-none">C:\Users\wangshengjj&gt;ping 192.168.140.14正在 Ping 192.168.140.14 具有 32 字节的数据:请求超时。请求超时。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="服务器这边测试"><a href="#服务器这边测试" class="headerlink" title="服务器这边测试"></a>服务器这边测试</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# ping 192.168.140.1PING 192.168.140.1 (192.168.140.1) 56(84) bytes of data.64 bytes from 192.168.140.1: icmp_seq&#x3D;1 ttl&#x3D;128 time&#x3D;0.104 ms64 bytes from 192.168.140.1: icmp_seq&#x3D;2 ttl&#x3D;128 time&#x3D;0.144 ms64 bytes from 192.168.140.1: icmp_seq&#x3D;3 ttl&#x3D;128 time&#x3D;0.159 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-要求能ping通自己"><a href="#d-要求能ping通自己" class="headerlink" title="d.要求能ping通自己"></a>d.要求能<code>ping</code>通自己</h5><blockquote><p><strong>以目前的规则来说，我们是无法<code>ping</code>通自己的</strong></p></blockquote><h6 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h6><blockquote><p><strong>指定网卡为<code>io</code></strong><br><strong><code>Centos7</code>中，<code>io</code>网卡为自己和自己通信的时候会用到</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT 2 -i lo -p icmp -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查看所有规则-1"><a href="#查看所有规则-1" class="headerlink" title="查看所有规则"></a>查看所有规则</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -nL -v --line-numberChain INPUT (policy ACCEPT 0 packets, 0 bytes)num   pkts bytes target     prot opt in     out     source               destination         1    42850 3781K ACCEPT     tcp  --  *      *       192.168.140.1        192.168.140.14       tcp dpt:222        6   504 ACCEPT     icmp --  lo     *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           3        6   504 ACCEPT     icmp --  *      *       0.0.0.0&#x2F;0            192.168.140.14       icmptype 04       91  7300 DROP       all  --  *      *       0.0.0.0&#x2F;0            0.0.0.0&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="ping测试"><a href="#ping测试" class="headerlink" title="ping测试"></a><code>ping</code>测试</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# ping 192.168.140.14PING 192.168.140.14 (192.168.140.14) 56(84) bytes of data.64 bytes from 192.168.140.14: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.015 ms64 bytes from 192.168.140.14: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.025 ms64 bytes from 192.168.140.14: icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.026 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# ping 127.0.0.1PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.015 ms64 bytes from 127.0.0.1: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.061 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="e-要求服务器可以正常上网，比如访问baidu"><a href="#e-要求服务器可以正常上网，比如访问baidu" class="headerlink" title="e.要求服务器可以正常上网，比如访问baidu"></a>e.要求服务器可以正常上网，比如访问<code>baidu</code></h5><blockquote><p><strong>以目前的规则，服务器是无法正常<code>ping</code>通互联网服务器的，并且无法正常上网</strong></p></blockquote><h6 id="添加规则，先能ping通"><a href="#添加规则，先能ping通" class="headerlink" title="添加规则，先能ping通"></a>添加规则，先能<code>ping</code>通</h6><blockquote><p><strong>众所周知，我们服务器想要<code>ping</code>通互联网上某个域名，需要依靠<code>DNS</code>服务器把域名转换成公网地址</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT -d 192.168.140.14 -p udp --sport 53 -j ACCEPT[root@node4 ~]# iptables -t filter -I INPUT -d 192.168.140.14 -p tcp --sport 53 -j ACCEPT#有一部分DNS服务器基于TCP服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="测试ping通baidu"><a href="#测试ping通baidu" class="headerlink" title="测试ping通baidu"></a>测试<code>ping</code>通<code>baidu</code></h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# ping baidu.comPING baidu.com (39.156.66.10) 56(84) bytes of data.64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq&#x3D;1 ttl&#x3D;128 time&#x3D;7.16 ms64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq&#x3D;2 ttl&#x3D;128 time&#x3D;6.78 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="继续添加规则，用于访问web服务"><a href="#继续添加规则，用于访问web服务" class="headerlink" title="继续添加规则，用于访问web服务"></a>继续添加规则，用于访问<code>web</code>服务</h6><blockquote><p><strong>开放源端口<code>80</code>和<code>443</code>端口的访问</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT -d 192.168.140.14 -p tcp --sport 80 -j ACCEPT[root@node4 ~]# iptables -t filter -I INPUT -d 192.168.140.14 -p tcp --sport 443 -j ACCEP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="使用curl命令测试"><a href="#使用curl命令测试" class="headerlink" title="使用curl命令测试"></a>使用<code>curl</code>命令测试</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# curl www.baidu.com#正常访问&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv&#x3D;content-type content&#x3D;text&#x2F;html;charset&#x3D;utf-8&gt;&lt;meta http-equiv&#x3D;X-UA-Compatible content&#x3D;IE&#x3D;Edge&gt;&lt;meta content&#x3D;always name&#x3D;referrer&gt;&lt;link rel&#x3D;stylesheet type&#x3D;text&#x2F;css href&#x3D;http:&#x2F;&#x2F;s1.bdstatic.com&#x2F;r&#x2F;www&#x2F;cache&#x2F;bdorz&#x2F;baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;&#x2F;title&gt;&lt;&#x2F;head&gt; &lt;body link&#x3D;#0000cc&gt; &lt;div id&#x3D;wrapper&gt; &lt;div id&#x3D;head&gt; &lt;div class&#x3D;head_wrapper&gt; &lt;div class&#x3D;s_form&gt; &lt;div class&#x3D;s_form_wrapper&gt; &lt;div id&#x3D;lg&gt; &lt;img hidefocus&#x3D;true src&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;bd_logo1.png width&#x3D;270 height&#x3D;129&gt; &lt;&#x2F;div&gt; &lt;form id&#x3D;form name&#x3D;f action&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;s class&#x3D;fm&gt; &lt;input type&#x3D;hidden name&#x3D;bdorz_come value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;ie value&#x3D;utf-8&gt; &lt;input type&#x3D;hidden name&#x3D;f value&#x3D;8&gt; &lt;input type&#x3D;hidden name&#x3D;rsv_bp value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;rsv_idx value&#x3D;1&gt; &lt;input type&#x3D;hidden name&#x3D;tn value&#x3D;baidu&gt;&lt;span class&#x3D;&quot;bg s_ipt_wr&quot;&gt;&lt;input id&#x3D;kw name&#x3D;wd class&#x3D;s_ipt value maxlength&#x3D;255 autocomplete&#x3D;off autofocus&gt;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;bg s_btn_wr&quot;&gt;&lt;input type&#x3D;submit id&#x3D;su value&#x3D;百度一下 class&#x3D;&quot;bg s_btn&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div id&#x3D;u1&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;news.baidu.com name&#x3D;tj_trnews class&#x3D;mnav&gt;新闻&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;www.hao123.com name&#x3D;tj_trhao123 class&#x3D;mnav&gt;hao123&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;map.baidu.com name&#x3D;tj_trmap class&#x3D;mnav&gt;地图&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;v.baidu.com name&#x3D;tj_trvideo class&#x3D;mnav&gt;视频&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;tieba.baidu.com name&#x3D;tj_trtieba class&#x3D;mnav&gt;贴吧&lt;&#x2F;a&gt; &lt;noscript&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;bdorz&#x2F;login.gif?login&amp;tpl&#x3D;mn&amp;u&#x3D;http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name&#x3D;tj_login class&#x3D;lb&gt;登录&lt;&#x2F;a&gt; &lt;&#x2F;noscript&gt; &lt;script&gt;document.write(&#39;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;bdorz&#x2F;login.gif?login&amp;tpl&#x3D;mn&amp;u&#x3D;&#39;+ encodeURIComponent(window.location.href+ (window.location.search &#x3D;&#x3D;&#x3D; &quot;&quot; ? &quot;?&quot; : &quot;&amp;&quot;)+ &quot;bdorz_come&#x3D;1&quot;)+ &#39;&quot; name&#x3D;&quot;tj_login&quot; class&#x3D;&quot;lb&quot;&gt;登录&lt;&#x2F;a&gt;&#39;);&lt;&#x2F;script&gt; &lt;a href&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;more&#x2F; name&#x3D;tj_briicon class&#x3D;bri style&#x3D;&quot;display: block;&quot;&gt;更多产品&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div id&#x3D;ftCon&gt; &lt;div id&#x3D;ftConw&gt; &lt;p id&#x3D;lh&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;home.baidu.com&gt;关于百度&lt;&#x2F;a&gt; &lt;a href&#x3D;http:&#x2F;&#x2F;ir.baidu.com&gt;About Baidu&lt;&#x2F;a&gt; &lt;&#x2F;p&gt; &lt;p id&#x3D;cp&gt;&amp;copy;2017&amp;nbsp;Baidu&amp;nbsp;&lt;a href&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;duty&#x2F;&gt;使用百度前必读&lt;&#x2F;a&gt;&amp;nbsp; &lt;a href&#x3D;http:&#x2F;&#x2F;jianyi.baidu.com&#x2F; class&#x3D;cp-feedback&gt;意见反馈&lt;&#x2F;a&gt;&amp;nbsp;京ICP证030173号&amp;nbsp; &lt;img src&#x3D;&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;gs.gif&gt; &lt;&#x2F;p&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;body&gt; &lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-模块"><a href="#5-模块" class="headerlink" title="5.模块"></a>5.模块</h3><blockquote><p><code>-m &lt;模块名&gt;&lt;参数&gt;</code>使用模块</p></blockquote><h4 id="A-multiport模块"><a href="#A-multiport模块" class="headerlink" title="A.multiport模块"></a>A.<code>multiport</code>模块</h4><ul><li><code>-m multiport</code>指定多个端口<ul><li><code>--sports</code>  <code>port1</code>,<code>port2</code>,<code>port3</code>源端口</li><li><code>--dports</code>  <code>port1</code>,<code>port2</code>,<code>port3</code>目的端口</li></ul></li></ul><h5 id="可以优化一下上面的规则"><a href="#可以优化一下上面的规则" class="headerlink" title="可以优化一下上面的规则"></a>可以优化一下上面的规则</h5><blockquote><p><strong>可以发现前面的三条规则，除了端口不一样，其他参数都是一样的，那么就可以调用这个模块</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nLChain INPUT (policy ACCEPT)target     prot opt source               destination         ACCEPT     tcp  --  0.0.0.0&#x2F;0            192.168.140.14       tcp spt:443ACCEPT     tcp  --  0.0.0.0&#x2F;0            192.168.140.14       tcp spt:53ACCEPT     tcp  --  0.0.0.0&#x2F;0            192.168.140.14       tcp spt:80ACCEPT     udp  --  0.0.0.0&#x2F;0            192.168.140.14       udp spt:53ACCEPT     tcp  --  192.168.140.1        192.168.140.14       tcp dpt:22ACCEPT     icmp --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           ACCEPT     icmp --  0.0.0.0&#x2F;0            192.168.140.14       icmptype 0DROP       all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="先删除旧的规则"><a href="#先删除旧的规则" class="headerlink" title="先删除旧的规则"></a>先删除旧的规则</h5><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -D INPUT 1[root@node4 ~]# iptables -t filter -D INPUT 1[root@node4 ~]# iptables -t filter -D INPUT 1#执行三遍，当删除第一条的时候，第二条会自动上位变成第一条，以此类推[root@node4 ~]# iptables -nLChain INPUT (policy ACCEPT)target     prot opt source               destination         ACCEPT     udp  --  0.0.0.0&#x2F;0            192.168.140.14       udp spt:53ACCEPT     tcp  --  192.168.140.1        192.168.140.14       tcp dpt:22ACCEPT     icmp --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           ACCEPT     icmp --  0.0.0.0&#x2F;0            192.168.140.14       icmptype 0DROP       all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="添加规则-1"><a href="#添加规则-1" class="headerlink" title="添加规则"></a>添加规则</h5><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT 2 -d 192.168.140.14 -p tcp -m multiport --sports 53,80,443 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nLChain INPUT (policy ACCEPT)target     prot opt source               destination         ACCEPT     udp  --  0.0.0.0&#x2F;0            192.168.140.14       udp spt:53ACCEPT     tcp  --  0.0.0.0&#x2F;0            192.168.140.14       multiport sports 53,80,443ACCEPT     tcp  --  192.168.140.1        192.168.140.14       tcp dpt:22ACCEPT     icmp --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0           ACCEPT     icmp --  0.0.0.0&#x2F;0            192.168.140.14       icmptype 0DROP       all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-iprange模块"><a href="#B-iprange模块" class="headerlink" title="B.iprange模块"></a>B.<code>iprange</code>模块</h4><ul><li><code>-m iprange</code>指定多个IP地址<ul><li><code>--src-range [ip-ip]</code>源地址</li><li><code>--dst-range [ip-ip]</code>目的地址</li></ul></li></ul><blockquote><p><strong>允许<code>Windows</code>和<code>node5</code>主机<code>ping</code>通服务器</strong></p></blockquote><h5 id="添加规则-2"><a href="#添加规则-2" class="headerlink" title="添加规则"></a>添加规则</h5><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT -m iprange --src-range 192.168.140.1-192.168.140.15 -d 192.168.140.14 -p icmp --icmp-type 8 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><pre class="line-numbers language-none"><code class="language-none">C:\Users\wangshengjj&gt;ping 192.168.140.14正在 Ping 192.168.140.14 具有 32 字节的数据:来自 192.168.140.14 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.140.14 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# ping 192.168.140.14PING 192.168.140.14 (192.168.140.14) 56(84) bytes of data.64 bytes from 192.168.140.14: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.157 ms64 bytes from 192.168.140.14: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.180 ms64 bytes from 192.168.140.14: icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.212 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-state状态模块"><a href="#C-state状态模块" class="headerlink" title="C.state状态模块"></a>C.<code>state</code>状态模块</h4><ul><li><code>--state</code></li><li><code>NEW</code><ul><li>首次访问</li></ul></li><li><code>ESTABLISHED</code><ul><li>服务后续所有访问 </li><li>响应数据</li></ul></li><li><code>RELATED</code>【FTP】<ul><li>相关联的连接</li></ul></li></ul><h5 id="a-首次访问和后续访问"><a href="#a-首次访问和后续访问" class="headerlink" title="a.首次访问和后续访问"></a>a.首次访问和后续访问</h5><h6 id="安装httpd软件并启用"><a href="#安装httpd软件并启用" class="headerlink" title="安装httpd软件并启用"></a>安装<code>httpd</code>软件并启用</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="编写防火墙规则"><a href="#编写防火墙规则" class="headerlink" title="编写防火墙规则"></a>编写防火墙规则</h6><blockquote><p><strong>允许所有客户端首次访问和后续所有访问</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT -d 192.168.140.14 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="Windows测试-2"><a href="#Windows测试-2" class="headerlink" title="Windows测试"></a><code>Windows</code>测试</h6><p><img src="https://www.wsjj.top/upload/2023/05/wall02.png" alt="wall02"></p><h5 id="b-相关联的连接-FTP为例子"><a href="#b-相关联的连接-FTP为例子" class="headerlink" title="b.相关联的连接(FTP为例子)"></a>b.相关联的连接(FTP为例子)</h5><h6 id="安装FTP软件并启用"><a href="#安装FTP软件并启用" class="headerlink" title="安装FTP软件并启用"></a>安装FTP软件并启用</h6><blockquote><p><strong>关于<code>FTP</code>服务教程：<a href="https://www.wsjj.top/archives/61">https://www.wsjj.top/archives/61</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# yum install -y vsftpd[root@node4 ~]# systemctl enable --now vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="随便放几个测试文件"><a href="#随便放几个测试文件" class="headerlink" title="随便放几个测试文件"></a>随便放几个测试文件</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# touch &#x2F;var&#x2F;ftp&#x2F;&#123;1..5&#125;.jpg[root@node4 ~]# touch &#x2F;var&#x2F;ftp&#x2F;&#123;1..5&#125;.mp3[root@node4 ~]# ls &#x2F;var&#x2F;ftp&#x2F;1.jpg  1.mp3  2.jpg  2.mp3  3.jpg  3.mp3  4.jpg  4.mp3  5.jpg  5.mp3  pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="先释放TCP协议21号端口"><a href="#先释放TCP协议21号端口" class="headerlink" title="先释放TCP协议21号端口"></a>先释放<code>TCP</code>协议<code>21</code>号端口</h6><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT -d 192.168.140.14 -p tcp --dport 21 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="使用node5连接FTP服务器"><a href="#使用node5连接FTP服务器" class="headerlink" title="使用node5连接FTP服务器"></a>使用<code>node5</code>连接<code>FTP</code>服务器</h6><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# yum install -y ftp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# ftp 192.168.140.14Connected to 192.168.140.14 (192.168.140.14).220 (vsFTPd 3.0.2)Name (192.168.140.14:root): ftp#默认匿名用户是ftp331 Please specify the password.Password:#没有密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>关于<code>FTP</code>的默认行为</strong><br><strong>使用<code>21</code>号端口传输命令，大于<code>1024</code>以上的随机端口传输数据</strong><br><strong>我们并没有开放相应的端口，所以看不到数据</strong><br><strong>但是开放<code>1024</code>以上的所有端口，并不合理</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">ftp&gt; ls227 Entering Passive Mode (192,168,140,14,199,133).ftp: connect: 连接超时#没有数据的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="回到服务器配置防火墙规则"><a href="#回到服务器配置防火墙规则" class="headerlink" title="回到服务器配置防火墙规则"></a>回到服务器配置防火墙规则</h6><blockquote><p><strong>还是<code>FTP</code>默认行为</strong><br>每<strong>次执行命令后，<code>FTP</code>给我们返回结果的时候，每一次使用的端口都是大于<code>1024</code>以上的随机端口</strong><br><strong>所以除了授权&#x3D;&#x3D;相关连的连接&#x3D;&#x3D;，还要保持&#x3D;&#x3D;后续的连接&#x3D;&#x3D;</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -I INPUT -d 192.168.140.14 -m state --state RELATED,ESTABLISHED -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="临时加载内核模块"><a href="#临时加载内核模块" class="headerlink" title="临时加载内核模块"></a>临时加载内核模块</h6><blockquote><p><strong>没错，放行了相应的规则也不行</strong><br><strong>还需要让<code>Linux</code>系统加载模块</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# modprobe ip_nat_ftp[root@node4 ~]# modprobe ip_conntrack_ftp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="回到node5测试"><a href="#回到node5测试" class="headerlink" title="回到node5测试"></a>回到<code>node5</code>测试</h6><pre class="line-numbers language-none"><code class="language-none">[root@node5 ~]# ftp 192.168.140.14Connected to 192.168.140.14 (192.168.140.14).220 (vsFTPd 3.0.2)Name (192.168.140.14:root): ftp331 Please specify the password.Password:230 Login successful.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这次终于看到了，我们想要的数据</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">ftp&gt; ls227 Entering Passive Mode (192,168,140,14,165,81).150 Here comes the directory listing.-rw-r--r--    1 0        0               0 May 24 12:35 1.jpg-rw-r--r--    1 0        0               0 May 24 12:35 1.mp3-rw-r--r--    1 0        0               0 May 24 12:35 2.jpg-rw-r--r--    1 0        0               0 May 24 12:35 2.mp3-rw-r--r--    1 0        0               0 May 24 12:35 3.jpg-rw-r--r--    1 0        0               0 May 24 12:35 3.mp3-rw-r--r--    1 0        0               0 May 24 12:35 4.jpg-rw-r--r--    1 0        0               0 May 24 12:35 4.mp3-rw-r--r--    1 0        0               0 May 24 12:35 5.jpg-rw-r--r--    1 0        0               0 May 24 12:35 5.mp3drwxr-xr-x    2 0        0               6 Jun 09  2021 pub226 Directory send OK.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-保存、恢复规则"><a href="#6-保存、恢复规则" class="headerlink" title="6.保存、恢复规则"></a>6.保存、恢复规则</h3><blockquote><p><strong>默认防火墙规则都是临时的，重启以后失效</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables-save &gt; &#x2F;opt&#x2F;iptables.rules[root@node4 ~]# iptables-restore &lt; &#x2F;opt&#x2F;iptables.rules <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-修改规则"><a href="#7-修改规则" class="headerlink" title="7.修改规则"></a>7.修改规则</h3><ul><li><code>-R</code>修改规则</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -R INPUT 2 -s 192.168.140.11 -d 192.168.140.14 -p tcp -m multiport --dports 3306,22 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-修改默认规则"><a href="#8-修改默认规则" class="headerlink" title="8.修改默认规则"></a>8.修改默认规则</h3><p><strong><code>-P</code>修改默认规则</strong></p><blockquote><p><strong><code>iptables</code>默认的链规则是允许</strong></p></blockquote><h4 id="A-命令格式-1"><a href="#A-命令格式-1" class="headerlink" title="A.命令格式"></a>A.命令格式</h4><pre class="line-numbers language-none"><code class="language-none">iptables -t &lt;表名&gt; -P &lt;链名&gt; &lt;行为&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="行为-1"><a href="#行为-1" class="headerlink" title="行为"></a>行为</h5><ul><li><code>ACCEPT</code>允许</li><li><code>DROP</code>拒绝</li><li><code>REJECT</code>拒绝</li></ul><h4 id="B-修改默认output链，默认允许改为拒绝"><a href="#B-修改默认output链，默认允许改为拒绝" class="headerlink" title="B.修改默认output链，默认允许改为拒绝"></a>B.修改默认output链，默认允许改为拒绝</h4><blockquote><p><strong>请确保已经添加的<code>SSH</code>出口规则！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -t filter -A OUTPUT -p tcp --sport 22 -j ACCEPT#出口允许22号端口[root@node4 ~]# iptables -P OUTPUT DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-再次查看规则"><a href="#C-再次查看规则" class="headerlink" title="C.再次查看规则"></a>C.再次查看规则</h4><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -nLChain OUTPUT (policy DROP)#这里的默认行为已经变更为拒绝target     prot opt source               destination         ACCEPT     tcp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            tcp spt:22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# ping baidu.comping: baidu.com: 未知的名称或服务#已经断网了[root@node4 ~]# ping 114.114.114.114PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.ping: sendmsg: 不允许的操作ping: sendmsg: 不允许的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-恢复默认允许策略"><a href="#D-恢复默认允许策略" class="headerlink" title="D.恢复默认允许策略"></a>D.恢复默认允许策略</h4><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# iptables -P OUTPUT ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、NAT表管理"><a href="#五、NAT表管理" class="headerlink" title="五、NAT表管理"></a>五、NAT表管理</h2><h3 id="1-NAT的工作原理"><a href="#1-NAT的工作原理" class="headerlink" title="1.NAT的工作原理"></a>1.<code>NAT</code>的工作原理</h3><p><img src="https://www.wsjj.top/upload/2023/05/wall03.png" alt="wall03"></p><ul><li>转换源<code>IP</code>地址<ul><li><code>-j SNAT --to-source &lt;公网地址&gt;</code></li><li><code>-j MASQUERADE</code></li></ul></li><li>转换目的<code>IP</code>地址<ul><li><code>-j DNAT --to-destination &lt;内网地址&gt;</code></li></ul></li></ul><h3 id="2-SNAT源地址转换"><a href="#2-SNAT源地址转换" class="headerlink" title="2.SNAT源地址转换"></a>2.<code>SNAT</code>源地址转换</h3><blockquote><p><strong>作用: 普通主机可以访问互联网</strong><br><strong>正常，&#x3D;&#x3D;内网IP&#x3D;&#x3D;是无法直接&#x3D;&#x3D;访问互联网&#x3D;&#x3D;的，都是通过<code>NAT</code>的网络地址转换技术，把我们的&#x3D;&#x3D;内网IP&#x3D;&#x3D;地址临时转换成&#x3D;&#x3D;公网IP&#x3D;&#x3D;。</strong><br><strong>这一点，有点像家用的路由器一样，它会自动的把我们的内网<code>IP</code>转换成拨号上号的那个公网<code>IP</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/wall04.png" alt="wall04"></p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><table><thead><tr><th>主机名</th><th>IP地址</th><th>作用</th></tr></thead><tbody><tr><td>client.linux.com</td><td>192.168.233.10</td><td>模拟客户端</td></tr><tr><td>nat.linux.com</td><td>192.168.233.100、30.30.30.128</td><td>模拟NAT</td></tr><tr><td>server.linux.com</td><td>30.30.30.10</td><td>模拟公网服务器</td></tr></tbody></table><blockquote><p><strong>在配置之前，请提前准备好<code>httpd</code>的服务</strong></p></blockquote><h5 id="A-先给NAT主机添加一块网卡"><a href="#A-先给NAT主机添加一块网卡" class="headerlink" title="A.先给NAT主机添加一块网卡"></a>A.先给NAT主机添加一块网卡</h5><p><img src="https://www.wsjj.top/upload/2023/05/wall05.png" alt="wall05"></p><h5 id="B-修改另外2台主机的网卡"><a href="#B-修改另外2台主机的网卡" class="headerlink" title="B.修改另外2台主机的网卡"></a>B.修改另外2台主机的网卡</h5><p><img src="https://www.wsjj.top/upload/2023/05/wall06.png" alt="wall06"></p><p><img src="https://www.wsjj.top/upload/2023/05/wall07.png" alt="wall07"></p><h5 id="C-配置IP地址和网关地址"><a href="#C-配置IP地址和网关地址" class="headerlink" title="C.配置IP地址和网关地址"></a>C.配置IP地址和网关地址</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.233.10NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.233.100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.233.100#NETMASK&#x3D;255.255.255.0#GATEWAY&#x3D;192.168.140.2#DNS1&#x3D;114.114.114.114#DNS2&#x3D;8.8.8.8[root@nat ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens36TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;30.30.30.128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;30.30.30.10NETMASK&#x3D;255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="D-在服务器上发布测试网页"><a href="#D-在服务器上发布测试网页" class="headerlink" title="D.在服务器上发布测试网页"></a>D.在服务器上发布测试网页</h5><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# rm -rf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# echo &quot;&lt;h1&gt;30.30.30.10 webserver&lt;&#x2F;h1&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="E-配置NAT"><a href="#E-配置NAT" class="headerlink" title="E.配置NAT"></a>E.配置NAT</h5><blockquote><p><strong>先修改内核参数，开启路由地址转发功能</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# sed -ri &#39;$a \net.ipv4.ip_forward &#x3D; 1&#39; &#x2F;etc&#x2F;sysctl.conf[root@nat ~]# sysctl -pnet.ipv4.ip_forward &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="添加到规则到防火墙"><a href="#添加到规则到防火墙" class="headerlink" title="添加到规则到防火墙"></a>添加到规则到防火墙</h6><blockquote><p><strong>指定网段的所有请求，都会被<code>NAT</code>转换成<code>Wan</code>口的<code>IP</code>也就是<code>30.30.30.128</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# iptables -t nat -A POSTROUTING -s 192.168.233.0&#x2F;24 -j SNAT --to-source 30.30.30.128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>或</strong></p><blockquote><p><strong>指定网段的所有请求，都会被<code>NAT</code>自动转换成<code>Wan</code>口的<code>IP</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# iptables -t nat -A POSTROUTING -s 192.168.233.0&#x2F;24 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# iptables -t nat -nL -vChain PREROUTING (policy ACCEPT 5 packets, 300 bytes) pkts bytes target     prot opt in     out     source               destination         Chain INPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination             5   300 MASQUERADE  all  --  *      *       192.168.233.0&#x2F;24     0.0.0.0&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="F-客户端测试访问"><a href="#F-客户端测试访问" class="headerlink" title="F.客户端测试访问"></a>F.客户端测试访问</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# curl 30.30.30.10&lt;h1&gt;30.30.30.10 webserver&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>可以查看<code>server</code>端的访问日志</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# tail -f &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log30.30.30.128 - - [29&#x2F;May&#x2F;2023:14:18:35 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;30.30.30.128 - - [29&#x2F;May&#x2F;2023:14:20:50 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;30.30.30.128 - - [29&#x2F;May&#x2F;2023:14:20:50 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;30.30.30.128 - - [29&#x2F;May&#x2F;2023:14:20:51 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;30.30.30.128 - - [29&#x2F;May&#x2F;2023:14:20:52 +0800] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 31 &quot;-&quot; &quot;curl&#x2F;7.29.0&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这个<code>IP</code>很明显是<code>NAT</code>上的<code>wan</code>口<code>IP</code>，相对于<code>client</code>端就是他的公网<code>IP</code></strong></p></blockquote><h3 id="3-DNAT发布服务-端口映射"><a href="#3-DNAT发布服务-端口映射" class="headerlink" title="3.DNAT发布服务(端口映射)"></a>3.<code>DNAT</code>发布服务(端口映射)</h3><p><img src="https://www.wsjj.top/upload/2023/05/wall08.png" alt="wall08"></p><h4 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h4><blockquote><p><strong>模拟公网客户端，访问内网的服务器</strong><br><strong>注意：<code>NAT</code>上面<code>wan口</code>绑定的<code>IP</code>必须是<code>公网IP</code></strong><br><strong>端口映射的端口不可以冲突！</strong></p></blockquote><table><thead><tr><th>主机名</th><th>IP地址</th><th>作用</th></tr></thead><tbody><tr><td>server.linux.com</td><td>192.168.233.10</td><td>模拟服务端</td></tr><tr><td>nat.linux.com</td><td>192.168.233.100、30.30.30.128</td><td>模拟NAT</td></tr><tr><td>client.linux.com</td><td>30.30.30.10</td><td>模拟客户端</td></tr></tbody></table><h5 id="A-服务端发布测试页面"><a href="#A-服务端发布测试页面" class="headerlink" title="A.服务端发布测试页面"></a>A.服务端发布测试页面</h5><pre class="line-numbers language-none"><code class="language-none">[root@client ~]# rm -rf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf[root@client ~]# echo &quot;192.168.233.10 webserver&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html[root@client ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="B-公网客户端测试"><a href="#B-公网客户端测试" class="headerlink" title="B.公网客户端测试"></a>B.公网客户端测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# curl 30.30.30.128#这是正常现象，我们还没有做端口映射curl: (7) Failed connect to 30.30.30.128:80; 拒绝连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="C-回到NAT服务器，配置防火墙策略"><a href="#C-回到NAT服务器，配置防火墙策略" class="headerlink" title="C.回到NAT服务器，配置防火墙策略"></a>C.回到NAT服务器，配置防火墙策略</h5><blockquote><p><strong>把内网<code>192.168.233.10</code>上的<code>80</code>端口，映射到公网<code>30.30.30.128</code>的<code>8080</code>端口</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@nat ~]# iptables -t nat -I PREROUTING -d 30.30.30.128 -p tcp --dport 8080 -j DNAT --to-destination 192.168.233.10:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="D-再次测试"><a href="#D-再次测试" class="headerlink" title="D.再次测试"></a>D.再次测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# curl 30.30.30.128:8080#这次访问正常了192.168.233.10 webserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Linux安全 </category>
          
          <category> 防火墙 </category>
          
          <category> iptables防火墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> centos7 </tag>
            
            <tag> iptables </tag>
            
            <tag> linux防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux安全系列教程】sudo授权机制</title>
      <link href="/2023/05/24/123/"/>
      <url>/2023/05/24/123/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux安全系列教程】sudo授权机制"><a href="#【Linux安全系列教程】sudo授权机制" class="headerlink" title="【Linux安全系列教程】sudo授权机制"></a>【Linux安全系列教程】sudo授权机制</h1><h2 id="一、关于sudo授权"><a href="#一、关于sudo授权" class="headerlink" title="一、关于sudo授权"></a>一、关于sudo授权</h2><ul><li>作用<ul><li>为普通用户授权，允许普通用户执行特权命令</li></ul></li><li>配置文件<code>/etc/sudoers </code></li><li>建议<code>visudo</code>命令进行修改</li></ul><h2 id="二、针对单个用户授权"><a href="#二、针对单个用户授权" class="headerlink" title="二、针对单个用户授权"></a>二、针对单个用户授权</h2><blockquote><p><strong>使用<code>visudo</code>命令</strong></p></blockquote><h3 id="1-配置文件语法"><a href="#1-配置文件语法" class="headerlink" title="1.配置文件语法"></a>1.配置文件语法</h3><pre class="line-numbers language-none"><code class="language-none">user    MACHINE&#x3D;COMMANDS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-针对单个用户授权"><a href="#2-针对单个用户授权" class="headerlink" title="2.针对单个用户授权"></a>2.针对单个用户授权</h3><blockquote><p><strong>需要系统中存在这个用户</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">martin  ALL&#x3D;&#x2F;usr&#x2F;sbin&#x2F;fdisk,&#x2F;usr&#x2F;bin&#x2F;chmod#用户  主机名&#x3D;授权的命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="用户使用"><a href="#用户使用" class="headerlink" title="用户使用"></a>用户使用</h4><blockquote><p><strong><code>$</code>代表普通用户，<code>#</code>代表管理员用户</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">$ sudo chmod$ sudo fdisk 硬盘名#普通用户在使用授权命令的时候，要使用sudo授权<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="普通用户在进行sudo授权的时候，需要密码认证"><a href="#普通用户在进行sudo授权的时候，需要密码认证" class="headerlink" title="普通用户在进行sudo授权的时候，需要密码认证"></a>普通用户在进行sudo授权的时候，需要密码认证</h4><pre class="line-numbers language-none"><code class="language-none">[martin@localhost ~]$ sudo fdisk &#x2F;dev&#x2F;sda We trust you have received the usual lecture from the local SystemAdministrator. It usually boils down to these three things:    #1) Respect the privacy of others.    #2) Think before you type.    #3) With great power comes great responsibility.[sudo] password for martin: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tail &#x2F;var&#x2F;log&#x2F;secure Nov 10 15:25:24 localhost sudo:  martin : TTY&#x3D;pts&#x2F;0 ; PWD&#x3D;&#x2F;home&#x2F;martin ; USER&#x3D;root ; COMMAND&#x3D;&#x2F;sbin&#x2F;fdisk &#x2F;dev&#x2F;sdaNov 10 15:28:00 localhost sudo:  martin : command not allowed ; TTY&#x3D;pts&#x2F;0 ; PWD&#x3D;&#x2F;home&#x2F;martin ; USER&#x3D;root ; COMMAND&#x3D;&#x2F;bin&#x2F;tail &#x2F;var&#x2F;log&#x2F;secureNov 10 15:29:20 localhost sudo:  martin : command not allowed ; TTY&#x3D;pts&#x2F;1 ; PWD&#x3D;&#x2F;home&#x2F;martin ; USER&#x3D;root ; COMMAND&#x3D;&#x2F;bin&#x2F;rm -rf &#x2F;tmp&#x2F;aa &#x2F;tmp&#x2F;vmware-root_6217-1681724356<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-取消密码认证"><a href="#2-取消密码认证" class="headerlink" title="2.取消密码认证"></a>2.取消密码认证</h3><blockquote><p><strong>普通用户在<code>sudo</code>授权的时候，需要输入密码认证</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">robin   ALL&#x3D;NOPASSWD:&#x2F;usr&#x2F;sbin&#x2F;fdisk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-禁用敏感命令"><a href="#3-禁用敏感命令" class="headerlink" title="3.禁用敏感命令"></a>3.禁用敏感命令</h3><blockquote><p><strong>允许用户使用所有命令，除了<code>rm</code>命令</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">robin   ALL&#x3D;NOPASSWD:ALL,!&#x2F;usr&#x2F;bin&#x2F;rm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、针对用户组授权"><a href="#三、针对用户组授权" class="headerlink" title="三、针对用户组授权"></a>三、针对用户组授权</h2><h3 id="1-格式"><a href="#1-格式" class="headerlink" title="1.格式"></a>1.格式</h3><pre class="line-numbers language-none"><code class="language-none">%用户组    主机名&#x3D;命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-允许技术组的用户使用所有命令，除了rm命令，并且关闭密码认证"><a href="#2-允许技术组的用户使用所有命令，除了rm命令，并且关闭密码认证" class="headerlink" title="2.允许技术组的用户使用所有命令，除了rm命令，并且关闭密码认证"></a>2.允许技术组的用户使用所有命令，除了rm命令，并且关闭密码认证</h3><pre class="line-numbers language-none"><code class="language-none">%jishu    ALL&#x3D;NOPASSWD:ALL,!&#x2F;usr&#x2F;bin&#x2F;rm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Centos7默认的安全机制"><a href="#3-Centos7默认的安全机制" class="headerlink" title="3.Centos7默认的安全机制"></a>3.Centos7默认的安全机制</h3><blockquote><p><strong>建议注释掉<code>wheel</code>组，这个组是<code>Centos7</code>默认自带的，并且这个组默认所有命令都有权限</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># %wheel        ALL&#x3D;(ALL)       ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、基于命令别名授权"><a href="#四、基于命令别名授权" class="headerlink" title="四、基于命令别名授权"></a>四、基于命令别名授权</h2><h3 id="1-格式-1"><a href="#1-格式-1" class="headerlink" title="1.格式"></a>1.格式</h3><pre class="line-numbers language-none"><code class="language-none">%用户名&#x2F;组名  主机名&#x3D;命令别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-默认的命令别名"><a href="#2-默认的命令别名" class="headerlink" title="2.默认的命令别名"></a>2.默认的命令别名</h3><blockquote><p><strong>系统默认在配置文件中，准备了一些样例</strong><br><strong>这些默认都是注释掉的</strong><br><strong>当我们想调用哪个命令别名，先删除注释</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">## Networking# Cmnd_Alias NETWORKING &#x3D; &#x2F;sbin&#x2F;route, &#x2F;sbin&#x2F;ifconfig, &#x2F;bin&#x2F;ping, &#x2F;sbin&#x2F;dhclient, &#x2F;usr&#x2F;bin&#x2F;net, &#x2F;sbin&#x2F;iptables, &#x2F;usr&#x2F;bin&#x2F;rfcomm, &#x2F;usr&#x2F;bin&#x2F;wvdial, &#x2F;sbin&#x2F;iwconfig, &#x2F;sbin&#x2F;mii-tool## Installation and management of software# Cmnd_Alias SOFTWARE &#x3D; &#x2F;bin&#x2F;rpm, &#x2F;usr&#x2F;bin&#x2F;up2date, &#x2F;usr&#x2F;bin&#x2F;yum## Services# Cmnd_Alias SERVICES &#x3D; &#x2F;sbin&#x2F;service, &#x2F;sbin&#x2F;chkconfig, &#x2F;usr&#x2F;bin&#x2F;systemctl start, &#x2F;usr&#x2F;bin&#x2F;systemctl stop, &#x2F;usr&#x2F;bin&#x2F;systemctl reload, &#x2F;usr&#x2F;bin&#x2F;systemctl restart, &#x2F;usr&#x2F;bin&#x2F;systemctl status, &#x2F;usr&#x2F;bin&#x2F;systemctl enable, &#x2F;usr&#x2F;bin&#x2F;systemctl disable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-命令别名的使用"><a href="#3-命令别名的使用" class="headerlink" title="3.命令别名的使用"></a>3.命令别名的使用</h3><blockquote><p><strong>例：我想让<code>wsjj</code>用户对<code>NETWORKING</code>&#x3D;&#x3D;命令别名&#x3D;&#x3D;里的命令拥有权限</strong></p></blockquote><h4 id="先删除注释"><a href="#先删除注释" class="headerlink" title="先删除注释"></a>先删除注释</h4><pre class="line-numbers language-none"><code class="language-none">Cmnd_Alias NETWORKING &#x3D; &#x2F;sbin&#x2F;route, &#x2F;sbin&#x2F;ifconfig, &#x2F;bin&#x2F;ping, &#x2F;sbin&#x2F;dhclient, &#x2F;usr&#x2F;bin&#x2F;net, &#x2F;sbin&#x2F;iptables, &#x2F;usr&#x2F;bin&#x2F;rfcomm, &#x2F;usr&#x2F;bin&#x2F;wvdial, &#x2F;sbin&#x2F;iwconfig, &#x2F;sbin&#x2F;mii-tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="再写具体的授权操作"><a href="#再写具体的授权操作" class="headerlink" title="再写具体的授权操作"></a>再写具体的授权操作</h4><pre class="line-numbers language-none"><code class="language-none">wsjj    ALL&#x3D;NOPASSWD:NETWORKING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>或者技术组也拥有同样的权限</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">%jishu    ALL&#x3D;NOPASSWD:NETWORKING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>再或者，授权多条命令别名</strong><br><strong>在授权之前，别忘了删除相应的注释</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">%jishu    ALL&#x3D;NOPASSWD:NETWORKING,SOFTWARE,SERVICES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-也可以自己定义一个命令别名"><a href="#4-也可以自己定义一个命令别名" class="headerlink" title="4.也可以自己定义一个命令别名"></a>4.也可以自己定义一个命令别名</h3><pre class="line-numbers language-none"><code class="language-none">Cmnd_Alias WANGLUO &#x3D; &#x2F;sbin&#x2F;route, &#x2F;sbin&#x2F;ifconfig, &#x2F;bin&#x2F;ping, &#x2F;sbin&#x2F;dhclient, &#x2F;usr&#x2F;bin&#x2F;net, &#x2F;sbin&#x2F;iptables,&#x2F;usr&#x2F;bin&#x2F;netstat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wsjj    ALL&#x3D;WANGLUO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、sudo授权的使用"><a href="#五、sudo授权的使用" class="headerlink" title="五、sudo授权的使用"></a>五、sudo授权的使用</h2><h3 id="1-单条命令"><a href="#1-单条命令" class="headerlink" title="1.单条命令"></a>1.单条命令</h3><pre class="line-numbers language-none"><code class="language-none">$ sudo 命令 操作<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-临时获取root用户权限-不建议使用"><a href="#2-临时获取root用户权限-不建议使用" class="headerlink" title="2.临时获取root用户权限(不建议使用)"></a>2.临时获取<code>root</code>用户权限(不建议使用)</h3><blockquote><p><strong>必须输入用户密码，无密码用户无法使用</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">$ sudo -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> Linux安全 </category>
          
          <category> sudo授权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> centos7 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> sudo </tag>
            
            <tag> linux安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linus应用系列教程】ELK统一日志分析</title>
      <link href="/2023/05/23/122/"/>
      <url>/2023/05/23/122/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linus应用系列教程】ELK统一日志分析"><a href="#【Linus应用系列教程】ELK统一日志分析" class="headerlink" title="【Linus应用系列教程】ELK统一日志分析"></a>【Linus应用系列教程】ELK统一日志分析</h1><h2 id="一、ELK核心组件介绍"><a href="#一、ELK核心组件介绍" class="headerlink" title="一、ELK核心组件介绍"></a>一、ELK核心组件介绍</h2><ul><li><code>Elasticsearch/ES</code><ul><li>分布式搜索引擎、存储引擎</li><li>作用: 提供存储日志、搜索日志</li></ul></li><li><code>Logstash</code><ul><li>日志过滤器</li><li>根据特定的条件筛选日志</li></ul></li><li><code>Kibana</code><ul><li>提供<code>web UI</code>界面</li></ul></li><li><code>beats</code><ul><li>基于<code>golang</code>语言开发 </li><li>日志搜集器<ul><li><code>filebeat</code><ul><li>适用于搜集应用程序的日志</li></ul></li><li><code>topbeat</code><ul><li>适用于搜集系统级别的日志</li></ul></li><li><code>winlogbeat</code><ul><li>适用于搜集windows服务器的日志</li></ul></li><li><code>packetbeat</code><ul><li>适用于搜集网络设备的日志</li></ul></li></ul></li></ul></li></ul><p><img src="https://www.wsjj.top/upload/2023/05/elk01.png" alt="elk01"></p><h2 id="二、部署Elasticsearch"><a href="#二、部署Elasticsearch" class="headerlink" title="二、部署Elasticsearch"></a>二、部署Elasticsearch</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><blockquote><p><strong>为了防止遇到奇奇怪怪的<code>BUG</code>，请务必增加<code>master</code>节点的配置！</strong></p></blockquote><table><thead><tr><th>主机名</th><th>IP地址</th><th>安装的软件</th><th>推荐配置</th></tr></thead><tbody><tr><td>es-master.linux.com</td><td>192.168.140.10</td><td>jdk15、elasticsearch、kibana、logstash</td><td>2c4g</td></tr><tr><td>es-node1.linux.com</td><td>192.168.140.11</td><td>jdk15、elasticsearch</td><td>2c4g</td></tr><tr><td>es-node2.linux.com</td><td>192.168.140.12</td><td>jdk15、elasticsearch</td><td>2c4g</td></tr><tr><td>webserver.linux.com</td><td>192.168.140.13</td><td>httpd、filebeat</td><td>1c2g</td></tr></tbody></table><h3 id="2-四台主机关闭防火墙和SElinux、配置时间同步"><a href="#2-四台主机关闭防火墙和SElinux、配置时间同步" class="headerlink" title="2.四台主机关闭防火墙和SElinux、配置时间同步"></a>2.四台主机关闭防火墙和SElinux、配置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="3-配置免密SSH"><a href="#3-配置免密SSH" class="headerlink" title="3.配置免密SSH"></a>3.配置免密SSH</h3><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# ssh-copy-id root@192.168.140.11[root@es-master ~]# ssh-copy-id root@192.168.140.12[root@es-master ~]# ssh-copy-id root@192.168.140.13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-配置主机名解析"><a href="#4-配置主机名解析" class="headerlink" title="4.配置主机名解析"></a>4.配置主机名解析</h3><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.10 es-master.linux.com es-master192.168.140.11 es-node1.linux.com es-node1192.168.140.12 es-node2.linux.com es-node2192.168.140.13 webserver.linux.com webserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把hosts文件拷贝给其他机器"><a href="#把hosts文件拷贝给其他机器" class="headerlink" title="把hosts文件拷贝给其他机器"></a>把<code>hosts</code>文件拷贝给其他机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# for i in 11 12 13&gt; do&gt; scp &#x2F;etc&#x2F;hosts root@192.168.140.$i:&#x2F;etc&#x2F;&gt; donehosts                                                     100%  334   288.0KB&#x2F;s   00:00    hosts                                                     100%  334   225.5KB&#x2F;s   00:00    hosts                                                     100%  334   318.0KB&#x2F;s   00:00 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-在三台ES节点安装jdk15"><a href="#5-在三台ES节点安装jdk15" class="headerlink" title="5.在三台ES节点安装jdk15"></a>5.在三台ES节点安装jdk15</h3><h4 id="A-下载jdk15"><a href="#A-下载jdk15" class="headerlink" title="A.下载jdk15"></a>A.下载<code>jdk15</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# wget https:&#x2F;&#x2F;d6.injdk.cn&#x2F;openjdk&#x2F;openjdk&#x2F;15&#x2F;openjdk-15.0.2_linux-x64_bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-解压jdk15"><a href="#B-解压jdk15" class="headerlink" title="B.解压jdk15"></a>B.解压<code>jdk15</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# tar xf openjdk-15.0.2_linux-x64_bin.tar.gz -C &#x2F;usr&#x2F;local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-配置环境"><a href="#C-配置环境" class="headerlink" title="C.配置环境"></a>C.配置环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# vim &#x2F;etc&#x2F;profile#在文件末尾添加以下内容export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk-15.0.2export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# java -versionopenjdk version &quot;15.0.2&quot; 2021-01-19OpenJDK Runtime Environment (build 15.0.2+7-27)OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-拷贝jdk环境给另外两台ES节点"><a href="#D-拷贝jdk环境给另外两台ES节点" class="headerlink" title="D.拷贝jdk环境给另外两台ES节点"></a>D.拷贝jdk环境给另外两台ES节点</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# for i in 11 12&gt; do&gt; scp -r &#x2F;usr&#x2F;local&#x2F;jdk-15.0.2&#x2F; root@192.168.140.$i:&#x2F;usr&#x2F;local&#x2F;&gt; scp -r &#x2F;etc&#x2F;profile root@192.168.140.$i:&#x2F;etc&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-让环境生效，并测试jdk环境"><a href="#E-让环境生效，并测试jdk环境" class="headerlink" title="E.让环境生效，并测试jdk环境"></a>E.让环境生效，并测试<code>jdk</code>环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-node1 ~]# source &#x2F;etc&#x2F;profile[root@es-node1 ~]# java -versionopenjdk version &quot;15.0.2&quot; 2021-01-19OpenJDK Runtime Environment (build 15.0.2+7-27)OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@es-node2 ~]# source &#x2F;etc&#x2F;profile[root@es-node2 ~]# java -versionopenjdk version &quot;15.0.2&quot; 2021-01-19OpenJDK Runtime Environment (build 15.0.2+7-27)OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-三个ES节点优化系统参数"><a href="#6-三个ES节点优化系统参数" class="headerlink" title="6.三个ES节点优化系统参数"></a>6.三个ES节点优化系统参数</h3><h4 id="A-修改系统文件限制和进程限制"><a href="#A-修改系统文件限制和进程限制" class="headerlink" title="A.修改系统文件限制和进程限制"></a>A.修改系统文件限制和进程限制</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# vim &#x2F;etc&#x2F;security&#x2F;limits.conf#在文件末尾添加以下内容* soft nofile 65536* hard nofile 65536* soft noproc 2048* hard noproc 4096<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>*</code>是所有用户</strong><br><strong><code>* soft nofile 65536</code>软限制系统最大打开文件数<code>65536</code></strong><br><strong><code>* hard nofile 65536</code>硬限制系统最大打开文件数<code>65536</code></strong><br><strong><code>* soft noproc 2048</code>软限制系统最大进程数<code>2048</code></strong><br><strong><code>* hard noproc 4096</code>硬限制系统最大进程数<code>4096</code></strong></p></blockquote><h4 id="B-修改系统内存限制和文件限制"><a href="#B-修改系统内存限制和文件限制" class="headerlink" title="B.修改系统内存限制和文件限制"></a>B.修改系统内存限制和文件限制</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# vim &#x2F;etc&#x2F;sysctl.confvm.max_map_count&#x3D;262144fs.file-max&#x3D;655360<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>vm.max_map_count=262144</code>内存最大映射数<code>262144</code></strong><br><strong><code>fs.file-max=655360</code>文件系统最大文件数<code>655360</code></strong></p></blockquote><h4 id="C-让配置生效"><a href="#C-让配置生效" class="headerlink" title="C.让配置生效"></a>C.让配置生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# sysctl -pvm.max_map_count &#x3D; 262144fs.file-max &#x3D; 655360<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="D-把修改好的文件拷贝给另外两台ES节点"><a href="#D-把修改好的文件拷贝给另外两台ES节点" class="headerlink" title="D.把修改好的文件拷贝给另外两台ES节点"></a>D.把修改好的文件拷贝给另外两台<code>ES</code>节点</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# for i in 11 12&gt; do&gt; scp -r &#x2F;etc&#x2F;security&#x2F;limits.conf root@192.168.140.$i:&#x2F;etc&#x2F;security&#x2F;&gt; scp -r &#x2F;etc&#x2F;sysctl.conf root@192.168.140.$i:&#x2F;etc&#x2F;&gt; ssh root@192.168.140.$i sysctl -p&gt; donelimits.conf                                                                           100% 2500   560.5KB&#x2F;s   00:00    sysctl.conf                                                                           100%  492   430.9KB&#x2F;s   00:00    vm.max_map_count &#x3D; 262144fs.file-max &#x3D; 655360limits.conf                                                                           100% 2500     3.1MB&#x2F;s   00:00    sysctl.conf                                                                           100%  492   148.7KB&#x2F;s   00:00    vm.max_map_count &#x3D; 262144fs.file-max &#x3D; 655360<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-创建elk用户"><a href="#7-创建elk用户" class="headerlink" title="7.创建elk用户"></a>7.创建elk用户</h3><blockquote><p><strong>因为<code>elk</code>启动的时候需要&#x3D;&#x3D;普通用户&#x3D;&#x3D;</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i useradd elk&gt; ssh root@192.168.140.$i id elk&gt; doneuid&#x3D;1001(elk) gid&#x3D;1001(elk) 组&#x3D;1001(elk)uid&#x3D;1001(elk) gid&#x3D;1001(elk) 组&#x3D;1001(elk)uid&#x3D;1001(elk) gid&#x3D;1001(elk) 组&#x3D;1001(elk)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-准备httpd服务器"><a href="#8-准备httpd服务器" class="headerlink" title="8.准备httpd服务器"></a>8.准备httpd服务器</h3><blockquote><p><strong>提前准备好<code>httpd</code>服务器，方便后续日志收集</strong><br><strong>关于<code>httpd(Apache)</code>搭建教程：<a href="https://www.wsjj.top/archives/69">https://www.wsjj.top/archives/69</a></strong></p></blockquote><h4 id="A-前往webserver配置"><a href="#A-前往webserver配置" class="headerlink" title="A.前往webserver配置"></a>A.前往<code>webserver</code>配置</h4><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-创建测试页面"><a href="#B-创建测试页面" class="headerlink" title="B.创建测试页面"></a>B.创建测试页面</h4><h5 id="删除默认的页面"><a href="#删除默认的页面" class="headerlink" title="删除默认的页面"></a>删除默认的页面</h5><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# rm -rf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="创建测试页面"><a href="#创建测试页面" class="headerlink" title="创建测试页面"></a>创建测试页面</h5><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;webserver.linux.com&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;music.html&lt;h1&gt;music&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="启动服务，并测试"><a href="#启动服务，并测试" class="headerlink" title="启动服务，并测试"></a>启动服务，并测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/elk02.png" alt="elk02"></p><p><img src="https://www.wsjj.top/upload/2023/05/elk03.png" alt="elk03"></p><h3 id="9-回到es-master节点规划软件安装目录"><a href="#9-回到es-master节点规划软件安装目录" class="headerlink" title="9.回到es-master节点规划软件安装目录"></a>9.回到<code>es-master</code>节点规划软件安装目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i mkdir -p &#x2F;app&#x2F;elk&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-下载需要的软件包"><a href="#10-下载需要的软件包" class="headerlink" title="10.下载需要的软件包"></a>10.下载需要的软件包</h3><h4 id="A-下载软件包"><a href="#A-下载软件包" class="headerlink" title="A.下载软件包"></a>A.下载软件包</h4><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-7.17.10-linux-x86_64.tar.gz[root@es-master ~]# wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;kibana&#x2F;kibana-7.17.10-linux-x86_64.tar.gz[root@es-master ~]# wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;logstash&#x2F;logstash-7.17.10-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-解压软件"><a href="#B-解压软件" class="headerlink" title="B.解压软件"></a>B.解压软件</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# tar xf elasticsearch-7.17.10-linux-x86_64.tar.gz -C &#x2F;app&#x2F;elk&#x2F;[root@es-master ~]# tar xf kibana-7.17.10-linux-x86_64.tar.gz -C &#x2F;app&#x2F;elk&#x2F;[root@es-master ~]# tar xf logstash-7.17.10-linux-x86_64.tar.gz -C &#x2F;app&#x2F;elk&#x2F;[root@es-master ~]# ls &#x2F;app&#x2F;elkelasticsearch-7.17.10  kibana-7.17.10-linux-x86_64  logstash-7.17.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-修改目录权限"><a href="#C-修改目录权限" class="headerlink" title="C.修改目录权限"></a>C.修改目录权限</h4><blockquote><p><strong>因为<code>elk</code>启动的时候需要普通用户，这个用户必须对目录拥有权限</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# chown -R elk.elk &#x2F;app&#x2F;elk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-拷贝软件给另外两台ES节点"><a href="#D-拷贝软件给另外两台ES节点" class="headerlink" title="D.拷贝软件给另外两台ES节点"></a>D.拷贝软件给另外两台<code>ES</code>节点</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# rsync -av &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F; root@192.168.140.11:&#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10[root@es-master ~]# rsync -av &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F; root@192.168.140.12:&#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-配置ES集群"><a href="#11-配置ES集群" class="headerlink" title="11.配置ES集群"></a>11.配置ES集群</h3><h4 id="A-必要的准备"><a href="#A-必要的准备" class="headerlink" title="A.必要的准备"></a>A.必要的准备</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# su - elk#建议使用普通用户操作<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h5><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ mkdir &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-|备份配置文件" data-language="|备份配置文件"><code class="language-|备份配置文件">[elk@es-master ~]$ cp &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;config&#x2F;elasticsearch.yml &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;config&#x2F;elasticsearch.yml.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-修改配置文件"><a href="#B-修改配置文件" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><h5 id="修改主节点配置文件"><a href="#修改主节点配置文件" class="headerlink" title="修改主节点配置文件"></a>修改主节点配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ vim &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;config&#x2F;elasticsearch.yml#配置文件并不完整，仅展示修改的部分cluster.name: es#集群名字node.name: es-master#节点名字，建议和主机名一致path.data: &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;data#指定数据目录path.logs: &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;logs#指定日志存放目录network.host: 192.168.140.10#监听地址，本机IPhttp.port: 9200#监听端口，保持默认即可transport.tcp.port: 9300#指定集群之间的通信端口，此行需要自行添加discovery.seed_hosts: [&quot;192.168.140.10:9300&quot;, &quot;192.168.140.11:9300&quot;,&quot;192.168.140.12:9300&quot;]#指定集群节点cluster.initial_master_nodes: [&quot;192.168.140.10:9300&quot;]#指定集群主节点#以下内容配置文件中没有，请自行在文件末尾添加node.master: truenode.data: truenode.ingest: falsenode.ml: falsecluster.remote.connect: falsehttp.cors.enabled: truehttp.cors.allow-origin: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="关于节点类型说明："><a href="#关于节点类型说明：" class="headerlink" title="关于节点类型说明："></a>关于节点类型说明：</h5><ul><li><code>Master node</code><ul><li>负责集群自身的管理操作；例如创建索引、添加节点、删除节点</li><li><code>node.master: true</code></li></ul></li><li><code>Data node</code><ul><li>负责数据读写</li><li>建议实际部署时，使用高内存、高硬盘的服务器</li><li><code>node.data: true</code></li></ul></li><li><code>Ingest node</code><ul><li>预处理节点</li><li>负责数据预处理(解密、压缩、格式转换)</li></ul></li><li><code>Client node</code><ul><li>负责路由用户的操作请求</li><li><code>node.master: false</code></li><li><code>node.data: false</code></li></ul></li></ul><h4 id="C-拷贝主配置文件给另外两个ES节点"><a href="#C-拷贝主配置文件给另外两个ES节点" class="headerlink" title="C.拷贝主配置文件给另外两个ES节点"></a>C.拷贝主配置文件给另外两个<code>ES</code>节点</h4><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ exit登出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# rsync -av &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F; root@192.168.140.11:&#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10[root@es-master ~]# rsync -av &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F; root@192.168.140.12:&#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-修改另外2个ES节点的配置文件"><a href="#D-修改另外2个ES节点的配置文件" class="headerlink" title="D.修改另外2个ES节点的配置文件"></a>D.修改另外<code>2</code>个<code>ES</code>节点的配置文件</h4><h5 id="es-node1-linux-com"><a href="#es-node1-linux-com" class="headerlink" title="es-node1.linux.com"></a><code>es-node1.linux.com</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@es-node1 ~]# su - elk[elk@es-node1 ~]$ vim &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;config&#x2F;elasticsearch.yml#配置文件并不完整，仅展示修改的部分cluster.name: es#集群名字node.name: es-node1#节点名字，建议和主机名一致path.data: &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;data#指定数据目录path.logs: &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;logs#指定日志存放目录network.host: 192.168.140.11#监听地址，本机IPhttp.port: 9200#监听端口，保持默认即可transport.tcp.port: 9300#指定集群之间的通信端口，此行需要自行添加discovery.seed_hosts: [&quot;192.168.140.10:9300&quot;, &quot;192.168.140.11:9300&quot;,&quot;192.168.140.12:9300&quot;]#指定集群节点cluster.initial_master_nodes: [&quot;192.168.140.10:9300&quot;]#指定集群主节点#以下内容配置文件中没有，请自行在文件末尾添加node.master: falsenode.data: truenode.ingest: falsenode.ml: falsecluster.remote.connect: falsehttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="es-node2-linux-com"><a href="#es-node2-linux-com" class="headerlink" title="es-node2.linux.com"></a><code>es-node2.linux.com</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@es-node2 ~]# su - elk[elk@es-node2 ~]$ vim &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;config&#x2F;elasticsearch.yml#配置文件并不完整，仅展示修改的部分cluster.name: es#集群名字node.name: es-node2#节点名字，建议和主机名一致path.data: &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;data#指定数据目录path.logs: &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;logs#指定日志存放目录network.host: 192.168.140.12#监听地址，本机IPhttp.port: 9200#监听端口，保持默认即可transport.tcp.port: 9300#指定集群之间的通信端口，此行需要自行添加discovery.seed_hosts: [&quot;192.168.140.10:9300&quot;, &quot;192.168.140.11:9300&quot;,&quot;192.168.140.12:9300&quot;]#指定集群节点cluster.initial_master_nodes: [&quot;192.168.140.10:9300&quot;]#指定集群主节点#以下内容配置文件中没有，请自行在文件末尾添加node.master: falsenode.data: truenode.ingest: falsenode.ml: falsecluster.remote.connect: falsehttp.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-启动ES集群"><a href="#12-启动ES集群" class="headerlink" title="12.启动ES集群"></a>12.启动<code>ES</code>集群</h3><blockquote><p><strong><code>-d</code>后台启动</strong></p></blockquote><h4 id="防止奇奇怪怪的报错，再给一次权限"><a href="#防止奇奇怪怪的报错，再给一次权限" class="headerlink" title="防止奇奇怪怪的报错，再给一次权限"></a>防止奇奇怪怪的报错，再给一次权限</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# chown -R elk.elk &#x2F;app&#x2F;elk&#x2F;#一定要登录root用户改权限[root@es-node1 ~]# chown -R elk.elk &#x2F;app&#x2F;elk&#x2F;[root@es-node2 ~]# chown -R elk.elk &#x2F;app&#x2F;elk&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# su - elk#启动需要普通用户上一次登录：二 5月 23 13:21:25 CST 2023pts&#x2F;0 上[elk@es-master ~]$ &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;bin&#x2F;elasticsearch -d[elk@es-node1 ~]$ &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;bin&#x2F;elasticsearch -d[elk@es-node2 ~]$ &#x2F;app&#x2F;elk&#x2F;elasticsearch-7.17.10&#x2F;bin&#x2F;elasticsearch -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查是否后台启动"><a href="#检查是否后台启动" class="headerlink" title="检查是否后台启动"></a>检查是否后台启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@es-master ~]# netstat -tunlp | grep javatcp6       0      0 192.168.140.10:9200     :::*                    LISTEN      25761&#x2F;java          tcp6       0      0 192.168.140.10:9300     :::*                    LISTEN      25761&#x2F;java <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[elk@es-node1 ~]$ netstat -tunlp | grep java(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp6       0      0 192.168.140.11:9300     :::*                    LISTEN      7776&#x2F;java           tcp6       0      0 192.168.140.11:9200     :::*                    LISTEN      7776&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[elk@es-node2 ~]$ netstat -tunlp | grep java(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp6       0      0 192.168.140.12:9300     :::*                    LISTEN      4065&#x2F;java           tcp6       0      0 192.168.140.12:9200     :::*                    LISTEN      4065&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-查看ES集群的状态"><a href="#13-查看ES集群的状态" class="headerlink" title="13.查看ES集群的状态"></a>13.查看<code>ES</code>集群的状态</h3><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ curl -X GET &quot;http:&#x2F;&#x2F;192.168.140.10:9200&#x2F;_cluster&#x2F;health?pretty&quot;&#123;  &quot;cluster_name&quot; : &quot;es&quot;,  &quot;status&quot; : &quot;green&quot;,  &quot;timed_out&quot; : false,  &quot;number_of_nodes&quot; : 3,  &quot;number_of_data_nodes&quot; : 3,  &quot;active_primary_shards&quot; : 3,  &quot;active_shards&quot; : 6,  &quot;relocating_shards&quot; : 0,  &quot;initializing_shards&quot; : 0,  &quot;unassigned_shards&quot; : 0,  &quot;delayed_unassigned_shards&quot; : 0,  &quot;number_of_pending_tasks&quot; : 0,  &quot;number_of_in_flight_fetch&quot; : 0,  &quot;task_max_waiting_in_queue_millis&quot; : 0,  &quot;active_shards_percent_as_number&quot; : 100.0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、部署Kibana"><a href="#三、部署Kibana" class="headerlink" title="三、部署Kibana"></a>三、部署Kibana</h2><h3 id="1-备份配置文件"><a href="#1-备份配置文件" class="headerlink" title="1.备份配置文件"></a>1.备份配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ cp &#x2F;app&#x2F;elk&#x2F;kibana-7.17.10-linux-x86_64&#x2F;config&#x2F;kibana.yml &#x2F;app&#x2F;elk&#x2F;kibana-7.17.10-linux-x86_64&#x2F;config&#x2F;kibana.yml.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ vim &#x2F;app&#x2F;elk&#x2F;kibana-7.17.10-linux-x86_64&#x2F;config&#x2F;kibana.yml#配置文件并不完整，仅展示修改的部分server.port: 5601#指定监听端口server.host: &quot;192.168.140.10&quot;#指定监听地址elasticsearch.hosts: [&quot;http:&#x2F;&#x2F;192.168.140.10:9200&quot;]#指定es服务端地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h3><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ nohup &#x2F;app&#x2F;elk&#x2F;kibana-7.17.10-linux-x86_64&#x2F;bin&#x2F;kibana &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ netstat -tunlp | grep node(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp        0      0 192.168.140.10:5601     0.0.0.0:*               LISTEN      64393&#x2F;node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试Web-UI"><a href="#4-测试Web-UI" class="headerlink" title="4.测试Web UI"></a>4.测试<code>Web UI</code></h3><p><img src="https://www.wsjj.top/upload/2023/05/elk04.png" alt="elk04"></p><p><img src="https://www.wsjj.top/upload/2023/05/elk05.png" alt="elk05"></p><h2 id="四、配置Logstash"><a href="#四、配置Logstash" class="headerlink" title="四、配置Logstash"></a>四、配置Logstash</h2><h3 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ cp &#x2F;app&#x2F;elk&#x2F;logstash-7.17.10&#x2F;config&#x2F;logstash-sample.conf &#x2F;app&#x2F;elk&#x2F;logstash-7.17.10&#x2F;config&#x2F;logstash.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ vim &#x2F;app&#x2F;elk&#x2F;logstash-7.17.10&#x2F;config&#x2F;logstash.conf# Sample Logstash configuration for creating a simple# Beats -&gt; Logstash -&gt; Elasticsearch pipeline.input &#123;  beats &#123;    port &#x3D;&gt; 5044  &#125;&#125;filter &#123;   grok &#123;      match &#x3D;&gt; &#123; &quot;message&quot; &#x3D;&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;#开启日志过滤，详情在下面引用里   &#125;&#125;output &#123;  elasticsearch &#123;    hosts &#x3D;&gt; [&quot;http:&#x2F;&#x2F;192.168.140.10:9200&quot;]#指定es服务器地址    index &#x3D;&gt; &quot;httpd-access-%&#123;YYYY.MM.dd&#125;&quot;#名字自定义    #user &#x3D;&gt; &quot;elastic&quot;    #password &#x3D;&gt; &quot;changeme&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>关于<code>Logstach</code>内置的日志过滤</strong><br><strong><code>cat /app/elk/logstash-7.17.10/vendor/bundle/jruby/2.5.0/gems/logstash-patterns-core-4.3.4/patterns/legacy/</code></strong></p></blockquote><h3 id="2-启动Logstach"><a href="#2-启动Logstach" class="headerlink" title="2.启动Logstach"></a>2.启动<code>Logstach</code></h3><h4 id="A-关闭java的垃圾回收机制"><a href="#A-关闭java的垃圾回收机制" class="headerlink" title="A.关闭java的垃圾回收机制"></a>A.关闭<code>java</code>的垃圾回收机制</h4><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ vim &#x2F;app&#x2F;elk&#x2F;logstash-7.17.10&#x2F;config&#x2F;jvm.options#把以下三行注释掉#8-13:-XX:+UseConcMarkSweepGC#8-13:-XX:CMSInitiatingOccupancyFraction&#x3D;75#8-13:-XX:+UseCMSInitiatingOccupancyOnly<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-启动Logstach"><a href="#B-启动Logstach" class="headerlink" title="B.启动Logstach"></a>B.启动<code>Logstach</code></h4><blockquote><p><strong><code>-f</code>指定配置文件路径</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ nohup &#x2F;app&#x2F;elk&#x2F;logstash-7.17.10&#x2F;bin&#x2F;logstash -f &#x2F;app&#x2F;elk&#x2F;logstash-7.17.10&#x2F;config&#x2F;logstash.conf &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-检查服务状态"><a href="#C-检查服务状态" class="headerlink" title="C.检查服务状态"></a>C.检查服务状态</h4><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ netstat -tunlp | grep java(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp6       0      0 192.168.140.10:9200     :::*                    LISTEN      25761&#x2F;java          tcp6       0      0 :::5044                 :::*                    LISTEN      116026&#x2F;java         tcp6       0      0 192.168.140.10:9300     :::*                    LISTEN      25761&#x2F;java          tcp6       0      0 127.0.0.1:9600          :::*                    LISTEN      116026&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、部署Filebeat"><a href="#五、部署Filebeat" class="headerlink" title="五、部署Filebeat"></a>五、部署Filebeat</h2><blockquote><p><strong>请在<code>webserver</code>上操作</strong></p></blockquote><h3 id="1-下载Filebeat"><a href="#1-下载Filebeat" class="headerlink" title="1.下载Filebeat"></a>1.下载<code>Filebeat</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;beats&#x2F;filebeat&#x2F;filebeat-7.17.10-linux-x86_64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装Filebeat"><a href="#2-安装Filebeat" class="headerlink" title="2.安装Filebeat"></a>2.安装<code>Filebeat</code></h3><h4 id="A-解压Filebeat"><a href="#A-解压Filebeat" class="headerlink" title="A.解压Filebeat"></a>A.解压<code>Filebeat</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# tar xf filebeat-7.17.10-linux-x86_64.tar.gz -C &#x2F;usr&#x2F;local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-备份配置文件"><a href="#B-备份配置文件" class="headerlink" title="B.备份配置文件"></a>B.备份配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# cp &#x2F;usr&#x2F;local&#x2F;filebeat-7.17.10-linux-x86_64&#x2F;filebeat.yml  &#x2F;usr&#x2F;local&#x2F;filebeat-7.17.10-linux-x86_64&#x2F;filebeat.yml.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改配置文件"><a href="#C-修改配置文件" class="headerlink" title="C.修改配置文件"></a>C.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# vim &#x2F;usr&#x2F;local&#x2F;filebeat-7.17.10-linux-x86_64&#x2F;filebeat.yml#配置文件并不完整，请勿修改其他# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Filebeat inputs &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;filebeat.inputs:- type: filestream  id: my-filestream-id  enabled: true#启用  paths:    - &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log#指定日志# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Dashboards &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;setup.dashboards.enabled: false#删除注释，关闭本地的dashboards# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Kibana &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;setup.kibana:  host: &quot;192.168.140.10:5601&quot;#指定master节点# ---------------------------- Elasticsearch Output ----------------------------#output.elasticsearch:#添加注释，不用本地的es  # Array of hosts to connect to.  #hosts: [&quot;localhost:9200&quot;]#添加注释# ------------------------------ Logstash Output -------------------------------output.logstash:#删除注释  # The Logstash hosts  hosts: [&quot;192.168.140.10:5044&quot;]#填写master节点，指定远程logstach<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-启动Filebeat"><a href="#D-启动Filebeat" class="headerlink" title="D.启动Filebeat"></a>D.启动<code>Filebeat</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# nohup &#x2F;usr&#x2F;local&#x2F;filebeat-7.17.10-linux-x86_64&#x2F;filebeat -c &#x2F;usr&#x2F;local&#x2F;filebeat-7.17.10-linux-x86_64&#x2F;filebeat.yml &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-检查是否启动"><a href="#E-检查是否启动" class="headerlink" title="E.检查是否启动"></a>E.检查是否启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@webserver ~]# ps -aux | grep filebeatroot      10027  0.4  4.2 941320 78496 pts&#x2F;0    Sl   16:45   0:00 &#x2F;usr&#x2F;local&#x2F;filebeat-7.17.10-linux-x86_64&#x2F;filebeat -c &#x2F;usr&#x2F;local&#x2F;filebeat-7.17.10-linux-x86_64&#x2F;filebeat.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="六、浏览器测试"><a href="#六、浏览器测试" class="headerlink" title="六、浏览器测试"></a>六、浏览器测试</h2><h3 id="1-查看是否收集到了数据"><a href="#1-查看是否收集到了数据" class="headerlink" title="1.查看是否收集到了数据"></a>1.查看是否收集到了数据</h3><p><img src="https://www.wsjj.top/upload/2023/05/elk06.png" alt="elk06"></p><h4 id="有索引了"><a href="#有索引了" class="headerlink" title="有索引了"></a>有索引了</h4><p><img src="https://www.wsjj.top/upload/2023/05/elk07.png" alt="elk07"></p><h3 id="2-创建索引展示数据"><a href="#2-创建索引展示数据" class="headerlink" title="2.创建索引展示数据"></a>2.创建索引展示数据</h3><p><img src="https://www.wsjj.top/upload/2023/05/elk08.png" alt="elk08"></p><p><img src="https://www.wsjj.top/upload/2023/05/elk09.png" alt="elk09"></p><h3 id="3-创建图形web-UV"><a href="#3-创建图形web-UV" class="headerlink" title="3.创建图形web UV"></a>3.创建图形<code>web UV</code></h3><p><img src="https://www.wsjj.top/upload/2023/05/elk10.png" alt="elk10"></p><p><img src="https://www.wsjj.top/upload/2023/05/elk11.png" alt="elk11"></p><p><img src="https://www.wsjj.top/upload/2023/05/elk12.png" alt="elk12"></p><p><img src="https://www.wsjj.top/upload/2023/05/elk13.png" alt="elk13"></p><h4 id="这里拿页面访问比例做图形测试"><a href="#这里拿页面访问比例做图形测试" class="headerlink" title="这里拿页面访问比例做图形测试"></a>这里拿页面访问比例做图形测试</h4><p><img src="https://www.wsjj.top/upload/2023/05/elk14.png" alt="elk14"></p><p><img src="https://www.wsjj.top/upload/2023/05/elk15.png" alt="elk15"></p><blockquote><p><strong>如果没有其他<code>IP</code>的数据，请自行拿其他虚拟机访问测试</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/elk16.png" alt="elk16"></p><h2 id="七、Kibana设置中文web-UI"><a href="#七、Kibana设置中文web-UI" class="headerlink" title="七、Kibana设置中文web UI"></a>七、Kibana设置中文web UI</h2><blockquote><p><strong>官方中文仅支持部分汉化</strong></p></blockquote><h3 id="1-修改配置文件-1"><a href="#1-修改配置文件-1" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[elk@es-master ~]$ vim &#x2F;app&#x2F;elk&#x2F;kibana-7.17.10-linux-x86_64&#x2F;config&#x2F;kibana.ymli18n.locale: &quot;zh-CN&quot;#把默认es英文改正zh-CN中文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-重启服务"><a href="#2-重启服务" class="headerlink" title="2.重启服务"></a>2.重启服务</h3><pre class="line-numbers language-|关闭旧的进程" data-language="|关闭旧的进程"><code class="language-|关闭旧的进程">[root@es-master ~]# netstat -tunlp | grep nodetcp        0      0 192.168.140.10:5601     0.0.0.0:*               LISTEN      5283&#x2F;node           [root@es-master ~]# kill 5283<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|重新启动Kibana" data-language="|重新启动Kibana"><code class="language-|重新启动Kibana">[elk@es-master ~]$ nohup &#x2F;app&#x2F;elk&#x2F;kibana-7.17.10-linux-x86_64&#x2F;bin&#x2F;kibana &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-访问web-UI测试"><a href="#3-访问web-UI测试" class="headerlink" title="3.访问web UI测试"></a>3.访问web UI测试</h3><p><img src="https://www.wsjj.top/upload/2023/05/elk17.png" alt="elk17"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> 集群 </category>
          
          <category> 应用 </category>
          
          <category> Linux日志 </category>
          
          <category> ELK日志分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> ELK </tag>
            
            <tag> 日志管理 </tag>
            
            <tag> 日志分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自动化运维系列教程】Saltstack工具部署及常用模块</title>
      <link href="/2023/05/20/121/"/>
      <url>/2023/05/20/121/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【自动化运维系列教程】Saltstack工具部署及常用模块"><a href="#【自动化运维系列教程】Saltstack工具部署及常用模块" class="headerlink" title="【自动化运维系列教程】Saltstack工具部署及常用模块"></a>【自动化运维系列教程】Saltstack工具部署及常用模块</h1><h2 id="一、Saltstack的介绍"><a href="#一、Saltstack的介绍" class="headerlink" title="一、Saltstack的介绍"></a>一、Saltstack的介绍</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><blockquote><p><strong>基于<code>python</code>语言开发、实现对IT基础设施批量管控</strong></p></blockquote><h3 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h3><ul><li>开源的、跨平台</li><li>基于证书的方式进行认证</li><li><code>saltstack</code>角色<ul><li><code>salt-master</code>管理端</li><li><code>salt-minion</code>被管理端</li><li><code>salt-syndic</code>分布式</li><li><code>salt-api</code>提供API接口</li></ul></li><li>支持分布式部署</li><li>支持<code>sls</code>状态文件</li></ul><h2 id="二、部署Saltstack"><a href="#二、部署Saltstack" class="headerlink" title="二、部署Saltstack"></a>二、部署Saltstack</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><table><thead><tr><th>主机名</th><th>IP地址</th><th>安装的软件</th><th>系统版本</th></tr></thead><tbody><tr><td>salt_master.linux.com</td><td>192.168.140.11</td><td>salt-master</td><td>Centos7.9</td></tr><tr><td>salt_node1.linux.com</td><td>192.168.140.14</td><td>salt-minion</td><td>Centos7.9</td></tr><tr><td>salt_node2.linux.com</td><td>192.168.140.15</td><td>salt-minion</td><td>Centos7.9</td></tr></tbody></table><h3 id="2-三台服务器关闭防火墙和SElinux、配置时间同步"><a href="#2-三台服务器关闭防火墙和SElinux、配置时间同步" class="headerlink" title="2.三台服务器关闭防火墙和SElinux、配置时间同步"></a>2.三台服务器关闭防火墙和SElinux、配置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="3-三台服务器配置Yum源和Epel源还有Saltstack安装源"><a href="#3-三台服务器配置Yum源和Epel源还有Saltstack安装源" class="headerlink" title="3.三台服务器配置Yum源和Epel源还有Saltstack安装源"></a>3.三台服务器配置<code>Yum</code>源和<code>Epel</code>源还有<code>Saltstack</code>安装源</h3><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-|配置yum源" data-language="|配置yum源"><code class="language-|配置yum源">[root@salt_master ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo[root@salt_node1 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo[root@salt_node2 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|配置epel源" data-language="|配置epel源"><code class="language-|配置epel源">[root@salt_master ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo[root@salt_node1 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo[root@salt_node2 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|配置salt源" data-language="|配置salt源"><code class="language-|配置salt源">[root@salt_master ~]# wget https:&#x2F;&#x2F;archive.repo.saltproject.io&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;x86_64&#x2F;2019.2.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;salt.repo[root@salt_node1 ~]# wget https:&#x2F;&#x2F;archive.repo.saltproject.io&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;x86_64&#x2F;2019.2.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;salt.repo[root@salt_node2 ~]# wget https:&#x2F;&#x2F;archive.repo.saltproject.io&#x2F;yum&#x2F;redhat&#x2F;7&#x2F;x86_64&#x2F;2019.2.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;salt.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|清理旧缓存，建立新缓存" data-language="|清理旧缓存，建立新缓存"><code class="language-|清理旧缓存，建立新缓存">[root@salt_master ~]# yum clean all &amp;&amp; yum makecache[root@salt_node1 ~]# yum clean all &amp;&amp; yum makecache[root@salt_node2 ~]# yum clean all &amp;&amp; yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-在管理端安装Salt-master"><a href="#4-在管理端安装Salt-master" class="headerlink" title="4.在管理端安装Salt-master"></a>4.在管理端安装<code>Salt-master</code></h3><h4 id="A-安装Salt-master"><a href="#A-安装Salt-master" class="headerlink" title="A.安装Salt-master"></a>A.安装<code>Salt-master</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@salt_master ~]# yum install -y salt-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-启动Salt-master服务"><a href="#B-启动Salt-master服务" class="headerlink" title="B.启动Salt-master服务"></a>B.启动<code>Salt-master</code>服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@salt_master ~]# systemctl enable --now salt-master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-检查服务是否启动"><a href="#C-检查服务是否启动" class="headerlink" title="C.检查服务是否启动"></a>C.检查服务是否启动</h4><blockquote><p><strong>因为<code>Saltstack</code>基于<code>Python</code>开发，所以需要搜索<code>Python</code></strong><br><strong>如果没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-|netstat" data-language="|netstat"><code class="language-|netstat">[root@salt_master ~]# netstat -tunlp | grep pythontcp        0      0 0.0.0.0:4505            0.0.0.0:*               LISTEN      1652&#x2F;python         tcp        0      0 0.0.0.0:4506            0.0.0.0:*               LISTEN      1659&#x2F;python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>4505</code>端口用于<code>Salt-master</code>内部通信</strong><br><strong><code>4506</code>端口用于<code>Salt-master</code>和<code>Salt-minion</code>之间的通信，用于&#x3D;&#x3D;推送任务&#x3D;&#x3D;和&#x3D;&#x3D;发布任务&#x3D;&#x3D;</strong></p></blockquote><h3 id="5-在被管理端安装Salt-minion"><a href="#5-在被管理端安装Salt-minion" class="headerlink" title="5.在被管理端安装Salt-minion"></a>5.在被管理端安装<code>Salt-minion</code></h3><h4 id="A-安装Salt-minion"><a href="#A-安装Salt-minion" class="headerlink" title="A.安装Salt-minion"></a>A.安装<code>Salt-minion</code></h4><pre class="line-numbers language-|yum" data-language="|yum"><code class="language-|yum">[root@salt_node1 ~]# yum install -y salt-minion[root@salt_node2 ~]# yum install -y salt-minion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-修改被管理端上的配置文件"><a href="#B-修改被管理端上的配置文件" class="headerlink" title="B.修改被管理端上的配置文件"></a>B.修改被管理端上的配置文件</h4><pre class="line-numbers language-|vim" data-language="|vim"><code class="language-|vim">[root@salt_node1 ~]# vim &#x2F;etc&#x2F;salt&#x2F;minion#配置文件并不完整，仅展示修改的地方master: 192.168.140.11#修改为管理端IP，注意格式“：”后面要有空格id: 192.168.140.14#修改为本机IP，注意格式“：”后面要有空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|vim" data-language="|vim"><code class="language-|vim">[root@salt_node2 ~]# vim &#x2F;etc&#x2F;salt&#x2F;minion#配置文件并不完整，仅展示修改的地方master: 192.168.140.11#修改为管理端IP，注意格式“：”后面要有空格id: 192.168.140.15#修改为本机IP，注意格式“：”后面要有空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动Salt-minion服务"><a href="#C-启动Salt-minion服务" class="headerlink" title="C.启动Salt-minion服务"></a>C.启动<code>Salt-minion</code>服务</h4><pre class="line-numbers language-|systemctl" data-language="|systemctl"><code class="language-|systemctl">[root@salt_node1 ~]# systemctl enable --now salt-minion[root@salt_node2 ~]# systemctl enable --now salt-minion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-回到管理端，签署证书"><a href="#6-回到管理端，签署证书" class="headerlink" title="6.回到管理端，签署证书"></a>6.回到管理端，签署证书</h3><h4 id="A-查看未签署证书的机器"><a href="#A-查看未签署证书的机器" class="headerlink" title="A.查看未签署证书的机器"></a>A.查看未签署证书的机器</h4><pre class="line-numbers language-|salt-key" data-language="|salt-key"><code class="language-|salt-key">[root@salt_master ~]# salt-key -LAccepted Keys:#已签署的证书Denied Keys:#拒绝的证书Unaccepted Keys:#未接受的证书192.168.140.14192.168.140.15Rejected Keys:#拒绝的证书<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-接受所有的请求证书"><a href="#B-接受所有的请求证书" class="headerlink" title="B.接受所有的请求证书"></a>B.接受所有的请求证书</h4><pre class="line-numbers language-|salt-key" data-language="|salt-key"><code class="language-|salt-key">[root@salt_master ~]# salt-key -A -yThe following keys are going to be accepted:Unaccepted Keys:192.168.140.14192.168.140.15Key for minion 192.168.140.14 accepted.Key for minion 192.168.140.15 accepted.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-再次查看状态"><a href="#C-再次查看状态" class="headerlink" title="C.再次查看状态"></a>C.再次查看状态</h4><pre class="line-numbers language-|salt-key" data-language="|salt-key"><code class="language-|salt-key">[root@salt_master ~]# salt-key -LAccepted Keys:#2台机器已经签署证书了192.168.140.14192.168.140.15Denied Keys:Unaccepted Keys:Rejected Keys:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-salt-key命令参数说明"><a href="#D-salt-key命令参数说明" class="headerlink" title="D.salt-key命令参数说明"></a>D.<code>salt-key</code>命令参数说明</h4><ul><li><code>-A</code>接受所有</li><li><code>-a 主机名/IP</code>接受某一个</li><li><code>-D</code>删除所有</li><li><code>-d 主机名/IP</code>删除某一个</li><li><code>-R</code>拒绝所有</li><li><code>-r 主机名/IP</code>拒绝某一个</li><li><code>-L</code>列出所有状态</li><li><code>-y</code>所有条件都接受</li></ul><h4 id="E-测试"><a href="#E-测试" class="headerlink" title="E.测试"></a>E.测试</h4><h5 id="测试主机连通性"><a href="#测试主机连通性" class="headerlink" title="测试主机连通性"></a>测试主机连通性</h5><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &quot;*&quot; test.ping192.168.140.14:    True192.168.140.15:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &quot;*&quot; cmd.run &#39;hostname&#39; 192.168.140.15:    salt_node2.linux.com192.168.140.14:    salt_node1.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、匹配minion的方法"><a href="#三、匹配minion的方法" class="headerlink" title="三、匹配minion的方法"></a>三、匹配minion的方法</h2><h3 id="L支持以逗号隔开的方式匹配多个minion"><a href="#L支持以逗号隔开的方式匹配多个minion" class="headerlink" title="-L支持以逗号隔开的方式匹配多个minion"></a><code>-L</code>支持以逗号隔开的方式匹配多个<code>minion</code></h3><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt -L &#39;192.168.140.14,192.168.140.15&#39; test.ping192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="S以网段的形式匹配minion"><a href="#S以网段的形式匹配minion" class="headerlink" title="-S以网段的形式匹配minion"></a><code>-S</code>以网段的形式匹配<code>minion</code></h3><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt -S &#39;192.168.140.0&#x2F;24&#39; test.ping192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="E以正则表达式的方式匹配minion"><a href="#E以正则表达式的方式匹配minion" class="headerlink" title="-E以正则表达式的方式匹配minion"></a><code>-E</code>以正则表达式的方式匹配<code>minion</code></h3><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt -E &#39;^192&#39; test.ping192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt -E &#39;192.168.140.(14|15)&#39; test.ping192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C以复合条件匹配minion"><a href="#C以复合条件匹配minion" class="headerlink" title="-C以复合条件匹配minion"></a><code>-C</code>以复合条件匹配<code>minion</code></h3><blockquote><p><strong><code>and/or</code></strong><br><strong><code>S@</code>是特殊写法，和<code>-S</code>作用一致</strong></p></blockquote><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt -C &#39;192.168.140.15 and S@192.168.140.0&#x2F;24&#39; test.ping192.168.140.15:    True[root@salt_master ~]# salt -C &#39;192.168.140.15 or S@192.168.140.0&#x2F;24&#39; test.ping192.168.140.14:    True192.168.140.15:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="N以主机组的方式匹配"><a href="#N以主机组的方式匹配" class="headerlink" title="-N以主机组的方式匹配"></a><code>-N</code>以主机组的方式匹配</h3><blockquote><p><strong>需要提前在配置文件中<code>/etc/salt/master</code>定义主机组</strong><br><strong><code>L@</code>是特殊写法，和<code>-L</code>作用相同</strong></p></blockquote><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# vim &#x2F;etc&#x2F;salt&#x2F;master#配置文件并不完整，仅展示修改的地方nodegroups:   webserver: &#39;L@192.168.140.14,192.168.140.15&#39;   [root@salt_master ~]# systemctl restart salt-master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt -N &#39;webserver&#39; test.ping192.168.140.14:    True192.168.140.15:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="G以grains数据组件中的数据匹配minion"><a href="#G以grains数据组件中的数据匹配minion" class="headerlink" title="-G以grains数据组件中的数据匹配minion"></a><code>-G</code>以<code>grains</code>数据组件中的数据匹配<code>minion</code></h3><ul><li><code>grains</code>数据组件<ul><li>保存<code>minion</code>端的状态数据(IP、系统版本、内核版本、主机名等)</li></ul></li><li>查看<code>grains</code>组件中的数据 <ul><li><code>salt &#39;*&#39; grains.items</code></li></ul></li></ul><h4 id="查看grains收集到的数据"><a href="#查看grains收集到的数据" class="headerlink" title="查看grains收集到的数据"></a>查看<code>grains</code>收集到的数据</h4><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &#39;192.168.140.14&#39; grains.items192.168.140.14:    ----------    SSDs:    biosreleasedate:        11&#x2F;12&#x2F;2020    biosversion:        6.00    cpu_flags:        - fpu        - vme        - de        - pse        - tsc        - msr        - pae        - mce        - cx8        - apic        - sep        - mtrr        - pge        - mca        - cmov        - pat        - pse36        - clflush        - mmx        - fxsr        - sse        - sse2        - ss        - syscall        - nx        - pdpe1gb        - rdtscp        - lm        - constant_tsc        - arch_perfmon        - nopl        - xtopology        - tsc_reliable        - nonstop_tsc        - eagerfpu        - pni        - pclmulqdq        - ssse3        - fma        - cx16        - pcid        - sse4_1        - sse4_2        - x2apic        - movbe        - popcnt        - tsc_deadline_timer        - aes        - xsave        - avx        - f16c        - rdrand        - hypervisor        - lahf_lm        - abm        - 3dnowprefetch        - invpcid_single        - ssbd        - ibrs        - ibpb        - stibp        - ibrs_enhanced        - fsgsbase        - tsc_adjust        - bmi1        - avx2        - smep        - bmi2        - invpcid        - rdseed        - adx        - smap        - clflushopt        - xsaveopt        - xsavec        - xgetbv1        - arat        - pku        - ospke        - md_clear        - spec_ctrl        - intel_stibp        - flush_l1d        - arch_capabilities    cpu_model:        Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz    cpuarch:        x86_64    disks:        - sda        - sr0        - dm-0        - dm-1    dns:        ----------        domain:        ip4_nameservers:            - 114.114.114.114            - 8.8.8.8        ip6_nameservers:        nameservers:            - 114.114.114.114            - 8.8.8.8        options:        search:            - linux.com        sortlist:    domain:        linux.com    fqdn:        salt_node1.linux.com    fqdn_ip4:        - 192.168.140.14    fqdn_ip6:        - fe80::20c:29ff:fe9a:65ec    fqdns:    gid:        0    gpus:        |_          ----------          model:              SVGA II Adapter          vendor:              vmware    groupname:        root    host:        salt_node1    hwaddr_interfaces:        ----------        ens33:            00:0c:29:9a:65:ec        lo:            00:00:00:00:00:00    id:        192.168.140.14    init:        systemd    ip4_gw:        192.168.140.2    ip4_interfaces:        ----------        ens33:            - 192.168.140.14        lo:            - 127.0.0.1    ip6_gw:        False    ip6_interfaces:        ----------        ens33:            - fe80::20c:29ff:fe9a:65ec        lo:            - ::1    ip_gw:        True    ip_interfaces:        ----------        ens33:            - 192.168.140.14            - fe80::20c:29ff:fe9a:65ec        lo:            - 127.0.0.1            - ::1    ipv4:        - 127.0.0.1        - 192.168.140.14    ipv6:        - ::1        - fe80::20c:29ff:fe9a:65ec    kernel:        Linux    kernelrelease:        3.10.0-1160.el7.x86_64    kernelversion:        #1 SMP Mon Oct 19 16:18:59 UTC 2020    locale_info:        ----------        defaultencoding:            UTF-8        defaultlanguage:            zh_CN        detectedencoding:            UTF-8        timezone:            unknown    localhost:        salt_node1.linux.com    lsb_distrib_codename:        CentOS Linux 7 (Core)    lsb_distrib_id:        CentOS Linux    machine_id:        fccaaadc79334eeca70f71b88e47f377    manufacturer:        VMware, Inc.    master:        192.168.140.11    mdadm:    mem_total:        1819    nodename:        salt_node1.linux.com    num_cpus:        1    num_gpus:        1    os:        CentOS    os_family:        RedHat    osarch:        x86_64    oscodename:        CentOS Linux 7 (Core)    osfinger:        CentOS Linux-7    osfullname:        CentOS Linux    osmajorrelease:        7    osrelease:        7.9.2009    osrelease_info:        - 7        - 9        - 2009    path:        &#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin    pid:        11846    productname:        VMware Virtual Platform    ps:        ps -efHww    pythonexecutable:        &#x2F;usr&#x2F;bin&#x2F;python    pythonpath:        - &#x2F;usr&#x2F;bin        - &#x2F;usr&#x2F;lib64&#x2F;python27.zip        - &#x2F;usr&#x2F;lib64&#x2F;python2.7        - &#x2F;usr&#x2F;lib64&#x2F;python2.7&#x2F;plat-linux2        - &#x2F;usr&#x2F;lib64&#x2F;python2.7&#x2F;lib-tk        - &#x2F;usr&#x2F;lib64&#x2F;python2.7&#x2F;lib-old        - &#x2F;usr&#x2F;lib64&#x2F;python2.7&#x2F;lib-dynload        - &#x2F;usr&#x2F;lib64&#x2F;python2.7&#x2F;site-packages        - &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages    pythonversion:        - 2        - 7        - 5        - final        - 0    saltpath:        &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;salt    saltversion:        2019.2.8    saltversioninfo:        - 2019        - 2        - 8        - 0    selinux:        ----------        enabled:            False        enforced:            Disabled    serialnumber:        VMware-56 4d fb 59 5c 83 ad 5a-5d 09 15 06 b8 9a 65 ec    server_id:        925752345    shell:        &#x2F;bin&#x2F;sh    swap_total:        2047    systemd:        ----------        features:            +PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN        version:            219    uid:        0    username:        root    uuid:        59fb4d56-835c-5aad-5d09-1506b89a65ec    virtual:        VMware    zfs_feature_flags:        False    zfs_support:        False    zmqversion:        4.1.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="以grains数据组件中的数据匹配minion"><a href="#以grains数据组件中的数据匹配minion" class="headerlink" title="以grains数据组件中的数据匹配minion"></a>以<code>grains</code>数据组件中的数据匹配<code>minion</code></h4><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt -G &#39;master:192.168.140.11&#39; test.ping192.168.140.14:    True192.168.140.15:    True[root@salt_master ~]# salt -G &#39;os:Centos&#39; test.ping192.168.140.14:    True192.168.140.15:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、常用的模块"><a href="#四、常用的模块" class="headerlink" title="四、常用的模块"></a>四、常用的模块</h2><h3 id="1-查看modules组件中的所有模块"><a href="#1-查看modules组件中的所有模块" class="headerlink" title="1.查看modules组件中的所有模块"></a>1.查看<code>modules</code>组件中的所有模块</h3><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &#39;192.168.140.14&#39; sys.list_modules192.168.140.14:    - acl    - aliases    - alternatives    - ansible    - archive    - artifactory    - beacons    - bigip    - btrfs    - buildout    - cloud    - cmd    - composer    - config    - consul    - container_resource    - cp    - cron    - cryptdev    - data    - defaults    - devmap    - disk    - django    - dnsmasq    - dnsutil    - drbd    - environ    - etcd    - ethtool    - event    - extfs    - file    - firewalld    - gem    - genesis    - glassfish    - gnome    - google_chat    - grafana4    - grains    - group    - hashutil    - highstate_doc    - hipchat    - hosts    - http    - incron    - ini    - inspector    - introspect    - iosconfig    - ip    - ipset    - iptables    - jboss7    - jboss7_cli    - k8s    - kernelpkg    - key    - keyboard    - kmod    - locale    - locate    - log    - logrotate    - lowpkg    - lvm    - mandrill    - match    - mattermost    - mine    - minion    - modjk    - mount    - msteams    - nagios_rpc    - namecheap_domains    - namecheap_domains_dns    - namecheap_domains_ns    - namecheap_ssl    - namecheap_users    - network    - nexus    - nova    - nspawn    - nxos_api    - openscap    - openstack_config    - opsgenie    - out    - pagerduty    - pagerduty_util    - pam    - parallels    - partition    - peeringdb    - pillar    - pkg    - pkg_resource    - postfix    - ps    - publish    - pushover    - pyenv    - random    - random_org    - rbenv    - rest_sample_utils    - restartcheck    - ret    - rsync    - rvm    - s3    - s6    - salt_proxy    - saltcheck    - saltutil    - schedule    - scsi    - sdb    - seed    - serverdensity_device    - service    - shadow    - slack    - slsutil    - smbios    - smtp    - solrcloud    - sqlite3    - ssh    - state    - status    - statuspage    - supervisord    - sys    - sysctl    - sysfs    - syslog_ng    - system    - telegram    - telemetry    - temp    - test    - timezone    - tuned    - udev    - uptime    - user    - vault    - vbox_guest    - virtualenv    - vsphere    - xfs    - zabbix    - zenoss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看某个模块的操作方法"><a href="#2-查看某个模块的操作方法" class="headerlink" title="2.查看某个模块的操作方法"></a>2.查看某个模块的操作方法</h3><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &#39;192.168.140.14&#39; sys.list_functions user192.168.140.14:    - user.add    - user.chfullname    - user.chgid    - user.chgroups    - user.chhome    - user.chhomephone    - user.chloginclass    - user.chother    - user.chroomnumber    - user.chshell    - user.chuid    - user.chworkphone    - user.delete    - user.get_loginclass    - user.getent    - user.info    - user.list_groups    - user.list_users    - user.primary_group    - user.rename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &#39;192.168.140.14&#39; sys.list_functions service192.168.140.14:    - service.available    - service.disable    - service.disabled    - service.enable    - service.enabled    - service.execs    - service.force_reload    - service.get_all    - service.get_disabled    - service.get_enabled    - service.get_running    - service.get_static    - service.mask    - service.masked    - service.missing    - service.reload    - service.restart    - service.show    - service.start    - service.status    - service.stop    - service.systemctl_reload    - service.unmask<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看操作方法的使用说明"><a href="#3-查看操作方法的使用说明" class="headerlink" title="3.查看操作方法的使用说明"></a>3.查看操作方法的使用说明</h3><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &#39;192.168.140.14&#39; sys.doc user.adduser.add:    Add a user to the minion    CLI Example:        salt &#39;*&#39; user.add name &lt;uid&gt; &lt;gid&gt; &lt;groups&gt; &lt;home&gt; &lt;shell&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|salt" data-language="|salt"><code class="language-|salt">[root@salt_master ~]# salt &#39;192.168.140.14&#39; sys.doc service.startservice.start:    Changed in version 2015.8.12,2016.3.3,2016.11.0        On minions running systemd&gt;&#x3D;205, &#96;systemd-run(1)&#96;_ is now used to        isolate commands run by this function from the &#96;&#96;salt-minion&#96;&#96; daemon&#39;s        control group. This is done to avoid a race condition in cases where        the &#96;&#96;salt-minion&#96;&#96; service is restarted while a service is being        modified. If desired, usage of &#96;systemd-run(1)&#96;_ can be suppressed by        setting a :mod:&#96;config option &lt;salt.modules.config.get&gt;&#96; called        &#96;&#96;systemd.scope&#96;&#96;, with a value of &#96;&#96;False&#96;&#96; (no quotes).    .. _&#96;systemd-run(1)&#96;: https:&#x2F;&#x2F;www.freedesktop.org&#x2F;software&#x2F;systemd&#x2F;man&#x2F;systemd-run.html    Start the specified service with systemd    no_block : False        Set to &#96;&#96;True&#96;&#96; to start the service using &#96;&#96;--no-block&#96;&#96;.        New in version 2017.7.0    unmask : False        Set to &#96;&#96;True&#96;&#96; to remove an indefinite mask before attempting to start        the service.        New in version 2017.7.0            In previous releases, Salt would simply unmask a service before            starting. This behavior is no longer the default.    unmask_runtime : False        Set to &#96;&#96;True&#96;&#96; to remove a runtime mask before attempting to start the        service.        New in version 2017.7.0            In previous releases, Salt would simply unmask a service before            starting. This behavior is no longer the default.    CLI Example:        salt &#39;*&#39; service.start &lt;service name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-cmd执行命令模块"><a href="#4-cmd执行命令模块" class="headerlink" title="4.cmd执行命令模块"></a>4.<code>cmd</code>执行命令模块</h3><pre class="line-numbers language-|查询所有minion的主机名" data-language="|查询所有minion的主机名"><code class="language-|查询所有minion的主机名">[root@salt_master ~]# salt &#39;*&#39; cmd.run &#39;hostname&#39;192.168.140.14:    salt_node1.linux.com192.168.140.15:    salt_node2.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-cron计划任务模块"><a href="#5-cron计划任务模块" class="headerlink" title="5.cron计划任务模块"></a>5.<code>cron</code>计划任务模块</h3><blockquote><p><strong>如果没有<code>ntpdate</code>命令，请安装<code>yum install -y ntpdate</code></strong></p></blockquote><pre class="line-numbers language-|新增计划任务，每半小时同步一次时间" data-language="|新增计划任务，每半小时同步一次时间"><code class="language-|新增计划任务，每半小时同步一次时间">[root@salt_master ~]# salt &#39;*&#39; cron.set_job root &#39;*&#x2F;30&#39; &#39;*&#39; &#39;*&#39; &#39;*&#39; &#39;*&#39; &quot;&#x2F;usr&#x2F;sbin&#x2F;ntpdate 120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null&quot;192.168.140.14:    new192.168.140.15:    new<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|查询当前系统的计划任务" data-language="|查询当前系统的计划任务"><code class="language-|查询当前系统的计划任务">[root@salt_master ~]# salt &#39;*&#39; cmd.run &#39;crontab -l&#39;192.168.140.14:    # Lines below here are managed by Salt, do not edit    *&#x2F;30 * * * * &#x2F;usr&#x2F;sbin&#x2F;ntpdate 120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null192.168.140.15:    # Lines below here are managed by Salt, do not edit    *&#x2F;30 * * * * &#x2F;usr&#x2F;sbin&#x2F;ntpdate 120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-file管理文件模块"><a href="#6-file管理文件模块" class="headerlink" title="6.file管理文件模块"></a>6.<code>file</code>管理文件模块</h3><blockquote><p><strong>在文件中写入数据，这个文件在被控端上必须存在</strong></p></blockquote><pre class="line-numbers language-|在/tmp/file01文件中写入内容" data-language="|在/tmp/file01文件中写入内容"><code class="language-|在/tmp/file01文件中写入内容">[root@salt_master ~]# salt &#39;*&#39; file.append &#x2F;tmp&#x2F;file01 &quot;abc123&quot;192.168.140.15:    Wrote 1 lines to &quot;&#x2F;tmp&#x2F;file01&quot;192.168.140.14:    Wrote 1 lines to &quot;&#x2F;tmp&#x2F;file01&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-hosts主机名解析模块"><a href="#7-hosts主机名解析模块" class="headerlink" title="7.hosts主机名解析模块"></a>7.<code>hosts</code>主机名解析模块</h3><pre class="line-numbers language-|在所有minion添加一个主机名解析" data-language="|在所有minion添加一个主机名解析"><code class="language-|在所有minion添加一个主机名解析">[root@salt_master ~]# salt &#39;*&#39; hosts.set_host 192.168.140.11 salt_master.linux.com192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|查询/etc/hosts文件是否修改" data-language="|查询/etc/hosts文件是否修改"><code class="language-|查询/etc/hosts文件是否修改">[root@salt_master ~]# salt &#39;*&#39; cmd.run &#39;cat &#x2F;etc&#x2F;hosts&#39;192.168.140.15:    127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4    ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6    192.168.140.11salt_master.linux.com192.168.140.14:    127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4    ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6    192.168.140.11salt_master.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-pkg管理软件模块"><a href="#8-pkg管理软件模块" class="headerlink" title="8.pkg管理软件模块"></a>8.<code>pkg</code>管理软件模块</h3><pre class="line-numbers language-|在所有minion上安装FTP软件" data-language="|在所有minion上安装FTP软件"><code class="language-|在所有minion上安装FTP软件">[root@salt_master ~]# salt &#39;*&#39; pkg.install vsftpd192.168.140.14:    ----------    vsftpd:        ----------        new:            3.0.2-29.el7_9        old:192.168.140.15:    ----------    vsftpd:        ----------        new:            3.0.2-29.el7_9        old:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-service管理服务模块"><a href="#9-service管理服务模块" class="headerlink" title="9.service管理服务模块"></a>9.<code>service</code>管理服务模块</h3><pre class="line-numbers language-|启动所有minion上的FTP服务" data-language="|启动所有minion上的FTP服务"><code class="language-|启动所有minion上的FTP服务">[root@salt_master ~]# salt &#39;*&#39; service.start vsftpd192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|设置所有minion上的FTP服务为开机自启" data-language="|设置所有minion上的FTP服务为开机自启"><code class="language-|设置所有minion上的FTP服务为开机自启">[root@salt_master ~]# salt &#39;*&#39; service.enable vsftpd192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|查询所有minion的FTP服务" data-language="|查询所有minion的FTP服务"><code class="language-|查询所有minion的FTP服务">[root@salt_master ~]# salt &#39;*&#39; cmd.run &#39;netstat -tunlp | grep ftp&#39;192.168.140.15:    tcp6       0      0 :::21                   :::*                    LISTEN      2605&#x2F;vsftpd192.168.140.14:    tcp6       0      0 :::21                   :::*                    LISTEN      12441&#x2F;vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-user-group管理用户和组的模块"><a href="#10-user-group管理用户和组的模块" class="headerlink" title="10.user/group管理用户和组的模块"></a>10.<code>user/group</code>管理用户和组的模块</h3><pre class="line-numbers language-|在所有minion上创建用户king" data-language="|在所有minion上创建用户king"><code class="language-|在所有minion上创建用户king">[root@salt_master ~]# salt &#39;*&#39; user.add king192.168.140.14:    True192.168.140.15:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|在所有minion上创建jishu组" data-language="|在所有minion上创建jishu组"><code class="language-|在所有minion上创建jishu组">[root@salt_master ~]# salt &#39;*&#39; group.add jishu192.168.140.14:    True192.168.140.15:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-|在所有minion上把king用户加入到jishu组里" data-language="|在所有minion上把king用户加入到jishu组里"><code class="language-|在所有minion上把king用户加入到jishu组里">[root@salt_master ~]# salt &#39;*&#39; group.adduser jishu king192.168.140.15:    True192.168.140.14:    True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 自动化运维工具 </category>
          
          <category> Saltstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> 自动化运维工具 </tag>
            
            <tag> saltstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux应用系列教程】基于Jenkins发布maven项目</title>
      <link href="/2023/05/19/120/"/>
      <url>/2023/05/19/120/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux应用系列教程】基于Jenkins发布maven项目"><a href="#【Linux应用系列教程】基于Jenkins发布maven项目" class="headerlink" title="【Linux应用系列教程】基于Jenkins发布maven项目"></a>【Linux应用系列教程】基于Jenkins发布maven项目</h1><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><blockquote><p><strong><code>192.168.140.10</code> <code>Jenkins</code>服务器</strong><br><strong><code>192.168.140.12</code> <code>Tomcat</code>服务器</strong><br><strong><code>192.168.140.13</code> <code>Gitlab</code>服务器</strong></p></blockquote><h2 id="二、服务器准备"><a href="#二、服务器准备" class="headerlink" title="二、服务器准备"></a>二、服务器准备</h2><blockquote><p><strong>部署过程省略</strong><br><strong><code>Jenkins</code>部署教程：<a href="https://www.wsjj.top/archives/119">https://www.wsjj.top/archives/119</a></strong><br><strong><code>Gitlab</code>部署教程：<a href="https://www.wsjj.top/archives/118">https://www.wsjj.top/archives/118</a></strong><br><strong><code>Tomcat</code>部署教程：<a href="https://www.wsjj.top/archives/90">https://www.wsjj.top/archives/90</a></strong></p></blockquote><h2 id="三、在Gitlab服务器上传项目"><a href="#三、在Gitlab服务器上传项目" class="headerlink" title="三、在Gitlab服务器上传项目"></a>三、在Gitlab服务器上传项目</h2><h3 id="先创建一个空仓库"><a href="#先创建一个空仓库" class="headerlink" title="先创建一个空仓库"></a>先创建一个空仓库</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins09.png" alt="jenkins09"></p><h3 id="1-克隆项目"><a href="#1-克隆项目" class="headerlink" title="1.克隆项目"></a>1.克隆项目</h3><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# git clone http:&#x2F;&#x2F;gitlab.linux.com&#x2F;root&#x2F;hello.git正克隆到 &#39;hello&#39;...Username for &#39;http:&#x2F;&#x2F;gitlab.linux.com&#39;: rootPassword for &#39;http:&#x2F;&#x2F;root@gitlab.linux.com&#39;: warning: 您似乎克隆了一个空版本库。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-上传项目"><a href="#2-上传项目" class="headerlink" title="2.上传项目"></a>2.上传项目</h3><blockquote><p><strong>测试项目下载链接：<a href="https://pan.baidu.com/s/1-ct99Xaf045ITL-Nw_P2FQ?pwd=xr9z">https://pan.baidu.com/s/1-ct99Xaf045ITL-Nw_P2FQ?pwd=xr9z</a></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/jenkins07.png" alt="jenkins07"></p><pre class="line-numbers language-none"><code class="language-none">[root@gitlab hello]# ls -a.  ..  .classpath  .git  pom.xml  .project  .settings  src  target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-上传项目文件到Gitlab"><a href="#3-上传项目文件到Gitlab" class="headerlink" title="3.上传项目文件到Gitlab"></a>3.上传项目文件到<code>Gitlab</code></h3><blockquote><p><strong>如果您是新配置的<code>Git</code>环境，请先配置<code>用户名</code>和<code>email</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab hello]# git add .[root@gitlab hello]# git commit -m &quot;hello world&quot;[master（根提交） 8a7a45b] hello world 16 files changed, 187 insertions(+) create mode 100644 .classpath create mode 100644 .project create mode 100644 .settings&#x2F;.jsdtscope create mode 100644 .settings&#x2F;org.eclipse.jdt.core.prefs create mode 100644 .settings&#x2F;org.eclipse.m2e.core.prefs create mode 100644 .settings&#x2F;org.eclipse.wst.common.component create mode 100644 .settings&#x2F;org.eclipse.wst.common.project.facet.core.xml create mode 100644 .settings&#x2F;org.eclipse.wst.jsdt.ui.superType.container create mode 100644 .settings&#x2F;org.eclipse.wst.jsdt.ui.superType.name create mode 100644 .settings&#x2F;org.eclipse.wst.validation.prefs create mode 100644 pom.xml create mode 100644 src&#x2F;main&#x2F;webapp&#x2F;WEB-INF&#x2F;web.xml create mode 100644 src&#x2F;main&#x2F;webapp&#x2F;index.jsp create mode 100644 target&#x2F;m2e-wtp&#x2F;web-resources&#x2F;META-INF&#x2F;MANIFEST.MF create mode 100644 target&#x2F;m2e-wtp&#x2F;web-resources&#x2F;META-INF&#x2F;maven&#x2F;hello&#x2F;hello&#x2F;pom.properties create mode 100644 target&#x2F;m2e-wtp&#x2F;web-resources&#x2F;META-INF&#x2F;maven&#x2F;hello&#x2F;hello&#x2F;pom.xml [root@gitlab hello]# git push -u origin masterUsername for &#39;http:&#x2F;&#x2F;gitlab.linux.com&#39;: rootPassword for &#39;http:&#x2F;&#x2F;root@gitlab.linux.com&#39;: Counting objects: 29, done.Delta compression using up to 2 threads.Compressing objects: 100% (19&#x2F;19), done.Writing objects: 100% (29&#x2F;29), 3.83 KiB | 0 bytes&#x2F;s, done.Total 29 (delta 1), reused 0 (delta 0)To http:&#x2F;&#x2F;gitlab.linux.com&#x2F;root&#x2F;hello.git * [new branch]      master -&gt; master分支 master 设置为跟踪来自 origin 的远程分支 master。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前往Gitlab端web界面查看"><a href="#前往Gitlab端web界面查看" class="headerlink" title="前往Gitlab端web界面查看"></a>前往<code>Gitlab</code>端<code>web</code>界面查看</h4><p><img src="https://www.wsjj.top/upload/2023/05/jenkins08.png" alt="jenkins08"></p><h2 id="四、在Jenkins服务器上安装插件"><a href="#四、在Jenkins服务器上安装插件" class="headerlink" title="四、在Jenkins服务器上安装插件"></a>四、在Jenkins服务器上安装插件</h2><ul><li><code>git</code>插件</li><li><code>gitlab</code>插件<ul><li>作用: <ul><li>连接<code>gitlab</code>服务器拉取代码</li></ul></li></ul></li><li><code>maven intergration</code>插件<ul><li>支持<code>maven</code>编译、发布</li></ul></li><li><code>publish over ssh</code>插件<ul><li>借助<code>SSH</code>协议连接<code>tomcat</code>服务器，发布项目</li></ul></li></ul><h3 id="1-回到Jenkins端web界面添加插件"><a href="#1-回到Jenkins端web界面添加插件" class="headerlink" title="1.回到Jenkins端web界面添加插件"></a>1.回到<code>Jenkins</code>端<code>web</code>界面添加插件</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins10.png" alt="jenkins10"></p><blockquote><p><strong>请自行搜索安装以下插件<code>git</code>、<code>gitlab</code>、<code>Maven Integration plugin</code>、<code>Publish Over SSH</code></strong><br><strong>如果在软件商店搜索不到，就证明已经安装过了</strong><br><strong>下图中&#x3D;&#x3D;仅展示&#x3D;&#x3D;安装其中一个，剩下的自行搜索安装</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/jenkins11.png" alt="jenkins11"></p><blockquote><p><strong>如果不确定是否安装，可以搜索本地已安装的插件</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/jenkins12.png" alt="jenkins12"></p><h2 id="五、配置Jenkins服务器与Tomcat服务器之间免密SSH"><a href="#五、配置Jenkins服务器与Tomcat服务器之间免密SSH" class="headerlink" title="五、配置Jenkins服务器与Tomcat服务器之间免密SSH"></a>五、配置Jenkins服务器与Tomcat服务器之间免密SSH</h2><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# ssh-copy-id root@192.168.140.12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="测试免密SSH"><a href="#测试免密SSH" class="headerlink" title="测试免密SSH"></a>测试免密SSH</h3><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# ssh root@192.168.140.12 hostnametomcat.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="六、在Jenkins服务器安装maven编译工具和Git工具"><a href="#六、在Jenkins服务器安装maven编译工具和Git工具" class="headerlink" title="六、在Jenkins服务器安装maven编译工具和Git工具"></a>六、在Jenkins服务器安装maven编译工具和Git工具</h2><h3 id="1-安装Git工具"><a href="#1-安装Git工具" class="headerlink" title="1.安装Git工具"></a>1.安装<code>Git</code>工具</h3><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# yum install -y git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装maven编译工具"><a href="#2-安装maven编译工具" class="headerlink" title="2.安装maven编译工具"></a>2.安装<code>maven</code>编译工具</h3><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# wget --no-check-certificate https:&#x2F;&#x2F;dlcdn.apache.org&#x2F;maven&#x2F;maven-3&#x2F;3.9.2&#x2F;binaries&#x2F;apache-maven-3.9.2-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# tar xf apache-maven-3.9.2-bin.tar.gz -C &#x2F;usr&#x2F;local&#x2F;[root@jenkins ~]# mv &#x2F;usr&#x2F;local&#x2F;apache-maven-3.9.2&#x2F; &#x2F;usr&#x2F;local&#x2F;maven39<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><blockquote><p><strong>因为我们用<code>yum</code>装了<code>jdk11</code>，所以不用配置<code>jdk</code>环境</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# vim &#x2F;etc&#x2F;profileexport PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;maven39&#x2F;bin[root@jenkins ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# mvn -versionApache Maven 3.9.2 (c9616018c7a021c1c39be70fb2843d6f5f9b8a1c)Maven home: &#x2F;usr&#x2F;local&#x2F;maven39Java version: 11.0.19, vendor: Red Hat, Inc., runtime: &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64Default locale: zh_CN, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;3.10.0-1160.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、配置Jenkins连接Gitlab"><a href="#七、配置Jenkins连接Gitlab" class="headerlink" title="七、配置Jenkins连接Gitlab"></a>七、配置Jenkins连接Gitlab</h2><ul><li>基于<code>Gitlab</code>令牌<code>token</code>验证</li></ul><h3 id="1-前往Gitlab端web界面生成token"><a href="#1-前往Gitlab端web界面生成token" class="headerlink" title="1.前往Gitlab端web界面生成token"></a>1.前往<code>Gitlab</code>端<code>web</code>界面生成<code>token</code></h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins13.png" alt="jenkins13"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins14.png" alt="jenkins14"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins15.png" alt="jenkins15"></p><h3 id="2-在Jenkins端web界面添加Gitlab访问地址和令牌"><a href="#2-在Jenkins端web界面添加Gitlab访问地址和令牌" class="headerlink" title="2.在Jenkins端web界面添加Gitlab访问地址和令牌"></a>2.在<code>Jenkins</code>端<code>web</code>界面添加<code>Gitlab</code>访问地址和令牌</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins16.png" alt="jenkins16"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins17.png" alt="jenkins17"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins18.png" alt="jenkins18"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins19.png" alt="jenkins19"></p><h4 id="报错解决方法"><a href="#报错解决方法" class="headerlink" title="报错解决方法"></a>报错解决方法</h4><h5 id="添加域名解析即可"><a href="#添加域名解析即可" class="headerlink" title="添加域名解析即可"></a>添加域名解析即可</h5><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.13 gitlab.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="再次回到Jenkins端web界面测试"><a href="#再次回到Jenkins端web界面测试" class="headerlink" title="再次回到Jenkins端web界面测试"></a>再次回到<code>Jenkins</code>端<code>web</code>界面测试</h4><p><img src="https://www.wsjj.top/upload/2023/05/jenkins20.png" alt="jenkins20"></p><h2 id="八、配置Jenkins连接Tomcat服务器"><a href="#八、配置Jenkins连接Tomcat服务器" class="headerlink" title="八、配置Jenkins连接Tomcat服务器"></a>八、配置Jenkins连接Tomcat服务器</h2><h3 id="1-准备Jenkins服务器私钥"><a href="#1-准备Jenkins服务器私钥" class="headerlink" title="1.准备Jenkins服务器私钥"></a>1.准备<code>Jenkins</code>服务器私钥</h3><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEA7uTCTg7JpgH8x2BpUQs9WsBW0&#x2F;l9gKZU4oSFFOxdt45SMn2rI39acmoErZ7HoZtmj+QxQWP8EqVhGG7dPO7JvhliiFaWyc989qR0AaQND2+HFHEV3wGv7dx91Ybs2zql7xBQRGqfoZvAmZC8jZMcF9S56737AiWYiqGIRUcwmTycXem+TvB8oozEcQlu+sP6tpSOdNvK7CMk77n1ujprtzPa7Wd&#x2F;jpcTyuGXi2KYnsWjDP2XdO2tbhmvM5+hrN0gFBvx2cRzjHUrIFcQDOvpGfK+hG3FeYl0dF9oX6b&#x2F;+AlLaQJzVkbYtTf6U+5UCnQ6J0NFRY0x9skIZoCeHbpNpQIDAQABAoIBAQDBblbqL00VbtyHb0g3R&#x2F;uI5N4pSwVUytlGhHjhZTXI76McoOaWmoLYy4E4N6167EJSVjmPse6kBmalCvd2Y&#x2F;7UPueqbzou9CNB7gzEW1n72pkscxh7dnlGBteYsmRMaqN6++GSVCcnCt8bOLeDhs8jeKqF+FEq&#x2F;tgRwBN&#x2F;zNHL8FhKKU31rwpI84btqOi2XNB4oMjLOVzMA&#x2F;ucbFgzlAFMs22L0VP3euCKsVZGc73QEqYpBuc0xJZLNOzpvzigPd0JJfDNV8IaTLO1eJovJ8hJIxyU2t6qT4KNUPM95yJNkjKnUw&#x2F;UJg+CEtUXRiFiJ92tWY3S4YPV6t7jGo&#x2F;ZNKfhAoGBAPlE1LS7iBTfKiB&#x2F;nJC0TM6DwDgE6ouPkYu04lKNTnfgr&#x2F;4cL+O1pPozWv5qpLcfM5tRkS5NBsl&#x2F;wZfIVfpWAjw6pqzvAYIaz3Kr&#x2F;Pfu2Ijx+nwO8pElTdKd5UwRGdW8ZAqKoBZ5gkgtyaO&#x2F;Z+NRW60eGMS49sFEPSPIgWl1Sdz9AoGBAPVYNHUR&#x2F;yn6k23I7l1Jkd74LzIp3T74ENS00wNCyMeBGkg89o8wgcpybEH+L3UZCvMPykBakAYy5pmTIDsNKq&#x2F;eK+ggKJ4KqOPZFge8RL&#x2F;56RfsaDQz5lqrxSZBVMNvGoaJznRjq2Nqpw+q7ZIIgwmy4zt6XCPoTMcsvXhrumfJAoGAO2&#x2F;hNFM&#x2F;KJLqDaPAJnUHl3qs++6YKr0KHID+MmcFXepSrMn11Vs7wnk6ak3thsjG2nNBpgOx6ZwwAkw&#x2F;zBh0If5uPfAjsO1Jp&#x2F;NAt7HZKhZg&#x2F;vHlfxyhCOajhVbSjTeFt0nE0HcazLE2UnhSgk6lCIuTplzgYccuuPiXexj&#x2F;itUCgYEAzJ8jKRy4ZseRHDg&#x2F;7VgFrCPsIPdfijwUtYKWlxqlIBdh1yvZK3V2WmVyOtwHsq8PPcdGlMOzaSgcwas+b2G83275yaDAn4cecuHEiPERmdeR+5z1D8zVa3vlctF8I39PbTQUF2hlMgZqjRuvBmPI&#x2F;lbPQ&#x2F;T6UgxVtKxw3bVjg1kCgYBzno0VC5j0&#x2F;sU17s5lBHZPCgBLf+dxcG7Vy3dUet75UtMr3ICVxvATCCH&#x2F;I+8Y+H+ceYcATsVy7R+SqBFOaAszvS8b01TnPV0RVJ7wUeNL1KaDfADNwJEF9iKQc0TqosNANkSPyVyorDQBTK9voerbfTqO7kmY&#x2F;erHN3Xn&#x2F;TvDuA&#x3D;&#x3D;-----END RSA PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/jenkins16.png" alt="jenkins16"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins21.png" alt="jenkins21"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins22.png" alt="jenkins22"></p><h2 id="九、配置Jenkins全局工具"><a href="#九、配置Jenkins全局工具" class="headerlink" title="九、配置Jenkins全局工具"></a>九、配置Jenkins全局工具</h2><p><img src="https://www.wsjj.top/upload/2023/05/jenkins23.png" alt="jenkins23"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins24.png" alt="jenkins24"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins25.png" alt="jenkins25"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins26.png" alt="jenkins26"></p><h2 id="十、创建项目发布任务"><a href="#十、创建项目发布任务" class="headerlink" title="十、创建项目发布任务"></a>十、创建项目发布任务</h2><h3 id="1-创建任务"><a href="#1-创建任务" class="headerlink" title="1.创建任务"></a>1.创建任务</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins27.png" alt="jenkins27"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins28.png" alt="jenkins28"></p><h3 id="2-设置Gitlab连接"><a href="#2-设置Gitlab连接" class="headerlink" title="2.设置Gitlab连接"></a>2.设置<code>Gitlab</code>连接</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins29.png" alt="jenkins29"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins30.png" alt="jenkins30"></p><h4 id="如果遇到报错请看下面"><a href="#如果遇到报错请看下面" class="headerlink" title="如果遇到报错请看下面"></a>如果遇到报错请看下面</h4><blockquote><p><strong>遇到这种问题解决方法也很简单</strong><br><strong>相信接触过<code>Github</code>或者<code>Gitee</code>的小伙伴都知道，在创建仓库的时候，会选择仓库是否为&#x3D;&#x3D;公开仓库&#x3D;&#x3D;或者是&#x3D;&#x3D;私人仓库&#x3D;&#x3D;</strong><br><strong>上面没有遇到报错，是因为我已经提前设置了&#x3D;&#x3D;仓库为公开状态&#x3D;&#x3D;</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/jenkins31.png" alt="jenkins31"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins32.png" alt="jenkins32"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins33.png" alt="jenkins33"></p><h3 id="3-构建触发器"><a href="#3-构建触发器" class="headerlink" title="3.构建触发器"></a>3.构建触发器</h3><blockquote><p><strong>每<code>30</code>分钟拉取一次</strong><br><strong>这里的<code>H</code>代表串行执行</strong><br><strong>默认<code>*/30</code>代表并行执行，当服务增多的时候，代表所有服务都要同时拉取，同时编译，这样会造成服务器卡顿</strong><br><strong>而<code>H/30</code>代表串行执行，当服务增多的时候，会一个一个的编译安装，防止服务器卡顿</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/jenkins34.png" alt="jenkins34"></p><h3 id="4-定义pom-xml文件路径"><a href="#4-定义pom-xml文件路径" class="headerlink" title="4.定义pom.xml文件路径"></a>4.定义<code>pom.xml</code>文件路径</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins35.png" alt="jenkins35"></p><pre class="line-numbers language-none"><code class="language-none">clean package -Dmaven.test.skip&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-设置构建后的操作"><a href="#5-设置构建后的操作" class="headerlink" title="5.设置构建后的操作"></a>5.设置构建后的操作</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins36.png" alt="jenkins36"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins37.png" alt="jenkins37"></p><h4 id="执行的操作-仅供参考"><a href="#执行的操作-仅供参考" class="headerlink" title="执行的操作(仅供参考)"></a>执行的操作(仅供参考)</h4><pre class="line-numbers language-none"><code class="language-none">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191&#x2F;bin&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;shutdown.shcp &#x2F;app&#x2F;project&#x2F;*.war   &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;webapps&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、执行任务"><a href="#十一、执行任务" class="headerlink" title="十一、执行任务"></a>十一、执行任务</h2><p><img src="https://www.wsjj.top/upload/2023/05/jenkins38.png" alt="jenkins38"></p><h3 id="查看控制台输出信息"><a href="#查看控制台输出信息" class="headerlink" title="查看控制台输出信息"></a>查看控制台输出信息</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins39.png" alt="jenkins39"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins40.png" alt="jenkins40"></p><h3 id="构建完成，浏览器访问测试"><a href="#构建完成，浏览器访问测试" class="headerlink" title="构建完成，浏览器访问测试"></a>构建完成，浏览器访问测试</h3><p><img src="https://www.wsjj.top/upload/2023/05/jenkins41.png" alt="jenkins41"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins42.png" alt="jenkins42"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> tomcat </category>
          
          <category> 应用 </category>
          
          <category> 版本控制器 </category>
          
          <category> Git </category>
          
          <category> 持续集成工具 </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> centos </tag>
            
            <tag> jenkins </tag>
            
            <tag> tomcat </tag>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux应用系列教程】Jenkins持续集成工具安装教程</title>
      <link href="/2023/05/19/119/"/>
      <url>/2023/05/19/119/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux应用系列教程】Jenkins持续集成工具安装教程"><a href="#【Linux应用系列教程】Jenkins持续集成工具安装教程" class="headerlink" title="【Linux应用系列教程】Jenkins持续集成工具安装教程"></a>【Linux应用系列教程】Jenkins持续集成工具安装教程</h1><h2 id="一、关于Jenkins介绍"><a href="#一、关于Jenkins介绍" class="headerlink" title="一、关于Jenkins介绍"></a>一、关于Jenkins介绍</h2><ul><li>基于<code>java</code>开发的、 开源的、持续集成&#x2F;交付(CI&#x2F;CD)工具</li><li>插件化工具</li></ul><blockquote><p><strong>关于<code>CI/CD</code>：持续集成&#x2F;持续交付和持续部署</strong></p></blockquote><h2 id="二、Centos7部署Jenkins工具"><a href="#二、Centos7部署Jenkins工具" class="headerlink" title="二、Centos7部署Jenkins工具"></a>二、<code>Centos7</code>部署<code>Jenkins</code>工具</h2><h3 id="1-配置Yum源"><a href="#1-配置Yum源" class="headerlink" title="1.配置Yum源"></a>1.配置<code>Yum</code>源</h3><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo[root@jenkins ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo[root@jenkins ~]# yum clean all &amp;&amp; yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-安装jdk11"><a href="#2-安装jdk11" class="headerlink" title="2.安装jdk11"></a>2.安装<code>jdk11</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# yum install -y java-11-openjdk-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检查jdk环境"><a href="#检查jdk环境" class="headerlink" title="检查jdk环境"></a>检查<code>jdk</code>环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# java -versionopenjdk version &quot;11.0.19&quot; 2023-04-18 LTSOpenJDK Runtime Environment (Red_Hat-11.0.19.0.7-1.el7_9) (build 11.0.19+7-LTS)OpenJDK 64-Bit Server VM (Red_Hat-11.0.19.0.7-1.el7_9) (build 11.0.19+7-LTS, mixed mode, sharing)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-安装Jenkins"><a href="#3-安装Jenkins" class="headerlink" title="3.安装Jenkins"></a>3.安装<code>Jenkins</code></h3><blockquote><p><strong>建议安装最新版本，截止教程编写日期，最新版本为<code>2.405-1.1</code></strong><br><strong>国内<code>Jenkins</code>镜像站：<a href="https://mirrors.aliyun.com/jenkins/redhat/">https://mirrors.aliyun.com/jenkins/redhat/</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# yum install -y https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;jenkins&#x2F;redhat&#x2F;jenkins-2.405-1.1.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启动Jenkins服务"><a href="#启动Jenkins服务" class="headerlink" title="启动Jenkins服务"></a>启动<code>Jenkins</code>服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# systemctl enable --now jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-修改插件下载地址"><a href="#4-修改插件下载地址" class="headerlink" title="4.修改插件下载地址"></a>4.修改插件下载地址</h3><blockquote><p><strong>为了提升插件安装速度，修改官网地址为国内清华大学开源镜像站</strong><br><strong>如果您的网络条件良好，可以不用修改</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# sed -ri &#39;s|https:&#x2F;&#x2F;updates.jenkins.io&#x2F;update-center.json|http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;jenkins&#x2F;updates&#x2F;update-center.json|&#39; &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;hudson.model.UpdateCenter.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重启服务生效"><a href="#重启服务生效" class="headerlink" title="重启服务生效"></a>重启服务生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# systemctl restart jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><blockquote><p><strong>如果没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# netstat -tunlp | grep javatcp6       0      0 :::8080                 :::*                    LISTEN      6243&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-浏览器访问安装"><a href="#5-浏览器访问安装" class="headerlink" title="5.浏览器访问安装"></a>5.浏览器访问安装</h3><h4 id="A-复制密码"><a href="#A-复制密码" class="headerlink" title="A.复制密码"></a>A.复制密码</h4><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# cat &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword40be4e97236242a8b9e2570648613aa5#每个人的密码都不一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-web测试访问"><a href="#B-web测试访问" class="headerlink" title="B.web测试访问"></a>B.web测试访问</h4><p><img src="https://www.wsjj.top/upload/2023/05/jenkins01.png" alt="jenkins01"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins02.png" alt="jenkins02"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins03.png" alt="jenkins03"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins04.png" alt="jenkins04"></p><p><img src="https://www.wsjj.top/upload/2023/05/jenkins05.png" alt="jenkins05"></p><h3 id="6-修改插件下载地址为国内地址"><a href="#6-修改插件下载地址为国内地址" class="headerlink" title="6.修改插件下载地址为国内地址"></a>6.修改插件下载地址为国内地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# sed -i &#39;s&#x2F;https:\&#x2F;\&#x2F;updates.jenkins.io\&#x2F;download&#x2F;http:\&#x2F;\&#x2F;mirrors.tuna.tsinghua.edu.cn\&#x2F;jenkins&#x2F;g&#39; &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json &amp;&amp; sed -i &#39;s&#x2F;http:\&#x2F;\&#x2F;www.google.com&#x2F;https:\&#x2F;\&#x2F;www.baidu.com&#x2F;g&#39; &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重启服务器，让配置文件生效"><a href="#重启服务器，让配置文件生效" class="headerlink" title="重启服务器，让配置文件生效"></a>重启服务器，让配置文件生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@jenkins ~]# systemctl restart jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> 应用 </category>
          
          <category> 自动化运维工具 </category>
          
          <category> 持续集成工具 </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> 持续集成工具 </tag>
            
            <tag> jenkins </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux应用系列教程】Git分布式版本控制器</title>
      <link href="/2023/05/18/118/"/>
      <url>/2023/05/18/118/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux应用系列教程】Git分布式版本控制器"><a href="#【Linux应用系列教程】Git分布式版本控制器" class="headerlink" title="【Linux应用系列教程】Git分布式版本控制器"></a>【Linux应用系列教程】Git分布式版本控制器</h1><h2 id="一、Git的作用"><a href="#一、Git的作用" class="headerlink" title="一、Git的作用"></a>一、Git的作用</h2><ul><li>记录&#x3D;&#x3D;文本文件&#x3D;&#x3D;版本变化，便于回退</li><li>便于多人协同开发</li></ul><h2 id="二、安装Git工具"><a href="#二、安装Git工具" class="headerlink" title="二、安装Git工具"></a>二、安装Git工具</h2><h3 id="1-配置Yum源和Epel源"><a href="#1-配置Yum源和Epel源" class="headerlink" title="1.配置Yum源和Epel源"></a>1.配置<code>Yum</code>源和<code>Epel</code>源</h3><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# yum clean all &amp;&amp; yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装Git工具"><a href="#2-安装Git工具" class="headerlink" title="2.安装Git工具"></a>2.安装<code>Git</code>工具</h3><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# yum install -y git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Git初始化操作"><a href="#3-Git初始化操作" class="headerlink" title="3.Git初始化操作"></a>3.Git初始化操作</h3><blockquote><p><strong>不管在哪个平台安装的<code>Git</code>，第一步都要进行的初始化操作</strong><br><strong>设置用户名和邮箱，就相当于给自己一个身份</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# git config --global user.name &quot;wangshengjj&quot;[root@gitlab ~]# git config --global user.email &quot;wsjj@wangshengjj.work&quot;[root@gitlab ~]# git config --global color.ui true#开启颜色显示，便于以后查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、Git常用操作"><a href="#三、Git常用操作" class="headerlink" title="三、Git常用操作"></a>三、<code>Git</code>常用操作</h2><h3 id="1-创建一个仓库"><a href="#1-创建一个仓库" class="headerlink" title="1.创建一个仓库"></a>1.创建一个仓库</h3><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# mkdir &#x2F;opt&#x2F;work[root@gitlab ~]# cd &#x2F;opt&#x2F;work<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git init初始化空的 Git 版本库于 &#x2F;opt&#x2F;work&#x2F;.git&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>可以看到，初始化完一个仓库后，会默认创建一个名为<code>git</code>的隐藏目录</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# ls -a.  ..  .git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-提交修改"><a href="#2-提交修改" class="headerlink" title="2.提交修改"></a>2.提交修改</h3><h4 id="随便创建一个文件"><a href="#随便创建一个文件" class="headerlink" title="随便创建一个文件"></a>随便创建一个文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# touch file01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="把文件添加到-x3D-x3D-暂存区-x3D-x3D"><a href="#把文件添加到-x3D-x3D-暂存区-x3D-x3D" class="headerlink" title="把文件添加到&#x3D;&#x3D;暂存区&#x3D;&#x3D;"></a>把文件添加到&#x3D;&#x3D;暂存区&#x3D;&#x3D;</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git add file01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>可以使用<code>git status</code>命令查看状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git status# 位于分支 master## 初始提交## 要提交的变更：#   （使用 &quot;git rm --cached &lt;file&gt;...&quot; 撤出暂存区）##新文件：    file01#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>提交修改(提交到本地仓库)</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git commit -m &quot;新增file01文件&quot;#说明信息是必填的[master（根提交） f0eea8c] 新增file01文件 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 file01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看仓库状态"><a href="#3-查看仓库状态" class="headerlink" title="3.查看仓库状态"></a>3.查看仓库状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git status# 位于分支 master无文件要提交，干净的工作区#因为刚才我们已经提交修改了，所以是干净的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-版本回退"><a href="#4-版本回退" class="headerlink" title="4.版本回退"></a>4.版本回退</h3><h4 id="查看所有历史版本"><a href="#查看所有历史版本" class="headerlink" title="查看所有历史版本"></a>查看所有历史版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reflogf0eea8c HEAD@&#123;0&#125;: commit (initial): 新增file01文件#因为我们只提交了一次，所以只有一个版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="再提交一个修改"><a href="#再提交一个修改" class="headerlink" title="再提交一个修改"></a>再提交一个修改</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# touch file02[root@gitlab work]# git add file02[root@gitlab work]# git commit -m &quot;新增file02文件&quot;[master fd50780] 新增file02文件 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 file02[root@gitlab work]# lsfile01  file02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看所有版本信息"><a href="#查看所有版本信息" class="headerlink" title="查看所有版本信息"></a>查看所有版本信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reflogfd50780 HEAD@&#123;0&#125;: commit: 新增file02文件f0eea8c HEAD@&#123;1&#125;: commit (initial): 新增file01文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="回退到上个版本"><a href="#回退到上个版本" class="headerlink" title="回退到上个版本"></a>回退到上个版本</h4><pre class="line-numbers language-none"><code class="language-none"># git reset --hard &lt;版本ID&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reset --hard f0eea8cHEAD 现在位于 f0eea8c 新增file01文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# lsfile01[root@gitlab work]# git reflogf0eea8c HEAD@&#123;0&#125;: reset: moving to f0eea8cfd50780 HEAD@&#123;1&#125;: commit: 新增file02文件f0eea8c HEAD@&#123;2&#125;: commit (initial): 新增file01文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-重命名文件"><a href="#5-重命名文件" class="headerlink" title="5.重命名文件"></a>5.重命名文件</h3><h4 id="先回退版本"><a href="#先回退版本" class="headerlink" title="先回退版本"></a>先回退版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reset --hard fd50780HEAD 现在位于 fd50780 新增file02文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git mv file02 file666[root@gitlab work]# lsfile01  file666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git commit -m &quot;修改file02为file666&quot;[master 05b2fb6] 修改file02为file666 1 file changed, 0 insertions(+), 0 deletions(-) rename file02 &#x3D;&gt; file666 (100%)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reflog05b2fb6 HEAD@&#123;0&#125;: commit: 修改file02为file666fd50780 HEAD@&#123;1&#125;: reset: moving to fd50780f0eea8c HEAD@&#123;2&#125;: reset: moving to f0eea8cfd50780 HEAD@&#123;3&#125;: commit: 新增file02文件f0eea8c HEAD@&#123;4&#125;: commit (initial): 新增file01文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-删除文件"><a href="#6-删除文件" class="headerlink" title="6.删除文件"></a>6.删除文件</h3><h4 id="删除file666"><a href="#删除file666" class="headerlink" title="删除file666"></a>删除<code>file666</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git rm file666rm &#39;file666&#39;[root@gitlab work]# lsfile01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提交修改-1"><a href="#提交修改-1" class="headerlink" title="提交修改"></a>提交修改</h4><blockquote><p><strong>可以先看看仓库状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git status# 位于分支 master# 要提交的变更：#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）##删除：      file666#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git commit -m &quot;删除file666&quot;[master 4d5e5f4] 删除file666 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 file666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>查看所有历史版本</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reflog4d5e5f4 HEAD@&#123;0&#125;: commit: 删除file66605b2fb6 HEAD@&#123;1&#125;: commit: 修改file02为file666fd50780 HEAD@&#123;2&#125;: reset: moving to fd50780f0eea8c HEAD@&#123;3&#125;: reset: moving to f0eea8cfd50780 HEAD@&#123;4&#125;: commit: 新增file02文件f0eea8c HEAD@&#123;5&#125;: commit (initial): 新增file01文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-暂存区、工作区"><a href="#7-暂存区、工作区" class="headerlink" title="7.暂存区、工作区"></a>7.暂存区、工作区</h3><blockquote><p><strong>可以把暂存区理解为计算机的&#x3D;&#x3D;内存&#x3D;&#x3D;，工作区理解为计算机的&#x3D;&#x3D;硬盘&#x3D;&#x3D;</strong><br><strong>我们每次执行<code>git add 文件名</code>的时候，其实都是把文件存放到了&#x3D;&#x3D;暂存区&#x3D;&#x3D;</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# touch file03[root@gitlab work]# git status#还未提交的状态，查看状态# 位于分支 master# 未跟踪的文件:#   （使用 &quot;git add &lt;file&gt;...&quot; 以包含要提交的内容）##file03提交为空，但是存在尚未跟踪的文件（使用 &quot;git add&quot; 建立跟踪）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git add file03[root@gitlab work]# git status#可以看到已经放到暂存区了# 位于分支 master# 要提交的变更：#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）##新文件：    file03#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A-撤销暂存区的修改"><a href="#A-撤销暂存区的修改" class="headerlink" title="A.撤销暂存区的修改"></a>A.撤销暂存区的修改</h4><blockquote><p><strong>其实刚刚官方的提示信息，已经告诉了我们怎么撤出暂存区了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">git reset HEAD &lt;file&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reset HEAD file03<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-撤销未提交的修改"><a href="#B-撤销未提交的修改" class="headerlink" title="B.撤销未提交的修改"></a>B.撤销未提交的修改</h4><blockquote><p><strong>其实我们把文件从&#x3D;&#x3D;暂存区撤回&#x3D;&#x3D;的时候，这个文件就属于&#x3D;&#x3D;未提交&#x3D;&#x3D;的状态了</strong><br><strong>已知我们的<code>file01</code>文件是没有任何内容的，现在我们随便写点什么</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# vim file01[root@gitlab work]# cat file01wangshengjj 666欢迎来到网笙久久的博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="撤回未提交的修改"><a href="#撤回未提交的修改" class="headerlink" title="撤回未提交的修改"></a>撤回未提交的修改</h5><blockquote><p><strong>注意撤回未提交的修改之前，这个文件必须&#x3D;&#x3D;之前已经提交过&#x3D;&#x3D;了，<code>Git</code>才可以根据上次的提交信息进行回退操作</strong><br><strong>如果您想直接回退<code>file03</code>，是不可能的，因为我们从创建它到最后也没有一次提交过它，所以<code>Git</code>并不知道它上次长什么样子</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git checkout -- file01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看file01文件"><a href="#查看file01文件" class="headerlink" title="查看file01文件"></a>查看<code>file01</code>文件</h5><blockquote><p><strong>可以看到又回到了最初的版本，什么都没有</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# cat file01[root@gitlab work]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-撤销工作区的修改"><a href="#C-撤销工作区的修改" class="headerlink" title="C.撤销工作区的修改"></a>C.撤销工作区的修改</h4><blockquote><p><strong>当我们执行完<code>git commit</code>后，文件就会被存放到工作区，所以工作区的文件是&#x3D;&#x3D;无法撤销&#x3D;&#x3D;修改的</strong><br><strong>当然也有个简单粗暴的方法，那就是直接&#x3D;&#x3D;回退版本&#x3D;&#x3D;！</strong></p></blockquote><h5 id="模拟我们提交了一个错误的文件"><a href="#模拟我们提交了一个错误的文件" class="headerlink" title="模拟我们提交了一个错误的文件"></a>模拟我们提交了一个错误的文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git add file03[root@gitlab work]# git commit -m &quot;新增file03文件&quot;[master 2fd49e2] 新增file03文件 1 file changed, 2 insertions(+) create mode 100644 file03[root@gitlab work]# git reflog2fd49e2 HEAD@&#123;0&#125;: commit: 新增file03文件4d5e5f4 HEAD@&#123;1&#125;: commit: 删除file66605b2fb6 HEAD@&#123;2&#125;: commit: 修改file02为file666fd50780 HEAD@&#123;3&#125;: reset: moving to fd50780f0eea8c HEAD@&#123;4&#125;: reset: moving to f0eea8cfd50780 HEAD@&#123;5&#125;: commit: 新增file02文件f0eea8c HEAD@&#123;6&#125;: commit (initial): 新增file01文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="直接回退到上个版本即可"><a href="#直接回退到上个版本即可" class="headerlink" title="直接回退到上个版本即可"></a>直接回退到上个版本即可</h5><blockquote><p><strong>刚刚提交的错误文件<code>file03</code>已经消失啦</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reset --hard 4d5e5f4HEAD 现在位于 4d5e5f4 删除file666[root@gitlab work]# lsfile01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="突然我又想要file03文件了"><a href="#突然我又想要file03文件了" class="headerlink" title="突然我又想要file03文件了"></a>突然我又想要<code>file03</code>文件了</h5><blockquote><p><strong>直接再次回退到上一个版本即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git reset --hard 2fd49e2HEAD 现在位于 2fd49e2 新增file03文件[root@gitlab work]# lsfile01  file03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-分支branch"><a href="#8-分支branch" class="headerlink" title="8.分支branch"></a>8.分支branch</h3><ul><li>注：分支间是隔离的</li></ul><blockquote><p><strong>简单来说，每个分支都是独立的，分支之间互不干扰</strong><br><strong>最常见&#x3D;&#x3D;不同分支&#x3D;&#x3D;用来区别&#x3D;&#x3D;不同版本&#x3D;&#x3D;</strong><br><strong>就像下图，一共<code>79</code>个分支，代表<code>79</code>个版本</strong><br><strong>注意：<code>Master</code>是一个特殊分支(有的可能是Main)，它永远都是最新版的，也就是说，每更新一次分支，<code>Master</code>(Main)也会一起更新，它永远都是最新版本！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/git01.png" alt="git01"></p><h4 id="A-查看分支"><a href="#A-查看分支" class="headerlink" title="A.查看分支"></a>A.查看分支</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git branch* master#不同分支前面有个星号，代表当前正在使用的分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-创建分支"><a href="#B-创建分支" class="headerlink" title="B.创建分支"></a>B.创建分支</h4><blockquote><p><strong>以下两个命令都可以创建分支，你能看出什么区别吗</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git branch v0.1[root@gitlab work]# git branch* master  v0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git checkout -b v0.1.1切换到一个新分支 &#39;v0.1.1&#39;[root@gitlab work]# git branch  master  v0.1* v0.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>其实第二条命令，在创建分支的同时，也会自动帮我们切换到相应的分支</strong><br><strong>当然如果你是通过第一条命令创建的分支，也可以通过命令&#x3D;&#x3D;手动切换分支&#x3D;&#x3D;</strong></p></blockquote><h4 id="C-切换分支"><a href="#C-切换分支" class="headerlink" title="C.切换分支"></a>C.切换分支</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git checkout v0.1切换到分支 &#39;v0.1&#39;[root@gitlab work]# git branch  master* v0.1  v0.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-删除分支"><a href="#D-删除分支" class="headerlink" title="D.删除分支"></a>D.删除分支</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git branch -d v0.1.1已删除分支 v0.1.1（曾为 2fd49e2）。[root@gitlab work]# git branch  master* v0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-合并分支"><a href="#E-合并分支" class="headerlink" title="E.合并分支"></a>E.合并分支</h4><blockquote><p><strong>将指定的分支合并到当前分支</strong></p></blockquote><h5 id="我们在v0-1分支随便写点什么"><a href="#我们在v0-1分支随便写点什么" class="headerlink" title="我们在v0.1分支随便写点什么"></a>我们在<code>v0.1</code>分支随便写点什么</h5><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# touch file&#123;9..11&#125;[root@gitlab work]# lsfile01  file03  file10  file11  file9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="然后提交修改"><a href="#然后提交修改" class="headerlink" title="然后提交修改"></a>然后提交修改</h5><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git add .#一次性添加所有文件[root@gitlab work]# git status# 位于分支 v0.1# 要提交的变更：#   （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）##新文件：    file10#新文件：    file11#新文件：    file9#[root@gitlab work]# git commit -m &quot;v0.1版本更新内容&quot;[v0.1 4f88086] v0.1版本更新内容 3 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 file10 create mode 100644 file11 create mode 100644 file9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git checkout master切换到分支 &#39;master&#39;[root@gitlab work]# lsfile01  file03#可以看到这时候的Master分支和v0.1分支是不一样的！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><blockquote><p><strong>合并<code>v0.1</code>分支到<code>Master</code>分支</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git merge v0.1更新 2fd49e2..4f88086Fast-forward file10 | 0 file11 | 0 file9  | 0 3 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 file10 create mode 100644 file11 create mode 100644 file9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>可以看到<code>v0.1</code>分支上新建的那几个文件已经合并过来了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# lsfile01  file03  file10  file11  file9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-克隆、上传"><a href="#9-克隆、上传" class="headerlink" title="9.克隆、上传"></a>9.克隆、上传</h3><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git clone 仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="上传远程仓库"><a href="#上传远程仓库" class="headerlink" title="上传远程仓库"></a>上传远程仓库</h4><blockquote><p><strong><code>commit</code>只是上传到本地仓库，如果想上传到远程仓库，需要<code>push</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab work]# git push -u origin 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>关于<code>clone</code>和<code>push</code>下面有更详细的使用方法</strong></p></blockquote><h2 id="四、部署本地Git服务器"><a href="#四、部署本地Git服务器" class="headerlink" title="四、部署本地Git服务器"></a>四、部署本地Git服务器</h2><h3 id="1-常见的Git服务器"><a href="#1-常见的Git服务器" class="headerlink" title="1.常见的Git服务器"></a>1.常见的Git服务器</h3><ul><li>公共的<ul><li><a href="https://github.com/">https://github.com/</a></li><li><a href="https://gitee.com/">https://gitee.com/</a></li></ul></li><li>私人的<ul><li><code>gitlab</code></li></ul></li></ul><h3 id="2-配置主机名解析"><a href="#2-配置主机名解析" class="headerlink" title="2.配置主机名解析"></a>2.配置主机名解析</h3><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# hostnamectl set-hostname gitlab.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.13 gitlab.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-安装Gitlab"><a href="#3-安装Gitlab" class="headerlink" title="3.安装Gitlab"></a>3.安装<code>Gitlab</code></h3><blockquote><p><strong>清华大学开源镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# yum install -y https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el7&#x2F;gitlab-ce-13.9.7-ce.0.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-编辑Gitlab配置文件"><a href="#4-编辑Gitlab配置文件" class="headerlink" title="4.编辑Gitlab配置文件"></a>4.编辑<code>Gitlab</code>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb#配置文件并不完整，仅展示修改的地方external_url &#39;http:&#x2F;&#x2F;gitlab.linux.com&#39;#这里修改为自己的主机名或者虚拟机IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-启动Gitlab"><a href="#5-启动Gitlab" class="headerlink" title="5.启动Gitlab"></a>5.启动<code>Gitlab</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@gitlab ~]# gitlab-ctl reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-修改Windows的hosts文件"><a href="#6-修改Windows的hosts文件" class="headerlink" title="6.修改Windows的hosts文件"></a>6.修改<code>Windows</code>的<code>hosts</code>文件</h3><blockquote><p><strong>路径：<code>C:\Windows\System32\drivers\etc\hosts</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/git02.png" alt="git02"></p><h3 id="7-配置Gitlab"><a href="#7-配置Gitlab" class="headerlink" title="7.配置Gitlab"></a>7.配置<code>Gitlab</code></h3><p><img src="https://www.wsjj.top/upload/2023/05/git03.png" alt="git03"></p><p><img src="https://www.wsjj.top/upload/2023/05/git04.png" alt="git04"></p><h3 id="8-创建一个私人仓库"><a href="#8-创建一个私人仓库" class="headerlink" title="8.创建一个私人仓库"></a>8.创建一个私人仓库</h3><p><img src="https://www.wsjj.top/upload/2023/05/git05.png" alt="git05"></p><p><img src="https://www.wsjj.top/upload/2023/05/git06.png" alt="git06"></p><p><img src="https://www.wsjj.top/upload/2023/05/git07.png" alt="git07"></p><blockquote><p><strong>可以查看刚刚我们创建的仓库了</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/git08.png" alt="git08"></p><h3 id="9-克隆仓库到本地"><a href="#9-克隆仓库到本地" class="headerlink" title="9.克隆仓库到本地"></a>9.克隆仓库到本地</h3><blockquote><p><strong>注意，在<code>Git clone</code>之前要注意配置用户名和邮箱！</strong></p></blockquote><h4 id="A-第二台主机修改hosts文件"><a href="#A-第二台主机修改hosts文件" class="headerlink" title="A.第二台主机修改hosts文件"></a>A.第二台主机修改<code>hosts</code>文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.13 gitlab.linux.com gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-克隆仓库到本地"><a href="#B-克隆仓库到本地" class="headerlink" title="B.克隆仓库到本地"></a>B.克隆仓库到本地</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# git clone http:&#x2F;&#x2F;gitlab.linux.com&#x2F;root&#x2F;beta-project.git正克隆到 &#39;beta-project&#39;...Username for &#39;http:&#x2F;&#x2F;gitlab.linux.com&#39;: root#gitlab的用户名Password for &#39;http:&#x2F;&#x2F;root@gitlab.linux.com&#39;: #gitlab的密码warning: 您似乎克隆了一个空版本库。#本来就是空的，正常提示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# cd beta-project&#x2F;[root@zabbix_server beta-project]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10-上传文件到远程仓库"><a href="#10-上传文件到远程仓库" class="headerlink" title="10.上传文件到远程仓库"></a>10.上传文件到远程仓库</h3><h4 id="A-先初始化"><a href="#A-先初始化" class="headerlink" title="A.先初始化"></a>A.先初始化</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server beta-project]# git init重新初始化现存的 Git 版本库于 &#x2F;root&#x2F;beta-project&#x2F;.git&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-随便创建一个测试文件"><a href="#B-随便创建一个测试文件" class="headerlink" title="B.随便创建一个测试文件"></a>B.随便创建一个测试文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server beta-project]# touch file&#123;1..4&#125;[root@zabbix_server beta-project]# touch &#123;5..7&#125;.mp3[root@zabbix_server beta-project]# ls5.mp3  6.mp3  7.mp3  file1  file2  file3  file4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-先上传到本地仓库"><a href="#C-先上传到本地仓库" class="headerlink" title="C.先上传到本地仓库"></a>C.先上传到本地仓库</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server beta-project]# git add .[root@zabbix_server beta-project]# git commit -m &quot;第一次提交&quot;[master（根提交） efa9068] 第一次提交 7 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 5.mp3 create mode 100644 6.mp3 create mode 100644 7.mp3 create mode 100644 file1 create mode 100644 file2 create mode 100644 file3 create mode 100644 file4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-上传到远程仓库"><a href="#D-上传到远程仓库" class="headerlink" title="D.上传到远程仓库"></a>D.上传到远程仓库</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server beta-project]# git push -u origin masterUsername for &#39;http:&#x2F;&#x2F;gitlab.linux.com&#39;: root#gitlab的用户名Password for &#39;http:&#x2F;&#x2F;root@gitlab.linux.com&#39;: #gitlab的密码Counting objects: 3, done.Compressing objects: 100% (2&#x2F;2), done.Writing objects: 100% (3&#x2F;3), 267 bytes | 0 bytes&#x2F;s, done.Total 3 (delta 0), reused 0 (delta 0)To http:&#x2F;&#x2F;gitlab.linux.com&#x2F;root&#x2F;beta-project.git * [new branch]      master -&gt; master分支 master 设置为跟踪来自 origin 的远程分支 master。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-查看Gitlab远程仓库的web端"><a href="#E-查看Gitlab远程仓库的web端" class="headerlink" title="E.查看Gitlab远程仓库的web端"></a>E.查看<code>Gitlab</code>远程仓库的<code>web</code>端</h4><p><img src="https://www.wsjj.top/upload/2023/05/git09.png" alt="git09"></p><h4 id="F-创建公开仓库"><a href="#F-创建公开仓库" class="headerlink" title="F.创建公开仓库"></a>F.创建公开仓库</h4><p><img src="https://www.wsjj.top/upload/2023/05/git10.png" alt="git10"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> 应用 </category>
          
          <category> 版本控制器 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> git </tag>
            
            <tag> 版本控制器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自动化运维系列教程】Ansible Playbook剧本部署LNMP环境+WordPress博客</title>
      <link href="/2023/05/16/117/"/>
      <url>/2023/05/16/117/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【自动化运维系列教程】Ansible-Playbook剧本部署LNMP环境-WordPress博客"><a href="#【自动化运维系列教程】Ansible-Playbook剧本部署LNMP环境-WordPress博客" class="headerlink" title="【自动化运维系列教程】Ansible Playbook剧本部署LNMP环境+WordPress博客"></a>【自动化运维系列教程】Ansible Playbook剧本部署LNMP环境+WordPress博客</h1><blockquote><p><strong>关于<code>Ansible Playbook</code>教程：<a href="https://www.wsjj.top/archives/116">https://www.wsjj.top/archives/116</a></strong><br><strong>关于<code>Ansible</code>基本模块的使用教程：<a href="https://www.wsjj.top/archives/115">https://www.wsjj.top/archives/115</a></strong><br><strong>关于<code>LNMP</code>环境部署教程：<a href="https://www.wsjj.top/archives/88">https://www.wsjj.top/archives/88</a></strong></p></blockquote><h2 id="一、编写Playbook"><a href="#一、编写Playbook" class="headerlink" title="一、编写Playbook"></a>一、编写Playbook</h2><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;LNMP.yaml- hosts: dbserver #指定安装主机组  user: root  #指定用户  gather_facts: false #不调用setup模块中的数据  tasks:    - name: install wget  #安装必要的组件      yum: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present      loop:         - wget        - net-tools    - name: install yum #配置国内yum源和epel源      shell: |          wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo          wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo          yum clean all &amp;&amp; yum makecache fast    - name: Download Nginx #下载Nginx      shell: chdir&#x3D;&#x2F;root wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.20.2.tar.gz    - name: tar Nginx #解压Nginx      shell: chdir&#x3D;&#x2F;root tar xf nginx-1.20.2.tar.gz    - name: install Nginx Software Dependency #安装Nginx需要的依赖      yum: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present      loop:        - gcc        - openssl-devel        - pcre-devel        - zlib-devel    - name: mkdir Nginx dir #创建Nginx需要的临时数据目录      shell: mkdir -p &#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;&#123;client,proxy,fastcgi,uwsgi,scgi&#125;    - name: useradd Nginx #创建Nginx用户      user: name&#x3D;nginx shell&#x3D;&#x2F;sbin&#x2F;nologin    - name: Make Nginx  #编译      shell: chdir&#x3D;&#x2F;root&#x2F;nginx-1.20.2 .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-stream --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;    - name: Install Nginx #编译安装      shell: |        chdir&#x3D;&#x2F;root&#x2F;nginx-1.20.2        make        make install    - name: Start Nginx #启动Nginx      shell:           &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx;        - name: Enable Nginx  #设置Nginx开机自启动      lineinfile:         path: &quot;&#x2F;etc&#x2F;rc.d&#x2F;rc.local&quot;        line: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&quot;        mode: &#39;0777&#39;        - name: Download PHP7.4  #下载PHP网络源      shell: yum -y install https:&#x2F;&#x2F;rpms.remirepo.net&#x2F;enterprise&#x2F;remi-release-7.rpm    - name: Install yum-utils #安装依赖      yum: name&#x3D;yum-utils state&#x3D;present    - name: Enable remi-php74 #启用源      shell: yum-config-manager --enable remi-php74    - name: Install PHP Software Dependency #安装PHP      yum: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present      loop:        - php          - php-cli         - php-fpm         - php-mysqlnd         - php-zip         - php-devel         - php-gd         - php-mcrypt         - php-mbstring         - php-curl         - php-xml         - php-pear         - php-bcmath         - php-json         - php-redis    - name: PHP User  #修改PHP运行用户为Nginx      shell: |        sed -ri &#39;s|user &#x3D; apache|user &#x3D; nginx|&#39; &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf        sed -ri &#39;s|group &#x3D; apache|group &#x3D; nginx|&#39; &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf    - name: Start PHP7.4  #启动PHP服务      service: name&#x3D;php-fpm state&#x3D;started enabled&#x3D;yes        - name: Install MariaDB #安装MriaDB数据库      yum: name&#x3D;mariadb-server state&#x3D;present    - name: Start MariaDB #设置MariaDB服务开机自启动      service: name&#x3D;mariadb state&#x3D;started enabled&#x3D;yes    - name: MKdir Nginx and www and log #创建用到的目录      file: path&#x3D;&#123;&#123; item[&quot;path&quot;] &#125;&#125; state&#x3D;directory      loop:        - &#123;&quot;path&quot;:&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&quot;&#125;        - &#123;&quot;path&quot;:&quot;&#x2F;www&#x2F;wwwroot&#x2F;blog.wsjj.com&quot;&#125;        - &#123;&quot;path&quot;:&quot;&#x2F;var&#x2F;log&#x2F;nginx&quot;&#125;    - name: Download WordPress  #下载Wordpress      shell: chdir&#x3D;&#x2F;root wget https:&#x2F;&#x2F;cn.wordpress.org&#x2F;latest-zh_CN.tar.gz    - name: tar WordPress #解压Wordpress      shell: chdir&#x3D;&#x2F;root tar xf latest-zh_CN.tar.gz    - name: copy WordPress  #复制Wordpress文件到网页目录      shell: cp -r &#x2F;root&#x2F;wordpress&#x2F;* &#x2F;www&#x2F;wwwroot&#x2F;blog.wsjj.com&#x2F;    - name: Permissions #设置网页目录权限      shell: |        chmod -R 0775 &#x2F;www&#x2F;wwwroot&#x2F;blog.wsjj.com        chown -R nginx.nginx &#x2F;www&#x2F;wwwroot&#x2F;blog.wsjj.com    - name: copy Nginx.conf #复制Nginx需要的配置文件      copy: src&#x3D;&#123;&#123; item[&quot;src&quot;] &#125;&#125; dest&#x3D;&#123;&#123; item[&quot;dest&quot;] &#125;&#125; owner&#x3D;nginx group&#x3D;nginx mode&#x3D;0775      loop:         - &#123;&quot;src&quot;:&quot;&#x2F;root&#x2F;ansible&#x2F;work&#x2F;nginx.conf&quot;,&quot;dest&quot;:&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;&quot;&#125;        - &#123;&quot;src&quot;:&quot;&#x2F;root&#x2F;ansible&#x2F;work&#x2F;blog.conf&quot;,&quot;dest&quot;:&quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;&quot;&#125;        - name: Restart Nginx #重新加载Nginx配置文件      shell: &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload        - name: Create WordPress database and users;  #创建Wordpress用到的数据库和用户      shell: |        mysql -uroot -e &quot;create database wordpress charset utf8mb4&quot;        mysql -uroot -e &quot;grant all on wordpress.* to &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;WWW.1.com&#39;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、用到的Nginx配置文件"><a href="#二、用到的Nginx配置文件" class="headerlink" title="二、用到的Nginx配置文件"></a>二、用到的Nginx配置文件</h2><h3 id="1-主配置文件"><a href="#1-主配置文件" class="headerlink" title="1.主配置文件"></a>1.主配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;nginx.conf#user  nobody;worker_processes  1;#error_log  logs&#x2F;error.log;#error_log  logs&#x2F;error.log  notice;#error_log  logs&#x2F;error.log  info;#pid        logs&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;http &#123;    include       mime.types;    default_type  application&#x2F;octet-stream;    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  logs&#x2F;access.log  main;    include &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    #gzip  on;    server &#123;        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs&#x2F;host.access.log  main;        location &#x2F; &#123;            root   html;            index  index.html index.htm;        &#125;        #error_page  404              &#x2F;404.html;        # redirect server error pages to the static page &#x2F;50x.html        #        error_page   500 502 503 504  &#x2F;50x.html;        location &#x3D; &#x2F;50x.html &#123;            root   html;        &#125;        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \.php$ &#123;        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;        #&#125;        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        #location ~ \.php$ &#123;        #    root           html;        #    fastcgi_pass   127.0.0.1:9000;        #    fastcgi_index  index.php;        #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;        #    include        fastcgi_params;        #&#125;        # deny access to .htaccess files, if Apache&#39;s document root        # concurs with nginx&#39;s one        #        #location ~ &#x2F;\.ht &#123;        #    deny  all;        #&#125;    &#125;    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server &#123;    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location &#x2F; &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;    # HTTPS server    #    #server &#123;    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location &#x2F; &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-子配置文件"><a href="#2-子配置文件" class="headerlink" title="2.子配置文件"></a>2.子配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;blog.conf server &#123;   listen 80;   server_name blog.wsjj.com;   access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_access.log main;   error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;blog_error.log error;   location &#x2F; &#123;       root &#x2F;www&#x2F;wwwroot&#x2F;blog.wsjj.com;       index index.html index.php;   &#125;   location ~ \.php$ &#123;       root           &#x2F;www&#x2F;wwwroot&#x2F;blog.wsjj.com;       fastcgi_pass   127.0.0.1:9000;       fastcgi_index  index.php;       fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;       include        fastcgi_params;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> Ansible </category>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> nginx </category>
          
          <category> wordpress </category>
          
          <category> mysql </category>
          
          <category> 应用 </category>
          
          <category> 自动化运维工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器搭建 </tag>
            
            <tag> centos </tag>
            
            <tag> ansible </tag>
            
            <tag> wordpress </tag>
            
            <tag> lnmp环境 </tag>
            
            <tag> 博客搭建教程 </tag>
            
            <tag> ansible playbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自动化运维系列教程】Ansible Playbook剧本</title>
      <link href="/2023/05/15/116/"/>
      <url>/2023/05/15/116/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【自动化运维系列教程】Ansible-Playbook剧本"><a href="#【自动化运维系列教程】Ansible-Playbook剧本" class="headerlink" title="【自动化运维系列教程】Ansible Playbook剧本"></a>【自动化运维系列教程】Ansible Playbook剧本</h1><h2 id="一、playbook剧本介绍"><a href="#一、playbook剧本介绍" class="headerlink" title="一、playbook剧本介绍"></a>一、playbook剧本介绍</h2><ul><li>优势<ul><li>便于功能的重用</li></ul></li><li>本质上就是<code>.yml</code>结尾的文件</li><li>遵循<code>YAML</code>语法编写</li></ul><h3 id="1-YAML语法"><a href="#1-YAML语法" class="headerlink" title="1.YAML语法"></a>1.<code>YAML</code>语法</h3><ul><li>一个键对应一个值时，冒号后面必须要有空格</li></ul><blockquote><p><code>name</code>: <code>nginx</code><br>一个键对应多个值时，分行写<br><code>键:</code><br>     <code> - 值</code><br>     <code> - 值</code><br>     <code> - 值</code><br>同级别代码要有相同缩进，建议是<code>4</code>个空格</p></blockquote><h3 id="2-Playbook基本结构"><a href="#2-Playbook基本结构" class="headerlink" title="2.Playbook基本结构"></a>2.<code>Playbook</code>基本结构</h3><pre class="line-numbers language-none"><code class="language-none">- hosts: 主机或主机组   user: 用户名  tasks:      - name: 任务名称    模块名称: 参数  参数  参数       - name: 任务名称    模块名称: 参数  参数  参数       - name: 任务名称    模块名称: 参数  参数  参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-执行Playbook剧本"><a href="#3-执行Playbook剧本" class="headerlink" title="3.执行Playbook剧本"></a>3.执行<code>Playbook</code>剧本</h3><pre class="line-numbers language-none"><code class="language-none">#  ansible-playbook  剧本存放路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、Playbook的简单应用"><a href="#二、Playbook的简单应用" class="headerlink" title="二、Playbook的简单应用"></a>二、<code>Playbook</code>的简单应用</h2><h3 id="1-基本应用"><a href="#1-基本应用" class="headerlink" title="1.基本应用"></a>1.基本应用</h3><h4 id="创建名为king的用户，指定用户shell为-x2F-bin-x2F-bash"><a href="#创建名为king的用户，指定用户shell为-x2F-bin-x2F-bash" class="headerlink" title="创建名为king的用户，指定用户shell为&#x2F;bin&#x2F;bash"></a>创建名为king的用户，指定用户shell为&#x2F;bin&#x2F;bash</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createking.yaml- hosts: appserver  user: root  tasks:       - name: create king user         user: name&#x3D;king shell&#x3D;&#x2F;bin&#x2F;bash state&#x3D;present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行剧本"><a href="#执行剧本" class="headerlink" title="执行剧本"></a>执行剧本</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createking.yamlPLAY [webserver] *********************************************************************************************TASK [Gathering Facts] ***************************************************************************************ok: [node2]ok: [node1]TASK [create king user] **************************************************************************************changed: [node1]changed: [node2]PLAY RECAP ***************************************************************************************************node1                      : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-剧本在执行用户自定义的任务前，会自动执行一个名称为Gathering-Facts的任务，即调用setup模块搜集被管理机的状态数据，可添加如下参数取消该行为"><a href="#2-剧本在执行用户自定义的任务前，会自动执行一个名称为Gathering-Facts的任务，即调用setup模块搜集被管理机的状态数据，可添加如下参数取消该行为" class="headerlink" title="2.剧本在执行用户自定义的任务前，会自动执行一个名称为Gathering Facts的任务，即调用setup模块搜集被管理机的状态数据，可添加如下参数取消该行为"></a>2.剧本在执行用户自定义的任务前，会自动执行一个名称为<code>Gathering Facts</code>的任务，即调用<code>setup</code>模块搜集被管理机的状态数据，可添加如下参数取消该行为</h3><pre class="line-numbers language-none"><code class="language-none">- hosts: appserver  user: root  gather_facts: false#添加此段内容  tasks:      - name: create hadoop user        user: name&#x3D;hadoop shell&#x3D;&#x2F;sbin&#x2F;nologin state&#x3D;present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Playbook中变量的使用"><a href="#三、Playbook中变量的使用" class="headerlink" title="三、Playbook中变量的使用"></a>三、<code>Playbook</code>中变量的使用</h2><h3 id="1-剧本中如何调用变量"><a href="#1-剧本中如何调用变量" class="headerlink" title="1.剧本中如何调用变量"></a>1.剧本中如何调用变量</h3><pre class="line-numbers language-none"><code class="language-none">&#123;&#123; 变量名称 &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-在Playbook中直接定义变量"><a href="#2-在Playbook中直接定义变量" class="headerlink" title="2.在Playbook中直接定义变量"></a>2.在<code>Playbook</code>中直接定义变量</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createmartin.yaml- hosts: webserver  user: root  gather_facts: false  vars:    - user_name: &quot;martin&quot;    - shell_name: &quot;&#x2F;sbin&#x2F;nologin&quot;  tasks:    - name: create user martin      user: name&#x3D;&#123;&#123; user_name &#125;&#125; shell&#x3D;&#123;&#123; shell_name &#125;&#125; state&#x3D;present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createmartin.yamlPLAY [webserver] *********************************************************************************************TASK [create user martin] ************************************************************************************changed: [node1]changed: [node2]PLAY RECAP ***************************************************************************************************node1                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查结果"><a href="#检查结果" class="headerlink" title="检查结果"></a>检查结果</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;id martin&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1003(martin) gid&#x3D;1003(martin) 组&#x3D;1003(martin)node2 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1003(martin) gid&#x3D;1003(martin) 组&#x3D;1003(martin)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在-x3D-x3D-主机清单-x3D-x3D-中定义变量"><a href="#3-在-x3D-x3D-主机清单-x3D-x3D-中定义变量" class="headerlink" title="3.在&#x3D;&#x3D;主机清单&#x3D;&#x3D;中定义变量"></a>3.在&#x3D;&#x3D;主机清单&#x3D;&#x3D;中定义变量</h3><h4 id="A-为主机组定义变量"><a href="#A-为主机组定义变量" class="headerlink" title="A.为主机组定义变量"></a>A.为主机组定义变量</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;hosts#在文件底部新增内容[webserver:vars]user_name&#x3D;&quot;jerry&quot;shell_name&#x3D;&quot;&#x2F;bin&#x2F;bash&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="编写脚本文件"><a href="#编写脚本文件" class="headerlink" title="编写脚本文件"></a>编写脚本文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createjerry.yaml- hosts: webserver  user: root  gather_facts: false  tasks:   - name: create user jerry     user: name&#x3D;&#123;&#123; user_name &#125;&#125; shell&#x3D;&#123;&#123; shell_name &#125;&#125; state&#x3D;present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="执行剧本-1"><a href="#执行剧本-1" class="headerlink" title="执行剧本"></a>执行剧本</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createjerry.yamlPLAY [webserver] *********************************************************************************************TASK [create user jerry] *************************************************************************************changed: [node1]changed: [node2]PLAY RECAP ***************************************************************************************************node1                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;id jerry&#39;node2 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1004(jerry) gid&#x3D;1004(jerry) 组&#x3D;1004(jerry)node1 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1004(jerry) gid&#x3D;1004(jerry) 组&#x3D;1004(jerry)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-为单个主机定义变量"><a href="#B-为单个主机定义变量" class="headerlink" title="B.为单个主机定义变量"></a>B.为单个主机定义变量</h4><h5 id="修改主机清单文件"><a href="#修改主机清单文件" class="headerlink" title="修改主机清单文件"></a>修改主机清单文件</h5><pre class="line-numbers language-none"><code class="language-none">[webserver]node1 user_name&#x3D;&quot;test01&quot;node2 user_name&#x3D;&quot;test02&quot;[webserver:vars]shell_name&#x3D;&quot;&#x2F;bin&#x2F;bash&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="编写Playbook剧本"><a href="#编写Playbook剧本" class="headerlink" title="编写Playbook剧本"></a>编写<code>Playbook</code>剧本</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createtest.yaml- hosts: webserver  user: root  gather_facts: false  tasks:    - name: create user test      user: name&#x3D;&#123;&#123; user_name &#125;&#125; shell&#x3D;&#123;&#123; shell_name &#125;&#125; state&#x3D;present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试剧本"><a href="#测试剧本" class="headerlink" title="测试剧本"></a>测试剧本</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createtest.yamlPLAY [webserver] *********************************************************************************************TASK [create user test] **************************************************************************************changed: [node2]changed: [node1]PLAY RECAP ***************************************************************************************************node1                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查询结果-1"><a href="#查询结果-1" class="headerlink" title="查询结果"></a>查询结果</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;tail -n 1 &#x2F;etc&#x2F;passwd&#39;node2 | CHANGED | rc&#x3D;0 &gt;&gt;test02:x:1005:1005::&#x2F;home&#x2F;test02:&#x2F;bin&#x2F;bashnode1 | CHANGED | rc&#x3D;0 &gt;&gt;test01:x:1005:1005::&#x2F;home&#x2F;test01:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-在外部文件定义变量"><a href="#4-在外部文件定义变量" class="headerlink" title="4.在外部文件定义变量"></a>4.在外部文件定义变量</h3><blockquote><p><strong>先删除之前在<code>hosts</code>清单文件中定义的变量</strong></p></blockquote><h4 id="A-编写变量文件"><a href="#A-编写变量文件" class="headerlink" title="A.编写变量文件"></a>A.编写变量文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;userinfouser_name: &quot;test03&quot;shell_name: &quot;&#x2F;bin&#x2F;false&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-编写Playbook剧本文件"><a href="#B-编写Playbook剧本文件" class="headerlink" title="B.编写Playbook剧本文件"></a>B.编写<code>Playbook</code>剧本文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createtest03.yaml- hosts: webserver  user: root  gather_facts: false  vars_files:    - &#x2F;root&#x2F;ansible&#x2F;work&#x2F;userinfo  tasks:    - name: create user test03      user: name&#x3D;&#123;&#123; user_name &#125;&#125; shell&#x3D;&#123;&#123; shell_name &#125;&#125; state&#x3D;present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="执行剧本-2"><a href="#执行剧本-2" class="headerlink" title="执行剧本"></a>执行剧本</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createtest03.yamlPLAY [webserver] *********************************************************************************************TASK [create user test03] ************************************************************************************changed: [node2]changed: [node1]PLAY RECAP ***************************************************************************************************node1                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查询结果-2"><a href="#查询结果-2" class="headerlink" title="查询结果"></a>查询结果</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;id test03&#39;node2 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1006(test03) gid&#x3D;1006(test03) 组&#x3D;1006(test03)node1 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1006(test03) gid&#x3D;1006(test03) 组&#x3D;1006(test03)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-加密外部变量文件"><a href="#C-加密外部变量文件" class="headerlink" title="C.加密外部变量文件"></a>C.加密外部变量文件</h4><h5 id="修改变量文件中的内容"><a href="#修改变量文件中的内容" class="headerlink" title="修改变量文件中的内容"></a>修改变量文件中的内容</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;userinfouser_name: &quot;test04&quot;shell_name: &quot;&#x2F;bin&#x2F;false&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="加密文件"><a href="#加密文件" class="headerlink" title="加密文件"></a>加密文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-vault encrypt &#x2F;root&#x2F;ansible&#x2F;work&#x2F;userinfo New Vault password: Confirm New Vault password: Encryption successful[root@zabbix_server ansible]# cat &#x2F;root&#x2F;ansible&#x2F;work&#x2F;userinfo #已经是加密状态了$ANSIBLE_VAULT;1.1;AES256323331666638653031396131653166663761323039333537386361383138303836393336623165333463636432613632313263363534326435393766616336360a623266636666653832336265616334316363623964636139626435333165306265363466343062373334636138323062646662656165653130353133623966390a663130373761636537386637613136656564326663623666346339376232623839663965393937306237623562396263353530656231306364396438393531353536363230303034393030326432396236366665366537636639623166316137<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="执行剧本-3"><a href="#执行剧本-3" class="headerlink" title="执行剧本"></a>执行剧本</h5><blockquote><p><strong>执行&#x3D;&#x3D;加密文件&#x3D;&#x3D;的时候，需要携带<code>--ask-vault</code>参数</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createtest04.yaml- hosts: webserver  user: root  gather_facts: false  vars_files:    - &#x2F;root&#x2F;ansible&#x2F;work&#x2F;userinfo  tasks:    - name: create user test04      user: name&#x3D;&#123;&#123; user_name &#125;&#125; shell&#x3D;&#123;&#123; shell_name &#125;&#125; state&#x3D;present<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook --ask-vault &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createtest04.yaml Vault password: PLAY [webserver] ********************************************************************************************TASK [create user test04] ***********************************************************************************changed: [node2]changed: [node1]PLAY RECAP **************************************************************************************************node1                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;id test04&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1007(test04) gid&#x3D;1007(test04) 组&#x3D;1007(test04)node2 | CHANGED | rc&#x3D;0 &gt;&gt;uid&#x3D;1007(test04) gid&#x3D;1007(test04) 组&#x3D;1007(test04)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、案例：批量部署MariaDB"><a href="#四、案例：批量部署MariaDB" class="headerlink" title="四、案例：批量部署MariaDB"></a>四、案例：批量部署MariaDB</h2><blockquote><p><strong>分别在<code>node1</code>和<code>node2</code>上部署<code>MriaDB</code>,并且设置好<code>ServerID</code>和开启&#x3D;&#x3D;二进制日志&#x3D;&#x3D;</strong></p></blockquote><h3 id="1-为不用主机定义变量"><a href="#1-为不用主机定义变量" class="headerlink" title="1.为不用主机定义变量"></a>1.为不用主机定义变量</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;hosts[webserver]node1 id&#x3D;11node2 id&#x3D;12[dbserver]node3[webserver:vars]slave&#x3D;&quot;master&quot;[all:vars]ansible_password&#x3D;centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义My-cnf配置文件"><a href="#2-自定义My-cnf配置文件" class="headerlink" title="2.自定义My.cnf配置文件"></a>2.自定义<code>My.cnf</code>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;my.cnf[mysqld]server_id&#x3D;&#123;&#123; id &#125;&#125;#填写我们的自定义变量log_bin&#x3D;&#123;&#123; slave &#125;&#125;#填写我们的自定义变量datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqlsocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links&#x3D;0# Settings user and group are ignored when systemd is used.# If you need to run mysqld under a different user or group,# customize your systemd unit file for mariadb according to the# instructions in http:&#x2F;&#x2F;fedoraproject.org&#x2F;wiki&#x2F;Systemd[mysqld_safe]log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.logpid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid## include all files from the config directory#!includedir &#x2F;etc&#x2F;my.cnf.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写剧本"><a href="#3-编写剧本" class="headerlink" title="3.编写剧本"></a>3.编写剧本</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;mysql.yaml- hosts: webserver  user: root  tasks:    - name: install mariadb      yum: name&#x3D;mariadb-server state&#x3D;present    - name: push mysql config      template: src&#x3D;&#x2F;root&#x2F;ansible&#x2F;work&#x2F;my.cnf dest&#x3D;&#x2F;etc&#x2F;my.cnf#这里的模块用template因为支持自定义变量    - name: Start mariaDB service      service: name&#x3D;mariadb state&#x3D;started enabled&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行剧本-4"><a href="#执行剧本-4" class="headerlink" title="执行剧本"></a>执行剧本</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook  &#x2F;root&#x2F;ansible&#x2F;work&#x2F;mysql.yaml PLAY [webserver] *********************************************************************************************TASK [Gathering Facts] ***************************************************************************************ok: [node2]ok: [node1]TASK [install mariadb] ***************************************************************************************changed: [node2]changed: [node1]TASK [push mysql config] *************************************************************************************changed: [node1]changed: [node2]TASK [Start mariaDB service] *********************************************************************************changed: [node1]changed: [node2]PLAY RECAP ***************************************************************************************************node1                      : ok&#x3D;4    changed&#x3D;3    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;4    changed&#x3D;3    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查数据库服务状态"><a href="#检查数据库服务状态" class="headerlink" title="检查数据库服务状态"></a>检查数据库服务状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a&#39;netstat -tunlp | grep 3306&#39;node2 | CHANGED | rc&#x3D;0 &gt;&gt;tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      2111&#x2F;mysqld         node1 | CHANGED | rc&#x3D;0 &gt;&gt;tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      2098&#x2F;mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看ServerID"><a href="#查看ServerID" class="headerlink" title="查看ServerID"></a>查看<code>ServerID</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;grep -i &quot;server_id&quot; &#x2F;etc&#x2F;my.cnf&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt;server_id&#x3D;11node2 | CHANGED | rc&#x3D;0 &gt;&gt;server_id&#x3D;12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看二进制日志状态"><a href="#查看二进制日志状态" class="headerlink" title="查看二进制日志状态"></a>查看二进制日志状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;mysql -uroot -e &quot;show master status&quot;&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt;FilePositionBinlog_Do_DBBinlog_Ignore_DBmaster.000003245node2 | CHANGED | rc&#x3D;0 &gt;&gt;FilePositionBinlog_Do_DBBinlog_Ignore_DBmaster.000003245<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、条件判断"><a href="#五、条件判断" class="headerlink" title="五、条件判断"></a>五、条件判断</h2><h3 id="when-条件"><a href="#when-条件" class="headerlink" title="when: 条件"></a><code>when: </code>条件</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createuserABC.yaml- hosts: webserver  user: root  tasks:    - name: create userE      user: name&#x3D;userE shell&#x3D;&#x2F;bin&#x2F;bash state&#x3D;present      when: ansible_default_ipv4[&quot;address&quot;] &#x3D;&#x3D; &quot;192.168.140.11&quot;    - name: create userF      user: name&#x3D;userF shell&#x3D;&#x2F;bin&#x2F;bash state&#x3D;present      when: ansible_default_ipv4[&quot;address&quot;] &#x3D;&#x3D; &quot;192.168.140.12&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;createuserABC.yamlPLAY [webserver] ********************************************************************************************TASK [Gathering Facts] **************************************************************************************ok: [node1]ok: [node2]TASK [create userE] *****************************************************************************************skipping: [node2]changed: [node1]TASK [create userF] *****************************************************************************************skipping: [node1]changed: [node2]PLAY RECAP **************************************************************************************************node1                      : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;1    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;1    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-关于内置变量"><a href="#1-关于内置变量" class="headerlink" title="1.关于内置变量"></a>1.关于内置变量</h3><blockquote><p><strong>可以使用<code>setup</code>查看</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m setup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-关于变量取值"><a href="#2-关于变量取值" class="headerlink" title="2.关于变量取值"></a>2.关于变量取值</h3><pre class="line-numbers language-none"><code class="language-none">&quot;address&quot;: &quot;192.168.140.12&quot;,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>遇到这种，直接填写前面的变量即可去到后面的值<code>address</code></strong></p></blockquote><h3 id="3-关于列表取值"><a href="#3-关于列表取值" class="headerlink" title="3.关于列表取值"></a>3.关于列表取值</h3><pre class="line-numbers language-none"><code class="language-none">&quot;ansible_all_ipv4_addresses&quot;: [            &quot;192.168.140.12&quot;        ],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>当我想取到<code>IP</code>地址的时候，可以在剧本文件中填写<code>ansible_all_ipv4_addresses[0]</code></strong><br><strong>列表默认从<code>0</code>开始，当有多条数据的时候，从<code>0</code>开始一次向后排序</strong><br><strong>以下是<code>Python</code>中样例</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; ansible_all_ipv4_addresses &#x3D; [ &quot;192.168.140.11&quot;,&quot;192.168.140.12&quot;,&quot;192.168.140.13&quot;]&gt;&gt;&gt; ansible_all_ipv4_addresses[&#39;192.168.140.11&#39;, &#39;192.168.140.12&#39;, &#39;192.168.140.13&#39;]&gt;&gt;&gt; ansible_all_ipv4_addresses [1]#使用下角标调用数据&#39;192.168.140.12&#39;&gt;&gt;&gt; ansible_all_ipv4_addresses [2]&#39;192.168.140.13&#39;&gt;&gt;&gt; ansible_all_ipv4_addresses [0]&#39;192.168.140.11&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-关于字典取值"><a href="#4-关于字典取值" class="headerlink" title="4.关于字典取值"></a>4.关于字典取值</h3><pre class="line-numbers language-none"><code class="language-none">&quot;ansible_default_ipv4&quot;: &#123;            &quot;address&quot;: &quot;192.168.140.12&quot;,             &quot;alias&quot;: &quot;ens33&quot;,             &quot;broadcast&quot;: &quot;192.168.140.255&quot;,             &quot;gateway&quot;: &quot;192.168.140.2&quot;,             &quot;interface&quot;: &quot;ens33&quot;,             &quot;macaddress&quot;: &quot;00:0c:29:0f:55:d2&quot;,             &quot;mtu&quot;: 1500,             &quot;netmask&quot;: &quot;255.255.255.0&quot;,             &quot;network&quot;: &quot;192.168.140.0&quot;,             &quot;type&quot;: &quot;ether&quot;        &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>当我想取&#x3D;&#x3D;字典&#x3D;&#x3D;里的值，只需要填写<code>字典名[&quot;键值&quot;]</code>即可</strong><br><strong>比如我想拿到<code>MAC</code>地址，那么剧本里填写<code>ansible_default_ipv4[&quot;macaddress&quot;]</code></strong><br><strong>以下是<code>Python</code>中的样例</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; ansible_default_ipv4 &#x3D; &#123;&quot;address&quot;:&quot;192.168.140.10&quot;,&quot;netmask&quot;:&quot;255.255.255.0&quot;&#125;&gt;&gt;&gt; ansible_default_ipv4 [&quot;netmask&quot;]&#39;255.255.255.0&#39;&gt;&gt;&gt; ansible_default_ipv4 [&quot;address&quot;]&#39;192.168.140.10&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-列表-字典取值"><a href="#5-列表-字典取值" class="headerlink" title="5.列表+字典取值"></a>5.列表+字典取值</h3><pre class="line-numbers language-none"><code class="language-none">&quot;ansible_facts&quot;: &#123;        &quot;ansible_all_ipv4_addresses&quot;: [            &quot;192.168.140.11&quot;        ],         &quot;ansible_all_ipv6_addresses&quot;: [            &quot;fe80::20c:29ff:fe37:97c7&quot;        ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>当我想取值<code>IPV4</code>地址的时候，可以在剧本中填写<code>ansible_facts[&quot;ansible_all_ipv4_addresses&quot;][0]</code></strong><br><strong>当字典中有多个值的时候，同样从数字<code>0</code>开始依次向后排</strong></p></blockquote><h2 id="六、循环"><a href="#六、循环" class="headerlink" title="六、循环"></a>六、循环</h2><h3 id="loop关键字"><a href="#loop关键字" class="headerlink" title="loop关键字"></a><code>loop</code>关键字</h3><pre class="line-numbers language-none"><code class="language-none">- hosts: webserver  user: root  tasks:       - name: create userAA&#x2F;BB&#x2F;CC        user: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present#item是内置变量，用于传递后面循环的参数        loop:           - &quot;userAA&quot;           - &quot;userBB&quot;           - &quot;userCC&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过字典为item赋值"><a href="#通过字典为item赋值" class="headerlink" title="通过字典为item赋值"></a>通过字典为<code>item</code>赋值</h3><pre class="line-numbers language-none"><code class="language-none">- hosts: webserver  user: root  gather_facts: false  tasks:      - name: create user11&#x2F;22&#x2F;33        user: name&#x3D;&#123;&#123; item[&quot;username&quot;] &#125;&#125; shell&#x3D;&#123;&#123; item[&quot;sh_name&quot;] &#125;&#125; state&#x3D;present        loop:            - &#123; &quot;username&quot;:&quot;user11&quot;, &quot;sh_name&quot;:&quot;&#x2F;sbin&#x2F;nologin&quot; &#125;            - &#123; &quot;username&quot;:&quot;user22&quot;, &quot;sh_name&quot;:&quot;&#x2F;bin&#x2F;bash&quot; &#125;            - &#123; &quot;username&quot;:&quot;user33&quot;, &quot;sh_name&quot;:&quot;&#x2F;bin&#x2F;sync&quot; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例：通过循环安装依赖"><a href="#案例：通过循环安装依赖" class="headerlink" title="案例：通过循环安装依赖"></a>案例：通过循环安装依赖</h3><pre class="line-numbers language-none"><code class="language-none">- hosts: webserver  user: root  gather_facts: false  tasks:    - name: install deps      yum: name&#x3D;&#123;&#123; item &#125;&#125; state&#x3D;present      loop:         - gcc         - openssl-devel         - zlib-devel         - pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;nginx.yamlPLAY [webserver] ********************************************************************************************TASK [install deps] *****************************************************************************************changed: [node1] &#x3D;&gt; (item&#x3D;gcc)changed: [node1] &#x3D;&gt; (item&#x3D;openssl-devel)ok: [node1] &#x3D;&gt; (item&#x3D;zlib-devel)ok: [node1] &#x3D;&gt; (item&#x3D;pcre-devel)changed: [node2] &#x3D;&gt; (item&#x3D;gcc)changed: [node2] &#x3D;&gt; (item&#x3D;openssl-devel)ok: [node2] &#x3D;&gt; (item&#x3D;zlib-devel)ok: [node2] &#x3D;&gt; (item&#x3D;pcre-devel)PLAY RECAP **************************************************************************************************node1                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;1    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Jinjia模板"><a href="#七、Jinjia模板" class="headerlink" title="七、Jinjia模板"></a>七、Jinjia模板</h2><ul><li>支持在配置文件中调用变量<code>&#123;&#123; 变量名称 &#125;&#125;</code></li><li>增加配置文件灵活性</li><li>建议配置文件以<code>.j2</code>结尾 </li><li><code>Jinja</code>模板要使用<code>template</code>模块推送，触发&#x3D;&#x3D;变量替换&#x3D;&#x3D;</li></ul><h3 id="1-关于Jinjia模板的写法"><a href="#1-关于Jinjia模板的写法" class="headerlink" title="1.关于Jinjia模板的写法"></a>1.关于<code>Jinjia</code>模板的写法</h3><blockquote><p><strong>其实刚刚第四步，我们已经用到了<code>Jinjia</code>模板</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;my.cnf.j2#建议以.j2结尾文件[mysqld]server_id&#x3D;&#123;&#123; id &#125;&#125;#上面第四步用到的自定义变量log_bin&#x3D;&#123;&#123; slave &#125;&#125;#上面第四步用到的自定义变量bind-address&#x3D;&#123;&#123; ansible_default_ipv4[&quot;address&quot;] &#125;&#125;#摘自setup模块中的变量datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysqlsocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links&#x3D;0# Settings user and group are ignored when systemd is used.# If you need to run mysqld under a different user or group,# customize your systemd unit file for mariadb according to the# instructions in http:&#x2F;&#x2F;fedoraproject.org&#x2F;wiki&#x2F;Systemd[mysqld_safe]log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.logpid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid## include all files from the config directory#!includedir &#x2F;etc&#x2F;my.cnf.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-handlers组件"><a href="#2-handlers组件" class="headerlink" title="2.handlers组件"></a>2.<code>handlers</code>组件</h3><ul><li>与<code>tasks</code>同级别组件， 默认情况 ，<code>handers</code>下定义的任务是不会自动执行的，只有在满足了一定的条件，由&#x3D;&#x3D;特定的条件&#x3D;&#x3D;<code>触发</code>其执行</li><li>应用场景 <ul><li>检测配置文件，自动重启服务加载配置</li></ul></li></ul><blockquote><p><strong>我们来简单改一下第四步示例的<code>Playbook</code>剧本</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;mysql.yaml- hosts: webserver  user: root  tasks:    - name: install mariadb      yum: name&#x3D;mariadb-server state&#x3D;present    - name: push mysql config      template: src&#x3D;&#x2F;root&#x2F;ansible&#x2F;work&#x2F;my.cnf.j2 dest&#x3D;&#x2F;etc&#x2F;my.cnf      notify: Restart mriaDB#触发条件，写handlers里名字即可    - name: Start mariaDB service      service: name&#x3D;mariadb state&#x3D;started enabled&#x3D;yes  handlers:#与tasks同级    - name: Restart mriaDB      service: name&#x3D;mariadb state&#x3D;restarted#当检测到配置文件改动以后，就会触发自动重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、role角色"><a href="#八、role角色" class="headerlink" title="八、role角色"></a>八、role角色</h2><h3 id="1-role角色介绍"><a href="#1-role角色介绍" class="headerlink" title="1.role角色介绍"></a>1.<code>role</code>角色介绍</h3><ul><li>本质上就是个目录<ul><li>默认存放路径<code>/etc/ansible/roles/</code></li></ul></li><li>一个需求对应一个角色</li></ul><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;ansible.cfgroles_path    &#x3D; &#x2F;root&#x2F;ansible&#x2F;roles#修改默认地址[root@zabbix_server ansible]# mkdir &#x2F;root&#x2F;ansible&#x2F;roles<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建角色"><a href="#3-创建角色" class="headerlink" title="3.创建角色"></a>3.创建角色</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# cd &#x2F;root&#x2F;ansible&#x2F;roles[root@zabbix_server roles]# pwd&#x2F;root&#x2F;ansible&#x2F;roles<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# ansible-galaxy init lnmp- Role lnmp was created successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-目录结构"><a href="#4-目录结构" class="headerlink" title="4.目录结构"></a>4.目录结构</h3><blockquote><p><strong>如果没有<code>tree</code>命令，请安装<code>yum install -y tree</code></strong></p></blockquote><ul><li><code>defaults</code>默认参数</li><li><code>files</code>普通文件、软件安装包</li><li><code>handlers</code>触发的操作</li><li><code>meta</code>元数据</li><li><code>tasks</code>常规任务、操作</li><li><code>templates</code><ul><li><code>jinja</code>模块</li></ul></li><li><code>tests</code>剧本相关的测试代码</li><li><code>vars</code>定义变量</li><li>同一个角色中，相互引用数据时，不需要添加任何目录，直接调用即可</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# tree &#x2F;root&#x2F;ansible&#x2F;roles&#x2F;lnmp&#x2F;root&#x2F;ansible&#x2F;roles&#x2F;lnmp├── defaults│   └── main.yml├── files├── handlers│   └── main.yml├── meta│   └── main.yml├── README.md├── tasks│   └── main.yml├── templates├── tests│   ├── inventory│   └── test.yml└── vars    └── main.yml8 directories, 8 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-案例：批量自动化部署Zabbix-Agent端"><a href="#5-案例：批量自动化部署Zabbix-Agent端" class="headerlink" title="5.案例：批量自动化部署Zabbix Agent端"></a>5.案例：批量自动化部署<code>Zabbix Agent</code>端</h3><blockquote><p><strong>关于<code>Zabbix Server</code>端<code>4.x</code>版本部署教程：<a href="https://www.wsjj.top/archives/109">https://www.wsjj.top/archives/109</a></strong><br><strong>关于<code>Zabbix Server</code>端<code>5.x</code>版本部署教程：<a href="https://www.wsjj.top/archives/18">https://www.wsjj.top/archives/18</a></strong><br><strong>关于<code>Zabbix Agent</code>端<code>4.x</code>版本部署教程：<a href="https://www.wsjj.top/archives/110">https://www.wsjj.top/archives/110</a></strong><br><strong>关于<code>Zabbix Agent</code>端<code>5.x</code>版本部署教程：<a href="https://www.wsjj.top/archives/19">https://www.wsjj.top/archives/19</a></strong></p></blockquote><h4 id="A-回到Server端web界面配置自动注册"><a href="#A-回到Server端web界面配置自动注册" class="headerlink" title="A.回到Server端web界面配置自动注册"></a>A.回到<code>Server</code>端<code>web</code>界面配置自动注册</h4><blockquote><p><strong>关于<code>Zabbix</code>自动发现和自动注册教程：<a href="https://www.wsjj.top/archives/113">https://www.wsjj.top/archives/113</a></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/ansible01.png" alt="ansible01"></p><h4 id="B-创建角色"><a href="#B-创建角色" class="headerlink" title="B.创建角色"></a>B.创建角色</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# cd &#x2F;root&#x2F;ansible&#x2F;roles&#x2F;[root@zabbix_server roles]# ansible-galaxy init agent- Role agent was created successfully[root@zabbix_server roles]# lsagent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-准备Zabbix-Agent用到的Jinjia模板"><a href="#C-准备Zabbix-Agent用到的Jinjia模板" class="headerlink" title="C.准备Zabbix Agent用到的Jinjia模板"></a>C.准备<code>Zabbix Agent</code>用到的<code>Jinjia</code>模板</h4><blockquote><p><strong>因为我本机已经配置过了<code>Zabbix Server</code>和<code>Agent</code>，所以我就直接复制过来了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# cp &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf &#x2F;root&#x2F;ansible&#x2F;roles&#x2F;agent&#x2F;templates&#x2F;zabbix_agentd.conf.j2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改Jinjia模板"><a href="#修改Jinjia模板" class="headerlink" title="修改Jinjia模板"></a>修改<code>Jinjia</code>模板</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# vim &#x2F;root&#x2F;ansible&#x2F;roles&#x2F;agent&#x2F;templates&#x2F;zabbix_agentd.conf.j2#配置文件并不完整，仅展示修改的地方Server&#x3D;192.168.140.10#指定Zabbix Server地址ServerActive&#x3D;192.168.140.10#指定Zabbix Server地址Hostname&#x3D;&#123;&#123; ansible_fqdn &#125;&#125;#这里调用setup模块中的变量，是对应的主机名UnsafeUserParameters&#x3D;1#开启自定义键值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-编写剧本"><a href="#D-编写剧本" class="headerlink" title="D.编写剧本"></a>D.编写剧本</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# vim &#x2F;root&#x2F;ansible&#x2F;roles&#x2F;agent&#x2F;tasks&#x2F;main.yml---# tasks file for agent- name: Zabbix yum.repo#配置yum源  yum_repository:      name: zabbix4      file: zabbix4      description: zabbix4 YUM repo      baseurl: https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;zabbix&#x2F;zabbix&#x2F;4.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;      gpgcheck: no      enabled: yes- name: Install Zabbix-Agent#安装Zabbix-Agent  yum: name&#x3D;zabbix-agent state&#x3D;present- name: Copy Zabbix-Agent Config#拷贝配置文件  template: src&#x3D;zabbix_agentd.conf.j2 dest&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf#这里和之前不同的是，源文件不用写路径  notify: Restart Zabbix-Agent daemon#指定触发条件，我们将稍后写进handlers- name: Start Zabbix-Agent daemon#启动Zabbix-Agent服务，并且设置开机自启动  service: name&#x3D;zabbix-agent state&#x3D;started enabled&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="编写handlers"><a href="#编写handlers" class="headerlink" title="编写handlers"></a>编写<code>handlers</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# vim &#x2F;root&#x2F;ansible&#x2F;roles&#x2F;agent&#x2F;handlers&#x2F;main.yml---# handlers file for agent- name: Restart Zabbix-Agent daemon#这里的名字一定要和上面的触发条件名字一致  service: name&#x3D;zabbix-agent state&#x3D;restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-编写角色剧本-重要"><a href="#E-编写角色剧本-重要" class="headerlink" title="E.编写角色剧本(重要)"></a>E.编写角色剧本(重要)</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# vim &#x2F;root&#x2F;ansible&#x2F;work&#x2F;zabbix_agent.yaml- hosts: webserver#指定主机组  user: root  roles:    - agent#这里写角色名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-执行剧本"><a href="#F-执行剧本" class="headerlink" title="F.执行剧本"></a>F.执行剧本</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# cd &#x2F;root&#x2F;ansible&#x2F;[root@zabbix_server ansible]# lsansible.cfg  createuser.yaml  hosts  roles  work[root@zabbix_server ansible]# ansible --versionansible 2.9.27  config file &#x3D; &#x2F;root&#x2F;ansible&#x2F;ansible.cfg  configured module search path &#x3D; [u&#39;&#x2F;root&#x2F;.ansible&#x2F;plugins&#x2F;modules&#39;, u&#39;&#x2F;usr&#x2F;share&#x2F;ansible&#x2F;plugins&#x2F;modules&#39;]  ansible python module location &#x3D; &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ansible  executable location &#x3D; &#x2F;usr&#x2F;bin&#x2F;ansible  python version &#x3D; 2.7.5 (default, Oct 14 2020, 14:45:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server roles]# ansible-playbook &#x2F;root&#x2F;ansible&#x2F;work&#x2F;zabbix_agent.yamlPLAY [webserver] ********************************************************************************************TASK [Gathering Facts] **************************************************************************************ok: [node1]ok: [node2]TASK [agent : Zabbix yum.repo] ******************************************************************************changed: [node1]changed: [node2]TASK [agent : Install Zabbix-Agent] *************************************************************************changed: [node2]changed: [node1]TASK [agent : Copy Zabbix-Agent Config] *********************************************************************changed: [node1]changed: [node2]TASK [agent : Start Zabbix-Agent daemon] ********************************************************************changed: [node2]changed: [node1]RUNNING HANDLER [agent : Restart Zabbix-Agent daemon] *******************************************************changed: [node1]changed: [node2]PLAY RECAP **************************************************************************************************node1                      : ok&#x3D;6    changed&#x3D;5    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0   node2                      : ok&#x3D;6    changed&#x3D;5    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-检查服务是否启动"><a href="#G-检查服务是否启动" class="headerlink" title="G.检查服务是否启动"></a>G.检查服务是否启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible webserver -m shell -a &#39;netstat -tunlp | grep zabbix&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt;tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      4664&#x2F;zabbix_agentd  tcp6       0      0 :::10050                :::*                    LISTEN      4664&#x2F;zabbix_agentd  node2 | CHANGED | rc&#x3D;0 &gt;&gt;tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      4374&#x2F;zabbix_agentd  tcp6       0      0 :::10050                :::*                    LISTEN      4374&#x2F;zabbix_agentd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-回到Server端web界面，查看是否自动添加主机"><a href="#H-回到Server端web界面，查看是否自动添加主机" class="headerlink" title="H.回到Server端web界面，查看是否自动添加主机"></a>H.回到<code>Server</code>端<code>web</code>界面，查看是否自动添加主机</h4><p><img src="https://www.wsjj.top/upload/2023/05/ansible02.png" alt="ansible02"></p>]]></content>
      
      
      <categories>
          
          <category> Ansible </category>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 自动化运维工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> ansible </tag>
            
            <tag> 自动化运维工具 </tag>
            
            <tag> playbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自动化运维系列教程】Ansible自动化运维工具</title>
      <link href="/2023/05/15/115/"/>
      <url>/2023/05/15/115/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【自动化运维系列教程】Ansible自动化运维工具"><a href="#【自动化运维系列教程】Ansible自动化运维工具" class="headerlink" title="【自动化运维系列教程】Ansible自动化运维工具"></a>【自动化运维系列教程】Ansible自动化运维工具</h1><h2 id="一、关于Ansible"><a href="#一、关于Ansible" class="headerlink" title="一、关于Ansible"></a>一、关于Ansible</h2><blockquote><p>基于<code>python</code>语言开发，自动化运维工具<br>实现<code>IT</code>&#x3D;&#x3D;基础设施&#x3D;&#x3D;设备进行批量管控</p></blockquote><h3 id="1-Ansible的特性"><a href="#1-Ansible的特性" class="headerlink" title="1.Ansible的特性"></a>1.Ansible的特性</h3><ul><li>开源的、跨平台的</li><li>底层基于<code>ssh</code>协议通信的</li><li><code>no server</code></li><li><code>no agent</code></li><li>支持<code>playbook</code>剧本</li><li>提供<code>API</code>接口</li></ul><h2 id="二、部署Ansible"><a href="#二、部署Ansible" class="headerlink" title="二、部署Ansible"></a>二、部署Ansible</h2><h3 id="1-关闭防火墙和SElinux、配置时间同步"><a href="#1-关闭防火墙和SElinux、配置时间同步" class="headerlink" title="1.关闭防火墙和SElinux、配置时间同步"></a>1.关闭防火墙和SElinux、配置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="2-配置yum源和epel源"><a href="#2-配置yum源和epel源" class="headerlink" title="2.配置yum源和epel源"></a>2.配置<code>yum</code>源和<code>epel</code>源</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo[root@zabbix_server ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo[root@zabbix_server ~]# yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-配置ssh免密"><a href="#3-配置ssh免密" class="headerlink" title="3.配置ssh免密"></a>3.配置<code>ssh</code>免密</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# ssh-keygen -t rsa[root@zabbix_server ~]# ssh-copy-id root@192.168.140.11[root@zabbix_server ~]# ssh-copy-id root@192.168.140.12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-在管理机上安装Ansible"><a href="#4-在管理机上安装Ansible" class="headerlink" title="4.在管理机上安装Ansible"></a>4.在管理机上安装<code>Ansible</code></h3><h4 id="A-安装Ansible"><a href="#A-安装Ansible" class="headerlink" title="A.安装Ansible"></a>A.安装<code>Ansible</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# yum install -y ansible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-查看Ansible配置文件和版本信息"><a href="#B-查看Ansible配置文件和版本信息" class="headerlink" title="B.查看Ansible配置文件和版本信息"></a>B.查看<code>Ansible</code>配置文件和版本信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# ansible --versionansible 2.9.27#版本信息  config file &#x3D; &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg#当前正在使用的配置文件具体位置  configured module search path &#x3D; [u&#39;&#x2F;root&#x2F;.ansible&#x2F;plugins&#x2F;modules&#39;, u&#39;&#x2F;usr&#x2F;share&#x2F;ansible&#x2F;plugins&#x2F;modules&#39;]  ansible python module location &#x3D; &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ansible  executable location &#x3D; &#x2F;usr&#x2F;bin&#x2F;ansible  python version &#x3D; 2.7.5 (default, Aug  4 2017, 00:39:18) [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-配置子配置文件和连接信息"><a href="#C-配置子配置文件和连接信息" class="headerlink" title="C.配置子配置文件和连接信息"></a>C.配置子配置文件和连接信息</h4><h5 id="创建Ansible用到的目录"><a href="#创建Ansible用到的目录" class="headerlink" title="创建Ansible用到的目录"></a>创建<code>Ansible</code>用到的目录</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# mkdir &#x2F;root&#x2F;ansible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# cp &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg &#x2F;root&#x2F;ansible&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="建立连接信息"><a href="#建立连接信息" class="headerlink" title="建立连接信息"></a>建立连接信息</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]#  cd .&#x2F;ansible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# ansible --versionansible 2.9.27  config file &#x3D; &#x2F;root&#x2F;ansible&#x2F;ansible.cfg#这里配置文件目录为当前目录下  configured module search path &#x3D; [u&#39;&#x2F;root&#x2F;.ansible&#x2F;plugins&#x2F;modules&#39;, u&#39;&#x2F;usr&#x2F;share&#x2F;ansible&#x2F;plugins&#x2F;modules&#39;]  ansible python module location &#x3D; &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ansible  executable location &#x3D; &#x2F;usr&#x2F;bin&#x2F;ansible  python version &#x3D; 2.7.5 (default, Aug  4 2017, 00:39:18) [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改子配置文件"><a href="#修改子配置文件" class="headerlink" title="修改子配置文件"></a>修改子配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;ansible.cfginventory&#x3D; &#x2F;root&#x2F;ansible&#x2F;hosts#指定清单路径remote_user&#x3D; root#指定远程用户为roothost_key_checking&#x3D; false#免除远程yes操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-连接客户机"><a href="#D-连接客户机" class="headerlink" title="D.连接客户机"></a>D.连接客户机</h4><h5 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改<code>hosts</code>文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.10 server.example.com server#添加服务器 IP地址请更换你的192.168.140.11 node1.example.com node1#添加客户机 IP地址请更换你的192.168.140.12 node2.example.com node2192.168.140.13 node3.example.com node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="拷贝配置文件给客户机"><a href="#拷贝配置文件给客户机" class="headerlink" title="拷贝配置文件给客户机"></a>拷贝配置文件给客户机</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# scp &#x2F;etc&#x2F;hosts root@192.168.140.11:&#x2F;etc&#x2F;hosts[root@zabbix_server ansible]# scp &#x2F;etc&#x2F;hosts root@192.168.140.12:&#x2F;etc&#x2F;hosts[root@zabbix_server ansible]# scp &#x2F;etc&#x2F;hosts root@192.168.140.13:&#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="E-测试"><a href="#E-测试" class="headerlink" title="E.测试"></a>E.测试</h4><h5 id="在当前目录下创建一个清单文件"><a href="#在当前目录下创建一个清单文件" class="headerlink" title="在当前目录下创建一个清单文件"></a>在当前目录下创建一个清单文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ansible]# vim &#x2F;root&#x2F;ansible&#x2F;hosts[webserver]node1node2[dbserver]node3[all:vars]ansible_password&#x3D;centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><pre class="line-numbers language-none"><code class="language-none">[root@master01 ansible]# ansible webserver -m shell -a &#39;hostname&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt;node1node2 | CHANGED | rc&#x3D;0 &gt;&gt;node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Ansible-AD-HOC"><a href="#三、Ansible-AD-HOC" class="headerlink" title="三、Ansible AD HOC"></a>三、Ansible AD HOC</h2><ul><li>调用模块</li></ul><h3 id="1-Ansible命令格式"><a href="#1-Ansible命令格式" class="headerlink" title="1.Ansible命令格式"></a>1.<code>Ansible</code>命令格式</h3><pre class="line-numbers language-none"><code class="language-none"># ansible &lt;被管理机&gt; -m &lt;模块名称&gt; [-a &lt;模块参数&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="被管理机的写法"><a href="#被管理机的写法" class="headerlink" title="被管理机的写法"></a>被管理机的写法</h4><ul><li><code>all</code>所有主机 <ul><li><code>[root@zabbix_server ~]# ansible all -m ping</code></li></ul></li><li>单个主机 <ul><li><code>[root@zabbix_server ~]# ansible 192.168.140.11 -m ping</code></li></ul></li><li>主机组名 <ul><li><code>[root@zabbix_server ~]# ansible dbserver -m ping</code></li></ul></li><li>多个主机组 <ul><li><code>[root@zabbix_server ~]# ansible &#39;appserver:!dbserver&#39; -m ping</code><ul><li>差集</li></ul></li><li><code>[root@zabbix_server ~]# ansible &#39;appserver:dbserver&#39; -m ping</code><ul><li>并集</li></ul></li><li><code>[root@zabbix_server ~]# ansible &#39;appserver:&amp;dbserver&#39; -m ping</code><ul><li>交集</li></ul></li></ul></li></ul><h3 id="2-关于模块帮助"><a href="#2-关于模块帮助" class="headerlink" title="2.关于模块帮助"></a>2.关于模块帮助</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ansible]# ansible-doc 模块名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、Ansible常用模块"><a href="#四、Ansible常用模块" class="headerlink" title="四、Ansible常用模块"></a>四、Ansible常用模块</h2><h3 id="1-ping模块"><a href="#1-ping模块" class="headerlink" title="1.ping模块"></a>1.<code>ping</code>模块</h3><blockquote><p><strong>测试通信</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# ansible webserver -m pingnode1 | SUCCESS &#x3D;&gt; &#123;    &quot;ansible_facts&quot;: &#123;        &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;    &#125;,     &quot;changed&quot;: false,     &quot;ping&quot;: &quot;pong&quot;&#125;node2 | SUCCESS &#x3D;&gt; &#123;    &quot;ansible_facts&quot;: &#123;        &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;    &#125;,     &quot;changed&quot;: false,     &quot;ping&quot;: &quot;pong&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-shell模块"><a href="#2-shell模块" class="headerlink" title="2.shell模块"></a>2.<code>shell</code>模块</h3><ul><li>在被管理机上统一执行shell命令 </li><li>参数<ul><li><code>chdir=</code>目录名称</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# ansible webserver -m shell -a &#39;uptime&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt; 15:57:44 up  6:16,  2 users,  load average: 0.00, 0.01, 0.05node2 | CHANGED | rc&#x3D;0 &gt;&gt; 15:57:44 up  6:33,  3 users,  load average: 0.00, 0.01, 0.05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# ansible webserver -m shell -a &#39;chdir&#x3D;&#x2F;tmp ls -l&#39;node2 | CHANGED | rc&#x3D;0 &gt;&gt;总用量 0drwx------ 2 root root 41 5月  15 10:00 ansible_command_payload_5zsIa2drwx------ 2 root root 41 5月  15 10:00 ansible_command_payload_atZfHFdrwx------ 2 root root 41 5月  15 15:58 ansible_command_payload_NwfW4bdrwx------ 3 root root 17 3月  17 18:42 systemd-private-48a786b208c54b83b538dca3f1ce661b-chronyd.service-Tn7iUGdrwx------ 2 root root  6 5月  15 09:47 vmware-root_648-2688619569node1 | CHANGED | rc&#x3D;0 &gt;&gt;总用量 0drwx------ 2 root root 41 5月  15 10:00 ansible_command_payload_G2bPredrwx------ 2 root root 41 5月  15 15:58 ansible_command_payload_XYZghLdrwx------ 2 root root 41 5月  15 10:00 ansible_command_payload_yB62n0drwx------ 3 root root 17 4月  25 14:05 systemd-private-1e71f30e2c1d45379b48a56d28de1db3-chronyd.service-tB2KfM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-copy模块"><a href="#3-copy模块" class="headerlink" title="3.copy模块"></a>3.<code>copy</code>模块</h3><ul><li>推送文件</li><li>常用参数:<ul><li><code>src=</code>源文件</li><li><code>dest=</code>目的文件</li><li><code>mode=</code>权限</li><li><code>owner=</code>属主</li><li><code>group=</code>属组</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# ansible webserver -m copy -a &#39;src&#x3D;&#x2F;etc&#x2F;hosts dest&#x3D;&#x2F;tmp&#39;node2 | CHANGED &#x3D;&gt; &#123;    &quot;ansible_facts&quot;: &#123;        &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;    &#125;,     &quot;changed&quot;: true,     &quot;checksum&quot;: &quot;599bcb4c95ad1e9d53603eea627fd2f479e948cd&quot;,     &quot;dest&quot;: &quot;&#x2F;tmp&#x2F;hosts&quot;,     &quot;gid&quot;: 0,     &quot;group&quot;: &quot;root&quot;,     &quot;md5sum&quot;: &quot;1047c02d8443a9e7e464d10bf2bd9079&quot;,     &quot;mode&quot;: &quot;0644&quot;,     &quot;owner&quot;: &quot;root&quot;,     &quot;size&quot;: 308,     &quot;src&quot;: &quot;&#x2F;root&#x2F;.ansible&#x2F;tmp&#x2F;ansible-tmp-1684137792.29-5003-272837908617971&#x2F;source&quot;,     &quot;state&quot;: &quot;file&quot;,     &quot;uid&quot;: 0&#125;node1 | CHANGED &#x3D;&gt; &#123;    &quot;ansible_facts&quot;: &#123;        &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;    &#125;,     &quot;changed&quot;: true,     &quot;checksum&quot;: &quot;599bcb4c95ad1e9d53603eea627fd2f479e948cd&quot;,     &quot;dest&quot;: &quot;&#x2F;tmp&#x2F;hosts&quot;,     &quot;gid&quot;: 0,     &quot;group&quot;: &quot;root&quot;,     &quot;md5sum&quot;: &quot;1047c02d8443a9e7e464d10bf2bd9079&quot;,     &quot;mode&quot;: &quot;0644&quot;,     &quot;owner&quot;: &quot;root&quot;,     &quot;size&quot;: 308,     &quot;src&quot;: &quot;&#x2F;root&#x2F;.ansible&#x2F;tmp&#x2F;ansible-tmp-1684137792.3-5002-165795823996149&#x2F;source&quot;,     &quot;state&quot;: &quot;file&quot;,     &quot;uid&quot;: 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix_server ~]# ansible webserver -m copy -a &#39;src&#x3D;&#x2F;opt&#x2F;file02.txt dest&#x3D;&#x2F;tmp mode&#x3D;0600 owner&#x3D;nobody group&#x3D;nobody&#39;node2 | CHANGED &#x3D;&gt; &#123;    &quot;ansible_facts&quot;: &#123;        &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;    &#125;,     &quot;changed&quot;: true,     &quot;checksum&quot;: &quot;a8d256841c0d7f59f039d47d2de630af6d9a0f34&quot;,     &quot;dest&quot;: &quot;&#x2F;tmp&#x2F;fstab&quot;,     &quot;gid&quot;: 1000,     &quot;group&quot;: &quot;student&quot;,     &quot;md5sum&quot;: &quot;3ea4524e044adad46cd00afddb7d02d9&quot;,     &quot;mode&quot;: &quot;0600&quot;,     &quot;owner&quot;: &quot;student&quot;,     &quot;size&quot;: 465,     &quot;src&quot;: &quot;&#x2F;root&#x2F;.ansible&#x2F;tmp&#x2F;ansible-tmp-1684138025.01-5117-280877163462644&#x2F;source&quot;,     &quot;state&quot;: &quot;file&quot;,     &quot;uid&quot;: 1000&#125;node1 | CHANGED &#x3D;&gt; &#123;    &quot;ansible_facts&quot;: &#123;        &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;    &#125;,     &quot;changed&quot;: true,     &quot;checksum&quot;: &quot;a8d256841c0d7f59f039d47d2de630af6d9a0f34&quot;,     &quot;dest&quot;: &quot;&#x2F;tmp&#x2F;fstab&quot;,     &quot;gid&quot;: 1000,     &quot;group&quot;: &quot;student&quot;,     &quot;md5sum&quot;: &quot;3ea4524e044adad46cd00afddb7d02d9&quot;,     &quot;mode&quot;: &quot;0600&quot;,     &quot;owner&quot;: &quot;student&quot;,     &quot;size&quot;: 465,     &quot;src&quot;: &quot;&#x2F;root&#x2F;.ansible&#x2F;tmp&#x2F;ansible-tmp-1684138025.02-5116-74769411422857&#x2F;source&quot;,     &quot;state&quot;: &quot;file&quot;,     &quot;uid&quot;: 1000&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-fetch模块"><a href="#4-fetch模块" class="headerlink" title="4.fetch模块"></a>4.<code>fetch</code>模块</h3><ul><li>从被管理机拉取文件 </li><li>常用参数:<ul><li><code>src=</code>源文件</li><li><code>dest=</code>目的文件</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m fetch -a &#39;src&#x3D;&#x2F;tmp&#x2F;test01 dest&#x3D;&#x2F;tmp&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-file模块"><a href="#5-file模块" class="headerlink" title="5.file模块"></a>5.<code>file</code>模块</h3><ul><li>管理服务器文件目录 </li><li>常用参数:<ul><li><code>path=</code>指定文件、目录名称</li><li><code>owner=</code>指明文件的属主</li><li><code>group=</code>指明文件的属组</li><li><code>mode=</code>指明文件的权限</li><li><code>state=directory</code>创建目录</li><li><code>state=link</code>创建软链接文件</li><li><code>state=absent</code>删除文件</li><li><code>state=touch</code>创建文件</li><li><code>src=</code>指定软链接的原文件，配合<code>state=link</code>时有用</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m file -a &#39;path&#x3D;&#x2F;tmp&#x2F;file02.txt mode&#x3D;0666 owner&#x3D;root group&#x3D;root&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m file -a &#39;path&#x3D;&#x2F;tmp&#x2F;nginx state&#x3D;directory&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-cron模块"><a href="#6-cron模块" class="headerlink" title="6.cron模块"></a>6.<code>cron</code>模块</h3><ul><li>管理周期性计划任务 </li><li>常用参数: <ul><li><code>minute=</code>指明计划任务的分钟，支持格式：<code>0-59</code></li><li><code>hour=</code>指明计划任务的小时，支持的语法：<code>0-23</code></li><li><code>day=</code>指明计划任务的天，支持的语法：<code>1-31</code></li><li><code>month=</code>指明计划任务的月，支持的语法为：<code>1-12</code></li><li><code>weekday=</code>指明计划任务的星期几，支持的语法为：<code>0-6</code></li><li><code>name=</code>给该计划任务取个名称,必须要给明。每个任务的名称不能一样。</li><li><code>job=</code>执行的任务是什么</li><li><code>state=present|absent</code><ul><li><code>present</code>创建</li><li><code>absent</code>删除</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m cron -a &#39;name&#x3D;TimeSync minute&#x3D;*&#x2F;30 job&#x3D;&quot;&#x2F;usr&#x2F;sbin&#x2F;ntpdate  120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null&quot; state&#x3D;present&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-yum模块"><a href="#7-yum模块" class="headerlink" title="7.yum模块"></a>7.<code>yum</code>模块</h3><ul><li>管理RPM软件</li><li>常用参数<ul><li><code>name=</code>软件名称</li><li><code>state=&#123;present|absent|latest&#125;</code><ul><li><code>present</code>启动</li><li><code>absent</code>关闭</li><li><code>latest</code>最新版</li></ul></li><li><code>enablerepo=</code>启用yum仓库</li><li><code>disablerepo=</code>禁用yum仓库</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m yum -a &#39;name&#x3D;vsftpd state&#x3D;present&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-service模块"><a href="#8-service模块" class="headerlink" title="8.service模块"></a>8.<code>service</code>模块</h3><ul><li>管理系统服务 </li><li>常用参数<ul><li><code>name=</code>服务名称</li><li><code>state=&#123;started|restarted|stopped&#125;</code><ul><li><code>started</code>启动</li><li><code>restarted</code>重启</li><li><code>stopped</code>关闭</li></ul></li><li><code>enabled=&#123;yes|no&#125;</code><ul><li><code>yes</code>开机自启动</li><li><code>no</code>开机不启动</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m service -a &#39;name&#x3D;vsftpd state&#x3D;started enabled&#x3D;yes&#39;[root@ansible ~]# ansible webserver -m service -a &#39;name&#x3D;vsftpd state&#x3D;stopped&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-group模块"><a href="#9-group模块" class="headerlink" title="9.group模块"></a>9.<code>group</code>模块</h3><ul><li>管理用户组 </li><li>常用参数: <ul><li><code>name=</code>被管理的组名</li><li><code>state=present|absent</code><ul><li><code>present</code>添加组</li><li><code>absent</code>删除组</li></ul></li><li><code>gid=</code>指明GID</li><li><code>system=yes|no</code>是否为系统组</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m group -a &#39;name&#x3D;jishu state&#x3D;present&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-user模块"><a href="#10-user模块" class="headerlink" title="10.user模块"></a>10.<code>user</code>模块</h3><ul><li>管理用户 </li><li>常用参数<ul><li><code>name=</code>指明要管理的账号名称</li><li><code>state=present|absent</code> <ul><li><code>present</code>表示创建，<code>absent</code>表示删除</li></ul></li><li><code>system=yes|no</code>指明是否为系统账号</li><li><code>uid=</code>指明用户UID</li><li><code>group=</code>指明用户的基本组</li><li><code>groups=</code>指明用户的附加组</li><li><code>shell=</code>指明默认的shell</li><li><code>home=</code>指明用户的家目录</li><li><code>password=</code>指明用户的密码，最好使用加密好的字符</li><li><code>comment=</code>指明用户的注释信息</li><li><code>remove=yes|no</code>当<code>state=absent</code>时，也就是删除用户时，是否要删除用户的家目录</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m user -a &#39;name&#x3D;king groups&#x3D;jishu shell&#x3D;&#x2F;sbin&#x2F;nologin state&#x3D;present&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-script模块"><a href="#11-script模块" class="headerlink" title="11.script模块"></a>11.<code>script</code>模块</h3><ul><li>推送脚本、自动执行脚本 </li><li>常用参数: <ul><li>脚本名称</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m script -a &#39;&#x2F;root&#x2F;test.sh&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-lineinfile模块"><a href="#12-lineinfile模块" class="headerlink" title="12.lineinfile模块"></a>12.<code>lineinfile</code>模块</h3><ul><li>管理文件内容</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@ansible ~]# ansible webserver -m lineinfile -a &#39;path&#x3D;&#x2F;etc&#x2F;hosts line&#x3D;&quot;10.1.1.1 agent01.linux.com&quot;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-setup模块-重要"><a href="#13-setup模块-重要" class="headerlink" title="13.setup模块(重要)"></a>13.<code>setup</code>模块(重要)</h3><ul><li>后续的剧本中，会用到这里面的变量</li><li>搜集被管理机的状态信息(IP地址、主机名、系统版本、内存大小、CPU型号等)，统称<code>facts</code>变量</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@master01 ansible]# ansible node1 -m setup node1 | SUCCESS &#x3D;&gt; &#123;    &quot;ansible_facts&quot;: &#123;        &quot;ansible_all_ipv4_addresses&quot;: [            &quot;192.168.140.11&quot;        ],         &quot;ansible_all_ipv6_addresses&quot;: [            &quot;fe80::20c:29ff:fe37:97c7&quot;        ],         &quot;ansible_apparmor&quot;: &#123;            &quot;status&quot;: &quot;disabled&quot;        &#125;,         &quot;ansible_architecture&quot;: &quot;x86_64&quot;,         &quot;ansible_bios_date&quot;: &quot;11&#x2F;12&#x2F;2020&quot;,         &quot;ansible_bios_version&quot;: &quot;6.00&quot;,         &quot;ansible_cmdline&quot;: &#123;            &quot;BOOT_IMAGE&quot;: &quot;&#x2F;vmlinuz-3.10.0-1160.el7.x86_64&quot;,             &quot;LANG&quot;: &quot;zh_CN.UTF-8&quot;,             &quot;crashkernel&quot;: &quot;auto&quot;,             &quot;quiet&quot;: true,             &quot;rd.lvm.lv&quot;: &quot;centos&#x2F;swap&quot;,             &quot;rhgb&quot;: true,             &quot;ro&quot;: true,             &quot;root&quot;: &quot;&#x2F;dev&#x2F;mapper&#x2F;centos-root&quot;        &#125;,         &quot;ansible_date_time&quot;: &#123;            &quot;date&quot;: &quot;2023-05-15&quot;,             &quot;day&quot;: &quot;15&quot;,             &quot;epoch&quot;: &quot;1684142821&quot;,             &quot;hour&quot;: &quot;17&quot;,             &quot;iso8601&quot;: &quot;2023-05-15T09:27:01Z&quot;,             &quot;iso8601_basic&quot;: &quot;20230515T172701434185&quot;,             &quot;iso8601_basic_short&quot;: &quot;20230515T172701&quot;,             &quot;iso8601_micro&quot;: &quot;2023-05-15T09:27:01.434185Z&quot;,             &quot;minute&quot;: &quot;27&quot;,             &quot;month&quot;: &quot;05&quot;,             &quot;second&quot;: &quot;01&quot;,             &quot;time&quot;: &quot;17:27:01&quot;,             &quot;tz&quot;: &quot;CST&quot;,             &quot;tz_offset&quot;: &quot;+0800&quot;,             &quot;weekday&quot;: &quot;星期一&quot;,             &quot;weekday_number&quot;: &quot;1&quot;,             &quot;weeknumber&quot;: &quot;20&quot;,             &quot;year&quot;: &quot;2023&quot;        &#125;,         &quot;ansible_default_ipv4&quot;: &#123;            &quot;address&quot;: &quot;192.168.140.11&quot;,             &quot;alias&quot;: &quot;ens33&quot;,             &quot;broadcast&quot;: &quot;192.168.140.255&quot;,             &quot;gateway&quot;: &quot;192.168.140.2&quot;,             &quot;interface&quot;: &quot;ens33&quot;,             &quot;macaddress&quot;: &quot;00:0c:29:37:97:c7&quot;,             &quot;mtu&quot;: 1500,             &quot;netmask&quot;: &quot;255.255.255.0&quot;,             &quot;network&quot;: &quot;192.168.140.0&quot;,             &quot;type&quot;: &quot;ether&quot;        &#125;,         &quot;ansible_default_ipv6&quot;: &#123;&#125;,         &quot;ansible_device_links&quot;: &#123;            &quot;ids&quot;: &#123;                &quot;dm-0&quot;: [                    &quot;dm-name-centos-root&quot;,                     &quot;dm-uuid-LVM-OLO7GRb67emHfncffRG1XyiYndhJZ4vj1E07jNy6r1SU11s7MIufjbRxpcUPaBco&quot;                ],                 &quot;dm-1&quot;: [                    &quot;dm-name-centos-swap&quot;,                     &quot;dm-uuid-LVM-OLO7GRb67emHfncffRG1XyiYndhJZ4vjnCZ7d33q36i8rG3z6iYmInKuOP8SlbGi&quot;                ],                 &quot;sda2&quot;: [                    &quot;lvm-pv-uuid-8dIHWy-Qxyv-0dZp-bl52-O9s2-4L3q-92KSds&quot;                ],                 &quot;sr0&quot;: [                    &quot;ata-VMware_Virtual_IDE_CDROM_Drive_10000000000000000001&quot;                ]            &#125;,             &quot;labels&quot;: &#123;&#125;,             &quot;masters&quot;: &#123;                &quot;sda2&quot;: [                    &quot;dm-0&quot;,                     &quot;dm-1&quot;                ]            &#125;,             &quot;uuids&quot;: &#123;                &quot;dm-0&quot;: [                    &quot;39ad21bb-f420-4236-9343-e4c8ad32aefd&quot;                ],                 &quot;dm-1&quot;: [                    &quot;0f2f0244-ae9a-4224-bf65-05518c7210b9&quot;                ],                 &quot;sda1&quot;: [                    &quot;13d01e00-1f54-4718-bc51-041c787cf659&quot;                ]            &#125;        &#125;,         &quot;ansible_devices&quot;: &#123;            &quot;dm-0&quot;: &#123;                &quot;holders&quot;: [],                 &quot;host&quot;: &quot;&quot;,                 &quot;links&quot;: &#123;                    &quot;ids&quot;: [                        &quot;dm-name-centos-root&quot;,                         &quot;dm-uuid-LVM-OLO7GRb67emHfncffRG1XyiYndhJZ4vj1E07jNy6r1SU11s7MIufjbRxpcUPaBco&quot;                    ],                     &quot;labels&quot;: [],                     &quot;masters&quot;: [],                     &quot;uuids&quot;: [                        &quot;39ad21bb-f420-4236-9343-e4c8ad32aefd&quot;                    ]                &#125;,                 &quot;model&quot;: null,                 &quot;partitions&quot;: &#123;&#125;,                 &quot;removable&quot;: &quot;0&quot;,                 &quot;rotational&quot;: &quot;1&quot;,                 &quot;sas_address&quot;: null,                 &quot;sas_device_handle&quot;: null,                 &quot;scheduler_mode&quot;: &quot;&quot;,                 &quot;sectors&quot;: &quot;36716544&quot;,                 &quot;sectorsize&quot;: &quot;512&quot;,                 &quot;size&quot;: &quot;17.51 GB&quot;,                 &quot;support_discard&quot;: &quot;0&quot;,                 &quot;vendor&quot;: null,                 &quot;virtual&quot;: 1            &#125;,             &quot;dm-1&quot;: &#123;                &quot;holders&quot;: [],                 &quot;host&quot;: &quot;&quot;,                 &quot;links&quot;: &#123;                    &quot;ids&quot;: [                        &quot;dm-name-centos-swap&quot;,                         &quot;dm-uuid-LVM-OLO7GRb67emHfncffRG1XyiYndhJZ4vjnCZ7d33q36i8rG3z6iYmInKuOP8SlbGi&quot;                    ],                     &quot;labels&quot;: [],                     &quot;masters&quot;: [],                     &quot;uuids&quot;: [                        &quot;0f2f0244-ae9a-4224-bf65-05518c7210b9&quot;                    ]                &#125;,                 &quot;model&quot;: null,                 &quot;partitions&quot;: &#123;&#125;,                 &quot;removable&quot;: &quot;0&quot;,                 &quot;rotational&quot;: &quot;1&quot;,                 &quot;sas_address&quot;: null,                 &quot;sas_device_handle&quot;: null,                 &quot;scheduler_mode&quot;: &quot;&quot;,                 &quot;sectors&quot;: &quot;4194304&quot;,                 &quot;sectorsize&quot;: &quot;512&quot;,                 &quot;size&quot;: &quot;2.00 GB&quot;,                 &quot;support_discard&quot;: &quot;0&quot;,                 &quot;vendor&quot;: null,                 &quot;virtual&quot;: 1            &#125;,             &quot;sda&quot;: &#123;                &quot;holders&quot;: [],                 &quot;host&quot;: &quot;SCSI storage controller: Broadcom &#x2F; LSI 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&quot;,                 &quot;links&quot;: &#123;                    &quot;ids&quot;: [],                     &quot;labels&quot;: [],                     &quot;masters&quot;: [],                     &quot;uuids&quot;: []                &#125;,                 &quot;model&quot;: &quot;VMware Virtual S&quot;,                 &quot;partitions&quot;: &#123;                    &quot;sda1&quot;: &#123;                        &quot;holders&quot;: [],                         &quot;links&quot;: &#123;                            &quot;ids&quot;: [],                             &quot;labels&quot;: [],                             &quot;masters&quot;: [],                             &quot;uuids&quot;: [                                &quot;13d01e00-1f54-4718-bc51-041c787cf659&quot;                            ]                        &#125;,                         &quot;sectors&quot;: &quot;1024000&quot;,                         &quot;sectorsize&quot;: 512,                         &quot;size&quot;: &quot;500.00 MB&quot;,                         &quot;start&quot;: &quot;2048&quot;,                         &quot;uuid&quot;: &quot;13d01e00-1f54-4718-bc51-041c787cf659&quot;                    &#125;,                     &quot;sda2&quot;: &#123;                        &quot;holders&quot;: [                            &quot;centos-root&quot;,                             &quot;centos-swap&quot;                        ],                         &quot;links&quot;: &#123;                            &quot;ids&quot;: [                                &quot;lvm-pv-uuid-8dIHWy-Qxyv-0dZp-bl52-O9s2-4L3q-92KSds&quot;                            ],                             &quot;labels&quot;: [],                             &quot;masters&quot;: [                                &quot;dm-0&quot;,                                 &quot;dm-1&quot;                            ],                             &quot;uuids&quot;: []                        &#125;,                         &quot;sectors&quot;: &quot;40916992&quot;,                         &quot;sectorsize&quot;: 512,                         &quot;size&quot;: &quot;19.51 GB&quot;,                         &quot;start&quot;: &quot;1026048&quot;,                         &quot;uuid&quot;: null                    &#125;                &#125;,                 &quot;removable&quot;: &quot;0&quot;,                 &quot;rotational&quot;: &quot;1&quot;,                 &quot;sas_address&quot;: null,                 &quot;sas_device_handle&quot;: null,                 &quot;scheduler_mode&quot;: &quot;deadline&quot;,                 &quot;sectors&quot;: &quot;41943040&quot;,                 &quot;sectorsize&quot;: &quot;512&quot;,                 &quot;size&quot;: &quot;20.00 GB&quot;,                 &quot;support_discard&quot;: &quot;0&quot;,                 &quot;vendor&quot;: &quot;VMware,&quot;,                 &quot;virtual&quot;: 1            &#125;,             &quot;sr0&quot;: &#123;                &quot;holders&quot;: [],                 &quot;host&quot;: &quot;IDE interface: Intel Corporation 82371AB&#x2F;EB&#x2F;MB PIIX4 IDE (rev 01)&quot;,                 &quot;links&quot;: &#123;                    &quot;ids&quot;: [                        &quot;ata-VMware_Virtual_IDE_CDROM_Drive_10000000000000000001&quot;                    ],                     &quot;labels&quot;: [],                     &quot;masters&quot;: [],                     &quot;uuids&quot;: []                &#125;,                 &quot;model&quot;: &quot;VMware IDE CDR10&quot;,                 &quot;partitions&quot;: &#123;&#125;,                 &quot;removable&quot;: &quot;1&quot;,                 &quot;rotational&quot;: &quot;1&quot;,                 &quot;sas_address&quot;: null,                 &quot;sas_device_handle&quot;: null,                 &quot;scheduler_mode&quot;: &quot;deadline&quot;,                 &quot;sectors&quot;: &quot;2097151&quot;,                 &quot;sectorsize&quot;: &quot;512&quot;,                 &quot;size&quot;: &quot;1024.00 MB&quot;,                 &quot;support_discard&quot;: &quot;0&quot;,                 &quot;vendor&quot;: &quot;NECVMWar&quot;,                 &quot;virtual&quot;: 1            &#125;        &#125;,         &quot;ansible_distribution&quot;: &quot;CentOS&quot;,         &quot;ansible_distribution_file_parsed&quot;: true,         &quot;ansible_distribution_file_path&quot;: &quot;&#x2F;etc&#x2F;redhat-release&quot;,         &quot;ansible_distribution_file_variety&quot;: &quot;RedHat&quot;,         &quot;ansible_distribution_major_version&quot;: &quot;7&quot;,         &quot;ansible_distribution_release&quot;: &quot;Core&quot;,         &quot;ansible_distribution_version&quot;: &quot;7.9&quot;,         &quot;ansible_dns&quot;: &#123;            &quot;nameservers&quot;: [                &quot;114.114.114.114&quot;,                 &quot;8.8.8.8&quot;            ]        &#125;,         &quot;ansible_domain&quot;: &quot;linux.com&quot;,         &quot;ansible_effective_group_id&quot;: 0,         &quot;ansible_effective_user_id&quot;: 0,         &quot;ansible_ens33&quot;: &#123;            &quot;active&quot;: true,             &quot;device&quot;: &quot;ens33&quot;,             &quot;features&quot;: &#123;                &quot;busy_poll&quot;: &quot;off [fixed]&quot;,                 &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;,                 &quot;generic_receive_offload&quot;: &quot;on&quot;,                 &quot;generic_segmentation_offload&quot;: &quot;on&quot;,                 &quot;highdma&quot;: &quot;off [fixed]&quot;,                 &quot;hw_tc_offload&quot;: &quot;off [fixed]&quot;,                 &quot;l2_fwd_offload&quot;: &quot;off [fixed]&quot;,                 &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;,                 &quot;loopback&quot;: &quot;off [fixed]&quot;,                 &quot;netns_local&quot;: &quot;off [fixed]&quot;,                 &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;,                 &quot;receive_hashing&quot;: &quot;off [fixed]&quot;,                 &quot;rx_all&quot;: &quot;off&quot;,                 &quot;rx_checksumming&quot;: &quot;off&quot;,                 &quot;rx_fcs&quot;: &quot;off&quot;,                 &quot;rx_gro_hw&quot;: &quot;off [fixed]&quot;,                 &quot;rx_udp_tunnel_port_offload&quot;: &quot;off [fixed]&quot;,                 &quot;rx_vlan_filter&quot;: &quot;on [fixed]&quot;,                 &quot;rx_vlan_offload&quot;: &quot;on&quot;,                 &quot;rx_vlan_stag_filter&quot;: &quot;off [fixed]&quot;,                 &quot;rx_vlan_stag_hw_parse&quot;: &quot;off [fixed]&quot;,                 &quot;scatter_gather&quot;: &quot;on&quot;,                 &quot;tcp_segmentation_offload&quot;: &quot;on&quot;,                 &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;,                 &quot;tx_checksum_ip_generic&quot;: &quot;on&quot;,                 &quot;tx_checksum_ipv4&quot;: &quot;off [fixed]&quot;,                 &quot;tx_checksum_ipv6&quot;: &quot;off [fixed]&quot;,                 &quot;tx_checksum_sctp&quot;: &quot;off [fixed]&quot;,                 &quot;tx_checksumming&quot;: &quot;on&quot;,                 &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gre_csum_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gso_partial&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;,                 &quot;tx_ipip_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_lockless&quot;: &quot;off [fixed]&quot;,                 &quot;tx_nocache_copy&quot;: &quot;off&quot;,                 &quot;tx_scatter_gather&quot;: &quot;on&quot;,                 &quot;tx_scatter_gather_fraglist&quot;: &quot;off [fixed]&quot;,                 &quot;tx_sctp_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_sit_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_tcp6_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_tcp_ecn_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_tcp_mangleid_segmentation&quot;: &quot;off&quot;,                 &quot;tx_tcp_segmentation&quot;: &quot;on&quot;,                 &quot;tx_udp_tnl_csum_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_vlan_offload&quot;: &quot;on [fixed]&quot;,                 &quot;tx_vlan_stag_hw_insert&quot;: &quot;off [fixed]&quot;,                 &quot;udp_fragmentation_offload&quot;: &quot;off [fixed]&quot;,                 &quot;vlan_challenged&quot;: &quot;off [fixed]&quot;            &#125;,             &quot;hw_timestamp_filters&quot;: [],             &quot;ipv4&quot;: &#123;                &quot;address&quot;: &quot;192.168.140.11&quot;,                 &quot;broadcast&quot;: &quot;192.168.140.255&quot;,                 &quot;netmask&quot;: &quot;255.255.255.0&quot;,                 &quot;network&quot;: &quot;192.168.140.0&quot;            &#125;,             &quot;ipv6&quot;: [                &#123;                    &quot;address&quot;: &quot;fe80::20c:29ff:fe37:97c7&quot;,                     &quot;prefix&quot;: &quot;64&quot;,                     &quot;scope&quot;: &quot;link&quot;                &#125;            ],             &quot;macaddress&quot;: &quot;00:0c:29:37:97:c7&quot;,             &quot;module&quot;: &quot;e1000&quot;,             &quot;mtu&quot;: 1500,             &quot;pciid&quot;: &quot;0000:02:01.0&quot;,             &quot;promisc&quot;: false,             &quot;speed&quot;: 1000,             &quot;timestamping&quot;: [                &quot;tx_software&quot;,                 &quot;rx_software&quot;,                 &quot;software&quot;            ],             &quot;type&quot;: &quot;ether&quot;        &#125;,         &quot;ansible_env&quot;: &#123;            &quot;HOME&quot;: &quot;&#x2F;root&quot;,             &quot;LANG&quot;: &quot;zh_CN.UTF-8&quot;,             &quot;LESSOPEN&quot;: &quot;||&#x2F;usr&#x2F;bin&#x2F;lesspipe.sh %s&quot;,             &quot;LOGNAME&quot;: &quot;root&quot;,             &quot;LS_COLORS&quot;: &quot;rs&#x3D;0:di&#x3D;01;34:ln&#x3D;01;36:mh&#x3D;00:pi&#x3D;40;33:so&#x3D;01;35:do&#x3D;01;35:bd&#x3D;40;33;01:cd&#x3D;40;33;01:or&#x3D;40;31;01:mi&#x3D;01;05;37;41:su&#x3D;37;41:sg&#x3D;30;43:ca&#x3D;30;41:tw&#x3D;30;42:ow&#x3D;34;42:st&#x3D;37;44:ex&#x3D;01;32:*.tar&#x3D;01;31:*.tgz&#x3D;01;31:*.arc&#x3D;01;31:*.arj&#x3D;01;31:*.taz&#x3D;01;31:*.lha&#x3D;01;31:*.lz4&#x3D;01;31:*.lzh&#x3D;01;31:*.lzma&#x3D;01;31:*.tlz&#x3D;01;31:*.txz&#x3D;01;31:*.tzo&#x3D;01;31:*.t7z&#x3D;01;31:*.zip&#x3D;01;31:*.z&#x3D;01;31:*.Z&#x3D;01;31:*.dz&#x3D;01;31:*.gz&#x3D;01;31:*.lrz&#x3D;01;31:*.lz&#x3D;01;31:*.lzo&#x3D;01;31:*.xz&#x3D;01;31:*.bz2&#x3D;01;31:*.bz&#x3D;01;31:*.tbz&#x3D;01;31:*.tbz2&#x3D;01;31:*.tz&#x3D;01;31:*.deb&#x3D;01;31:*.rpm&#x3D;01;31:*.jar&#x3D;01;31:*.war&#x3D;01;31:*.ear&#x3D;01;31:*.sar&#x3D;01;31:*.rar&#x3D;01;31:*.alz&#x3D;01;31:*.ace&#x3D;01;31:*.zoo&#x3D;01;31:*.cpio&#x3D;01;31:*.7z&#x3D;01;31:*.rz&#x3D;01;31:*.cab&#x3D;01;31:*.jpg&#x3D;01;35:*.jpeg&#x3D;01;35:*.gif&#x3D;01;35:*.bmp&#x3D;01;35:*.pbm&#x3D;01;35:*.pgm&#x3D;01;35:*.ppm&#x3D;01;35:*.tga&#x3D;01;35:*.xbm&#x3D;01;35:*.xpm&#x3D;01;35:*.tif&#x3D;01;35:*.tiff&#x3D;01;35:*.png&#x3D;01;35:*.svg&#x3D;01;35:*.svgz&#x3D;01;35:*.mng&#x3D;01;35:*.pcx&#x3D;01;35:*.mov&#x3D;01;35:*.mpg&#x3D;01;35:*.mpeg&#x3D;01;35:*.m2v&#x3D;01;35:*.mkv&#x3D;01;35:*.webm&#x3D;01;35:*.ogm&#x3D;01;35:*.mp4&#x3D;01;35:*.m4v&#x3D;01;35:*.mp4v&#x3D;01;35:*.vob&#x3D;01;35:*.qt&#x3D;01;35:*.nuv&#x3D;01;35:*.wmv&#x3D;01;35:*.asf&#x3D;01;35:*.rm&#x3D;01;35:*.rmvb&#x3D;01;35:*.flc&#x3D;01;35:*.avi&#x3D;01;35:*.fli&#x3D;01;35:*.flv&#x3D;01;35:*.gl&#x3D;01;35:*.dl&#x3D;01;35:*.xcf&#x3D;01;35:*.xwd&#x3D;01;35:*.yuv&#x3D;01;35:*.cgm&#x3D;01;35:*.emf&#x3D;01;35:*.axv&#x3D;01;35:*.anx&#x3D;01;35:*.ogv&#x3D;01;35:*.ogx&#x3D;01;35:*.aac&#x3D;01;36:*.au&#x3D;01;36:*.flac&#x3D;01;36:*.mid&#x3D;01;36:*.midi&#x3D;01;36:*.mka&#x3D;01;36:*.mp3&#x3D;01;36:*.mpc&#x3D;01;36:*.ogg&#x3D;01;36:*.ra&#x3D;01;36:*.wav&#x3D;01;36:*.axa&#x3D;01;36:*.oga&#x3D;01;36:*.spx&#x3D;01;36:*.xspf&#x3D;01;36:&quot;,             &quot;MAIL&quot;: &quot;&#x2F;var&#x2F;mail&#x2F;root&quot;,             &quot;PATH&quot;: &quot;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin&quot;,             &quot;PWD&quot;: &quot;&#x2F;root&quot;,             &quot;SHELL&quot;: &quot;&#x2F;bin&#x2F;bash&quot;,             &quot;SHLVL&quot;: &quot;2&quot;,             &quot;SSH_CLIENT&quot;: &quot;192.168.140.10 48140 22&quot;,             &quot;SSH_CONNECTION&quot;: &quot;192.168.140.10 48140 192.168.140.11 22&quot;,             &quot;SSH_TTY&quot;: &quot;&#x2F;dev&#x2F;pts&#x2F;0&quot;,             &quot;TERM&quot;: &quot;xterm&quot;,             &quot;USER&quot;: &quot;root&quot;,             &quot;XDG_RUNTIME_DIR&quot;: &quot;&#x2F;run&#x2F;user&#x2F;0&quot;,             &quot;XDG_SESSION_ID&quot;: &quot;27&quot;,             &quot;_&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;        &#125;,         &quot;ansible_fibre_channel_wwn&quot;: [],         &quot;ansible_fips&quot;: false,         &quot;ansible_form_factor&quot;: &quot;Other&quot;,         &quot;ansible_fqdn&quot;: &quot;node1.linux.com&quot;,         &quot;ansible_hostname&quot;: &quot;node1&quot;,         &quot;ansible_hostnqn&quot;: &quot;&quot;,         &quot;ansible_interfaces&quot;: [            &quot;lo&quot;,             &quot;ens33&quot;        ],         &quot;ansible_is_chroot&quot;: false,         &quot;ansible_iscsi_iqn&quot;: &quot;&quot;,         &quot;ansible_kernel&quot;: &quot;3.10.0-1160.el7.x86_64&quot;,         &quot;ansible_kernel_version&quot;: &quot;#1 SMP Mon Oct 19 16:18:59 UTC 2020&quot;,         &quot;ansible_lo&quot;: &#123;            &quot;active&quot;: true,             &quot;device&quot;: &quot;lo&quot;,             &quot;features&quot;: &#123;                &quot;busy_poll&quot;: &quot;off [fixed]&quot;,                 &quot;fcoe_mtu&quot;: &quot;off [fixed]&quot;,                 &quot;generic_receive_offload&quot;: &quot;on&quot;,                 &quot;generic_segmentation_offload&quot;: &quot;on&quot;,                 &quot;highdma&quot;: &quot;on [fixed]&quot;,                 &quot;hw_tc_offload&quot;: &quot;off [fixed]&quot;,                 &quot;l2_fwd_offload&quot;: &quot;off [fixed]&quot;,                 &quot;large_receive_offload&quot;: &quot;off [fixed]&quot;,                 &quot;loopback&quot;: &quot;on [fixed]&quot;,                 &quot;netns_local&quot;: &quot;on [fixed]&quot;,                 &quot;ntuple_filters&quot;: &quot;off [fixed]&quot;,                 &quot;receive_hashing&quot;: &quot;off [fixed]&quot;,                 &quot;rx_all&quot;: &quot;off [fixed]&quot;,                 &quot;rx_checksumming&quot;: &quot;on [fixed]&quot;,                 &quot;rx_fcs&quot;: &quot;off [fixed]&quot;,                 &quot;rx_gro_hw&quot;: &quot;off [fixed]&quot;,                 &quot;rx_udp_tunnel_port_offload&quot;: &quot;off [fixed]&quot;,                 &quot;rx_vlan_filter&quot;: &quot;off [fixed]&quot;,                 &quot;rx_vlan_offload&quot;: &quot;off [fixed]&quot;,                 &quot;rx_vlan_stag_filter&quot;: &quot;off [fixed]&quot;,                 &quot;rx_vlan_stag_hw_parse&quot;: &quot;off [fixed]&quot;,                 &quot;scatter_gather&quot;: &quot;on&quot;,                 &quot;tcp_segmentation_offload&quot;: &quot;on&quot;,                 &quot;tx_checksum_fcoe_crc&quot;: &quot;off [fixed]&quot;,                 &quot;tx_checksum_ip_generic&quot;: &quot;on [fixed]&quot;,                 &quot;tx_checksum_ipv4&quot;: &quot;off [fixed]&quot;,                 &quot;tx_checksum_ipv6&quot;: &quot;off [fixed]&quot;,                 &quot;tx_checksum_sctp&quot;: &quot;on [fixed]&quot;,                 &quot;tx_checksumming&quot;: &quot;on&quot;,                 &quot;tx_fcoe_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gre_csum_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gre_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gso_partial&quot;: &quot;off [fixed]&quot;,                 &quot;tx_gso_robust&quot;: &quot;off [fixed]&quot;,                 &quot;tx_ipip_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_lockless&quot;: &quot;on [fixed]&quot;,                 &quot;tx_nocache_copy&quot;: &quot;off [fixed]&quot;,                 &quot;tx_scatter_gather&quot;: &quot;on [fixed]&quot;,                 &quot;tx_scatter_gather_fraglist&quot;: &quot;on [fixed]&quot;,                 &quot;tx_sctp_segmentation&quot;: &quot;on&quot;,                 &quot;tx_sit_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_tcp6_segmentation&quot;: &quot;on&quot;,                 &quot;tx_tcp_ecn_segmentation&quot;: &quot;on&quot;,                 &quot;tx_tcp_mangleid_segmentation&quot;: &quot;on&quot;,                 &quot;tx_tcp_segmentation&quot;: &quot;on&quot;,                 &quot;tx_udp_tnl_csum_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_udp_tnl_segmentation&quot;: &quot;off [fixed]&quot;,                 &quot;tx_vlan_offload&quot;: &quot;off [fixed]&quot;,                 &quot;tx_vlan_stag_hw_insert&quot;: &quot;off [fixed]&quot;,                 &quot;udp_fragmentation_offload&quot;: &quot;on&quot;,                 &quot;vlan_challenged&quot;: &quot;on [fixed]&quot;            &#125;,             &quot;hw_timestamp_filters&quot;: [],             &quot;ipv4&quot;: &#123;                &quot;address&quot;: &quot;127.0.0.1&quot;,                 &quot;broadcast&quot;: &quot;&quot;,                 &quot;netmask&quot;: &quot;255.0.0.0&quot;,                 &quot;network&quot;: &quot;127.0.0.0&quot;            &#125;,             &quot;ipv6&quot;: [                &#123;                    &quot;address&quot;: &quot;::1&quot;,                     &quot;prefix&quot;: &quot;128&quot;,                     &quot;scope&quot;: &quot;host&quot;                &#125;            ],             &quot;mtu&quot;: 65536,             &quot;promisc&quot;: false,             &quot;timestamping&quot;: [                &quot;rx_software&quot;,                 &quot;software&quot;            ],             &quot;type&quot;: &quot;loopback&quot;        &#125;,         &quot;ansible_local&quot;: &#123;&#125;,         &quot;ansible_lsb&quot;: &#123;&#125;,         &quot;ansible_lvm&quot;: &#123;            &quot;lvs&quot;: &#123;                &quot;root&quot;: &#123;                    &quot;size_g&quot;: &quot;17.51&quot;,                     &quot;vg&quot;: &quot;centos&quot;                &#125;,                 &quot;swap&quot;: &#123;                    &quot;size_g&quot;: &quot;2.00&quot;,                     &quot;vg&quot;: &quot;centos&quot;                &#125;            &#125;,             &quot;pvs&quot;: &#123;                &quot;&#x2F;dev&#x2F;sda2&quot;: &#123;                    &quot;free_g&quot;: &quot;0&quot;,                     &quot;size_g&quot;: &quot;19.51&quot;,                     &quot;vg&quot;: &quot;centos&quot;                &#125;            &#125;,             &quot;vgs&quot;: &#123;                &quot;centos&quot;: &#123;                    &quot;free_g&quot;: &quot;0&quot;,                     &quot;num_lvs&quot;: &quot;2&quot;,                     &quot;num_pvs&quot;: &quot;1&quot;,                     &quot;size_g&quot;: &quot;19.51&quot;                &#125;            &#125;        &#125;,         &quot;ansible_machine&quot;: &quot;x86_64&quot;,         &quot;ansible_machine_id&quot;: &quot;8dece1781ceb4ea4b1000cdd617091f2&quot;,         &quot;ansible_memfree_mb&quot;: 1471,         &quot;ansible_memory_mb&quot;: &#123;            &quot;nocache&quot;: &#123;                &quot;free&quot;: 1606,                 &quot;used&quot;: 213            &#125;,             &quot;real&quot;: &#123;                &quot;free&quot;: 1471,                 &quot;total&quot;: 1819,                 &quot;used&quot;: 348            &#125;,             &quot;swap&quot;: &#123;                &quot;cached&quot;: 0,                 &quot;free&quot;: 2047,                 &quot;total&quot;: 2047,                 &quot;used&quot;: 0            &#125;        &#125;,         &quot;ansible_memtotal_mb&quot;: 1819,         &quot;ansible_mounts&quot;: [            &#123;                &quot;block_available&quot;: 90521,                 &quot;block_size&quot;: 4096,                 &quot;block_total&quot;: 127145,                 &quot;block_used&quot;: 36624,                 &quot;device&quot;: &quot;&#x2F;dev&#x2F;sda1&quot;,                 &quot;fstype&quot;: &quot;xfs&quot;,                 &quot;inode_available&quot;: 255673,                 &quot;inode_total&quot;: 256000,                 &quot;inode_used&quot;: 327,                 &quot;mount&quot;: &quot;&#x2F;boot&quot;,                 &quot;options&quot;: &quot;rw,relatime,attr2,inode64,noquota&quot;,                 &quot;size_available&quot;: 370774016,                 &quot;size_total&quot;: 520785920,                 &quot;uuid&quot;: &quot;13d01e00-1f54-4718-bc51-041c787cf659&quot;            &#125;,             &#123;                &quot;block_available&quot;: 4100956,                 &quot;block_size&quot;: 4096,                 &quot;block_total&quot;: 4587008,                 &quot;block_used&quot;: 486052,                 &quot;device&quot;: &quot;&#x2F;dev&#x2F;mapper&#x2F;centos-root&quot;,                 &quot;fstype&quot;: &quot;xfs&quot;,                 &quot;inode_available&quot;: 9146425,                 &quot;inode_total&quot;: 9179136,                 &quot;inode_used&quot;: 32711,                 &quot;mount&quot;: &quot;&#x2F;&quot;,                 &quot;options&quot;: &quot;rw,relatime,attr2,inode64,noquota&quot;,                 &quot;size_available&quot;: 16797515776,                 &quot;size_total&quot;: 18788384768,                 &quot;uuid&quot;: &quot;39ad21bb-f420-4236-9343-e4c8ad32aefd&quot;            &#125;        ],         &quot;ansible_nodename&quot;: &quot;node1&quot;,         &quot;ansible_os_family&quot;: &quot;RedHat&quot;,         &quot;ansible_pkg_mgr&quot;: &quot;yum&quot;,         &quot;ansible_proc_cmdline&quot;: &#123;            &quot;BOOT_IMAGE&quot;: &quot;&#x2F;vmlinuz-3.10.0-1160.el7.x86_64&quot;,             &quot;LANG&quot;: &quot;zh_CN.UTF-8&quot;,             &quot;crashkernel&quot;: &quot;auto&quot;,             &quot;quiet&quot;: true,             &quot;rd.lvm.lv&quot;: [                &quot;centos&#x2F;root&quot;,                 &quot;centos&#x2F;swap&quot;            ],             &quot;rhgb&quot;: true,             &quot;ro&quot;: true,             &quot;root&quot;: &quot;&#x2F;dev&#x2F;mapper&#x2F;centos-root&quot;        &#125;,         &quot;ansible_processor&quot;: [            &quot;0&quot;,             &quot;GenuineIntel&quot;,             &quot;Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz&quot;        ],         &quot;ansible_processor_cores&quot;: 1,         &quot;ansible_processor_count&quot;: 1,         &quot;ansible_processor_threads_per_core&quot;: 1,         &quot;ansible_processor_vcpus&quot;: 1,         &quot;ansible_product_name&quot;: &quot;VMware Virtual Platform&quot;,         &quot;ansible_product_serial&quot;: &quot;VMware-56 4d 91 cd 00 dd 97 a0-86 19 17 7a cc 37 97 c7&quot;,         &quot;ansible_product_uuid&quot;: &quot;CD914D56-DD00-A097-8619-177ACC3797C7&quot;,         &quot;ansible_product_version&quot;: &quot;None&quot;,         &quot;ansible_python&quot;: &#123;            &quot;executable&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;,             &quot;has_sslcontext&quot;: true,             &quot;type&quot;: &quot;CPython&quot;,             &quot;version&quot;: &#123;                &quot;major&quot;: 2,                 &quot;micro&quot;: 5,                 &quot;minor&quot;: 7,                 &quot;releaselevel&quot;: &quot;final&quot;,                 &quot;serial&quot;: 0            &#125;,             &quot;version_info&quot;: [                2,                 7,                 5,                 &quot;final&quot;,                 0            ]        &#125;,         &quot;ansible_python_version&quot;: &quot;2.7.5&quot;,         &quot;ansible_real_group_id&quot;: 0,         &quot;ansible_real_user_id&quot;: 0,         &quot;ansible_selinux&quot;: &#123;            &quot;status&quot;: &quot;disabled&quot;        &#125;,         &quot;ansible_selinux_python_present&quot;: true,         &quot;ansible_service_mgr&quot;: &quot;systemd&quot;,         &quot;ansible_ssh_host_key_ecdsa_public&quot;: &quot;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEJRIK+wptQ36VVPvCLAb&#x2F;DDkXYC45D+u1lUZrLbp&#x2F;uUd554tlbGK1AuXeJ&#x2F;PZ&#x2F;5GXF&#x2F;tg0BKCKEBPaF+sIwMxs&#x3D;&quot;,         &quot;ansible_ssh_host_key_ed25519_public&quot;: &quot;AAAAC3NzaC1lZDI1NTE5AAAAIGRbSN3tNIuTVhZM06Xm3kfxtYmlhCECY+pIfDqmlUob&quot;,         &quot;ansible_ssh_host_key_rsa_public&quot;: &quot;AAAAB3NzaC1yc2EAAAADAQABAAABAQDQpua6HTb+PhJn&#x2F;KFHkoZQdJOsfk8iTtVclSEhEAJHFDilxkghvnR2ErYsVmrTXf7EoKwU6S6I&#x2F;w6QRg3fk2GP6Z4r6o3uO76Cx1rkDC+nf5tQnGIHSgDYxyk3ASVgK0GgSISJVWZr8Okm7gO2sOzQ4VSnuORJ5z0x2bIqobsEIMN+FvfOh7hWSEgAenF3pIP1rpwd+6ADNwo2CALSqi9x7wJ9ClC96ym8X52byL1Eg1ANP7wQ7n+jswLIGJWOoBgXL2w17OMY3AmpLzyvyonl0kb3WKs5boqTmM1TTMvrHD2FOw&#x2F;NRSVbBfse&#x2F;3&#x2F;13Jb5HDXvVLss6qctyfbTCzqd&quot;,         &quot;ansible_swapfree_mb&quot;: 2047,         &quot;ansible_swaptotal_mb&quot;: 2047,         &quot;ansible_system&quot;: &quot;Linux&quot;,         &quot;ansible_system_capabilities&quot;: [            &quot;cap_chown&quot;,             &quot;cap_dac_override&quot;,             &quot;cap_dac_read_search&quot;,             &quot;cap_fowner&quot;,             &quot;cap_fsetid&quot;,             &quot;cap_kill&quot;,             &quot;cap_setgid&quot;,             &quot;cap_setuid&quot;,             &quot;cap_setpcap&quot;,             &quot;cap_linux_immutable&quot;,             &quot;cap_net_bind_service&quot;,             &quot;cap_net_broadcast&quot;,             &quot;cap_net_admin&quot;,             &quot;cap_net_raw&quot;,             &quot;cap_ipc_lock&quot;,             &quot;cap_ipc_owner&quot;,             &quot;cap_sys_module&quot;,             &quot;cap_sys_rawio&quot;,             &quot;cap_sys_chroot&quot;,             &quot;cap_sys_ptrace&quot;,             &quot;cap_sys_pacct&quot;,             &quot;cap_sys_admin&quot;,             &quot;cap_sys_boot&quot;,             &quot;cap_sys_nice&quot;,             &quot;cap_sys_resource&quot;,             &quot;cap_sys_time&quot;,             &quot;cap_sys_tty_config&quot;,             &quot;cap_mknod&quot;,             &quot;cap_lease&quot;,             &quot;cap_audit_write&quot;,             &quot;cap_audit_control&quot;,             &quot;cap_setfcap&quot;,             &quot;cap_mac_override&quot;,             &quot;cap_mac_admin&quot;,             &quot;cap_syslog&quot;,             &quot;35&quot;,             &quot;36+ep&quot;        ],         &quot;ansible_system_capabilities_enforced&quot;: &quot;True&quot;,         &quot;ansible_system_vendor&quot;: &quot;VMware, Inc.&quot;,         &quot;ansible_uptime_seconds&quot;: 27961,         &quot;ansible_user_dir&quot;: &quot;&#x2F;root&quot;,         &quot;ansible_user_gecos&quot;: &quot;root&quot;,         &quot;ansible_user_gid&quot;: 0,         &quot;ansible_user_id&quot;: &quot;root&quot;,         &quot;ansible_user_shell&quot;: &quot;&#x2F;bin&#x2F;bash&quot;,         &quot;ansible_user_uid&quot;: 0,         &quot;ansible_userspace_architecture&quot;: &quot;x86_64&quot;,         &quot;ansible_userspace_bits&quot;: &quot;64&quot;,         &quot;ansible_virtualization_role&quot;: &quot;guest&quot;,         &quot;ansible_virtualization_type&quot;: &quot;VMware&quot;,         &quot;discovered_interpreter_python&quot;: &quot;&#x2F;usr&#x2F;bin&#x2F;python&quot;,         &quot;gather_subset&quot;: [            &quot;all&quot;        ],         &quot;module_setup&quot;: true    &#125;,     &quot;changed&quot;: false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ansible </category>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 自动化运维工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> ansible </tag>
            
            <tag> 自动化运维工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zabbix系列教程】Proxy端部署教程+分布式监控</title>
      <link href="/2023/05/12/114/"/>
      <url>/2023/05/12/114/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Zabbix系列教程】Proxy端部署教程-分布式监控"><a href="#【Zabbix系列教程】Proxy端部署教程-分布式监控" class="headerlink" title="【Zabbix系列教程】Proxy端部署教程+分布式监控"></a>【Zabbix系列教程】Proxy端部署教程+分布式监控</h1><blockquote><p><strong>第一期教程：<a href="https://www.wsjj.top/archives/109">【Zabbix系列教程】Server端部署教程</a></strong><br><strong>第二期教程：<a href="https://www.wsjj.top/archives/110">【Zabbix系列教程】Agent端部署教程</a></strong></p></blockquote><h2 id="一、分布式监控介绍"><a href="#一、分布式监控介绍" class="headerlink" title="一、分布式监控介绍"></a>一、分布式监控介绍</h2><blockquote><p><strong>在被监控设备数量过多时，可以<code>Zabbix proxy</code>减缓<code>Zabbix server</code>的工作负载</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-62.png" alt="zabbix4-62"></p><h2 id="二、分布式监控部署"><a href="#二、分布式监控部署" class="headerlink" title="二、分布式监控部署"></a>二、分布式监控部署</h2><h3 id="1-安装Zabbix-Proxy端"><a href="#1-安装Zabbix-Proxy端" class="headerlink" title="1.安装Zabbix Proxy端"></a>1.安装Zabbix Proxy端</h3><h4 id="A-关闭防火墙和SElinux、配置时间同步"><a href="#A-关闭防火墙和SElinux、配置时间同步" class="headerlink" title="A.关闭防火墙和SElinux、配置时间同步"></a>A.关闭防火墙和SElinux、配置时间同步</h4><blockquote><p><strong>过程省略</strong></p></blockquote><h4 id="B-配置yum源和epel源"><a href="#B-配置yum源和epel源" class="headerlink" title="B.配置yum源和epel源"></a>B.配置<code>yum</code>源和<code>epel</code>源</h4><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-配置zabbix源"><a href="#C-配置zabbix源" class="headerlink" title="C.配置zabbix源"></a>C.配置<code>zabbix</code>源</h4><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;zabbix.repo[zabbix4]name&#x3D;zabbix4baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;zabbix&#x2F;zabbix&#x2F;4.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-安装Zabbix-Proxy端和数据库"><a href="#D-安装Zabbix-Proxy端和数据库" class="headerlink" title="D.安装Zabbix Proxy端和数据库"></a>D.安装Zabbix Proxy端和数据库</h4><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# yum install -y zabbix-proxy-mysql mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h5><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# systemctl enable --now mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-创建数据库和用户"><a href="#E-创建数据库和用户" class="headerlink" title="E.创建数据库和用户"></a>E.创建数据库和用户</h4><pre class="line-numbers language-none"><code class="language-none">MariaDB [(none)]&gt; create database zabbix_proxy charset utf8 collate utf8_bin;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; grant all on zabbix_proxy.* to &#39;zabbix_proxy&#39;@&#39;localhost&#39; identified by &#39;redhat&#39;;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入用到的表"><a href="#导入用到的表" class="headerlink" title="导入用到的表"></a>导入用到的表</h5><pre class="line-numbers language-none"><code class="language-none">MariaDB [(none)]&gt; exitBye[root@proxy ~]# zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-proxy-mysql-4.4.10&#x2F;schema.sql.gz | mysql -uroot zabbix_proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="F-修改配置proxy端文件"><a href="#F-修改配置proxy端文件" class="headerlink" title="F.修改配置proxy端文件"></a>F.修改配置<code>proxy</code>端文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_proxy.conf#配置文件并不完整，请勿删改其他Server&#x3D;192.168.140.10#指定一下Server地址Hostname&#x3D;Zabbix proxy#如果存在多个Proxy,名字不能重复DBHost&#x3D;localhost#删除注释DBName&#x3D;zabbix_proxy#指定一下刚刚创建的库名DBUser&#x3D;zabbix_proxy#指定数据库用户DBPassword&#x3D;redhat#指定数据库登录密码DBSocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock#指定数据库套接字文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-启动服务"><a href="#G-启动服务" class="headerlink" title="G.启动服务"></a>G.启动服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# systemctl enable --now zabbix-proxy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h5><blockquote><p><strong>如果没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@proxy ~]# netstat -tunlp | grep zabbixtcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      2421&#x2F;zabbix_proxy   tcp6       0      0 :::10051                :::*                    LISTEN      2421&#x2F;zabbix_proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-添加Proxy端"><a href="#2-添加Proxy端" class="headerlink" title="2.添加Proxy端"></a>2.添加Proxy端</h3><h4 id="A-回到Server端web界面手动添加Proxy代理"><a href="#A-回到Server端web界面手动添加Proxy代理" class="headerlink" title="A.回到Server端web界面手动添加Proxy代理"></a>A.回到<code>Server</code>端<code>web</code>界面手动添加<code>Proxy</code>代理</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-63.png" alt="zabbix4-63"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-64.png" alt="zabbix4-64"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-65.png" alt="zabbix4-65"></p><h3 id="3-配置Agent节点"><a href="#3-配置Agent节点" class="headerlink" title="3.配置Agent节点"></a>3.配置Agent节点</h3><h4 id="A-安装Agent节点"><a href="#A-安装Agent节点" class="headerlink" title="A.安装Agent节点"></a>A.安装Agent节点</h4><blockquote><p><strong>过程省略</strong><br><strong>关于<code>Zabbix Agent</code>节点搭建教程：<a href="https://www.wsjj.top/archives/110">https://www.wsjj.top/archives/110</a></strong></p></blockquote><h4 id="B-修改配置文件"><a href="#B-修改配置文件" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><blockquote><p><strong>这里注意一下，和之前的配置不同。</strong><br><strong>之前都是写<code>Server</code>端的<code>IP</code>，现在需要写<code>Proxy</code>端<code>IP</code>哦！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confServer&#x3D;192.168.140.14#填写Proxy端IPServerActive&#x3D;192.168.140.14#同样写Proxy端IPHostname&#x3D;node3#名字不要和之前的主机同名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动服务"><a href="#C-启动服务" class="headerlink" title="C.启动服务"></a>C.启动服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# systemctl enable --now zabbix-agent.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-添加主机"><a href="#4-添加主机" class="headerlink" title="4.添加主机"></a>4.添加主机</h3><h4 id="A-回到Server端web界面，添加新节点"><a href="#A-回到Server端web界面，添加新节点" class="headerlink" title="A.回到Server端web界面，添加新节点"></a>A.回到Server端web界面，添加新节点</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-66.png" alt="zabbix4-66"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-67.png" alt="zabbix4-67"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-68.png" alt="zabbix4-68"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-69.png" alt="zabbix4-69"></p><blockquote><p><strong>教程到此就结束啦！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> zabbix </category>
          
          <category> 笔记 </category>
          
          <category> 集群 </category>
          
          <category> linux监控 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器搭建 </tag>
            
            <tag> centos </tag>
            
            <tag> zabbix server </tag>
            
            <tag> linux监控 </tag>
            
            <tag> zabbix agent </tag>
            
            <tag> zabbix proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zabbix系列教程】自动发现和自动注册</title>
      <link href="/2023/05/12/113/"/>
      <url>/2023/05/12/113/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Zabbix系列教程】自动发现和自动注册"><a href="#【Zabbix系列教程】自动发现和自动注册" class="headerlink" title="【Zabbix系列教程】自动发现和自动注册"></a>【Zabbix系列教程】自动发现和自动注册</h1><blockquote><p><strong>第一期教程：<a href="https://www.wsjj.top/archives/109">【Zabbix系列教程】Server端部署教程</a></strong><br><strong>第二期教程：<a href="https://www.wsjj.top/archives/110">【Zabbix系列教程】Agent端部署教程</a></strong></p></blockquote><h2 id="一、关于自动发现和自动注册"><a href="#一、关于自动发现和自动注册" class="headerlink" title="一、关于自动发现和自动注册"></a>一、关于自动发现和自动注册</h2><ul><li>自动发现<ul><li>由zabbix server按特定的条件发现被监控机 </li><li>根据服务不同的运行状态设置不同的动作</li></ul></li><li>自动注册<ul><li>由被监控机自动向server发送注册请求</li></ul></li></ul><h2 id="二、自动发现"><a href="#二、自动发现" class="headerlink" title="二、自动发现"></a>二、自动发现</h2><h3 id="1-配置基于80端口的自动发现"><a href="#1-配置基于80端口的自动发现" class="headerlink" title="1.配置基于80端口的自动发现"></a>1.配置基于<code>80</code>端口的自动发现</h3><h4 id="A-创建自动发现规则"><a href="#A-创建自动发现规则" class="headerlink" title="A.创建自动发现规则"></a>A.创建自动发现规则</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-52.png" alt="zabbix4-52"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-53.png" alt="zabbix4-53"></p><h4 id="B-创建动作"><a href="#B-创建动作" class="headerlink" title="B.创建动作"></a>B.创建动作</h4><blockquote><p><strong>&#x3D;&#x3D;自动发现&#x3D;&#x3D;以后，需要配置&#x3D;&#x3D;动作&#x3D;&#x3D;才能添加主机</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-54.png" alt="zabbix4-54"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-55.png" alt="zabbix4-55"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-56.png" alt="zabbix4-56"></p><h3 id="2-前往主机，安装web服务软件"><a href="#2-前往主机，安装web服务软件" class="headerlink" title="2.前往主机，安装web服务软件"></a>2.前往主机，安装web服务软件</h3><blockquote><p><strong>我这里拿<code>httpd</code>做演示，也可以选择安装<code>Nginx</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-回到Server端web界面，检查是否已经自动添加主机"><a href="#3-回到Server端web界面，检查是否已经自动添加主机" class="headerlink" title="3.回到Server端web界面，检查是否已经自动添加主机"></a>3.回到<code>Server</code>端<code>web</code>界面，检查是否已经自动添加主机</h3><blockquote><p><strong>因为我们没有安装<code>Agent</code>软件，所以<code>ZBX</code>是灭掉的状态</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-57.png" alt="zabbix4-57"></p><h2 id="二、自动注册"><a href="#二、自动注册" class="headerlink" title="二、自动注册"></a>二、自动注册</h2><h3 id="1-在被监控端安装Zabbix-Agent软件"><a href="#1-在被监控端安装Zabbix-Agent软件" class="headerlink" title="1.在被监控端安装Zabbix-Agent软件"></a>1.在被监控端安装Zabbix-Agent软件</h3><blockquote><p><strong>安装过程省略</strong><br><strong>关于<code>Agent</code>端安装部署教程：<a href="https://www.wsjj.top/archives/110">https://www.wsjj.top/archives/110</a></strong></p></blockquote><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf#配置文件并不完整，仅展示修改的地方Server&#x3D;192.168.140.10#指定Server端IP，用于自动注册ServerActive&#x3D;192.168.140.10#指定Server端IP，用于自动注册Hostname&#x3D;node2#给节点指定一个名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# systemctl enable --now zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-在Server端web界面配置自动注册动作"><a href="#3-在Server端web界面配置自动注册动作" class="headerlink" title="3.在Server端web界面配置自动注册动作"></a>3.在<code>Server</code>端<code>web</code>界面配置自动注册动作</h3><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-58.png" alt="zabbix4-58"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-59.png" alt="zabbix4-59"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-60.png" alt="zabbix4-60"></p><h3 id="4-查看新添加的node2节点"><a href="#4-查看新添加的node2节点" class="headerlink" title="4.查看新添加的node2节点"></a>4.查看新添加的node2节点</h3><blockquote><p><strong>需要等待<code>3-4</code>分钟，才会添加主机</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-61.png" alt="zabbix4-61"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> zabbix </category>
          
          <category> 笔记 </category>
          
          <category> linux监控 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> zabbix </tag>
            
            <tag> zabbix server </tag>
            
            <tag> linux监控 </tag>
            
            <tag> zabbix agent </tag>
            
            <tag> 自动发现 </tag>
            
            <tag> 自动注册 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zabbix系列教程】监控MySQL、Nginx、Redis常用键值</title>
      <link href="/2023/05/11/112/"/>
      <url>/2023/05/11/112/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Zabbix系列教程】监控MySQL、Nginx、Redis常用键值"><a href="#【Zabbix系列教程】监控MySQL、Nginx、Redis常用键值" class="headerlink" title="【Zabbix系列教程】监控MySQL、Nginx、Redis常用键值"></a>【Zabbix系列教程】监控MySQL、Nginx、Redis常用键值</h1><blockquote><p><strong>关于自定义键值教程：<a href="https://www.wsjj.top/archives/110">https://www.wsjj.top/archives/110</a></strong></p></blockquote><h2 id="一、MySQL"><a href="#一、MySQL" class="headerlink" title="一、MySQL"></a>一、MySQL</h2><h3 id="1-设置授权用户和密码-用于Zabbix-Server登录数据库收集数据"><a href="#1-设置授权用户和密码-用于Zabbix-Server登录数据库收集数据" class="headerlink" title="1.设置授权用户和密码(用于Zabbix-Server登录数据库收集数据)"></a>1.设置授权用户和密码(用于Zabbix-Server登录数据库收集数据)</h3><h4 id="A-进入数据库授权用户权限"><a href="#A-进入数据库授权用户权限" class="headerlink" title="A.进入数据库授权用户权限"></a>A.进入数据库授权用户权限</h4><blockquote><p><strong>如果配置了&#x3D;&#x3D;主从复制&#x3D;&#x3D;环境，请在&#x3D;&#x3D;主库&#x3D;&#x3D;操作！</strong><br><strong>关于MySQL主从复制教程：<a href="https://www.wsjj.top/archives/76">https://www.wsjj.top/archives/76</a></strong><br><strong>关于MySQL用户权限教程：<a href="https://www.wsjj.top/archives/73">https://www.wsjj.top/archives/73</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# mysql -urootMariaDB [(none)]&gt; grant all privileges on *.* to &#39;zabbix&#39;@&#39;localhost&#39; identified by &#39;redhat&#39;;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-修改配置文件"><a href="#B-修改配置文件" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><blockquote><p><strong>修改<code>Agent</code>端上的数据库配置文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;my.cnf#在配置文件末尾添加以下内容[client]default-character-set&#x3D;utf8host&#x3D;localhostuser&#x3D;&#39;zabbix&#39;password&#x3D;&#39;redhat&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="重启数据库服务"><a href="#重启数据库服务" class="headerlink" title="重启数据库服务"></a>重启数据库服务</h5><blockquote><p><strong>如果您使用的<code>MySQL</code>，请把<code>mariadb</code>替换成<code>mysqld</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><blockquote><p><strong>直接输入命令会自动登录，但是自动登录的用户是<code>zabbix</code>哦！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mysqlWelcome to the MariaDB monitor.  Commands end with ; or \g.Your MariaDB connection id is 289Server version: 5.5.68-MariaDB MariaDB ServerCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.MariaDB [(none)]&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改Zabbix-Agent配置文件"><a href="#2-修改Zabbix-Agent配置文件" class="headerlink" title="2.修改Zabbix Agent配置文件"></a>2.修改<code>Zabbix Agent</code>配置文件</h3><h4 id="A-在配置文件中定义-x3D-x3D-自定义键值-x3D-x3D"><a href="#A-在配置文件中定义-x3D-x3D-自定义键值-x3D-x3D" class="headerlink" title="A.在配置文件中定义&#x3D;&#x3D;自定义键值&#x3D;&#x3D;"></a>A.在配置文件中定义&#x3D;&#x3D;自定义键值&#x3D;&#x3D;</h4><blockquote><p><strong>如果您使用的是<code>Agent2</code>版本，请修改<code>/etc/zabbix/zabbix_agent2.conf</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf#配置文件并不完整，请勿删改其他UserParameter&#x3D;mysql.ping,&#x2F;usr&#x2F;bin&#x2F;mysqladmin ping|grep alive|wc -l#检查mysql服务是否活动UserParameter&#x3D;mysql.user.number,mysql -e &quot;select count(*) from mysql.user&quot; | sed &#39;1d&#39;#检查mysql用户数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-重启服务，让配置文件生效"><a href="#B-重启服务，让配置文件生效" class="headerlink" title="B.重启服务，让配置文件生效"></a>B.重启服务，让配置文件生效</h4><blockquote><p><strong>如果您使用的是<code>Agent2</code>版本，请使用<code>zabbix-agent2</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-服务器Server端测试"><a href="#C-服务器Server端测试" class="headerlink" title="C.服务器Server端测试"></a>C.服务器<code>Server</code>端测试</h4><blockquote><p><strong>如果提示找不到<code>zabbix_get</code>命令，请安装<code>yum install -y zabbix-get</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k mysql.ping1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>如果您出现以下报错，请检查<code>zabbix</code>用户是否对数据库的数据目录拥有权限！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k mysql.ping&#x2F;usr&#x2F;bin&#x2F;mysqladmin: connect to server at &#39;localhost&#39; failederror: &#39;Can&#39;t connect to local MySQL server through socket &#39;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock&#39; (13)&#39;Check that mysqld is running and that the socket: &#39;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock&#39; exists!0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-更多关于MySQL的自定义键值"><a href="#3-更多关于MySQL的自定义键值" class="headerlink" title="3.更多关于MySQL的自定义键值"></a>3.更多关于<code>MySQL</code>的自定义键值</h3><pre class="line-numbers language-none"><code class="language-none">#监控MySQL版本UserParameter&#x3D;mysql.version,mysql -V | cut -f6 -d&quot; &quot; | sed &#39;s&#x2F;,&#x2F;&#x2F;&#39;#监控MySQL进程数UserParameter&#x3D;mysql.process,ps -ef|grep &quot;mysql&quot;|grep -v &quot;grep&quot;|wc -l#监控MySQL运行状态UserParameter&#x3D;mysql.ping,&#x2F;usr&#x2F;bin&#x2F;mysqladmin ping|grep alive|wc -l#监控MySQL运行时间UserParameter&#x3D;mysql.uptime,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Uptime|head -1|cut -f3 -d&quot;|&quot;#监控MySQL的连接数UserParameter&#x3D;mysql.Threads.connected,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Threads_connected|head -1|cut -f3 -d&quot;|&quot;#监控MySQL活动状态的连接数UserParameter&#x3D;mysql.Threads.running,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Threads_running|head -1|cut -f3 -d&quot;|&quot;#监控MySQL客户端异常中断的数值UserParameter&#x3D;mysql.aborted.clients,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Aborted_clients|head -1|cut -f3 -d&quot;|&quot;#监控MySQL主从状态UserParameter&#x3D;mysql.Slave.status,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Slave_runnin | grep -o ON |wc -l#监控MySQL每秒钟获得的查询量UserParameter&#x3D;mysql.questions,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status | grep Questions | head -1 | cut -f3 -d&quot;|&quot; #监控MySQL从数据文件里取数据的次数UserParameter&#x3D;mysql.read.rnd,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Handler_read_rnd_next|head -1 | cut -f3 -d&quot;|&quot;  #监控MySQL往数据文件里写数据的次数UserParameter&#x3D;mysql.write.rnd,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Handler_write|head -1|cut -f3 -d&quot;|&quot; #监控MySQL内部COMMIT命令的个数UserParameter&#x3D;mysql.commit,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Handler_commit| head -1 | cut -f3 -d&quot;|&quot; #监控MySQL请求从一张表中删除行的次数。UserParameter&#x3D;mysql.delete,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Handler_delete| head -1 | cut -f3 -d&quot;|&quot; #监控MySQL表缓存没有命中的数量UserParameter&#x3D;mysql.Opened.tables,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Opened_tables| head -1 | cut -f3 -d&quot;|&quot; #监控MySQL没有使用索引查询数量UserParameter&#x3D;mysql.slowqueries,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Slow_queries|cut -f3 -d&quot;|&quot;#监控MySQL执行全表搜索查询的数量UserParameter&#x3D;mysql.select.scan,&#x2F;usr&#x2F;bin&#x2F;mysqladmin extended-status|grep Select_scan|cut -f3 -d&quot;|&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关于MySQL主从复制环境监测"><a href="#关于MySQL主从复制环境监测" class="headerlink" title="关于MySQL主从复制环境监测"></a>关于MySQL主从复制环境监测</h4><h5 id="监控IO线程和SQL线程"><a href="#监控IO线程和SQL线程" class="headerlink" title="监控IO线程和SQL线程"></a>监控<code>IO</code>线程和<code>SQL</code>线程</h5><blockquote><p><strong>只有<code>2</code>个线程状态都为<code>yes</code>的时候返回<code>1</code>，否则都不是<code>yes</code>或者其中一个是<code>yes</code>，都返回<code>0</code></strong><br><strong>脚本中的<code>mysql</code>命令并没有指定登录用户，是因为我已经更改了配置文件，默认会登录<code>zabbix</code>用户！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;slave.sh#! &#x2F;bin&#x2F;bashio&#x3D;$(mysql  -e &quot;show slave status\G&quot; | awk &#39;&#x2F;Slave_IO_Running&#x2F;&#123;print $2&#125;&#39;)sql&#x3D;$(mysql  -e &quot;show slave status\G&quot; | awk &#39;&#x2F;Slave_SQL_Running&#x2F;&#123;print $2&#125;&#39;)if [ $io &#x3D;&#x3D; Yes ] &amp;&amp; [ $sql &#x3D;&#x3D; Yes ] ; then    echo 1else    echo 0fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# chmod a+x &#x2F;opt&#x2F;slave.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confUserParameter&#x3D;mysql.slave,bash &#x2F;opt&#x2F;slave.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h6><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k mysql.slave1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="监控主从复制同步状态"><a href="#监控主从复制同步状态" class="headerlink" title="监控主从复制同步状态"></a>监控主从复制同步状态</h5><blockquote><p><strong>脚本中的<code>mysql</code>命令并没有指定登录用户，是因为我已经更改了配置文件，默认会登录<code>zabbix</code>用户！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;pos.sh#! &#x2F;bin&#x2F;bashread_pos&#x3D;$(mysql -e &quot;show slave status\G&quot; | awk &#39;&#x2F;Read_Master_Log_Pos&#x2F;&#123;print $2&#125;&#39;)exec_pos&#x3D;$(mysql -e &quot;show slave status\G&quot; | awk &#39;&#x2F;Exec_Master_Log_Pos&#x2F;&#123;print $2&#125;&#39;)if [ $read_pos -eq $exec_pos ]; then    echo 1else    echo 0fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# chmod a+x &#x2F;opt&#x2F;pos.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confUserParameter&#x3D;mysql.pos,bash &#x2F;opt&#x2F;pos.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h6><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k mysql.pos1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-拿到以上的自定义键值，就可以去添加监控项和触发器了"><a href="#4-拿到以上的自定义键值，就可以去添加监控项和触发器了" class="headerlink" title="4.拿到以上的自定义键值，就可以去添加监控项和触发器了"></a>4.拿到以上的自定义键值，就可以去添加监控项和触发器了</h3><blockquote><p><strong>关于<code>Zabbix</code>监控项教程：<a href="https://www.wsjj.top/archives/110">https://www.wsjj.top/archives/110</a></strong><br><strong>关于<code>Zabbix</code>触发器和报警器的教程：<a href="https://www.wsjj.top/archives/111">https://www.wsjj.top/archives/111</a></strong></p></blockquote><h2 id="二、Nginx"><a href="#二、Nginx" class="headerlink" title="二、Nginx"></a>二、Nginx</h2><h3 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1.安装Nginx"></a>1.安装Nginx</h3><blockquote><p><strong>过程省略</strong><br><strong><code>Nginx</code>部署教程：<a href="https://www.wsjj.top/archives/83">https://www.wsjj.top/archives/83</a></strong></p></blockquote><h3 id="2-配置Nginx的状态页面"><a href="#2-配置Nginx的状态页面" class="headerlink" title="2.配置Nginx的状态页面"></a>2.配置<code>Nginx</code>的状态页面</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;status.confserver &#123;        listen 80;        server_name localhost;        location &#x2F;status &#123;                stub_status     on;                access_log      on;                &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="监测配置文件"><a href="#监测配置文件" class="headerlink" title="监测配置文件"></a>监测配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# nginx -tnginx: the configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf syntax is oknginx: configuration file &#x2F;etc&#x2F;nginx&#x2F;nginx.conf test is successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="浏览器访问测试"><a href="#浏览器访问测试" class="headerlink" title="浏览器访问测试"></a>浏览器访问测试</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-51.png" alt="zabbix4-51"></p><h3 id="3-修改Agent配置文件"><a href="#3-修改Agent配置文件" class="headerlink" title="3.修改Agent配置文件"></a>3.修改<code>Agent</code>配置文件</h3><blockquote><p><strong><code>Nginx</code>的活跃连接数</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confUserParameter&#x3D;nginx.active.connect,curl -s http:&#x2F;&#x2F;192.168.140.12&#x2F;status 2&gt;&#x2F;dev&#x2F;null | awk &#39;&#x2F;^Active connections&#x2F;&#123;print $NF&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="重启服务，让配置文件生效"><a href="#重启服务，让配置文件生效" class="headerlink" title="重启服务，让配置文件生效"></a>重启服务，让配置文件生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Server端测试"><a href="#Server端测试" class="headerlink" title="Server端测试"></a>Server端测试</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k nginx.active.connect3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-更多自定义键值"><a href="#4-更多自定义键值" class="headerlink" title="4.更多自定义键值"></a>4.更多自定义键值</h3><pre class="line-numbers language-none"><code class="language-none">#监控Nginx活动连接数UserParameter&#x3D;Nginx.Active.Connections,&#x2F;usr&#x2F;bin&#x2F;curl -s http:&#x2F;&#x2F;127.0.0.1&#x2F;status 2&gt;&#x2F;dev&#x2F;null |grep &#39;Active connections:&#39;|awk &#39;&#123;print $NF&#125;&#39;#监控Nginx处理连接总数UserParameter&#x3D;Nginx.Accepts.Connections,&#x2F;usr&#x2F;bin&#x2F;curl -s http:&#x2F;&#x2F;127.0.0.1&#x2F;status 2&gt;&#x2F;dev&#x2F;null|sed -n &#39;3p&#39;|awk &#39;&#123;print $1&#125;&#39;#监控Nginx处理连接失败数UserParameter&#x3D;Nginx.Handled.Connections,&#x2F;usr&#x2F;bin&#x2F;curl -s http:&#x2F;&#x2F;127.0.0.1&#x2F;status 2&gt;&#x2F;dev&#x2F;null|sed -n &#39;3p&#39;|awk &#39;&#123;print $2&#125;&#39;#监控Nginx处理请求总数UserParameter&#x3D;Nginx.requests.Connections,&#x2F;usr&#x2F;bin&#x2F;curl -s http:&#x2F;&#x2F;127.0.0.1&#x2F;status 2&gt;&#x2F;dev&#x2F;null|sed -n &#39;3p&#39;|awk &#39;&#123;print $3&#125;&#39;#Nginx读取到客户端的Header信息数UserParameter&#x3D;Nginx.Reading,&#x2F;usr&#x2F;bin&#x2F;curl -s http:&#x2F;&#x2F;127.0.0.1&#x2F;status 2&gt;&#x2F;dev&#x2F;null|sed -n &#39;4p&#39;|awk &#39;&#123;print $2&#125;&#39;#Nginx返回给客户端的Header信息数UserParameter&#x3D;Nginx.Writing,&#x2F;usr&#x2F;bin&#x2F;curl -s http:&#x2F;&#x2F;127.0.0.1&#x2F;status 2&gt;&#x2F;dev&#x2F;null|sed -n &#39;4p&#39;|awk &#39;&#123;print $4&#125;&#39;#Nginx处理完并等候状态的驻留连接UserParameter&#x3D;Nginx.Waiting,&#x2F;usr&#x2F;bin&#x2F;curl -s http:&#x2F;&#x2F;127.0.0.1&#x2F;status 2&gt;&#x2F;dev&#x2F;null|sed -n &#39;4p&#39;|awk &#39;&#123;print $6&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Zabbix监控Nginx日志"><a href="#5-Zabbix监控Nginx日志" class="headerlink" title="5.Zabbix监控Nginx日志"></a>5.Zabbix监控Nginx日志</h3><blockquote><p><strong>我们都知道web服务，都会有个访问日志，这个日志文件主要记录着客户端访问时候的设备，以及访问路径，设备信息，和各种服务器响应的状态码</strong></p></blockquote><h4 id="A-查看Nginx日志"><a href="#A-查看Nginx日志" class="headerlink" title="A.查看Nginx日志"></a>A.查看<code>Nginx</code>日志</h4><blockquote><p><strong>如果是<code>yum</code>安装的<code>Nginx</code>，默认日志存放目录<code>/var/log/nginx/*.log</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# cat &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log 192.168.140.1 - - [11&#x2F;May&#x2F;2023:10:55:47 +0800] &quot;GET &#x2F;favicon.ico HTTP&#x2F;1.1&quot; 404 555 &quot;http:&#x2F;&#x2F;192.168.140.12&#x2F;status&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;113.0.0.0 Safari&#x2F;537.36 Edg&#x2F;113.0.1774.35&quot; &quot;-&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-查看Nginx配置文件中的日志记录格式"><a href="#B-查看Nginx配置文件中的日志记录格式" class="headerlink" title="B.查看Nginx配置文件中的日志记录格式"></a>B.查看<code>Nginx</code>配置文件中的日志记录格式</h4><blockquote><p><strong>这里是<code>yum</code>安装<code>Nginx</code>的日志记录格式</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conflog_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-编写脚本"><a href="#C-编写脚本" class="headerlink" title="C.编写脚本"></a>C.编写脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;nginx_logs.sh#!&#x2F;bin&#x2F;bashstatus_code&#x3D;$1count&#x3D;$(awk -v status&#x3D;&quot;$status_code&quot; &#39;$9 &#x3D;&#x3D; status &#123;print $0&#125;&#39; &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log | wc -l)echo &quot;$count&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-给予执行权限"><a href="#D-给予执行权限" class="headerlink" title="D.给予执行权限"></a>D.给予执行权限</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# chmod a+x &#x2F;opt&#x2F;nginx_logs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-测试脚本"><a href="#E-测试脚本" class="headerlink" title="E.测试脚本"></a>E.测试脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# bash &#x2F;opt&#x2F;nginx_logs.sh 30413[root@node1 ~]# bash &#x2F;opt&#x2F;nginx_logs.sh 2004[root@node1 ~]# bash &#x2F;opt&#x2F;nginx_logs.sh 4043<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-修改Agent配置文件"><a href="#F-修改Agent配置文件" class="headerlink" title="F.修改Agent配置文件"></a>F.修改<code>Agent</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confUserParameter&#x3D;nginx.status.code[*],bash &#x2F;opt&#x2F;nginx_logs.sh $1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-Server端测试"><a href="#G-Server端测试" class="headerlink" title="G.Server端测试"></a>G.<code>Server</code>端测试</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k nginx.status.code[200]4[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k nginx.status.code[404]3[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k nginx.status.code[304]13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Redis"><a href="#三、Redis" class="headerlink" title="三、Redis"></a>三、Redis</h2><h3 id="1-安装Redis"><a href="#1-安装Redis" class="headerlink" title="1.安装Redis"></a>1.安装Redis</h3><blockquote><p><strong>如果使用<code>yum</code>安装，请配置<code>epel</code>源</strong><br><strong>更多关于<code>Redis</code>安装的教程：<a href="https://www.wsjj.top/archives/91">https://www.wsjj.top/archives/91</a></strong><br><strong>更多关于<code>Redis</code>配置文件教程：<a href="https://www.wsjj.top/archives/92">https://www.wsjj.top/archives/92</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><pre class="line-numbers language-none"><code class="language-none">#开启后台启动[root@node1 ~]# vim &#x2F;etc&#x2F;redis.confdaemonize yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# redis-server &#x2F;etc&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-查看redis详细信息"><a href="#2-查看redis详细信息" class="headerlink" title="2.查看redis详细信息"></a>2.查看<code>redis</code>详细信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# redis-cli info# Serverredis_version:3.2.12redis_git_sha1:00000000redis_git_dirty:0redis_build_id:7897e7d0e13773fredis_mode:standaloneos:Linux 3.10.0-1160.el7.x86_64 x86_64arch_bits:64multiplexing_api:epollgcc_version:4.8.5process_id:39324run_id:d6b9d2066c503d9d6f5acab61e429da46af11c34tcp_port:6379uptime_in_seconds:24uptime_in_days:0hz:10lru_clock:6053975executable:&#x2F;root&#x2F;redis-serverconfig_file:&#x2F;etc&#x2F;redis.conf# Clientsconnected_clients:1client_longest_output_list:0client_biggest_input_buf:0blocked_clients:0# Memoryused_memory:813408used_memory_human:794.34Kused_memory_rss:5308416used_memory_rss_human:5.06Mused_memory_peak:813408used_memory_peak_human:794.34Ktotal_system_memory:1907712000total_system_memory_human:1.78Gused_memory_lua:37888used_memory_lua_human:37.00Kmaxmemory:0maxmemory_human:0Bmaxmemory_policy:noevictionmem_fragmentation_ratio:6.53mem_allocator:jemalloc-3.6.0# Persistenceloading:0rdb_changes_since_last_save:0rdb_bgsave_in_progress:0rdb_last_save_time:1683775551rdb_last_bgsave_status:okrdb_last_bgsave_time_sec:-1rdb_current_bgsave_time_sec:-1aof_enabled:0aof_rewrite_in_progress:0aof_rewrite_scheduled:0aof_last_rewrite_time_sec:-1aof_current_rewrite_time_sec:-1aof_last_bgrewrite_status:okaof_last_write_status:ok# Statstotal_connections_received:1total_commands_processed:0instantaneous_ops_per_sec:0total_net_input_bytes:14total_net_output_bytes:0instantaneous_input_kbps:0.00instantaneous_output_kbps:0.00rejected_connections:0sync_full:0sync_partial_ok:0sync_partial_err:0expired_keys:0evicted_keys:0keyspace_hits:0keyspace_misses:0pubsub_channels:0pubsub_patterns:0latest_fork_usec:0migrate_cached_sockets:0# Replicationrole:masterconnected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0# CPUused_cpu_sys:0.00used_cpu_user:0.02used_cpu_sys_children:0.00used_cpu_user_children:0.00# Clustercluster_enabled:0# Keyspace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写脚本"><a href="#3-编写脚本" class="headerlink" title="3.编写脚本"></a>3.编写脚本</h3><blockquote><p><strong><code>shell</code>脚本中<code>$1</code>是一个特殊变量，会传递执行脚本的第一个参数，我们把这个参数交给<code>awk</code>命令执行，为了防止出现多条数据，我们只取第一行，也就是说，今后我们携带的参数不能是模糊类型的</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;redis.sh#!&#x2F;bin&#x2F;bashoption&#x3D;$(redis-cli info | awk -v pattern&#x3D;&quot;$1&quot; -F: &#39;$0 ~ pattern&#123;print $NF&#125;&#39; | head -n1)echo $option<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="给予权限"><a href="#给予权限" class="headerlink" title="给予权限"></a>给予权限</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# chmod a+x &#x2F;opt&#x2F;redis.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# bash &#x2F;opt&#x2F;redis.sh used_cpu_sys3.61[root@node1 ~]# bash &#x2F;opt&#x2F;redis.sh used_memory812384<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-修改Agent端配置文件"><a href="#4-修改Agent端配置文件" class="headerlink" title="4.修改Agent端配置文件"></a>4.修改<code>Agent</code>端配置文件</h3><blockquote><p><strong>这里的$1不要和脚本中的特殊变量搞混，这里的$1是zabbix中的特殊变量，主要传递前面[*]中的第一个参数，详细示例请看下面的&#x3D;&#x3D;测试&#x3D;&#x3D;</strong><br><strong>今后我们定义的这个键值，&#x3D;&#x3D;必须&#x3D;&#x3D;携带参数，否则无法使用哦！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confUserParameter&#x3D;redis.info[*],bash &#x2F;opt&#x2F;redis.sh $1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Server端测试-1"><a href="#Server端测试-1" class="headerlink" title="Server端测试"></a><code>Server</code>端测试</h4><blockquote><p><strong>需要安装<code>zabbix-get</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k redis.info[redis_version]3.2.12[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k redis.info[used_cpu_sys]3.84[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k redis.info[used_memory]812384[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k redis.info[tcp_port]6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更多参数，请参考redis-cli-info中的信息"><a href="#更多参数，请参考redis-cli-info中的信息" class="headerlink" title="更多参数，请参考redis-cli info中的信息"></a>更多参数，请参考<code>redis-cli info</code>中的信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# redis-cli info# Serverredis_version:3.2.12redis_git_sha1:00000000redis_git_dirty:0redis_build_id:7897e7d0e13773fredis_mode:standaloneos:Linux 3.10.0-1160.el7.x86_64 x86_64arch_bits:64multiplexing_api:epollgcc_version:4.8.5process_id:39324run_id:d6b9d2066c503d9d6f5acab61e429da46af11c34tcp_port:6379uptime_in_seconds:8851uptime_in_days:0hz:10lru_clock:6062802executable:&#x2F;root&#x2F;redis-serverconfig_file:&#x2F;etc&#x2F;redis.conf# Clientsconnected_clients:1client_longest_output_list:0client_biggest_input_buf:0blocked_clients:0# Memoryused_memory:812384used_memory_human:793.34Kused_memory_rss:5308416used_memory_rss_human:5.06Mused_memory_peak:813408used_memory_peak_human:794.34Ktotal_system_memory:1907712000total_system_memory_human:1.78Gused_memory_lua:37888used_memory_lua_human:37.00Kmaxmemory:0maxmemory_human:0Bmaxmemory_policy:noevictionmem_fragmentation_ratio:6.53mem_allocator:jemalloc-3.6.0# Persistenceloading:0rdb_changes_since_last_save:0rdb_bgsave_in_progress:0rdb_last_save_time:1683775551rdb_last_bgsave_status:okrdb_last_bgsave_time_sec:-1rdb_current_bgsave_time_sec:-1aof_enabled:0aof_rewrite_in_progress:0aof_rewrite_scheduled:0aof_last_rewrite_time_sec:-1aof_current_rewrite_time_sec:-1aof_last_bgrewrite_status:okaof_last_write_status:ok# Statstotal_connections_received:37total_commands_processed:36instantaneous_ops_per_sec:0total_net_input_bytes:518total_net_output_bytes:76887instantaneous_input_kbps:0.00instantaneous_output_kbps:0.00rejected_connections:0sync_full:0sync_partial_ok:0sync_partial_err:0expired_keys:0evicted_keys:0keyspace_hits:0keyspace_misses:0pubsub_channels:0pubsub_patterns:0latest_fork_usec:0migrate_cached_sockets:0# Replicationrole:masterconnected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0# CPUused_cpu_sys:3.91used_cpu_user:2.00used_cpu_sys_children:0.00used_cpu_user_children:0.00# Clustercluster_enabled:0# Keyspace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
          <category> 笔记 </category>
          
          <category> 数据库 </category>
          
          <category> nginx </category>
          
          <category> redis </category>
          
          <category> mysql </category>
          
          <category> linux监控 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> zabbix </tag>
            
            <tag> zabbix server </tag>
            
            <tag> linux监控 </tag>
            
            <tag> 键值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zabbix系列教程】触发器和报警器</title>
      <link href="/2023/05/10/111/"/>
      <url>/2023/05/10/111/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Zabbix系列教程】触发器和报警"><a href="#【Zabbix系列教程】触发器和报警" class="headerlink" title="【Zabbix系列教程】触发器和报警"></a>【Zabbix系列教程】触发器和报警</h1><blockquote><p><strong>第一期教程：<a href="https://www.wsjj.top/archives/109">【Zabbix系列教程】Server端部署教程</a></strong><br><strong>上一期教程：<a href="https://www.wsjj.top/archives/110">【Zabbix系列教程】Agent端部署教程</a></strong></p></blockquote><h2 id="一、触发器"><a href="#一、触发器" class="headerlink" title="一、触发器"></a>一、触发器</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><ul><li>触发某个监控项状态的变化</li><li>基于监控项创建</li><li>一个监控项可以有多个触发器</li></ul><h3 id="2-触发器语法"><a href="#2-触发器语法" class="headerlink" title="2.触发器语法"></a>2.触发器语法</h3><pre class="line-numbers language-none"><code class="language-none">&#123;&lt;server&gt;:&lt;key&gt;.&lt;function&gt;(&lt;parameter&gt;)&#125;&lt;operator&gt;&lt;constant&gt;&#123;&lt;被监控机名称&gt;:&lt;键值&gt;.函数(参数)&#125;&lt;操作符&gt;&lt;常量&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="例：监控node01主机上的TCP22号端口的最新数据"><a href="#例：监控node01主机上的TCP22号端口的最新数据" class="headerlink" title="例：监控node01主机上的TCP22号端口的最新数据"></a>例：监控node01主机上的TCP22号端口的最新数据</h4><pre class="line-numbers language-none"><code class="language-none">&#123;node01.linux.com:net.tcp.port[22].last()&#125;&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><blockquote><p><code>&gt;</code>大于<br><code> &gt;=</code>大于等于<br><code>&lt;</code>小于<br><code>&lt;=</code>小于等于<br><code>=</code>等于<br><code>&lt;&gt;</code>不等于<br><code>+</code>加<br><code>-</code>减<br><code>*</code>乘<br><code>/</code>除<br><code>and</code>并且<br><code>or</code>或者</p></blockquote><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><ul><li>sum( )求和<ul><li>sum(5m)#5分钟的数据求和</li><li>sum(10)#10秒内所有的数据求和</li><li>sum(#3)#最后三个值的和</li></ul></li><li>avg( )<ul><li>平均</li></ul></li><li>max( )<ul><li>最大值</li></ul></li><li>min( )<ul><li>最小值</li></ul></li><li>count( )<ul><li>统计</li></ul></li><li>last( )<ul><li>获取某个监控项最新的数据</li></ul></li><li>diff( )<ul><li>判断数据与上一次的数据是否不同</li></ul></li><li>date( )<ul><li>获取日期YYYYMMDD</li></ul></li><li>time( )<ul><li>获取时间HHMMSS</li></ul></li></ul><h4 id="示例1：www-zabbix-com网站处理器负载过高"><a href="#示例1：www-zabbix-com网站处理器负载过高" class="headerlink" title="示例1：www.zabbix.com网站处理器负载过高"></a>示例1：<code>www.zabbix.com</code>网站处理器负载过高</h4><pre class="line-numbers language-none"><code class="language-none">&#123;www.zabbix.com:system.cpu.load[all,avg1].last()&#125;&gt;5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong><code>www.zabbix.com:system.cpu.load[all,avg1]</code>给出了被监控参数的简短名称。它指定了服务器是<code>www.zabbix.com</code>，监控项的键值是<code>system.cpu.load[all,avg1]</code>。通过使用函数<code>last()</code>获取最新的值。最后，<code>&gt;5</code>意味着当<code>www.zabbix.com</code>最新获取的处理器负载值<code>大于5</code>时触发器就会处于异常状态。</strong></p></blockquote><h4 id="示例2：passwd文件是否改动"><a href="#示例2：passwd文件是否改动" class="headerlink" title="示例2：passwd文件是否改动"></a>示例2：<code>passwd</code>文件是否改动</h4><pre class="line-numbers language-none"><code class="language-none">&#123;www.zabbix.com:vfs.file.cksum[&#x2F;etc&#x2F;passwd].diff()&#125;&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>当文件<code>/etc/passwd</code>的<code>checksum</code>值与最近的值不同时，表达式为<code>true</code>。</strong></p></blockquote><h4 id="示例3：夜间CPU的负载情况"><a href="#示例3：夜间CPU的负载情况" class="headerlink" title="示例3：夜间CPU的负载情况"></a>示例3：夜间<code>CPU</code>的负载情况</h4><pre class="line-numbers language-none"><code class="language-none">&#123;zabbix:system.cpu.load[all,avg1].min(5m)&#125;&gt;2 and &#123;zabbix:system.cpu.load[all,avg1].time()&#125;&gt;000000 and &#123;zabbix:system.cpu.load[all,avg1].time()&#125;&lt;060000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>仅在夜间<code>00:00-06:00</code>，触发器状态变可以变为真</strong></p></blockquote><h4 id="更多示例请查看官方文档：https-www-zabbix-com-documentation-4-0-zh-manual-config-triggers-expression"><a href="#更多示例请查看官方文档：https-www-zabbix-com-documentation-4-0-zh-manual-config-triggers-expression" class="headerlink" title="更多示例请查看官方文档：https://www.zabbix.com/documentation/4.0/zh/manual/config/triggers/expression"></a><strong>更多示例请查看官方文档：<a href="https://www.zabbix.com/documentation/4.0/zh/manual/config/triggers/expression">https://www.zabbix.com/documentation/4.0/zh/manual/config/triggers/expression</a></strong></h4><h3 id="3-创建触发器"><a href="#3-创建触发器" class="headerlink" title="3.创建触发器"></a>3.创建触发器</h3><h4 id="A-在创建-x3D-x3D-触发器-x3D-x3D-之前，请先创建-x3D-x3D-监控项-x3D-x3D"><a href="#A-在创建-x3D-x3D-触发器-x3D-x3D-之前，请先创建-x3D-x3D-监控项-x3D-x3D" class="headerlink" title="A.在创建&#x3D;&#x3D;触发器&#x3D;&#x3D;之前，请先创建&#x3D;&#x3D;监控项&#x3D;&#x3D;"></a>A.在创建&#x3D;&#x3D;触发器&#x3D;&#x3D;之前，请先创建&#x3D;&#x3D;监控项&#x3D;&#x3D;</h4><blockquote><p><strong>这里以检测<code>httpd</code>的<code>80</code>端口为例子</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-32.png" alt="zabbix4-32"></p><h4 id="B-创建触发器"><a href="#B-创建触发器" class="headerlink" title="B.创建触发器"></a>B.创建触发器</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-33.png" alt="zabbix4-33"></p><blockquote><p><strong>一个简单的触发器创建好了</strong></p></blockquote><h4 id="C-测试触发器"><a href="#C-测试触发器" class="headerlink" title="C.测试触发器"></a>C.测试触发器</h4><h5 id="停掉httpd服务"><a href="#停掉httpd服务" class="headerlink" title="停掉httpd服务"></a>停掉httpd服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl stop httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="回到web界面，测试触发器是否工作"><a href="#回到web界面，测试触发器是否工作" class="headerlink" title="回到web界面，测试触发器是否工作"></a>回到web界面，测试触发器是否工作</h5><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-34.png" alt="zabbix4-34"></p><h2 id="二、报警器"><a href="#二、报警器" class="headerlink" title="二、报警器"></a>二、报警器</h2><blockquote><p><strong>本教程以邮件报警为例</strong></p></blockquote><h3 id="1-恢复httpd服务"><a href="#1-恢复httpd服务" class="headerlink" title="1.恢复httpd服务"></a>1.恢复httpd服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl start httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-35.png" alt="zabbix4-35"></p><h3 id="2-以刚才创建的触发器为例，创建报警器"><a href="#2-以刚才创建的触发器为例，创建报警器" class="headerlink" title="2.以刚才创建的触发器为例，创建报警器"></a>2.以刚才创建的触发器为例，创建报警器</h3><h4 id="先配置报警媒介"><a href="#先配置报警媒介" class="headerlink" title="先配置报警媒介"></a>先配置报警媒介</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-36.png" alt="zabbix4-36"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-37.png" alt="zabbix4-37"></p><h4 id="QQ邮箱获取SMTP服务秘钥"><a href="#QQ邮箱获取SMTP服务秘钥" class="headerlink" title="QQ邮箱获取SMTP服务秘钥"></a>QQ邮箱获取SMTP服务秘钥</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-38.png" alt="zabbix4-38"></p><blockquote><p><strong>如果您是第一次启用，会生成一个随机的秘钥，请妥善保管，并且把秘钥输入到<code>zabbix</code>的配置中！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-39.png" alt="zabbix4-39"></p><h4 id="测试邮件"><a href="#测试邮件" class="headerlink" title="测试邮件"></a>测试邮件</h4><blockquote><p><strong>这里的邮件地址不一定是别人的，也可以自己发给自己哦！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-40.png" alt="zabbix4-40"></p><h3 id="3-给zabbix管理员绑定邮箱-重要"><a href="#3-给zabbix管理员绑定邮箱-重要" class="headerlink" title="3.给zabbix管理员绑定邮箱(重要)"></a>3.给<code>zabbix</code>管理员绑定邮箱(重要)</h3><blockquote><p><strong>此配置用于，今后报警器自动发送邮件的时候，接收邮件的用户！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-41.png" alt="zabbix4-41"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-42.png" alt="zabbix4-42"></p><h3 id="4-创建动作"><a href="#4-创建动作" class="headerlink" title="4.创建动作"></a>4.创建动作</h3><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-43.png" alt="zabbix4-43"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-44.png" alt="zabbix4-44"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-45.png" alt="zabbix4-45"></p><blockquote><p><strong>也可以自定义<code>蓝色框框</code>中的内容</strong><br><strong>关于更多<code>宏</code>官方文档：<a href="https://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location">https://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location</a></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-46.png" alt="zabbix4-46"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-47.png" alt="zabbix4-47"></p><blockquote><p><strong>到这里，我们的报警器就创建完成了</strong></p></blockquote><h3 id="5-测试报警器"><a href="#5-测试报警器" class="headerlink" title="5.测试报警器"></a>5.测试报警器</h3><h4 id="A-停用httpd服务"><a href="#A-停用httpd服务" class="headerlink" title="A.停用httpd服务"></a>A.停用<code>httpd</code>服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl stop httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-查看web端和邮箱"><a href="#B-查看web端和邮箱" class="headerlink" title="B.查看web端和邮箱"></a>B.查看web端和邮箱</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-48.png" alt="zabbix4-48"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-49.png" alt="zabbix4-49"></p><h4 id="C-恢复服务"><a href="#C-恢复服务" class="headerlink" title="C.恢复服务"></a>C.恢复服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl start httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-查看邮件"><a href="#D-查看邮件" class="headerlink" title="D.查看邮件"></a>D.查看邮件</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-50.png" alt="zabbix4-50"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> zabbix </category>
          
          <category> 笔记 </category>
          
          <category> linux监控 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> zabbix </tag>
            
            <tag> zabbix agent </tag>
            
            <tag> 触发器 </tag>
            
            <tag> 报警器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zabbix系列教程】Agent端部署教程</title>
      <link href="/2023/05/09/110/"/>
      <url>/2023/05/09/110/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Zabbix系列教程】Agent端部署教程"><a href="#【Zabbix系列教程】Agent端部署教程" class="headerlink" title="【Zabbix系列教程】Agent端部署教程"></a>【Zabbix系列教程】Agent端部署教程</h1><blockquote><p><strong>上一期教程：<a href="https://www.wsjj.top/archives/109">【Zabbix系列教程】Server端部署教程</a></strong><br><strong>下一期教程：<a href="https://www.wsjj.top/archives/111">【Zabbix系列教程】触发器和报警器</a></strong></p></blockquote><h2 id="一、关闭防火墙SElinux、时间同步"><a href="#一、关闭防火墙SElinux、时间同步" class="headerlink" title="一、关闭防火墙SElinux、时间同步"></a>一、关闭防火墙SElinux、时间同步</h2><blockquote><p><strong>过程省略</strong></p></blockquote><h2 id="二、部署zabbix-agent端"><a href="#二、部署zabbix-agent端" class="headerlink" title="二、部署zabbix agent端"></a>二、部署zabbix agent端</h2><h3 id="1-配置yum源和epel源"><a href="#1-配置yum源和epel源" class="headerlink" title="1.配置yum源和epel源"></a>1.配置yum源和epel源</h3><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置zabbix4-X国内源"><a href="#2-配置zabbix4-X国内源" class="headerlink" title="2.配置zabbix4.X国内源"></a>2.配置zabbix4.X国内源</h3><blockquote><p><strong>如果没有<code>vim</code>命令，请使用vi命令或者安装<code>yum install -y vim</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;zabbix.repo[zabbix4]name&#x3D;zabbix4baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;zabbix&#x2F;zabbix&#x2F;4.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清理旧yum缓存，建立新的缓存"><a href="#清理旧yum缓存，建立新的缓存" class="headerlink" title="清理旧yum缓存，建立新的缓存"></a>清理旧yum缓存，建立新的缓存</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-安装zabbix-agent软件"><a href="#3-安装zabbix-agent软件" class="headerlink" title="3.安装zabbix agent软件"></a>3.安装<code>zabbix agent</code>软件</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf#配置文件并不完整，仅展示修改的地方Server&#x3D;192.168.140.10#指定我们Server端IPServerActive&#x3D;192.168.140.10#指定Server端IP，今后让agent端主动联系server端Hostname&#x3D;node1#指定主机名，或者修改为本机IPUnsafeUserParameters&#x3D;1#把默认0改成1，并且删除注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-设置Agent服务开机自启动"><a href="#5-设置Agent服务开机自启动" class="headerlink" title="5.设置Agent服务开机自启动"></a>5.设置Agent服务开机自启动</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl enable --now zabbix-agent.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-回到Server端web界面，添加Agent端"><a href="#6-回到Server端web界面，添加Agent端" class="headerlink" title="6.回到Server端web界面，添加Agent端"></a>6.回到<code>Server</code>端<code>web</code>界面，添加<code>Agent</code>端</h3><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-13.png" alt="zabbix4-13"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-14.png" alt="zabbix4-14"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-15.png" alt="zabbix4-15"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-16.png" alt="zabbix4-16"></p><blockquote><p><strong>我们添加了&#x3D;&#x3D;最基础&#x3D;&#x3D;的监控模板，等待<code>1-2</code>分钟亮起即可</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-17.png" alt="zabbix4-17"></p><h2 id="三、zabbix键值"><a href="#三、zabbix键值" class="headerlink" title="三、zabbix键值"></a>三、<code>zabbix</code>键值</h2><h3 id="1-手动创建一个监控项"><a href="#1-手动创建一个监控项" class="headerlink" title="1.手动创建一个监控项"></a>1.手动创建一个监控项</h3><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-18.png" alt="zabbix4-18"></p><h3 id="2-键值"><a href="#2-键值" class="headerlink" title="2.键值"></a>2.键值</h3><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-19.png" alt="zabbix4-19"></p><blockquote><p><strong>官方提供了一些常用的键值</strong><br><strong>部分服务(<code>MySQL</code>、<code>Nginx</code>、<code>Redis</code>)的常用键值教程：<a href="https://www.wsjj.top/archives/112">https://www.wsjj.top/archives/112</a></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-20.png" alt="zabbix4-20"></p><h3 id="3-关于键值的写法"><a href="#3-关于键值的写法" class="headerlink" title="3.关于键值的写法"></a>3.关于键值的写法</h3><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-21.png" alt="zabbix4-21"></p><h3 id="4-平常生活常用的键值汇总"><a href="#4-平常生活常用的键值汇总" class="headerlink" title="4.平常生活常用的键值汇总"></a>4.平常生活常用的键值汇总</h3><ul><li>监控网卡流量 <ul><li><code>net.if.in[if,&lt;mode&gt;]</code><ul><li>⇒ <code>net.if.in[eth0,errors]</code></li><li>⇒ <code>net.if.in[eth0]</code></li></ul></li><li><code>net.if.total[if,&lt;mode&gt;]</code></li><li><code>net.if.out[if,&lt;mode&gt;]</code></li></ul></li><li>监控TCP服务状态 <ul><li><code>net.tcp.listen[port]</code><ul><li>⇒ <code>net.tcp.listen[80]</code></li></ul></li><li><code>net.tcp.port[&lt;ip&gt;,port]</code><ul><li>⇒ <code>net.tcp.port[,80]</code></li></ul></li></ul></li><li>监控UDP服务状态 <ul><li><code>net.udp.listen[port]</code><ul><li>&#x3D;&gt; <code>net.udp.listen[123]</code></li></ul></li></ul></li><li>进程数量<ul><li><code>proc.num[&lt;name&gt;,&lt;user&gt;,&lt;state&gt;,&lt;cmdline&gt;]</code><ul><li>⇒ <code>proc.num[]</code></li><li>⇒ <code>proc.num[redis_server,,,]</code></li><li>⇒ <code>proc.num[nginx,www]</code></li><li>&#x3D;&gt; <code>proc.num[,,zomb]</code></li></ul></li></ul></li><li>进程所消耗的内存<ul><li><code>proc.mem[&lt;name&gt;,&lt;user&gt;,&lt;mode&gt;,&lt;cmdline&gt;,&lt;memtype&gt;]</code><ul><li>&#x3D;&gt; <code>proc.mem[httpd]</code></li></ul></li></ul></li><li>进程所消耗的CPU使用率<ul><li><code>proc.cpu.util[&lt;name&gt;,&lt;user&gt;,&lt;type&gt;,&lt;cmdline&gt;,&lt;mode&gt;,&lt;zone&gt;]</code><ul><li>&#x3D;&gt; <code>proc.cpu.util[httpd]</code></li></ul></li></ul></li><li>磁盘空间<ul><li><code>vfs.fs.size[fs,&lt;mode&gt;]</code></li><li><code>vfs.fs.size[/webdata, free]</code></li><li><code>vfs.fs.size[/var/lib/mysql, pfree]</code></li></ul></li><li>内存大小<ul><li><code>vm.memory.size[&lt;mode&gt;]</code></li><li><code>vm.memory.size[free]</code></li><li><code>vm.memory.size[buffers]</code></li><li><code>vm.memory.size[cached]</code></li></ul></li><li>文件内容变化<ul><li><code>vfs.file.cksum[file]</code><ul><li>⇒ <code>vfs.file.cksum[/etc/passwd]</code></li></ul></li></ul></li></ul><blockquote><p><strong>更多键值，请参考官方文档：<a href="https://www.zabbix.com/documentation/4.0/zh/manual/config/items/itemtypes/zabbix_agent">https://www.zabbix.com/documentation/4.0/zh/manual/config/items/itemtypes/zabbix_agent</a></strong></p></blockquote><h3 id="5-创建图形"><a href="#5-创建图形" class="headerlink" title="5.创建图形"></a>5.创建图形</h3><blockquote><p><strong>一定要选择适当的图形类型展示</strong><br><strong>监控项选择我们刚刚创建的相应监控项</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-22.png" alt="zabbix4-22"></p><h4 id="图例查看"><a href="#图例查看" class="headerlink" title="图例查看"></a>图例查看</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-23.png" alt="zabbix4-23"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-24.png" alt="zabbix4-24"></p><h2 id="四、自定义无参数的key-键值"><a href="#四、自定义无参数的key-键值" class="headerlink" title="四、自定义无参数的key(键值)"></a>四、自定义无参数的key(键值)</h2><ul><li>在被监控端定义</li><li>配置语法<ul><li><code>UserParameter=&lt;key&gt;,&lt;shell command&gt;</code></li><li><code>UnsafeUserParameters=1</code>#修改配置允许用户使用特殊符号和自定义键值</li></ul></li></ul><h3 id="例1：监控Agent端MySQL用户数"><a href="#例1：监控Agent端MySQL用户数" class="headerlink" title="例1：监控Agent端MySQL用户数"></a>例1：监控Agent端MySQL用户数</h3><h4 id="A-编写命令"><a href="#A-编写命令" class="headerlink" title="A.编写命令"></a>A.编写命令</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mysql -uroot -e &quot;select count(*) from mysql.user&quot;+----------+| count(*) |+----------+|        9 |+----------+#可以看到一共有9个用户，但是显示的结果有多条数据，可以利用sed命令过滤结果[root@node1 ~]# mysql -uroot -e &quot;select count(*) from mysql.user&quot; | sed &#39;1d&#39;9#注意，zabbix通过这条命令收到的数据只能有一个结果！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-修改配置文件"><a href="#B-修改配置文件" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf#配置文件并不完整，仅展示修改的地方，请勿删改其他！UnsafeUserParameters&#x3D;1#再次确认是否已经启用UserParameter&#x3D;mysql.user.number,mysql -uroot -e &quot;select count(*) from mysql.user&quot; | sed &#39;1d&#39;#UserParameter&#x3D;自定义键值,命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-重启服务，让配置文件生效"><a href="#C-重启服务，让配置文件生效" class="headerlink" title="C.重启服务，让配置文件生效"></a>C.重启服务，让配置文件生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-回到web端配置"><a href="#D-回到web端配置" class="headerlink" title="D.回到web端配置"></a>D.回到web端配置</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-25.png" alt="zabbix4-25"></p><h5 id="创建图形"><a href="#创建图形" class="headerlink" title="创建图形"></a>创建图形</h5><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-26.png" alt="zabbix4-26"></p><h5 id="查看图形"><a href="#查看图形" class="headerlink" title="查看图形"></a>查看图形</h5><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-27.png" alt="zabbix4-27"></p><h4 id="D-测试创建几个数据库用户"><a href="#D-测试创建几个数据库用户" class="headerlink" title="D.测试创建几个数据库用户"></a>D.测试创建几个数据库用户</h4><blockquote><p><strong>如果您配置了主从环境，请回到主库创建！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">MariaDB [(none)]&gt; create user &#39;user01&#39;@&#39;localhost&#39;;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; create user &#39;user02&#39;@&#39;localhost&#39;;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; create user &#39;user03&#39;@&#39;localhost&#39;;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-查看图形，是否更新"><a href="#E-查看图形，是否更新" class="headerlink" title="E.查看图形，是否更新"></a>E.查看图形，是否更新</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-28.png" alt="zabbix4-28"></p><h3 id="例2：检测MySQL数据库的IO线程和SQL线程"><a href="#例2：检测MySQL数据库的IO线程和SQL线程" class="headerlink" title="例2：检测MySQL数据库的IO线程和SQL线程"></a>例2：检测MySQL数据库的IO线程和SQL线程</h3><blockquote><p><strong>需要提前配置主从复制环境</strong><br><strong>MySQL主从复制教程：<a href="https://www.wsjj.top/archives/76">https://www.wsjj.top/archives/76</a></strong></p></blockquote><h4 id="A-编写脚本"><a href="#A-编写脚本" class="headerlink" title="A.编写脚本"></a>A.编写脚本</h4><blockquote><p><strong>当<code>2</code>个结果都是<code>yes</code>的时候返回<code>1</code>，如果其中一个或者所有都不等于<code>yes</code>，就返回<code>0</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;slave.sh#! &#x2F;bin&#x2F;bashio&#x3D;$(mysql -uroot -e &quot;show slave status\G&quot; | awk &#39;&#x2F;Slave_IO_Running&#x2F;&#123;print $2&#125;&#39;)sql&#x3D;$(mysql -uroot -e &quot;show slave status\G&quot; | awk &#39;&#x2F;Slave_SQL_Running&#x2F;&#123;print $2&#125;&#39;)if [ $io &#x3D;&#x3D; Yes ] &amp;&amp; [ $sql &#x3D;&#x3D; Yes ] ; then    echo 1else    echo 0fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-给予执行权限-重要"><a href="#B-给予执行权限-重要" class="headerlink" title="B.给予执行权限(重要)"></a>B.给予执行权限(重要)</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# chmod a+x &#x2F;opt&#x2F;slave.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改配置文件"><a href="#C-修改配置文件" class="headerlink" title="C.修改配置文件"></a>C.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confUserParameter&#x3D;mysql.slave,bash &#x2F;opt&#x2F;slave.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-重启服务"><a href="#D-重启服务" class="headerlink" title="D.重启服务"></a>D.重启服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-Server端测试"><a href="#E-Server端测试" class="headerlink" title="E.Server端测试"></a>E.Server端测试</h4><h5 id="安装测试软件"><a href="#安装测试软件" class="headerlink" title="安装测试软件"></a>安装测试软件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# yum install -y zabbix-get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><blockquote><p><strong><code>-s</code>指定客户端地址 <code>-k</code>键值</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zabbix_get -s 192.168.140.12 -k mysql.slave1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、定义有参数的key-键值"><a href="#五、定义有参数的key-键值" class="headerlink" title="五、定义有参数的key(键值)"></a>五、定义有参数的key(键值)</h2><h3 id="例子1：查看系统的内存"><a href="#例子1：查看系统的内存" class="headerlink" title="例子1：查看系统的内存"></a>例子1：查看系统的内存</h3><h4 id="A-查看系统内存文件"><a href="#A-查看系统内存文件" class="headerlink" title="A.查看系统内存文件"></a>A.查看系统内存文件</h4><blockquote><p><strong><code>/proc/meminfo</code>记录系统内存各种参数的文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# cat &#x2F;proc&#x2F;meminfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h5><blockquote><p><strong>关于<code>awk</code>命令教程：<a href="https://www.wsjj.top/archives/82">https://www.wsjj.top/archives/82</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# awk &#39;&#x2F;^MemTotal&#x2F;&#123;print $2&#125;&#39; &#x2F;proc&#x2F;meminfo1863000#系统总内存[root@node1 ~]# awk &#39;&#x2F;^MemFree&#x2F;&#123;print $2&#125;&#39; &#x2F;proc&#x2F;meminfo1120644#系统剩余内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-修改配置文件-1"><a href="#B-修改配置文件-1" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.confUserParameter&#x3D;system.memory.size[*],awk &#39;&#x2F;^$1&#x2F;&#123;print $$2&#125;&#39; &#x2F;proc&#x2F;meminfo# [*]是我们将来要写的参数# $1不是awk中的参数，而是zabbix内置的变量，代表上一个[*]中第一个参数# $$2,其中第一个$符号代表转译字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-重启服务器，让配置文件生效"><a href="#C-重启服务器，让配置文件生效" class="headerlink" title="C.重启服务器，让配置文件生效"></a>C.重启服务器，让配置文件生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart zabbix-agent.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-回到web界面配置"><a href="#D-回到web界面配置" class="headerlink" title="D.回到web界面配置"></a>D.回到<code>web</code>界面配置</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-29.png" alt="zabbix4-29"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-30.png" alt="zabbix4-30"></p><h5 id="创建图形并查看图形"><a href="#创建图形并查看图形" class="headerlink" title="创建图形并查看图形"></a>创建图形并查看图形</h5><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-31.png" alt="zabbix4-31"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> zabbix </category>
          
          <category> 笔记 </category>
          
          <category> linux监控 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> zabbix </tag>
            
            <tag> zabbix server </tag>
            
            <tag> linux监控 </tag>
            
            <tag> zabbix agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zabbix系列教程】Server端部署教程</title>
      <link href="/2023/05/09/109/"/>
      <url>/2023/05/09/109/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Zabbix系列教程】Server端部署教程"><a href="#【Zabbix系列教程】Server端部署教程" class="headerlink" title="【Zabbix系列教程】Server端部署教程"></a>【Zabbix系列教程】Server端部署教程</h1><blockquote><p><strong>本文默认使用<code>zabbix4.x</code>版本，如果您使用的是<code>zabbix5.x</code>版本，请看这期教程：<a href="https://www.wsjj.top/archives/18">https://www.wsjj.top/archives/18</a></strong></p></blockquote><h2 id="一、监控方式"><a href="#一、监控方式" class="headerlink" title="一、监控方式"></a>一、监控方式</h2><ul><li>手工巡检</li><li>专业的监控工具<ul><li>zabbix<ul><li>IT基础设施设备(网络设备、服务器、存储)</li></ul></li><li>promethus<ul><li>适用于容器化应用的监控</li></ul></li></ul></li></ul><h2 id="二、zabbix的特性"><a href="#二、zabbix的特性" class="headerlink" title="二、zabbix的特性"></a>二、zabbix的特性</h2><ul><li>开源的、跨平台</li><li>获取监控数据的方式<ul><li>zabbix agent<ul><li>适用于主机、服务器 </li><li>主动模式、被动模式</li></ul></li><li>SNMP协议 161&#x2F;udp<ul><li>适用于网络监控</li><li>SNMP v2</li></ul></li><li>IPMI协议 <ul><li>适用于硬件信息(cpu温度、序列号)</li></ul></li><li>JMX协议<ul><li>适用于java应用</li></ul></li></ul></li><li>支持自动监控 </li><li>支持多种报警方式  <ul><li>邮件、微信、电话</li></ul></li><li>支持分布式监控</li><li>提供API接口</li></ul><h2 id="三、zabbix-server端部署"><a href="#三、zabbix-server端部署" class="headerlink" title="三、zabbix server端部署"></a>三、zabbix server端部署</h2><ul><li><code>zabbix</code>版本：<code>4.X</code></li><li><code>Linux</code>版本：<code>Centos7.9</code></li></ul><h3 id="1-关闭防火墙和SElinux、配置时间同步"><a href="#1-关闭防火墙和SElinux、配置时间同步" class="headerlink" title="1.关闭防火墙和SElinux、配置时间同步"></a>1.关闭防火墙和SElinux、配置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="2-配置yum源和epel源"><a href="#2-配置yum源和epel源" class="headerlink" title="2.配置yum源和epel源"></a>2.配置yum源和epel源</h3><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置zabbix4-0国内源"><a href="#3-配置zabbix4-0国内源" class="headerlink" title="3.配置zabbix4.0国内源"></a>3.配置zabbix4.0国内源</h3><blockquote><p><strong>如果没有<code>vim</code>命令，请使用<code>vi</code>命令或者安装<code>yum install -y vim</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;zabbix.repo[zabbix4]name&#x3D;zabbix4baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;zabbix&#x2F;zabbix&#x2F;4.4&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清理旧的缓存，建立新的yum缓存"><a href="#清理旧的缓存，建立新的yum缓存" class="headerlink" title="清理旧的缓存，建立新的yum缓存"></a>清理旧的缓存，建立新的yum缓存</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-安装zabbix-server相关软件和数据库软件"><a href="#4-安装zabbix-server相关软件和数据库软件" class="headerlink" title="4.安装zabbix server相关软件和数据库软件"></a>4.安装zabbix server相关软件和数据库软件</h3><blockquote><p><strong><code>yum</code>在寻找依赖关系的同时，会自动帮我们安装好<code>httpd</code>和<code>PHP</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# yum install -y mariadb-server zabbix-server-mysql zabbix-web-mysql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="A-启动数据库服务"><a href="#A-启动数据库服务" class="headerlink" title="A.启动数据库服务"></a>A.启动数据库服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# systemctl enable --now mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-在数据库中创建zabbix需要的数据库和用户"><a href="#B-在数据库中创建zabbix需要的数据库和用户" class="headerlink" title="B.在数据库中创建zabbix需要的数据库和用户"></a>B.在数据库中创建zabbix需要的数据库和用户</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# mysql -uroot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">MariaDB [(none)]&gt; create database zabbix charset utf8 collate utf8_bin;Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">MariaDB [(none)]&gt; create user &#39;zabbix&#39;@&#39;localhost&#39; identified by &#39;redhat&#39;;Query OK, 0 rows affected (0.00 sec)#创建一个名为zabbix的本地用户，密码为redhatMariaDB [(none)]&gt; grant all on zabbix.* to &#39;zabbix&#39;@&#39;localhost&#39;;Query OK, 0 rows affected (0.00 sec)#授权用户，访问zabbix数据库MariaDB [(none)]&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-导入zabbix需要的表"><a href="#C-导入zabbix需要的表" class="headerlink" title="C.导入zabbix需要的表"></a>C.导入<code>zabbix</code>需要的表</h4><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-server-mysql-4.4.10&#x2F;create.sql.gz | mysql -uroot zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-修改zabbix-server配置文件"><a href="#5-修改zabbix-server配置文件" class="headerlink" title="5.修改zabbix server配置文件"></a>5.修改zabbix server配置文件</h3><blockquote><p><strong>主要修改&#x3D;&#x3D;数据库&#x3D;&#x3D;连接信息</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf#配置文件并不完整，仅展示修改的地方，请勿动其他！DBHost&#x3D;localhost#指定数据库的连接地址DBName&#x3D;zabbix#数据库名，保持默认即可DBUser&#x3D;zabbix#登录数据库用到的用户，保持默认即可DBPassword&#x3D;redhat#指定登录密码，刚刚我们指定的密码为redhatDBSocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock#指定套接字文件路径，我这里使用默认的路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-修改时区为上海"><a href="#6-修改时区为上海" class="headerlink" title="6.修改时区为上海"></a>6.修改时区为上海</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;zabbix.conf#配置文件并不完整，请勿删改其他&lt;IfModule mod_php5.c&gt;        php_value max_execution_time 300        php_value memory_limit 128M        php_value post_max_size 16M        php_value upload_max_filesize 2M        php_value max_input_time 300        php_value max_input_vars 10000        php_value always_populate_raw_post_data -1        php_value date.timezone Asia&#x2F;Shanghai#修改这里的时区，并且删除注释    &lt;&#x2F;IfModule&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-安装中文字体依赖，防止乱码"><a href="#7-安装中文字体依赖，防止乱码" class="headerlink" title="7.安装中文字体依赖，防止乱码"></a>7.安装中文字体依赖，防止乱码</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# yum -y install wqy-microhei-fonts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>替换默认字体</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# cp &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;wqy-microhei&#x2F;wqy-microhei.ttc &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;dejavu&#x2F;DejaVuSans.ttfcp：是否覆盖&quot;&#x2F;usr&#x2F;share&#x2F;fonts&#x2F;dejavu&#x2F;DejaVuSans.ttf&quot;？ y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-启动zabbix-server和httpd"><a href="#8-启动zabbix-server和httpd" class="headerlink" title="8.启动zabbix server和httpd"></a>8.启动zabbix server和httpd</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# systemctl enable --now httpd zabbix-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-配置web界面"><a href="#9-配置web界面" class="headerlink" title="9.配置web界面"></a>9.配置web界面</h3><h4 id="A-浏览器访问测试"><a href="#A-浏览器访问测试" class="headerlink" title="A.浏览器访问测试"></a>A.浏览器访问测试</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-01.png" alt="zabbix4-01"></p><h4 id="B-检查是否全是OK"><a href="#B-检查是否全是OK" class="headerlink" title="B.检查是否全是OK"></a>B.检查是否全是OK</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-02.png" alt="zabbix4-02"></p><h4 id="C-配置数据库登录信息"><a href="#C-配置数据库登录信息" class="headerlink" title="C.配置数据库登录信息"></a>C.配置数据库登录信息</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-03.png" alt="zabbix4-03"></p><h4 id="D-完成安装"><a href="#D-完成安装" class="headerlink" title="D.完成安装"></a>D.完成安装</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-04.png" alt="zabbix4-04"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-05.png" alt="zabbix4-05"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-06.png" alt="zabbix4-06"></p><h3 id="10-登录web界面"><a href="#10-登录web界面" class="headerlink" title="10.登录web界面"></a>10.登录web界面</h3><blockquote><p><strong>默认管理员账号：<code>Admin</code> 默认密码：<code>zabbix</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-07.png" alt="zabbix4-07"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-08.png" alt="zabbix4-08"></p><h3 id="11-修改web界面为中文-可选的"><a href="#11-修改web界面为中文-可选的" class="headerlink" title="11.修改web界面为中文(可选的)"></a>11.修改web界面为中文(可选的)</h3><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-09.png" alt="zabbix4-09"></p><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-10.png" alt="zabbix4-10"></p><h4 id="查看修改中文后的效果吧！"><a href="#查看修改中文后的效果吧！" class="headerlink" title="查看修改中文后的效果吧！"></a>查看修改中文后的效果吧！</h4><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-11.png" alt="zabbix4-11"></p><h2 id="四、配置本地Agent端"><a href="#四、配置本地Agent端" class="headerlink" title="四、配置本地Agent端"></a>四、配置本地Agent端</h2><h3 id="1-安装zabbix-agent端"><a href="#1-安装zabbix-agent端" class="headerlink" title="1.安装zabbix agent端"></a>1.安装<code>zabbix agent</code>端</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# yum install -y zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-启动Agent服务"><a href="#2-启动Agent服务" class="headerlink" title="2.启动Agent服务"></a>2.启动<code>Agent</code>服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# systemctl enable --now zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-检查是否启动"><a href="#3-检查是否启动" class="headerlink" title="3.检查是否启动"></a>3.检查是否启动</h3><blockquote><p><strong>如果没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zabbix-server ~]# netstat -tunlp | grep zabbixtcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      6392&#x2F;zabbix_agentd  tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      4219&#x2F;zabbix_server  tcp6       0      0 :::10050                :::*                    LISTEN      6392&#x2F;zabbix_agentd  tcp6       0      0 :::10051                :::*                    LISTEN      4219&#x2F;zabbix_server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-回到web界面，检查是否成功"><a href="#4-回到web界面，检查是否成功" class="headerlink" title="4.回到web界面，检查是否成功"></a>4.回到web界面，检查是否成功</h3><blockquote><p><strong>由于存在数据同步延迟，请等待<code>1-2</code>分钟左右再刷新页面检查！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zabbix4-12.png" alt="zabbix4-12"></p><h2 id="五、服务器常用监控参数参考"><a href="#五、服务器常用监控参数参考" class="headerlink" title="五、服务器常用监控参数参考"></a>五、服务器常用监控参数参考</h2><ul><li>CPU<ul><li>CPU上下文切换&#x2F;秒Context SwitchCS</li><li>CPU中断数&#x2F;秒Interruput </li><li>CPU使用率<ul><li>user用户进程CPU使用率 </li><li>sys系统进程CPU使用率 </li><li>idleCPU空闲</li></ul></li><li>CPU平均负载</li></ul></li><li>内存<ul><li>剩余内存</li><li>free + shared + buffer&#x2F;cache</li></ul></li><li>硬盘<ul><li>剩余空间</li><li>磁盘IO</li></ul></li><li>网卡<ul><li>流入流量</li><li>流出流量</li><li>总流量 </li><li>流入错误流量 </li><li>流出错误流量</li></ul></li><li>进程<ul><li>进程总数量 </li><li>正在运行进程</li><li>僵尸进程</li></ul></li><li>用户信息<ul><li>用户登录数</li></ul></li><li>Linux系统的平均负载(uptime)<ul><li>1分钟的平均负载</li><li>5分钟的平均负载</li><li>10分钟的平均负载</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> zabbix </category>
          
          <category> 笔记 </category>
          
          <category> linux监控 </category>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> zabbix </tag>
            
            <tag> zabbix server </tag>
            
            <tag> 监控 </tag>
            
            <tag> linux监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux存储系列教程】kafka消息队列(中间件)</title>
      <link href="/2023/05/08/108/"/>
      <url>/2023/05/08/108/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux存储系列教程】kafka消息队列-中间件"><a href="#【Linux存储系列教程】kafka消息队列-中间件" class="headerlink" title="【Linux存储系列教程】kafka消息队列(中间件)"></a>【Linux存储系列教程】kafka消息队列(中间件)</h1><h2 id="一、关于kafka"><a href="#一、关于kafka" class="headerlink" title="一、关于kafka"></a>一、关于kafka</h2><h3 id="1-kafka是什么？"><a href="#1-kafka是什么？" class="headerlink" title="1.kafka是什么？"></a>1.kafka是什么？</h3><blockquote><p><strong><code>kafka</code>是一个多分区、多副本且基于<code>zookeeper</code>协调的分布式消息系统。也是一个分布式流式处理平台，它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用。</strong></p></blockquote><h3 id="2-kafka的作用"><a href="#2-kafka的作用" class="headerlink" title="2.kafka的作用"></a>2.kafka的作用</h3><ul><li>消息系统<ul><li><code>kafka</code>具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、可扩展性、可恢复性等功能。</li><li>提供消息顺序性保障、回溯消费功能</li></ul></li><li>存储系统 <ul><li>支持将消息持久化到磁盘</li></ul></li><li>流处理平台<ul><li>提供了一个完整的流式处理类库，比如窗口、连接、变换和聚合等各类操作</li></ul></li></ul><h3 id="3-kafka基本结构"><a href="#3-kafka基本结构" class="headerlink" title="3.kafka基本结构"></a>3.kafka基本结构</h3><p><img src="https://www.wsjj.top/upload/2023/05/kafka01.png" alt="kafka01"></p><ul><li><code>producer</code>生产者<ul><li>发送消息的一方</li><li>生产者负责创建消息，然后将其投递 到<code>kafka</code>中</li></ul></li><li><code>consumer</code>消费者<ul><li>消费者，也就是接收消息的一方。</li><li>消费者连接到Kafka上并接收消息，进而进行相应的业务逻辑处理</li></ul></li><li><code>consumer Group(CG)</code>消费者组<ul><li>消费者组，由多个<code>consumer</code>组成。</li><li>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费</li><li>消费者组之间互不影响</li></ul></li><li><code>broker</code>kafka服务器节点或实例<ul><li>一个<code>kafka</code>集群由多个<code>broker</code>组成</li><li>一个<code>broker</code>可以容纳多个<code>topic</code></li></ul></li><li><code>topic</code>主题<ul><li>Kafka中的消息以主题为单位进行归类，</li><li>生产者负责将消息发送到特定的主题（发送到<code>Kafka</code>集群中的每一条消息都要指定一个主题），而消费者负责订阅主题并进行消费</li></ul></li><li><code>partition</code>分区<ul><li>主题是一个逻辑上的概念，它还可以细分为多个分区，一个分区只属于单个主题，很多时候也会把分区称为主题分区<code>Topic-Partition</code>。同一主题下的不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志<code>Log</code>文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量<code>offset</code>。<code>offset</code>是消息在分区中的唯一标识，<code>Kafka</code>通过它来保证消息在分区内的顺序性，不过<code>offset</code>并不跨越分区，也就是说，<code>Kafka</code>保证的是分区有序而不是主题有序。</li></ul></li><li><code>replica</code>副本<ul><li><code>Kafka</code>为分区引入了多副本<code>Replica</code>机制，通过增加副本数量可以提升容灾能力。同一分区的不同副本中保存的是相同的消息（在同一时刻，副本之间并非完全一样），副本之间是&#x3D;&#x3D;一主多从&#x3D;&#x3D;的关系，其中<code>leader</code>副本负责处理读写请求，<code>follower</code>副本只负责与leader副本的消息同步。副本处于不同的<code>broker</code>中，当<code>leader</code>副本出现故障时，从<code>follower</code>副本中重新选举新的leader副本对外提供服务。<code>Kafka</code>通过多副本机制实现了故障的自动转移，当<code>Kafka</code>集群中某个<code>broker</code>失效时仍然能保证服务可用。</li></ul></li></ul><h2 id="二、kafka的复制机制"><a href="#二、kafka的复制机制" class="headerlink" title="二、kafka的复制机制"></a>二、kafka的复制机制</h2><blockquote><p><strong><code>Kafka</code>使用<code>ISR</code>的方式进行数据复制，则有效地权衡了数据可靠性和性能之间的关系。</strong></p></blockquote><h3 id="AR、ISR、OSR、HW、LEO"><a href="#AR、ISR、OSR、HW、LEO" class="headerlink" title="AR、ISR、OSR、HW、LEO"></a>AR、ISR、OSR、HW、LEO</h3><blockquote><p><strong>分区中的所有副本统称为AR<code>Assigned Replicas</code>。所有与leader副本保持一定程度同步的副本（包括<code>leader</code>副本在内）组成ISR<code>In-Sync Replicas</code>，ISR集合是AR集合中的一个子集。消息会先发送到<code>leader</code>副本，然后<code>follower</code>副本才能从<code>leader</code>副本中拉取消息进行同步，同步期间内<code>follower</code>副本相对于<code>leader</code>副本而言会有一定程度的滞后。</strong></p></blockquote><blockquote><p><strong>与<code>leader</code>副本同步滞后过多的副本&#x3D;&#x3D;不包括leader副本&#x3D;&#x3D;组成OSR<code>Out-of-Sync Replicas</code>，由此可见，<code>AR=ISR+OSR</code>。在正常情况下，所有的<code>follower</code>副本都应该与<code>leader</code>副本保持一定程度的同步，即<code>AR=ISR</code>，<code>OSR</code>集合为&#x3D;&#x3D;空&#x3D;&#x3D;。</strong></p></blockquote><blockquote><p><strong><code>leader</code>副本负责维护和跟踪ISR集合中所有<code>follower</code>副本的滞后状态，当<code>follower</code>副本落后太多或失效时，<code>leader</code>副本会把它从ISR集合中剔除。如果OSR集合中有<code>follower</code>副本&#x3D;&#x3D;追上&#x3D;&#x3D;了<code>leader</code>副本，那么<code>leader</code>副本会把它从OSR集合转移至ISR集合。默认情况下，当<code>leader</code>副本发生故障时，只有在ISR集合中的副本才有资格被选举为新的<code>leader</code>，而在OSR集合中的副本则没有任何机会&#x3D;&#x3D;不过这个原则也可以通过修改相应的参数配置来改变&#x3D;&#x3D;。</strong></p></blockquote><blockquote><p><strong>ISR与HW和LEO也有紧密的关系。HW是<code>High Watermark</code>的缩写，俗称高水位，它标识了一个特定的消息偏移量<code>offset</code>，消费者只能拉取到这个<code>offset</code>之前的消息。</strong></p></blockquote><blockquote><p><strong>LEO是<code>Log End Offset</code>的缩写，它标识当前日志文件中下一条待写入消息的<code>offset</code>，分区ISR集合中的每个副本都会维护自身的LEO，而ISR集合中最小的LEO即为分区的HW，对消费者而言只能消费HW之前的消息。</strong></p></blockquote><h2 id="三、kafka消息确认机制-ACK"><a href="#三、kafka消息确认机制-ACK" class="headerlink" title="三、kafka消息确认机制 ACK"></a>三、kafka消息确认机制 ACK</h2><blockquote><p><strong><code>producer</code>发送消息后，<code>leader</code>将消息同步给<code>follower</code>，然后返回<code>ACK</code>给<code>producer</code>，表示消息已收到，此时才可以继续发送下一条消息。</strong></p></blockquote><ul><li><code>kafka</code>提供了以下3种<code>ACK</code>级别：<ul><li><code>0</code>：<code>leader</code>接收到消息马上返回<code>ack</code>，此时可能还没有写入磁盘，可能丢失数据</li><li><code>1</code>：<code>leader</code>将消息写入磁盘后，马上返回<code>ack</code>，此时可能还没同步<code>follower</code>，同样可能丢失数据</li><li><code>-1(all)</code>：<code>leader</code>和<code>follower</code>都将数据写入磁盘后，返回<code>ack</code>。但是如果在写入磁盘后，<code>ack</code>尚未发送，此时<code>leader</code>发生故障，会导致数据写入重复</li></ul></li></ul><h2 id="四、kafka的partition分区方式"><a href="#四、kafka的partition分区方式" class="headerlink" title="四、kafka的partition分区方式"></a>四、kafka的partition分区方式</h2><blockquote><p><strong><code>consumer</code>采用<code>pull</code>方式主动从<code>broker</code>拉取数据，此时会传入<code>timeout</code>参数，如果当前没有数据可消费，<code>consumer</code>会等待一段时间，直到<code>timeout</code>超期才返回</strong><br><strong><code>1</code>个<code>topic</code>有多个<code>partition</code>，<code>1</code>个<code>consumer-group</code>有多个<code>consumer</code>，这其中就涉及到<code>partition</code>的分配问题。</strong></p></blockquote><ul><li><code>kafka</code>提供<code>2</code>种分配方式：<code>Range</code>和<code>RoundRobin</code><ul><li><code>range</code><ul><li>原理是将<code>partition数</code>&#x2F;<code>consumer数</code>，来决定每个<code>consumer</code>分配几个<code>partition</code>。如果除不尽，则前面几个<code>consumer</code>会多<code>1</code>个<code>partition</code>。</li></ul></li><li><code>RoundRobin</code><ul><li>轮询每个<code>consumer</code>，逐一分配</li></ul></li></ul></li></ul><h2 id="五、kafka集群部署"><a href="#五、kafka集群部署" class="headerlink" title="五、kafka集群部署"></a>五、kafka集群部署</h2><blockquote><p><strong>在部署<code>kafka</code>之前，需要提前部署<code>zookeeper</code>！<a href="https://www.wsjj.top/archives/107">点我跳转到</a><code>zookeeper</code>部署教程。</strong></p></blockquote><h3 id="1-部署jdk环境"><a href="#1-部署jdk环境" class="headerlink" title="1.部署jdk环境"></a>1.部署jdk环境</h3><blockquote><p><strong>过程省略，请查看<code>zookeeper</code>部署教程：<a href="https://www.wsjj.top/archives/107">https://www.wsjj.top/archives/107</a></strong></p></blockquote><h3 id="2-安装kafka"><a href="#2-安装kafka" class="headerlink" title="2.安装kafka"></a>2.安装kafka</h3><h4 id="A-下载kafka"><a href="#A-下载kafka" class="headerlink" title="A.下载kafka"></a>A.下载<code>kafka</code></h4><blockquote><p><strong>如果提示没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# wget https:&#x2F;&#x2F;archive.apache.org&#x2F;dist&#x2F;kafka&#x2F;3.3.1&#x2F;kafka_2.13-3.3.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-安装kafka"><a href="#B-安装kafka" class="headerlink" title="B.安装kafka"></a>B.安装<code>kafka</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# tar xf kafka_2.13-3.3.1.tgz -C &#x2F;usr&#x2F;local&#x2F;[root@zk1 ~]# ls &#x2F;usr&#x2F;local&#x2F;bin  games    jdk1.8.0_191      lib    libexec  share  zookeeperetc  include  kafka_2.13-3.3.1  lib64  sbin     src    zookeeper37[root@zk1 ~]# mv &#x2F;usr&#x2F;local&#x2F;kafka_2.13-3.3.1 &#x2F;usr&#x2F;local&#x2F;kafka33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-配置环境变量"><a href="#C-配置环境变量" class="headerlink" title="C.配置环境变量"></a>C.配置环境变量</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# vim &#x2F;etc&#x2F;profileexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191export KAFKA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;kafka33export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$KAFKA_HOME&#x2F;bin#自行修改上一期教程添加的字段[root@zk1 ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-创建kafka日志目录"><a href="#D-创建kafka日志目录" class="headerlink" title="D.创建kafka日志目录"></a>D.创建<code>kafka</code>日志目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# mkdir &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;kafka-logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-修改kafka配置文件"><a href="#E-修改kafka配置文件" class="headerlink" title="E.修改kafka配置文件"></a>E.修改<code>kafka</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# vim &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;config&#x2F;server.properties#配置文件并不完整，以下仅展示修改的地方。broker.id&#x3D;0#默认保持0即可listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.140.10:9092#去掉注释，填写本机IPlog.dirs&#x3D;&#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;kafka-logs#修改日志存放路径zookeeper.connect&#x3D;192.168.140.10:2181,192.168.140.11:2181,192.168.140.12:2181#指定zookeeper地址，我们有三台。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-把kafka目录拷贝给另外2台机器"><a href="#F-把kafka目录拷贝给另外2台机器" class="headerlink" title="F.把kafka目录拷贝给另外2台机器"></a>F.把<code>kafka</code>目录拷贝给另外2台机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# for i in 11 12; do scp -r &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F; root@192.168.140.$i:&#x2F;usr&#x2F;local&#x2F;; done<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-拷贝环境文件给另外2台机器"><a href="#G-拷贝环境文件给另外2台机器" class="headerlink" title="G.拷贝环境文件给另外2台机器"></a>G.拷贝环境文件给另外2台机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# for i in 11 12&gt; do&gt; scp -r &#x2F;etc&#x2F;profile root@192.168.140.$i:&#x2F;etc&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-修改另外2台服务器上的配置文件"><a href="#H-修改另外2台服务器上的配置文件" class="headerlink" title="H.修改另外2台服务器上的配置文件"></a>H.修改另外2台服务器上的配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk2 ~]# vim &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;config&#x2F;server.propertiesbroker.id&#x3D;1#修改ID，不和之前的重复即可listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.140.11:9092#修改监听IP为本机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk3 ~]# vim &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;config&#x2F;server.propertiesbroker.id&#x3D;2#修改ID，不和之前的重复即可listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.140.12:9092#修改监听IP为本机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="重新加载环境配置文件"><a href="#重新加载环境配置文件" class="headerlink" title="重新加载环境配置文件"></a>重新加载环境配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zk2 ~]# source &#x2F;etc&#x2F;profile[root@zk3 ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="I-启动服务"><a href="#I-启动服务" class="headerlink" title="I.启动服务"></a>I.启动服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# kafka-server-start.sh -daemon &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;config&#x2F;server.properties[root@zk2 ~]# kafka-server-start.sh -daemon &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;config&#x2F;server.properties[root@zk3 ~]# kafka-server-start.sh -daemon &#x2F;usr&#x2F;local&#x2F;kafka33&#x2F;config&#x2F;server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="J-查看是否成功运行"><a href="#J-查看是否成功运行" class="headerlink" title="J.查看是否成功运行"></a>J.查看是否成功运行</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# jps3170 Jps2182 QuorumPeerMain3035 Kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk2 ~]# jps2770 Kafka2853 Jps1966 QuorumPeerMain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk3 ~]# jps2632 Kafka2715 Jps1838 QuorumPeerMain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在zookeeper中查看kafka的注册信息"><a href="#3-在zookeeper中查看kafka的注册信息" class="headerlink" title="3.在zookeeper中查看kafka的注册信息"></a>3.在<code>zookeeper</code>中查看<code>kafka</code>的注册信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkCli.shConnecting to localhost:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[zk: localhost:2181(CONNECTED) 1] ls &#x2F;[admin, brokers, cluster, config, consumers, controller, controller_epoch, feature, isr_change_notification, latest_producer_id_block, log_dir_event_notification, zookeeper]#可以看到多了很多目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[zk: localhost:2181(CONNECTED) 2] get &#x2F;brokers&#x2F;ids&#x2F;0&#123;&quot;features&quot;:&#123;&#125;,&quot;listener_security_protocol_map&quot;:&#123;&quot;PLAINTEXT&quot;:&quot;PLAINTEXT&quot;&#125;,&quot;endpoints&quot;:[&quot;PLAINTEXT:&#x2F;&#x2F;192.168.140.10:9092&quot;],&quot;jmx_port&quot;:-1,&quot;port&quot;:9092,&quot;host&quot;:&quot;192.168.140.10&quot;,&quot;version&quot;:5,&quot;timestamp&quot;:&quot;1683542941484&quot;&#125;[zk: localhost:2181(CONNECTED) 3] get &#x2F;brokers&#x2F;ids&#x2F;1&#123;&quot;features&quot;:&#123;&#125;,&quot;listener_security_protocol_map&quot;:&#123;&quot;PLAINTEXT&quot;:&quot;PLAINTEXT&quot;&#125;,&quot;endpoints&quot;:[&quot;PLAINTEXT:&#x2F;&#x2F;192.168.140.11:9092&quot;],&quot;jmx_port&quot;:-1,&quot;port&quot;:9092,&quot;host&quot;:&quot;192.168.140.11&quot;,&quot;version&quot;:5,&quot;timestamp&quot;:&quot;1683543144766&quot;&#125;[zk: localhost:2181(CONNECTED) 4] get &#x2F;brokers&#x2F;ids&#x2F;2&#123;&quot;features&quot;:&#123;&#125;,&quot;listener_security_protocol_map&quot;:&#123;&quot;PLAINTEXT&quot;:&quot;PLAINTEXT&quot;&#125;,&quot;endpoints&quot;:[&quot;PLAINTEXT:&#x2F;&#x2F;192.168.140.12:9092&quot;],&quot;jmx_port&quot;:-1,&quot;port&quot;:9092,&quot;host&quot;:&quot;192.168.140.12&quot;,&quot;version&quot;:5,&quot;timestamp&quot;:&quot;1683543145833&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试topic操作"><a href="#4-测试topic操作" class="headerlink" title="4.测试topic操作"></a>4.测试<code>topic</code>操作</h3><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# kafka-topics.sh --create --topic test1 --replication-factor 1 --partitions 1 --bootstrap-server 192.168.140.10:9092Created topic test1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# kafka-topics.sh --list --bootstrap-server 192.168.140.10:9092 test1#查看当前系统所有topic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# kafka-topics.sh --describe --topic test1 --bootstrap-server 192.168.140.10:9092Topic: test1TopicId: kJ1ilOuQTMOJO8RQasCRrAPartitionCount: 1ReplicationFactor: 1Configs: Topic: test1Partition: 0Leader: 1Replicas: 1Isr: 1#查看详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# kafka-topics.sh --delete --topic test1 --bootstrap-server 192.168.140.10:9092#删除topic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-测试生产者、消费者"><a href="#5-测试生产者、消费者" class="headerlink" title="5.测试生产者、消费者"></a>5.测试生产者、消费者</h3><blockquote><p><strong>如果您这里报错，请检查刚刚是否已经删除了<code>topic</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# kafka-console-producer.sh --broker-list 192.168.140.10:9092 --topic test1#生产者&gt;1&gt;2&gt;3&gt;4&gt;5&gt;6&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# kafka-console-consumer.sh --bootstrap-server 192.168.140.10:9092 --topic test1 --from-beginning#消费者123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> zookeeper </category>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 存储 </tag>
            
            <tag> 分布式存储集群 </tag>
            
            <tag> kafka </tag>
            
            <tag> 中间件 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux存储系列教程】zookeeper中间件</title>
      <link href="/2023/05/08/107/"/>
      <url>/2023/05/08/107/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux存储系列教程】zookeeper中间件"><a href="#【Linux存储系列教程】zookeeper中间件" class="headerlink" title="【Linux存储系列教程】zookeeper中间件"></a>【Linux存储系列教程】zookeeper中间件</h1><h2 id="一、关于zookeeper"><a href="#一、关于zookeeper" class="headerlink" title="一、关于zookeeper"></a>一、关于zookeeper</h2><h3 id="1-zookeeper是什么"><a href="#1-zookeeper是什么" class="headerlink" title="1.zookeeper是什么"></a>1.zookeeper是什么</h3><blockquote><p><strong><code>zookeeper</code>作为一个分布式的服务框架，主要用来解决分布式集群中应用系统的一致性问题，它能提供基于类似于文件系统的目录节点树方式的数据存储，<code>zookeeper</code>作用主要是用来维护和监控存储的数据的状态变化，通过监控这些数据状态的变化，从而达到基于数据的集群管理。</strong><br><strong><code>zookeeper</code>是一个仲裁者的角色</strong><br><strong>简单的说<code>zookeeper = 文件系统 + 通知机制</code></strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/zookeeper01.png" alt="zookeeper01"></p><h3 id="2-zookeeper的作用"><a href="#2-zookeeper的作用" class="headerlink" title="2.zookeeper的作用"></a>2.zookeeper的作用</h3><ol><li>命名服务</li><li>配置管理</li><li>集群管理</li><li>负载均衡</li><li>分布式锁</li></ol><h3 id="3-zookeeper的角色"><a href="#3-zookeeper的角色" class="headerlink" title="3.zookeeper的角色"></a>3.zookeeper的角色</h3><ul><li>leader<ul><li>主角色<ul><li>处理数据</li><li>维持与follower的心跳，接收处理follower的消息</li></ul></li></ul></li><li>follower<ul><li>备用</li></ul></li><li>observer<ul><li>与follower的区别就是，它不参与leader的选举</li></ul></li></ul><p><img src="https://www.wsjj.top/upload/2023/05/zookeeper02.png" alt="zookeeper02"></p><h3 id="4-zookeeper的选举机制"><a href="#4-zookeeper的选举机制" class="headerlink" title="4.zookeeper的选举机制"></a>4.zookeeper的选举机制</h3><ul><li>目前有5台服务器，每台服务器均没有数据，它们的编号分别是1,2,3,4,5,按编号依次启动，它们的选择举过程如下：</li></ul><blockquote><p><strong>服务器1启动，给自己投票，然后发投票信息，由于其它机器还没有启动所以它收不到反馈信息，服务器1的状态一直属于Looking(选举状态)。</strong><br><strong>服务器2启动，给自己投票，同时与之前启动的服务器1交换结果，由于服务器2的编号大所以服务器2胜出，但此时投票数没有大于半数，所以两个服务器的状态依然是LOOKING。</strong><br><strong>服务器3启动，给自己投票，同时与之前启动的服务器1,2交换信息，由于服务器3的编号最大所以服务器3胜出，此时投票数正好大于半数，所以服务器3成为领导者，服务器1,2成为小弟。</strong><br><strong>服务器4启动，给自己投票，同时与之前启动的服务器1,2,3交换信息，尽管服务器4的编号大，但之前服务器3已经胜出，所以服务器4只能成为小弟。</strong><br><strong>服务器5启动，后面的逻辑同服务器4成为小弟。</strong></p></blockquote><h3 id="5-znode类型"><a href="#5-znode类型" class="headerlink" title="5.znode类型"></a>5.znode类型</h3><ul><li><code>ZooKeeper</code>的视图数据结构，很像Unix文件系统，也是树状的，这样可以确定每个路径都是唯一的。<code>zookeeper</code>的节点统一叫做<code>znode</code></li></ul><blockquote><p><strong>根据节点的生命周期，<code>znode</code>可以分为<code>4</code>种类型，分别是&#x3D;&#x3D;持久节点&#x3D;&#x3D;<code>PERSISTENT</code>、&#x3D;&#x3D;持久顺序节点&#x3D;&#x3D;<code>PERSISTENT_SEQUENTIAL</code>、&#x3D;&#x3D;临时节点&#x3D;&#x3D;<code>EPHEMERAL</code>、&#x3D;&#x3D;临时顺序节点&#x3D;&#x3D;<code>EPHEMERAL_SEQUENTIAL</code></strong></p></blockquote><ul><li>持久节点<code>PERSISTENT</code><ul><li>这类节点被创建后，就会一直存在于Zk服务器上。直到手动删除</li></ul></li><li>持久顺序节点<code>PERSISTENT_SEQUENTIAL</code><ul><li>它的基本特性同持久节点，不同在于增加了顺序性。父节点会维护一个自增整性数字，用于子节点的创建的先后顺序。</li></ul></li><li>临时节点<code>EPHEMERAL</code><ul><li>临时节点的生命周期与客户端的会话绑定，一旦客户端会话失效（非TCP连接断开），那么这个节点就会被自动清理掉。zk规定临时节点只能作为叶子节点。</li></ul></li><li>临时顺序节点<code>EPHEMERAL_SEQUENTIAL</code><ul><li>基本特性同临时节点，添加了顺序的特性。</li></ul></li></ul><h2 id="二、zookeeper集群部署"><a href="#二、zookeeper集群部署" class="headerlink" title="二、zookeeper集群部署"></a>二、zookeeper集群部署</h2><h3 id="1-环境介绍"><a href="#1-环境介绍" class="headerlink" title="1.环境介绍"></a>1.环境介绍</h3><blockquote><p><strong>三台虚拟机</strong><br><strong>IP:<code>192.168.183.10</code> 主机名：<code>zk1.linux.com</code></strong><br><strong>IP:<code>192.168.183.11</code> 主机名：<code>zk2.linux.com</code></strong><br><strong>IP:<code>192.168.183.12</code> 主机名：<code>zk3.linux.com</code></strong><br><strong><code>jdk</code>版本：<code>jdk-8u191</code></strong><br><strong><code>zookeeper</code>版本：<code>3.7.1</code></strong><br><strong><code>Centos</code>版本：<code>7.9</code></strong></p></blockquote><h3 id="2-准备阶段"><a href="#2-准备阶段" class="headerlink" title="2.准备阶段"></a>2.准备阶段</h3><h4 id="A-所有主机关闭防火墙和SElinux、配置时间同步"><a href="#A-所有主机关闭防火墙和SElinux、配置时间同步" class="headerlink" title="A.所有主机关闭防火墙和SElinux、配置时间同步"></a>A.所有主机关闭防火墙和SElinux、配置时间同步</h4><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="3-修改主机名和配置域名解析"><a href="#3-修改主机名和配置域名解析" class="headerlink" title="3.修改主机名和配置域名解析"></a>3.修改主机名和配置域名解析</h3><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# hostnamectl set-hostname zk1[root@zk2 ~]# hostnamectl set-hostname zk2[root@zk3 ~]# hostnamectl set-hostname zk3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.10 zk1.linux.com zk1192.168.140.11 zk2.linux.com zk2192.168.140.12 zk3.linux.com zk3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把hosts文件拷贝给其他机器"><a href="#把hosts文件拷贝给其他机器" class="headerlink" title="把hosts文件拷贝给其他机器"></a>把<code>hosts</code>文件拷贝给其他机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# for i in 11 12&gt; do&gt; scp -r &#x2F;etc&#x2F;hosts root@192.168.140.$i:&#x2F;etc&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-安装jdk环境"><a href="#3-安装jdk环境" class="headerlink" title="3.安装jdk环境"></a>3.安装<code>jdk</code>环境</h3><h4 id="A-下载jdk"><a href="#A-下载jdk" class="headerlink" title="A.下载jdk"></a>A.下载<code>jdk</code></h4><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# wget https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;java&#x2F;jdk&#x2F;8u191-b12&#x2F;jdk-8u191-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-安装jdk"><a href="#B-安装jdk" class="headerlink" title="B.安装jdk"></a>B.安装<code>jdk</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# tar xf jdk-8u191-linux-x64.tar.gz -C &#x2F;usr&#x2F;local[root@zk1 ~]# ls &#x2F;usr&#x2F;local&#x2F;bin&#x2F;          games&#x2F;        jdk1.8.0_191&#x2F; lib64&#x2F;        sbin&#x2F;         src&#x2F;etc&#x2F;          include&#x2F;      lib&#x2F;          libexec&#x2F;      share&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-把jdk拷贝给其他机器"><a href="#C-把jdk拷贝给其他机器" class="headerlink" title="C.把jdk拷贝给其他机器"></a>C.把jdk拷贝给其他机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# for i in 2 3&gt; do&gt; scp -r &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191 root@zk$i:&#x2F;usr&#x2F;local&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-配置jdk环境"><a href="#D-配置jdk环境" class="headerlink" title="D.配置jdk环境"></a>D.配置jdk环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# vim &#x2F;etc&#x2F;profile#配置文件并不完整，仅展示添加的地方export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin#配置文件末尾添加2行内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E。让配置文件生效"><a href="#E。让配置文件生效" class="headerlink" title="E。让配置文件生效"></a>E。让配置文件生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# source &#x2F;etc&#x2F;profile[root@zk1 ~]# java -versionjava version &quot;1.8.0_191&quot;Java(TM) SE Runtime Environment (build 1.8.0_191-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-把配置文件拷贝给另外2台机器"><a href="#F-把配置文件拷贝给另外2台机器" class="headerlink" title="F.把配置文件拷贝给另外2台机器"></a>F.把配置文件拷贝给另外2台机器</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# for i in 2 3&gt; do&gt; scp -r &#x2F;etc&#x2F;profile root@zk$i:&#x2F;etc&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-刷新配置文件，并查看jdk环境"><a href="#G-刷新配置文件，并查看jdk环境" class="headerlink" title="G.刷新配置文件，并查看jdk环境"></a>G.刷新配置文件，并查看jdk环境</h4><blockquote><p><strong>请自行到另外<code>2</code>台机器操作</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zk2 ~]# source &#x2F;etc&#x2F;profile[root@zk2 ~]# java -versionjava version &quot;1.8.0_191&quot;Java(TM) SE Runtime Environment (build 1.8.0_191-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk3 ~]# source &#x2F;etc&#x2F;profile[root@zk3 ~]# java -versionjava version &quot;1.8.0_191&quot;Java(TM) SE Runtime Environment (build 1.8.0_191-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-三台服务器配置zookeeper"><a href="#4-三台服务器配置zookeeper" class="headerlink" title="4.三台服务器配置zookeeper"></a>4.三台服务器配置<code>zookeeper</code></h3><h4 id="A-下载zookeeper"><a href="#A-下载zookeeper" class="headerlink" title="A.下载zookeeper"></a>A.下载<code>zookeeper</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# wget --no-check-certificate https:&#x2F;&#x2F;dlcdn.apache.org&#x2F;zookeeper&#x2F;zookeeper-3.7.1&#x2F;apache-zookeeper-3.7.1-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-解压zookeeper并改名"><a href="#B-解压zookeeper并改名" class="headerlink" title="B.解压zookeeper并改名"></a>B.解压<code>zookeeper</code>并改名</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# tar xf apache-zookeeper-3.7.1-bin.tar.gz -C &#x2F;usr&#x2F;local&#x2F;[root@zk1 ~]# ls &#x2F;usr&#x2F;local&#x2F;apache-zookeeper-3.7.1-bin&#x2F; include&#x2F;                    libexec&#x2F;bin&#x2F;                        jdk1.8.0_191&#x2F;               sbin&#x2F;etc&#x2F;                        lib&#x2F;                        share&#x2F;games&#x2F;                      lib64&#x2F;                      src&#x2F;[root@zk1 ~]# mv &#x2F;usr&#x2F;local&#x2F;apache-zookeeper-3.7.1-bin&#x2F; &#x2F;usr&#x2F;local&#x2F;zookeeper37[root@zk1 ~]# ls &#x2F;usr&#x2F;local&#x2F;bin  games    jdk1.8.0_191  lib64    sbin   srcetc  include  lib           libexec  share  zookeeper37<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-拷贝文件给另外2台服务器"><a href="#C-拷贝文件给另外2台服务器" class="headerlink" title="C.拷贝文件给另外2台服务器"></a>C.拷贝文件给另外2台服务器</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# for i in 2 3&gt; do&gt; scp -r &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F; root@zk$i:&#x2F;usr&#x2F;local&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-修改zookeeper配置文件"><a href="#D-修改zookeeper配置文件" class="headerlink" title="D.修改zookeeper配置文件"></a>D.修改zookeeper配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# cp &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;conf&#x2F;zoo_sample.cfg &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;conf&#x2F;zoo.cfg[root@zk1 ~]# cd &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;conf&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="创建用到的数据目录和日志目录"><a href="#创建用到的数据目录和日志目录" class="headerlink" title="创建用到的数据目录和日志目录"></a>创建用到的数据目录和日志目录</h5><pre class="line-numbers language-none"><code class="language-none">[root@zk1 conf]# mkdir &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;zkdata[root@zk1 conf]# mkdir &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;zklogs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@zk1 conf]# vim &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;conf&#x2F;zoo.cfgtickTime&#x3D;2000initLimit&#x3D;10syncLimit&#x3D;5dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;zkdata#修改默认的tmp目录dataLogDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;zklogs#用于存放日志clientPort&#x3D;2181server.1&#x3D;192.168.140.10:2888:3888#新增以下内容server.2&#x3D;192.168.140.11:2888:3888server.3&#x3D;192.168.140.12:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-在数据目录下创建myid文件"><a href="#E-在数据目录下创建myid文件" class="headerlink" title="E.在数据目录下创建myid文件"></a>E.在数据目录下创建<code>myid</code>文件</h4><blockquote><p><strong>此处的数字<code>1</code>对应着配置文件中的<code>server</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zk1 conf]# echo 1 &gt; &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;zkdata&#x2F;myid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-拷贝配置文件给其他服务器"><a href="#F-拷贝配置文件给其他服务器" class="headerlink" title="F.拷贝配置文件给其他服务器"></a>F.拷贝配置文件给其他服务器</h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 conf]# for i in 11 12&gt; do&gt; rsync -ra &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F; root@192.168.140.$i:&#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-修改另外2台服务器的myid文件"><a href="#G-修改另外2台服务器的myid文件" class="headerlink" title="G.修改另外2台服务器的myid文件"></a>G.修改另外2台服务器的myid文件</h4><blockquote><p><strong>此处的<code>myid</code>文件中的数字，对应着配置文件中的数字</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@zk2 ~]# echo 2 &gt; &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;zkdata&#x2F;myid[root@zk3 ~]# echo 3 &gt; &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;zkdata&#x2F;myid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="H-依次启动zookeeper"><a href="#H-依次启动zookeeper" class="headerlink" title="H.依次启动zookeeper"></a>H.依次启动<code>zookeeper</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@zk1 ~]# bash &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkServer.sh startZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgStarting zookeeper ... FAILED TO START[root@zk1 ~]# bash &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgClient port found: 2181. Client address: localhost. Client SSL: false.Error contacting service. It is probably not running.#第一次启动报错是正常的[root@zk1 ~]# bash &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgClient port found: 2181. Client address: localhost. Client SSL: false.Mode: follower<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk2 ~]# bash &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkServer.sh startZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgStarting zookeeper ... FAILED TO START[root@zk2 ~]# bash &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgClient port found: 2181. Client address: localhost. Client SSL: false.Mode: follower<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@zk3 ~]# bash &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkServer.sh startZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgStarting zookeeper ... FAILED TO START[root@zk3 ~]# bash &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: &#x2F;usr&#x2F;local&#x2F;zookeeper37&#x2F;bin&#x2F;..&#x2F;conf&#x2F;zoo.cfgClient port found: 2181. Client address: localhost. Client SSL: false.Mode: leader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> 分布式存储集群 </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 高可用集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux存储系列教程】ceph存储的使用</title>
      <link href="/2023/05/06/106/"/>
      <url>/2023/05/06/106/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux存储系列教程】ceph存储的使用"><a href="#【Linux存储系列教程】ceph存储的使用" class="headerlink" title="【Linux存储系列教程】ceph存储的使用"></a>【Linux存储系列教程】ceph存储的使用</h1><blockquote><p><strong>上一期教程：<a href="https://www.wsjj.top/archives/105">ceph-mimic集群部署</a></strong></p></blockquote><h2 id="一、基于文件系统的存储"><a href="#一、基于文件系统的存储" class="headerlink" title="一、基于文件系统的存储"></a>一、基于文件系统的存储</h2><h3 id="1-创建MDS服务"><a href="#1-创建MDS服务" class="headerlink" title="1.创建MDS服务"></a>1.创建<code>MDS</code>服务</h3><blockquote><p><strong>文件系统存储依赖于<code>MDS</code>，保存&#x3D;&#x3D;元数据&#x3D;&#x3D;信息</strong></p></blockquote><h4 id="A-在ceph-node1创建MDS服务"><a href="#A-在ceph-node1创建MDS服务" class="headerlink" title="A.在ceph-node1创建MDS服务"></a>A.在ceph-node1创建MDS服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# vim &#x2F;etc&#x2F;ceph&#x2F;ceph.conf[global]fsid &#x3D; bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1mon_initial_members &#x3D; ceph-node1mon_host &#x3D; 192.168.140.10auth_cluster_required &#x3D; cephxauth_service_required &#x3D; cephxauth_client_required &#x3D; cephxpublic network &#x3D; 192.168.140.0&#x2F;24mon_allow_pool_delete &#x3D; true#添加此段内容，允许将来删除存储池<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-同步配置文件"><a href="#B-同步配置文件" class="headerlink" title="B.同步配置文件"></a>B.同步配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy --overwrite-conf admin ceph-node1 ceph-node2 ceph-node3#以下仅展示部分内容[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy --overwrite-conf admin ceph-node1 ceph-node2 ceph-node3[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : True[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fc572bae6c8&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  client                        : [&#39;ceph-node1&#39;, &#39;ceph-node2&#39;, &#39;ceph-node3&#39;][ceph_deploy.cli][INFO  ]  func                          : &lt;function admin at 0x7fc57343d320&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-node1[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph-node1][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-node2[ceph-node2][DEBUG ] connected to host: ceph-node2 [ceph-node2][DEBUG ] detect platform information from remote host[ceph-node2][DEBUG ] detect machine type[ceph-node2][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-node3[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph-node3][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-创建三个MDS"><a href="#C-创建三个MDS" class="headerlink" title="C.创建三个MDS"></a>C.创建三个MDS</h4><blockquote><p><strong>避免单点故障</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy mds create ceph-node1 ceph-node2 ceph-node3#以下仅展示部分内容[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy mds create ceph-node1 ceph-node2 ceph-node3[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  subcommand                    : create[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fb585e3a758&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  func                          : &lt;function mds at 0x7fb585e80050&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  mds                           : [(&#39;ceph-node1&#39;, &#39;ceph-node1&#39;), (&#39;ceph-node2&#39;, &#39;ceph-node2&#39;), (&#39;ceph-node3&#39;, &#39;ceph-node3&#39;)][ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.mds][DEBUG ] Deploying mds, cluster ceph hosts ceph-node1:ceph-node1 ceph-node2:ceph-node2 ceph-node3:ceph-node3[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph_deploy.mds][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.mds][DEBUG ] remote host will use systemd[ceph_deploy.mds][DEBUG ] deploying mds bootstrap to ceph-node1[ceph-node1][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node1][WARNIN] mds keyring does not exist yet, creating one[ceph-node1][DEBUG ] create a keyring file[ceph-node1][DEBUG ] create path if it doesn&#39;t exist[ceph-node1][INFO  ] Running command: ceph --cluster ceph --name client.bootstrap-mds --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-mds&#x2F;ceph.keyring auth get-or-create mds.ceph-node1 osd allow rwx mds allow mon allow profile mds -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mds&#x2F;ceph-ceph-node1&#x2F;keyring[ceph-node1][INFO  ] Running command: systemctl enable ceph-mds@ceph-node1[ceph-node1][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-mds.target.wants&#x2F;ceph-mds@ceph-node1.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-mds@.service.[ceph-node1][INFO  ] Running command: systemctl start ceph-mds@ceph-node1[ceph-node1][INFO  ] Running command: systemctl enable ceph.target[ceph-node2][DEBUG ] connected to host: ceph-node2 [ceph-node2][DEBUG ] detect platform information from remote host[ceph-node2][DEBUG ] detect machine type[ceph_deploy.mds][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.mds][DEBUG ] remote host will use systemd[ceph_deploy.mds][DEBUG ] deploying mds bootstrap to ceph-node2[ceph-node2][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node2][WARNIN] mds keyring does not exist yet, creating one[ceph-node2][DEBUG ] create a keyring file[ceph-node2][DEBUG ] create path if it doesn&#39;t exist[ceph-node2][INFO  ] Running command: ceph --cluster ceph --name client.bootstrap-mds --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-mds&#x2F;ceph.keyring auth get-or-create mds.ceph-node2 osd allow rwx mds allow mon allow profile mds -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mds&#x2F;ceph-ceph-node2&#x2F;keyring[ceph-node2][INFO  ] Running command: systemctl enable ceph-mds@ceph-node2[ceph-node2][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-mds.target.wants&#x2F;ceph-mds@ceph-node2.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-mds@.service.[ceph-node2][INFO  ] Running command: systemctl start ceph-mds@ceph-node2[ceph-node2][INFO  ] Running command: systemctl enable ceph.target[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph_deploy.mds][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.mds][DEBUG ] remote host will use systemd[ceph_deploy.mds][DEBUG ] deploying mds bootstrap to ceph-node3[ceph-node3][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node3][WARNIN] mds keyring does not exist yet, creating one[ceph-node3][DEBUG ] create a keyring file[ceph-node3][DEBUG ] create path if it doesn&#39;t exist[ceph-node3][INFO  ] Running command: ceph --cluster ceph --name client.bootstrap-mds --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-mds&#x2F;ceph.keyring auth get-or-create mds.ceph-node3 osd allow rwx mds allow mon allow profile mds -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mds&#x2F;ceph-ceph-node3&#x2F;keyring[ceph-node3][INFO  ] Running command: systemctl enable ceph-mds@ceph-node3[ceph-node3][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-mds.target.wants&#x2F;ceph-mds@ceph-node3.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-mds@.service.[ceph-node3][INFO  ] Running command: systemctl start ceph-mds@ceph-node3[ceph-node3][INFO  ] Running command: systemctl enable ceph.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-重启服务，让配置文件生效"><a href="#D-重启服务，让配置文件生效" class="headerlink" title="D.重启服务，让配置文件生效"></a>D.重启服务，让配置文件生效</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# systemctl restart ceph-mon.target[root@ceph-node2 ~]# systemctl restart ceph-mon.target[root@ceph-node3 ~]# systemctl restart ceph-mon.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建文件存储池"><a href="#2-创建文件存储池" class="headerlink" title="2.创建文件存储池"></a>2.创建文件存储池</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph osd pool create cephfs_pool 128pool &#39;cephfs_pool&#39; created[root@ceph-node1 ceph]# ceph osd pool create cephfs_metadata 64pool &#39;cephfs_metadata&#39; created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Tips:</strong></p></blockquote><ul><li>一个文件系统存储需要两个<code>RADOS</code>存储池，一个用于存储&#x3D;&#x3D;实体数据&#x3D;&#x3D;，一个用于存储&#x3D;&#x3D;元数据&#x3D;&#x3D;<ul><li>上面分别创建两个存储池，名称为<code>cephfs_pool</code>、<code>cephfs_metadata</code>（名字是自定义的）</li><li>分别指定存储池对应的<code>PG</code>数量为<code>128</code>，<code>64</code></li></ul></li><li>存储池对应<code>PG</code>数量参考 <ul><li>少于<code>5</code>个<code>OSD</code>则<code>PG</code>数为<code>128</code></li><li><code>5-10</code>个<code>OSD</code>则<code>PG</code>数为<code>512</code></li><li><code>10-50</code>个<code>OSD</code>则<code>PG</code>数为<code>1024</code></li><li>如果有更多的<code>OSD</code>需要自己理解计算</li></ul></li><li><code>PG</code>计算公式<ul><li><code>Total PGs = ((Total_number_of_OSD * 100) / max_replication_count) / pool_count</code></li><li>结算的结果往上取靠近<code>2</code>的<code>N</code>次方的值。比如总共<code>OSD</code>数量是<code>160</code>，复制份数<code>3</code>，<code>pool</code>数量也是<code>3</code>，那么按上述公式计算出的结果是<code>1777.7</code>。取跟它接近的<code>2</code>的<code>N</code>次方是<code>2048</code>，那么每个<code>pool</code>分配的<code>PG</code>数量就是<code>2048</code>。</li></ul></li></ul><h3 id="3-查看集群状态"><a href="#3-查看集群状态" class="headerlink" title="3.查看集群状态"></a>3.查看集群状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_OK   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3    mgr: ceph-node1(active), standbys: ceph-node3, ceph-node2    osd: 3 osds: 3 up, 3 in   data:    pools:   2 pools, 192 pgs    objects: 0  objects, 0 B    usage:   3.0 GiB used, 57 GiB &#x2F; 60 GiB avail    pgs:     192 active+clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看所有存储池"><a href="#4-查看所有存储池" class="headerlink" title="4.查看所有存储池"></a>4.查看所有存储池</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph osd pool lscephfs_poolcephfs_metadata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-查看存储池的详细信息"><a href="#5-查看存储池的详细信息" class="headerlink" title="5.查看存储池的详细信息"></a>5.查看存储池的详细信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph osd pool get cephfs_pool allsize: 3min_size: 2pg_num: 128pgp_num: 128#用于管理pg自身的PGcrush_rule: replicated_rulehashpspool: truenodelete: falsenopgchange: falsenosizechange: falsewrite_fadvise_dontneed: falsenoscrub: falsenodeep-scrub: falseuse_gmt_hitset: 1auid: 0fast_read: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph osd pool get cephfs_metadata allsize: 3min_size: 2pg_num: 64pgp_num: 64#用于管理pg自身的PGcrush_rule: replicated_rulehashpspool: truenodelete: falsenopgchange: falsenosizechange: falsewrite_fadvise_dontneed: falsenoscrub: falsenodeep-scrub: falseuse_gmt_hitset: 1auid: 0fast_read: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-创建ceph文件系统"><a href="#6-创建ceph文件系统" class="headerlink" title="6.创建ceph文件系统"></a>6.创建ceph文件系统</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph fs new cephfs cephfs_metadata cephfs_poolnew fs with metadata pool 2 and data pool 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="A-查看刚刚创建的fs"><a href="#A-查看刚刚创建的fs" class="headerlink" title="A.查看刚刚创建的fs"></a>A.查看刚刚创建的<code>fs</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_pool ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-查看mds状态"><a href="#B-查看mds状态" class="headerlink" title="B.查看mds状态"></a>B.查看<code>mds</code>状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph mds statcephfs-1&#x2F;1&#x2F;1 up  &#123;0&#x3D;ceph-node3&#x3D;up:active&#125;, 2 up:standby<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-查看集群状态"><a href="#C-查看集群状态" class="headerlink" title="C.查看集群状态"></a>C.查看集群状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_OK   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3    mgr: ceph-node1(active), standbys: ceph-node3, ceph-node2    mds: cephfs-1&#x2F;1&#x2F;1 up  &#123;0&#x3D;ceph-node3&#x3D;up:active&#125;, 2 up:standby    osd: 3 osds: 3 up, 3 in   data:    pools:   2 pools, 192 pgs    objects: 22  objects, 2.2 KiB    usage:   3.0 GiB used, 57 GiB &#x2F; 60 GiB avail    pgs:     192 active+clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-客户端挂载使用"><a href="#7-客户端挂载使用" class="headerlink" title="7.客户端挂载使用"></a>7.客户端挂载使用</h3><blockquote><p><strong><code>ceph</code>集群默认启用了<code>cephx</code>认证，客户端必须通过认证</strong></p></blockquote><h4 id="A-在ceph-node1节点查看客户端认证的key"><a href="#A-在ceph-node1节点查看客户端认证的key" class="headerlink" title="A.在ceph-node1节点查看客户端认证的key"></a>A.在<code>ceph-node1</code>节点查看客户端认证的<code>key</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# cat &#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring | grep keykey &#x3D; AQAGPFZk5DvuJxAAdH&#x2F;+H6HFcr+Xa55wDWUrkQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-将key导出"><a href="#B-将key导出" class="headerlink" title="B.将key导出"></a>B.将key导出</h4><blockquote><p><strong><code>ceph</code>给我们提供了导出<code>key</code>的命令</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-authtool -p &#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring &gt; &#x2F;root&#x2F;admin.key[root@ceph-node1 ceph]# cat &#x2F;root&#x2F;admin.keyAQAGPFZk5DvuJxAAdH&#x2F;+H6HFcr+Xa55wDWUrkQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-将key文件传给client客户端"><a href="#C-将key文件传给client客户端" class="headerlink" title="C.将key文件传给client客户端"></a>C.将<code>key</code>文件传给<code>client</code>客户端</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# scp -r &#x2F;root&#x2F;admin.key root@192.168.140.13:&#x2F;root&#x2F;admin.key                                               100%   41    48.9KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-前往client客户端挂载"><a href="#8-前往client客户端挂载" class="headerlink" title="8.前往client客户端挂载"></a>8.前往<code>client</code>客户端挂载</h3><h4 id="A-安装依赖"><a href="#A-安装依赖" class="headerlink" title="A.安装依赖"></a>A.安装依赖</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# yum install -y ceph-fuse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-创建测试目录"><a href="#B-创建测试目录" class="headerlink" title="B.创建测试目录"></a>B.创建测试目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# mkdir &#x2F;test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-挂载"><a href="#C-挂载" class="headerlink" title="C.挂载"></a>C.挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# mount -t ceph ceph-node1:6789:&#x2F; &#x2F;test1 -o name&#x3D;admin,secretfile&#x3D;&#x2F;root&#x2F;admin.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-测试"><a href="#D-测试" class="headerlink" title="D.测试"></a>D.测试</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;test1&#x2F;file01.txt bs&#x3D;1M count&#x3D;5000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="可前往web界面查看实时动态"><a href="#可前往web界面查看实时动态" class="headerlink" title="可前往web界面查看实时动态"></a>可前往web界面查看实时动态</h5><p><img src="https://www.wsjj.top/upload/2023/05/ceph14.png" alt="ceph14"></p><h3 id="9-删除文件存储系统"><a href="#9-删除文件存储系统" class="headerlink" title="9.删除文件存储系统"></a>9.删除文件存储系统</h3><h4 id="A-client客户端停止挂载"><a href="#A-client客户端停止挂载" class="headerlink" title="A.client客户端停止挂载"></a>A.<strong><code>client</code>客户端停止挂载</strong></h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# umount &#x2F;test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-回到node节点，停掉所有MDS服务"><a href="#B-回到node节点，停掉所有MDS服务" class="headerlink" title="B.回到node节点，停掉所有MDS服务"></a>B.回到<code>node</code>节点，停掉所有<code>MDS</code>服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i systemctl stop ceph-mds.target&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-删除文件系统"><a href="#C-删除文件系统" class="headerlink" title="C.删除文件系统"></a>C.删除文件系统</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_pool ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph fs rm cephfs --yes-i-really-mean-it<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>删除的时候必须加上<code>--yes-i-really-mean-it</code></strong></p></blockquote><h4 id="D-删除存储池"><a href="#D-删除存储池" class="headerlink" title="D.删除存储池"></a>D.删除存储池</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph osd pool delete cephfs_metadata cephfs_metadata --yes-i-really-really-mean-itpool &#39;cephfs_metadata&#39; removed[root@ceph-node1 ceph]# ceph osd pool delete cephfs_pool cephfs_pool --yes-i-really-really-mean-itpool &#39;cephfs_pool&#39; removed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>删除存储池时，如果出现<code>Error EPERM: pool deletion is disabled; you must first set the mon_allow_pool_delete config option to true before you can destroy a pool</code>，确认在配置文件中添加了<code>mon_allow_pool_delete = true</code>配置项， 需要将集群节点的<code>ceph-mon.target</code>重启</strong><br><strong><code>systemctl restart ceph-mon.target</code></strong></p></blockquote><h2 id="二、块存储"><a href="#二、块存储" class="headerlink" title="二、块存储"></a>二、块存储</h2><h3 id="1-将ceph-node1配置文件同步到ceph-client客户端"><a href="#1-将ceph-node1配置文件同步到ceph-client客户端" class="headerlink" title="1.将ceph-node1配置文件同步到ceph-client客户端"></a>1.将<code>ceph-node1</code>配置文件同步到<code>ceph-client</code>客户端</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy admin ceph-client#以下仅展示部分内容[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy admin ceph-client[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f8ea52f96c8&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  client                        : [&#39;ceph-client&#39;][ceph_deploy.cli][INFO  ]  func                          : &lt;function admin at 0x7f8ea5b88320&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-clientThe authenticity of host &#39;ceph-client (192.168.140.13)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:GeP9+x&#x2F;MhwU2ocE8S5QBGyj7+ha7e&#x2F;v922M6LAJ0wJQ.ECDSA key fingerprint is MD5:f3:b8:79:87:57:da:90:25:06:21:2f:d6:15:7c:fe:29.Are you sure you want to continue connecting (yes&#x2F;no)? yesWarning: Permanently added &#39;ceph-client&#39; (ECDSA) to the list of known hosts.[ceph-client][DEBUG ] connected to host: ceph-client [ceph-client][DEBUG ] detect platform information from remote host[ceph-client][DEBUG ] detect machine type[ceph-client][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回到ceph-client客户端上操作"><a href="#回到ceph-client客户端上操作" class="headerlink" title="回到ceph-client客户端上操作"></a>回到ceph-client客户端上操作</h3><h3 id="2-创建存储池并且初始化"><a href="#2-创建存储池并且初始化" class="headerlink" title="2.创建存储池并且初始化"></a>2.创建存储池并且初始化</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# ceph osd pool create rbd_pool 128pool &#39;rbd_pool&#39; created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd pool init rbd_pool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建卷"><a href="#3-创建卷" class="headerlink" title="3.创建卷"></a>3.创建卷</h3><blockquote><p><strong>创建一个<code>20G</code>的卷</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd delete volume1 --yes-i-really-mean-it<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd ls rbd_poolvolume1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看卷详细信息"><a href="#查看卷详细信息" class="headerlink" title="查看卷详细信息"></a>查看卷详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd info volume1 -p rbd_poolrbd image &#39;volume1&#39;:size 20 GiB in 5120 objectsorder 22 (4 MiB objects)id: 85626b8b4567block_name_prefix: rbd_data.85626b8b4567format: 2features: layering, exclusive-lock, object-map, fast-diff, deep-flattenop_features: flags: create_timestamp: Sat May  6 21:56:50 2023<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-将卷映射为块设备"><a href="#4-将卷映射为块设备" class="headerlink" title="4.将卷映射为块设备"></a>4.将卷映射为块设备</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd map rbd_pool&#x2F;volume1rbd: sysfs write failedRBD image feature set mismatch. You can disable features unsupported by the kernel with &quot;rbd feature disable rbd_pool&#x2F;volume1 object-map fast-diff deep-flatten&quot;.In some cases useful info is found in syslog - try &quot;dmesg | tail&quot;.rbd: map failed: (6) No such device or address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>由于操作系统底层原因，导致映射 失败， 可在系统层将对应的特性关掉</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd feature disable rbd_pool&#x2F;volume1 object-map fast-diff deep-flatten<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="再次重新映射"><a href="#再次重新映射" class="headerlink" title="再次重新映射"></a>再次重新映射</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd map rbd_pool&#x2F;volume1&#x2F;dev&#x2F;rbd0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd showmappedid pool     image   snap device    0  rbd_pool volume1 -    &#x2F;dev&#x2F;rbd0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-格式化"><a href="#5-格式化" class="headerlink" title="5.格式化"></a>5.格式化</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  500M  0 part &#x2F;boot└─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sr0              11:0    1 1024M  0 rom  rbd0            252:0    0   20G  0 disk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# mkfs -t xfs &#x2F;dev&#x2F;rbd0Discarding blocks...Done.meta-data&#x3D;&#x2F;dev&#x2F;rbd0              isize&#x3D;512    agcount&#x3D;16, agsize&#x3D;327680 blks         &#x3D;                       sectsz&#x3D;512   attr&#x3D;2, projid32bit&#x3D;1         &#x3D;                       crc&#x3D;1        finobt&#x3D;0, sparse&#x3D;0data     &#x3D;                       bsize&#x3D;4096   blocks&#x3D;5242880, imaxpct&#x3D;25         &#x3D;                       sunit&#x3D;1024   swidth&#x3D;1024 blksnaming   &#x3D;version 2              bsize&#x3D;4096   ascii-ci&#x3D;0 ftype&#x3D;1log      &#x3D;internal log           bsize&#x3D;4096   blocks&#x3D;2560, version&#x3D;2         &#x3D;                       sectsz&#x3D;512   sunit&#x3D;8 blks, lazy-count&#x3D;1realtime &#x3D;none                   extsz&#x3D;4096   blocks&#x3D;0, rtextents&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="挂载使用"><a href="#挂载使用" class="headerlink" title="挂载使用"></a>挂载使用</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# mkdir &#x2F;test2[root@ceph-client ~]# mount &#x2F;dev&#x2F;rbd0 &#x2F;test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="可前往web端查看使用情况"><a href="#可前往web端查看使用情况" class="headerlink" title="可前往web端查看使用情况"></a>可前往web端查看使用情况</h4><p><img src="https://www.wsjj.top/upload/2023/05/ceph15.png" alt="ceph15"></p><h3 id="6-扩容和缩容"><a href="#6-扩容和缩容" class="headerlink" title="6.扩容和缩容"></a>6.扩容和缩容</h3><h4 id="A-扩容"><a href="#A-扩容" class="headerlink" title="A.扩容"></a>A.扩容</h4><blockquote><p><strong>扩容至<code>40G</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd resize --size 40960 rbd_pool&#x2F;volume1Resizing image: 100% complete...done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="刷新文件系统"><a href="#刷新文件系统" class="headerlink" title="刷新文件系统"></a>刷新文件系统</h5><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# xfs_growfs -d &#x2F;test2&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看容量"><a href="#查看容量" class="headerlink" title="查看容量"></a>查看容量</h5><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  500M  0 part &#x2F;boot└─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sr0              11:0    1 1024M  0 rom  rbd0            252:0    0   40G  0 disk &#x2F;test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-缩容"><a href="#B-缩容" class="headerlink" title="B.缩容"></a>B.缩容</h4><blockquote><p><strong>不支持在线直接缩减，缩减后重新格式化</strong><br><strong>需要卸载磁盘</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# umount &#x2F;test2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>缩容至<code>10G</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# rbd resize --size 10240 rbd_pool&#x2F;volume1 --allow-shrinkResizing image: 100% complete...done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="重新格式化"><a href="#重新格式化" class="headerlink" title="重新格式化"></a>重新格式化</h5><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# mkfs -t xfs -f &#x2F;dev&#x2F;rbd0Discarding blocks...Done.meta-data&#x3D;&#x2F;dev&#x2F;rbd0              isize&#x3D;512    agcount&#x3D;16, agsize&#x3D;163840 blks         &#x3D;                       sectsz&#x3D;512   attr&#x3D;2, projid32bit&#x3D;1         &#x3D;                       crc&#x3D;1        finobt&#x3D;0, sparse&#x3D;0data     &#x3D;                       bsize&#x3D;4096   blocks&#x3D;2621440, imaxpct&#x3D;25         &#x3D;                       sunit&#x3D;1024   swidth&#x3D;1024 blksnaming   &#x3D;version 2              bsize&#x3D;4096   ascii-ci&#x3D;0 ftype&#x3D;1log      &#x3D;internal log           bsize&#x3D;4096   blocks&#x3D;2560, version&#x3D;2         &#x3D;                       sectsz&#x3D;512   sunit&#x3D;8 blks, lazy-count&#x3D;1realtime &#x3D;none                   extsz&#x3D;4096   blocks&#x3D;0, rtextents&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="重新挂载"><a href="#重新挂载" class="headerlink" title="重新挂载"></a>重新挂载</h5><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# mount &#x2F;dev&#x2F;rbd0 &#x2F;test2&#x2F;[root@ceph-client ~]# df -hT | grep test2&#x2F;dev&#x2F;rbd0               xfs        10G   33M   10G    1% &#x2F;test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-删除块存储"><a href="#7-删除块存储" class="headerlink" title="7.删除块存储"></a>7.删除块存储</h3><h4 id="A-取消挂载"><a href="#A-取消挂载" class="headerlink" title="A.取消挂载"></a>A.取消挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# umount &#x2F;test2[root@ceph-client ~]# rbd unmap &#x2F;dev&#x2F;rbd0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-删除块存储"><a href="#B-删除块存储" class="headerlink" title="B.删除块存储"></a>B.删除块存储</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# ceph osd pool delete rbd_pool rbd_pool --yes-i-really-really-mean-itpool &#39;rbd_pool&#39; removed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、对象存储"><a href="#三、对象存储" class="headerlink" title="三、对象存储"></a>三、对象存储</h2><blockquote><p><strong>对象存储依赖于<code>rgw</code>服务</strong></p></blockquote><h3 id="1-回到ceph-node1上创建rgw服务"><a href="#1-回到ceph-node1上创建rgw服务" class="headerlink" title="1.回到ceph-node1上创建rgw服务"></a>1.回到<code>ceph-node1</code>上创建<code>rgw</code>服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy rgw create ceph-node1 ceph-node2 ceph-node3#以下仅展示部分内容[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy rgw create ceph-node1[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  rgw                           : [(&#39;ceph-node1&#39;, &#39;rgw.ceph-node1&#39;)][ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  subcommand                    : create[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f1522f83f80&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  func                          : &lt;function rgw at 0x7f15237d2140&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.rgw][DEBUG ] Deploying rgw, cluster ceph hosts ceph-node1:rgw.ceph-node1[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph_deploy.rgw][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.rgw][DEBUG ] remote host will use systemd[ceph_deploy.rgw][DEBUG ] deploying rgw bootstrap to ceph-node1[ceph-node1][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node1][WARNIN] rgw keyring does not exist yet, creating one[ceph-node1][DEBUG ] create a keyring file[ceph-node1][DEBUG ] create path recursively if it doesn&#39;t exist[ceph-node1][INFO  ] Running command: ceph --cluster ceph --name client.bootstrap-rgw --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-rgw&#x2F;ceph.keyring auth get-or-create client.rgw.ceph-node1 osd allow rwx mon allow rw -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;radosgw&#x2F;ceph-rgw.ceph-node1&#x2F;keyring[ceph-node1][INFO  ] Running command: systemctl enable ceph-radosgw@rgw.ceph-node1[ceph-node1][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-radosgw.target.wants&#x2F;ceph-radosgw@rgw.ceph-node1.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-radosgw@.service.[ceph-node1][INFO  ] Running command: systemctl start ceph-radosgw@rgw.ceph-node1[ceph-node1][INFO  ] Running command: systemctl enable ceph.target[ceph_deploy.rgw][INFO  ] The Ceph Object Gateway (RGW) is now running on host ceph-node1 and default port 7480#默认服务跑在7480端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看集群"><a href="#2-查看集群" class="headerlink" title="2.查看集群"></a>2.查看集群</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_OK   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3    mgr: ceph-node1(active), standbys: ceph-node3, ceph-node2    osd: 3 osds: 3 up, 3 in    rgw: 3 daemons active   data:    pools:   4 pools, 32 pgs    objects: 187  objects, 1.1 KiB    usage:   3.0 GiB used, 57 GiB &#x2F; 60 GiB avail    pgs:     32 active+clean   io:    client:   90 KiB&#x2F;s rd, 0 B&#x2F;s wr, 91 op&#x2F;s rd, 58 op&#x2F;s wr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在ceph-client客户端测试对象网关"><a href="#3-在ceph-client客户端测试对象网关" class="headerlink" title="3.在ceph-client客户端测试对象网关"></a>3.在<code>ceph-client</code>客户端测试对象网关</h3><h4 id="A-创建测试用户"><a href="#A-创建测试用户" class="headerlink" title="A.创建测试用户"></a>A.创建测试用户</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# radosgw-admin user create --uid&#x3D;&quot;testuser&quot; --display-name&#x3D;&quot;first user&quot; | grep -E &quot;access_key|secret_key&quot;            &quot;access_key&quot;: &quot;7ZIQY6MC4L2QZTP31SW4&quot;,            &quot;secret_key&quot;: &quot;x1Rzw9PcvCQm1eKgmSdSxsRU1aI1SCrdJ1NvhmVU&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>请记住这里的<code>key</code>，每个人的都不一样哦！</strong></p></blockquote><h4 id="B-安装测试工具s3cmd"><a href="#B-安装测试工具s3cmd" class="headerlink" title="B.安装测试工具s3cmd"></a>B.安装测试工具<code>s3cmd</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# yum install -y s3cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改配置文件"><a href="#C-修改配置文件" class="headerlink" title="C.修改配置文件"></a>C.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# vim &#x2F;root&#x2F;.s3cfg[default]access_key &#x3D; 7ZIQY6MC4L2QZTP31SW4#这里替换你刚刚拿到的keysecret_key &#x3D; x1Rzw9PcvCQm1eKgmSdSxsRU1aI1SCrdJ1NvhmVU#这里替换你刚刚拿到的keyhost_base &#x3D; 192.168.140.10:7480host_bucket &#x3D; 192.168.140.10:7480&#x2F;%(bucket)cloudfront_host &#x3D; 192.168.140.10:7480use_https &#x3D; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-创建bucket桶"><a href="#D-创建bucket桶" class="headerlink" title="D.创建bucket桶"></a>D.创建<code>bucket</code>桶</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# s3cmd mb s3:&#x2F;&#x2F;test_bucketBucket &#39;s3:&#x2F;&#x2F;test_bucket&#x2F;&#39; created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# s3cmd ls2023-05-06 14:38  s3:&#x2F;&#x2F;test_bucket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-测试上传文件"><a href="#E-测试上传文件" class="headerlink" title="E.测试上传文件"></a>E.测试上传文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# s3cmd put &#x2F;etc&#x2F;fstab s3:&#x2F;&#x2F;test_bucketupload: &#39;&#x2F;etc&#x2F;fstab&#39; -&gt; &#39;s3:&#x2F;&#x2F;test_bucket&#x2F;fstab&#39;  [1 of 1] 465 of 465   100% in    1s   366.05 B&#x2F;s  done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="F-测试下载文件"><a href="#F-测试下载文件" class="headerlink" title="F.测试下载文件"></a>F.测试下载文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# cd &#x2F;tmp[root@ceph-client tmp]# s3cmd get s3:&#x2F;&#x2F;test_bucket&#x2F;fstabdownload: &#39;s3:&#x2F;&#x2F;test_bucket&#x2F;fstab&#39; -&gt; &#39;.&#x2F;fstab&#39;  [1 of 1] 465 of 465   100% in    0s    10.90 KB&#x2F;s  done[root@ceph-client tmp]# lsfstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除bucket桶"><a href="#4-删除bucket桶" class="headerlink" title="4.删除bucket桶"></a>4.删除<code>bucket</code>桶</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client tmp]# s3cmd del s3:&#x2F;&#x2F;test_bucket&#x2F;fstabdelete: &#39;s3:&#x2F;&#x2F;test_bucket&#x2F;fstab&#39;#先删除文件[root@ceph-client tmp]# s3cmd rb s3:&#x2F;&#x2F;test_bucketBucket &#39;s3:&#x2F;&#x2F;test_bucket&#x2F;&#39; removed#再删除桶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> 存储 </category>
          
          <category> ceph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> 存储 </tag>
            
            <tag> 分布式存储集群 </tag>
            
            <tag> ceph </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> ceph-deploy </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux存储系列教程】ceph-mimic集群部署</title>
      <link href="/2023/05/06/105/"/>
      <url>/2023/05/06/105/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux存储系列教程】ceph-mimic集群部署"><a href="#【Linux存储系列教程】ceph-mimic集群部署" class="headerlink" title="【Linux存储系列教程】ceph-mimic集群部署"></a>【Linux存储系列教程】ceph-mimic集群部署</h1><blockquote><p><strong>上一期教程：<a href="https://www.wsjj.top/archives/104">ceph的架构和原理</a></strong><br><strong>下一期教程：<a href="https://www.wsjj.top/archives/106">ceph存储的使用</a></strong></p></blockquote><h2 id="一、实验准备"><a href="#一、实验准备" class="headerlink" title="一、实验准备"></a>一、实验准备</h2><h3 id="1-规划主机"><a href="#1-规划主机" class="headerlink" title="1.规划主机"></a>1.规划主机</h3><blockquote><p><strong>系统版本：<code>Centos7.9</code></strong><br><strong><code>IP</code>：<code>192.168.140.10</code> &#x3D;&#x3D;主机名：&#x3D;&#x3D;<code>ceph-node1</code>|<code>ceph</code>&#x3D;&#x3D;集群节点&#x3D;&#x3D;和<code>ceph-deploy</code>  &#x3D;&#x3D;硬盘：&#x3D;&#x3D;<code>/dev/sdb</code></strong><br><strong><code>IP</code>：<code>192.168.140.11</code> &#x3D;&#x3D;主机名：&#x3D;&#x3D;<code>ceph-node2</code>|<code>ceph</code>&#x3D;&#x3D;集群节点&#x3D;&#x3D;和<code>ceph-deploy</code>  &#x3D;&#x3D;硬盘：&#x3D;&#x3D;<code>/dev/sdb</code></strong><br><strong><code>IP</code>：<code>192.168.140.12</code> &#x3D;&#x3D;主机名：&#x3D;&#x3D;<code>ceph-node3</code>|<code>ceph</code>&#x3D;&#x3D;集群节点&#x3D;&#x3D;和<code>ceph-deploy</code>  &#x3D;&#x3D;硬盘：&#x3D;&#x3D;<code>/dev/sdb</code></strong><br><strong><code>IP</code>：<code>192.168.140.13</code> &#x3D;&#x3D;主机名：&#x3D;&#x3D;<code>ceph-client</code>|&#x3D;&#x3D;业务服务器&#x3D;&#x3D;</strong></p></blockquote><ul><li>修改主机名使用<code>hostnamectl set-hostname 主机名</code></li></ul><h3 id="2-所有主机关闭防火墙和SElinux、配置时间同步-重要"><a href="#2-所有主机关闭防火墙和SElinux、配置时间同步-重要" class="headerlink" title="2.所有主机关闭防火墙和SElinux、配置时间同步(重要)"></a>2.所有主机关闭防火墙和SElinux、配置时间同步(重要)</h3><blockquote><p><strong>关闭<code>防火墙</code>和<code>SElinux</code>略</strong><br><strong>先安装<code>ntpdate</code>命令，使用<code>yum install -y ntpdate</code>安装</strong><br><strong>设置时间同步：<code>ntpdate 120.25.115.20</code></strong></p></blockquote><h4 id="设置同步时间计划任务"><a href="#设置同步时间计划任务" class="headerlink" title="设置同步时间计划任务"></a>设置同步时间计划任务</h4><blockquote><p><strong>关于计划任务教程：<a href="https://www.wsjj.top/archives/57">https://www.wsjj.top/archives/57</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# crontab  -e*&#x2F;30 * * * * &#x2F;usr&#x2F;sbin&#x2F;ntpdate 120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null[root@ceph-node1 ~]# crontab  -l*&#x2F;30 * * * * &#x2F;usr&#x2F;sbin&#x2F;ntpdate 120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置免密SSH-重要"><a href="#3-配置免密SSH-重要" class="headerlink" title="3.配置免密SSH(重要)"></a>3.配置免密SSH(重要)</h3><blockquote><p><strong>在<code>ceph-node1</code>节点操作</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# mv &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;root&#x2F;.ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>写个循环，把秘钥文件拷给其他机器</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# for i in 11 12 13 14&gt; do&gt; scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.$i:&#x2F;root&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置主机名解析-重要"><a href="#4-配置主机名解析-重要" class="headerlink" title="4.配置主机名解析(重要)"></a>4.配置主机名解析(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.10 ceph-node1.linux.com ceph-node1192.168.140.11 ceph-node2.linux.com ceph-node2192.168.140.12 ceph-node3.linux.com ceph-node3192.168.140.13 ceph-client.linux.com ceph-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把hosts文件拷贝给其他机器上"><a href="#把hosts文件拷贝给其他机器上" class="headerlink" title="把hosts文件拷贝给其他机器上"></a>把hosts文件拷贝给其他机器上</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# for i in 11 12 13&gt; do&gt; scp -r &#x2F;etc&#x2F;hosts root@192.168.140.$i:&#x2F;etc&#x2F;&gt; donehosts                                                   100%  349   541.8KB&#x2F;s   00:00    hosts                                                   100%  349   258.4KB&#x2F;s   00:00    hosts                                                   100%  349   286.0KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><h3 id="1-所有主机替换默认的base源为国内，配置epel源-重要"><a href="#1-所有主机替换默认的base源为国内，配置epel源-重要" class="headerlink" title="1.所有主机替换默认的base源为国内，配置epel源(重要)"></a>1.所有主机替换默认的base源为国内，配置epel源(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node01 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo[root@ceph-node01 ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-配置ceph软件仓库-重要"><a href="#2-配置ceph软件仓库-重要" class="headerlink" title="2.配置ceph软件仓库(重要)"></a>2.配置ceph软件仓库(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;ceph.repo[ceph]name&#x3D;cephbaseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-mimic&#x2F;el7&#x2F;x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;0priority&#x3D;1 [ceph-noarch]name&#x3D;cephnoarchbaseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-mimic&#x2F;el7&#x2F;noarch&#x2F;enabled&#x3D;1gpgcheck&#x3D;0priority&#x3D;1 [ceph-source]name&#x3D;Ceph source packagesbaseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ceph&#x2F;rpm-mimic&#x2F;el7&#x2F;SRPMSenabled&#x3D;1gpgcheck&#x3D;0priority&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将软件源拷贝给其他机器-重要"><a href="#将软件源拷贝给其他机器-重要" class="headerlink" title="将软件源拷贝给其他机器(重要)"></a>将软件源拷贝给其他机器(重要)</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# for i in 11 12 13&gt; do&gt; scp -r &#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo root@192.168.140.$i:&#x2F;etc&#x2F;yum.repos.d&#x2F;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清理旧缓存，生成新的缓存"><a href="#清理旧缓存，生成新的缓存" class="headerlink" title="清理旧缓存，生成新的缓存"></a>清理旧缓存，生成新的缓存</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# for i in 10 11 12 13&gt; do&gt; ssh root@192.168.140.$i yum clean all &amp;&amp; yum makecache fast&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新系统至最新版-重要"><a href="#更新系统至最新版-重要" class="headerlink" title="更新系统至最新版(重要)"></a>更新系统至最新版(重要)</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node01 ~]# yum update -y[root@ceph-node02 ~]# yum update -y[root@ceph-node03 ~]# yum update -y[root@ceph-client ~]# yum update -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新完重启系统"><a href="#更新完重启系统" class="headerlink" title="更新完重启系统"></a>更新完重启系统</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# reboot[root@ceph-node2 ~]# reboot[root@ceph-node3 ~]# reboot[root@ceph-client ~]# reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-三台node节点主机新增一块硬盘"><a href="#3-三台node节点主机新增一块硬盘" class="headerlink" title="3.三台node节点主机新增一块硬盘"></a>3.三台node节点主机新增一块硬盘</h3><blockquote><p><strong>添加硬盘期间，虚拟机应保持关机</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/ceph09.png" alt="ceph09"></p><h2 id="三、在ceph-node1节点安装ceph-deploy自动化工具"><a href="#三、在ceph-node1节点安装ceph-deploy自动化工具" class="headerlink" title="三、在ceph-node1节点安装ceph-deploy自动化工具"></a>三、在ceph-node1节点安装ceph-deploy自动化工具</h2><blockquote><p><strong><code>ceph-deploy</code>是一个自动化工具，可以快速帮助我们安装<code>ceph</code></strong></p></blockquote><h3 id="1-安装ceph-deploy工具"><a href="#1-安装ceph-deploy工具" class="headerlink" title="1.安装ceph-deploy工具"></a>1.安装<code>ceph-deploy</code>工具</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# yum install -y ceph-deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-创建用到的目录"><a href="#2-创建用到的目录" class="headerlink" title="2.创建用到的目录"></a>2.创建用到的目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ~]# mkdir &#x2F;etc&#x2F;ceph[root@ceph-node1 ~]# cd &#x2F;etc&#x2F;ceph[root@ceph-node1 ceph]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-创建ceph集群"><a href="#3-创建ceph集群" class="headerlink" title="3.创建ceph集群"></a>3.创建ceph集群</h3><blockquote><p><strong>命令格式：<code>ceph-deploy new 主机名</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy new ceph-node1Traceback (most recent call last):  File &quot;&#x2F;usr&#x2F;bin&#x2F;ceph-deploy&quot;, line 18, in &lt;module&gt;    from ceph_deploy.cli import main  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ceph_deploy&#x2F;cli.py&quot;, line 1, in &lt;module&gt;    import pkg_resourcesImportError: No module named pkg_resources#可以看到这里报错了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>我们缺少<code>Python</code>里一个叫<code>distribute</code>的模块，使用<code>pip</code>命令安装即可！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# pip install distribute-bash: pip: 未找到命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>提示我们未找到命令，安装<code>python-pip</code>即可解决</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# yum install -y python-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装完pip命令后，返回安装distribute模块"><a href="#安装完pip命令后，返回安装distribute模块" class="headerlink" title="安装完pip命令后，返回安装distribute模块"></a>安装完pip命令后，返回安装<code>distribute</code>模块</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# pip install distribute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装完模块后，即可创建ceph集群"><a href="#安装完模块后，即可创建ceph集群" class="headerlink" title="安装完模块后，即可创建ceph集群"></a>安装完模块后，即可创建<code>ceph</code>集群</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy new ceph-node1#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy new ceph-node1[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  func                          : &lt;function new at 0x7fae31615ed8&gt;[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fae30d916c8&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  ssh_copykey                   : True[ceph_deploy.cli][INFO  ]  mon                           : [&#39;ceph-node1&#39;][ceph_deploy.cli][INFO  ]  public_network                : None[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  cluster_network               : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.cli][INFO  ]  fsid                          : None[ceph_deploy.new][DEBUG ] Creating new cluster named ceph[ceph_deploy.new][INFO  ] making sure passwordless SSH succeeds[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph-node1][DEBUG ] find the location of an executable[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;sbin&#x2F;ip link show[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;sbin&#x2F;ip addr show[ceph-node1][DEBUG ] IP addresses found: [u&#39;192.168.140.10&#39;][ceph_deploy.new][DEBUG ] Resolving host ceph-node1[ceph_deploy.new][DEBUG ] Monitor ceph-node1 at 192.168.140.10[ceph_deploy.new][DEBUG ] Monitor initial members are [&#39;ceph-node1&#39;][ceph_deploy.new][DEBUG ] Monitor addrs are [&#39;192.168.140.10&#39;][ceph_deploy.new][DEBUG ] Creating a random mon key...[ceph_deploy.new][DEBUG ] Writing monitor keyring to ceph.mon.keyring...[ceph_deploy.new][DEBUG ] Writing initial config to ceph.conf...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>集群创建完后，会在当前目录下生成几个文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ls &#x2F;etc&#x2F;ceph&#x2F;ceph.conf  ceph-deploy-ceph.log  ceph.mon.keyring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>ceph.conf</code>集群配置文件</li><li><code>ceph.mon.keyring</code><ul><li><code>ceph monitor</code>认证的令牌</li></ul></li><li><code>ceph-deploy-ceph.log</code><ul><li><code>ceph-deploy</code>日志</li></ul></li></ul><h3 id="4-所有ceph-node节点安装ceph相关软件"><a href="#4-所有ceph-node节点安装ceph相关软件" class="headerlink" title="4.所有ceph-node节点安装ceph相关软件"></a>4.所有ceph-node节点安装ceph相关软件</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i yum install -y ceph ceph-radosgw&gt; ssh root@192.168.140.$i ceph -v&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>上面的命令和下面的命令，二选其一即可！</strong></p></blockquote><h4 id="也可以使用ceph-deploy自动化工具安装"><a href="#也可以使用ceph-deploy自动化工具安装" class="headerlink" title="也可以使用ceph-deploy自动化工具安装"></a>也可以使用ceph-deploy自动化工具安装</h4><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy install ceph-node1 ceph-node2 ceph-node3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、在reph-client节点安装ceph-common客户端"><a href="#四、在reph-client节点安装ceph-common客户端" class="headerlink" title="四、在reph-client节点安装ceph-common客户端"></a>四、在reph-client节点安装ceph-common客户端</h2><pre class="line-numbers language-none"><code class="language-none">[root@ceph-client ~]# yum install -y ceph-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、创建ceph-monitor"><a href="#五、创建ceph-monitor" class="headerlink" title="五、创建ceph monitor"></a>五、创建ceph monitor</h2><h3 id="1-编辑ceph-node1上的配置文件"><a href="#1-编辑ceph-node1上的配置文件" class="headerlink" title="1.编辑ceph-node1上的配置文件"></a>1.编辑ceph-node1上的配置文件</h3><blockquote><p><strong>配置文件路径：<code>/etc/ceph/ceph.conf</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# vim &#x2F;etc&#x2F;ceph&#x2F;ceph.conf[global]fsid &#x3D; bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1mon_initial_members &#x3D; ceph-node1mon_host &#x3D; 192.168.140.10auth_cluster_required &#x3D; cephxauth_service_required &#x3D; cephxauth_client_required &#x3D; cephx#cephx是内部协议public network &#x3D; 192.168.140.0&#x2F;24#添加此段内容，定义ceph运行在那个网段上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-monitor初始化，将ceph-node1配置为monitor"><a href="#2-monitor初始化，将ceph-node1配置为monitor" class="headerlink" title="2.monitor初始化，将ceph-node1配置为monitor"></a>2.<code>monitor</code>初始化，将<code>ceph-node1</code>配置为<code>monitor</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy mon create-initial#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy mon create-initial[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  subcommand                    : create-initial[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fc7c8687320&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  func                          : &lt;function mon at 0x7fc7c86d7500&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.cli][INFO  ]  keyrings                      : None[ceph_deploy.mon][DEBUG ] Deploying mon, cluster ceph hosts ceph-node1[ceph_deploy.mon][DEBUG ] detecting platform for host ceph-node1 ...[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph-node1][DEBUG ] find the location of an executable[ceph_deploy.mon][INFO  ] distro info: CentOS Linux 7.9.2009 Core[ceph-node1][DEBUG ] determining if provided host has same hostname in remote[ceph-node1][DEBUG ] get remote short hostname[ceph-node1][DEBUG ] deploying mon to ceph-node1[ceph-node1][DEBUG ] get remote short hostname[ceph-node1][DEBUG ] remote hostname: ceph-node1[ceph-node1][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node1][DEBUG ] create the mon path if it does not exist[ceph-node1][DEBUG ] checking for done path: &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node1&#x2F;done[ceph-node1][DEBUG ] done path does not exist: &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node1&#x2F;done[ceph-node1][INFO  ] creating keyring file: &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph-ceph-node1.mon.keyring[ceph-node1][DEBUG ] create the monitor keyring file[ceph-node1][INFO  ] Running command: ceph-mon --cluster ceph --mkfs -i ceph-node1 --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph-ceph-node1.mon.keyring --setuser 167 --setgroup 167[ceph-node1][INFO  ] unlinking keyring file &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph-ceph-node1.mon.keyring[ceph-node1][DEBUG ] create a done file to avoid re-doing the mon deployment[ceph-node1][DEBUG ] create the init path if it does not exist[ceph-node1][INFO  ] Running command: systemctl enable ceph.target[ceph-node1][INFO  ] Running command: systemctl enable ceph-mon@ceph-node1[ceph-node1][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-mon.target.wants&#x2F;ceph-mon@ceph-node1.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-mon@.service.[ceph-node1][INFO  ] Running command: systemctl start ceph-mon@ceph-node1[ceph-node1][INFO  ] Running command: ceph --cluster&#x3D;ceph --admin-daemon &#x2F;var&#x2F;run&#x2F;ceph&#x2F;ceph-mon.ceph-node1.asok mon_status[ceph-node1][DEBUG ] ********************************************************************************[ceph-node1][DEBUG ] status for monitor: mon.ceph-node1[ceph-node1][DEBUG ] &#123;[ceph-node1][DEBUG ]   &quot;election_epoch&quot;: 3, [ceph-node1][DEBUG ]   &quot;extra_probe_peers&quot;: [], [ceph-node1][DEBUG ]   &quot;feature_map&quot;: &#123;[ceph-node1][DEBUG ]     &quot;mon&quot;: [[ceph-node1][DEBUG ]       &#123;[ceph-node1][DEBUG ]         &quot;features&quot;: &quot;0x3ffddff8ffacfffb&quot;, [ceph-node1][DEBUG ]         &quot;num&quot;: 1, [ceph-node1][DEBUG ]         &quot;release&quot;: &quot;luminous&quot;[ceph-node1][DEBUG ]       &#125;[ceph-node1][DEBUG ]     ][ceph-node1][DEBUG ]   &#125;, [ceph-node1][DEBUG ]   &quot;features&quot;: &#123;[ceph-node1][DEBUG ]     &quot;quorum_con&quot;: &quot;4611087854031667195&quot;, [ceph-node1][DEBUG ]     &quot;quorum_mon&quot;: [[ceph-node1][DEBUG ]       &quot;kraken&quot;, [ceph-node1][DEBUG ]       &quot;luminous&quot;, [ceph-node1][DEBUG ]       &quot;mimic&quot;, [ceph-node1][DEBUG ]       &quot;osdmap-prune&quot;[ceph-node1][DEBUG ]     ], [ceph-node1][DEBUG ]     &quot;required_con&quot;: &quot;144115738102218752&quot;, [ceph-node1][DEBUG ]     &quot;required_mon&quot;: [[ceph-node1][DEBUG ]       &quot;kraken&quot;, [ceph-node1][DEBUG ]       &quot;luminous&quot;, [ceph-node1][DEBUG ]       &quot;mimic&quot;, [ceph-node1][DEBUG ]       &quot;osdmap-prune&quot;[ceph-node1][DEBUG ]     ][ceph-node1][DEBUG ]   &#125;, [ceph-node1][DEBUG ]   &quot;monmap&quot;: &#123;[ceph-node1][DEBUG ]     &quot;created&quot;: &quot;2023-05-06 19:37:42.410479&quot;, [ceph-node1][DEBUG ]     &quot;epoch&quot;: 1, [ceph-node1][DEBUG ]     &quot;features&quot;: &#123;[ceph-node1][DEBUG ]       &quot;optional&quot;: [], [ceph-node1][DEBUG ]       &quot;persistent&quot;: [[ceph-node1][DEBUG ]         &quot;kraken&quot;, [ceph-node1][DEBUG ]         &quot;luminous&quot;, [ceph-node1][DEBUG ]         &quot;mimic&quot;, [ceph-node1][DEBUG ]         &quot;osdmap-prune&quot;[ceph-node1][DEBUG ]       ][ceph-node1][DEBUG ]     &#125;, [ceph-node1][DEBUG ]     &quot;fsid&quot;: &quot;bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1&quot;, [ceph-node1][DEBUG ]     &quot;modified&quot;: &quot;2023-05-06 19:37:42.410479&quot;, [ceph-node1][DEBUG ]     &quot;mons&quot;: [[ceph-node1][DEBUG ]       &#123;[ceph-node1][DEBUG ]         &quot;addr&quot;: &quot;192.168.140.10:6789&#x2F;0&quot;, [ceph-node1][DEBUG ]         &quot;name&quot;: &quot;ceph-node1&quot;, [ceph-node1][DEBUG ]         &quot;public_addr&quot;: &quot;192.168.140.10:6789&#x2F;0&quot;, [ceph-node1][DEBUG ]         &quot;rank&quot;: 0[ceph-node1][DEBUG ]       &#125;[ceph-node1][DEBUG ]     ][ceph-node1][DEBUG ]   &#125;, [ceph-node1][DEBUG ]   &quot;name&quot;: &quot;ceph-node1&quot;, [ceph-node1][DEBUG ]   &quot;outside_quorum&quot;: [], [ceph-node1][DEBUG ]   &quot;quorum&quot;: [[ceph-node1][DEBUG ]     0[ceph-node1][DEBUG ]   ], [ceph-node1][DEBUG ]   &quot;rank&quot;: 0, [ceph-node1][DEBUG ]   &quot;state&quot;: &quot;leader&quot;, [ceph-node1][DEBUG ]   &quot;sync_provider&quot;: [][ceph-node1][DEBUG ] &#125;[ceph-node1][DEBUG ] ********************************************************************************[ceph-node1][INFO  ] monitor: mon.ceph-node1 is running[ceph-node1][INFO  ] Running command: ceph --cluster&#x3D;ceph --admin-daemon &#x2F;var&#x2F;run&#x2F;ceph&#x2F;ceph-mon.ceph-node1.asok mon_status[ceph_deploy.mon][INFO  ] processing monitor mon.ceph-node1[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph-node1][DEBUG ] find the location of an executable[ceph-node1][INFO  ] Running command: ceph --cluster&#x3D;ceph --admin-daemon &#x2F;var&#x2F;run&#x2F;ceph&#x2F;ceph-mon.ceph-node1.asok mon_status[ceph_deploy.mon][INFO  ] mon.ceph-node1 monitor has reached quorum![ceph_deploy.mon][INFO  ] all initial monitors are running and have formed quorum[ceph_deploy.mon][INFO  ] Running gatherkeys...[ceph_deploy.gatherkeys][INFO  ] Storing keys in temp directory &#x2F;tmp&#x2F;tmp0Qv_jH[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph-node1][DEBUG ] get remote short hostname[ceph-node1][DEBUG ] fetch remote file[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;bin&#x2F;ceph --connect-timeout&#x3D;25 --cluster&#x3D;ceph --admin-daemon&#x3D;&#x2F;var&#x2F;run&#x2F;ceph&#x2F;ceph-mon.ceph-node1.asok mon_status[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;bin&#x2F;ceph --connect-timeout&#x3D;25 --cluster&#x3D;ceph --name mon. --keyring&#x3D;&#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node1&#x2F;keyring auth get client.admin[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;bin&#x2F;ceph --connect-timeout&#x3D;25 --cluster&#x3D;ceph --name mon. --keyring&#x3D;&#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node1&#x2F;keyring auth get client.bootstrap-mds[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;bin&#x2F;ceph --connect-timeout&#x3D;25 --cluster&#x3D;ceph --name mon. --keyring&#x3D;&#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node1&#x2F;keyring auth get client.bootstrap-mgr[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;bin&#x2F;ceph --connect-timeout&#x3D;25 --cluster&#x3D;ceph --name mon. --keyring&#x3D;&#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node1&#x2F;keyring auth get client.bootstrap-osd[ceph-node1][INFO  ] Running command: &#x2F;usr&#x2F;bin&#x2F;ceph --connect-timeout&#x3D;25 --cluster&#x3D;ceph --name mon. --keyring&#x3D;&#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node1&#x2F;keyring auth get client.bootstrap-rgw[ceph_deploy.gatherkeys][INFO  ] Storing ceph.client.admin.keyring[ceph_deploy.gatherkeys][INFO  ] Storing ceph.bootstrap-mds.keyring[ceph_deploy.gatherkeys][INFO  ] Storing ceph.bootstrap-mgr.keyring[ceph_deploy.gatherkeys][INFO  ] keyring &#39;ceph.mon.keyring&#39; already exists[ceph_deploy.gatherkeys][INFO  ] Storing ceph.bootstrap-osd.keyring[ceph_deploy.gatherkeys][INFO  ] Storing ceph.bootstrap-rgw.keyring[ceph_deploy.gatherkeys][INFO  ] Destroy temp directory &#x2F;tmp&#x2F;tmp0Qv_jH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看当前目录"><a href="#3-查看当前目录" class="headerlink" title="3.查看当前目录"></a>3.查看当前目录</h3><blockquote><p><strong>可以看到，多了很多以<code>keyring</code>结尾的令牌文件</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ls &#x2F;etc&#x2F;ceph&#x2F;ceph.bootstrap-mds.keyring  ceph.bootstrap-rgw.keyring  ceph-deploy-ceph.logceph.bootstrap-mgr.keyring  ceph.client.admin.keyring   ceph.mon.keyringceph.bootstrap-osd.keyring  ceph.conf                   rbdmap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看monitor状态"><a href="#4-查看monitor状态" class="headerlink" title="4.查看monitor状态"></a>4.查看<code>monitor</code>状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph healthHEALTH_OK#正常的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-将配置信息同步到所有ceph-node节点"><a href="#5-将配置信息同步到所有ceph-node节点" class="headerlink" title="5.将配置信息同步到所有ceph-node节点"></a>5.将配置信息同步到所有<code>ceph-node</code>节点</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy admin ceph-node1 ceph-node2 ceph-node3#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy admin ceph-node1 ceph-node2 ceph-node3[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7fee074b56c8&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  client                        : [&#39;ceph-node1&#39;, &#39;ceph-node2&#39;, &#39;ceph-node3&#39;][ceph_deploy.cli][INFO  ]  func                          : &lt;function admin at 0x7fee07d44320&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-node1[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph-node1][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-node2The authenticity of host &#39;ceph-node2 (192.168.140.11)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:HBhmMUovAvw4QMjOfLJ0JwvmtX3v5ZH&#x2F;nfQlC0pjn08.ECDSA key fingerprint is MD5:ae:9f:42:eb:d0:64:0a:7b:7a:54:5e:95:88:d9:7c:bd.Are you sure you want to continue connecting (yes&#x2F;no)? yesWarning: Permanently added &#39;ceph-node2&#39; (ECDSA) to the list of known hosts.[ceph-node2][DEBUG ] connected to host: ceph-node2 [ceph-node2][DEBUG ] detect platform information from remote host[ceph-node2][DEBUG ] detect machine type[ceph-node2][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-node3The authenticity of host &#39;ceph-node3 (192.168.140.12)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:n&#x2F;u8MvqtLiuP3pccTUPh6iVRxsgVTkkcjPZXNxKGOS4.ECDSA key fingerprint is MD5:f9:45:27:33:c0:49:7d:d3:c7:53:9b:95:cd:95:8e:ea.Are you sure you want to continue connecting (yes&#x2F;no)? yesWarning: Permanently added &#39;ceph-node3&#39; (ECDSA) to the list of known hosts.[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph-node3][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-查看其他节点上的配置文件"><a href="#6-查看其他节点上的配置文件" class="headerlink" title="6.查看其他节点上的配置文件"></a>6.查看其他节点上的配置文件</h3><blockquote><p><strong>如果有配置文件，那就说明都同步过来了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node2 ~]# ls &#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring  ceph.conf  rbdmap  tmpo3DJN3[root@ceph-node3 ~]# ls &#x2F;etc&#x2F;ceph&#x2F;ceph.client.admin.keyring  ceph.conf  rbdmap  tmpY51J7A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-查看集群状态"><a href="#7-查看集群状态" class="headerlink" title="7.查看集群状态"></a>7.查看集群状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_OK   services:    mon: 1 daemons, quorum ceph-node1#只有1个monitor服务    mgr: no daemons active    osd: 0 osds: 0 up, 0 in   data:    pools:   0 pools, 0 pgs    objects: 0  objects, 0 B    usage:   0 B used, 0 B &#x2F; 0 B avail    pgs:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-新增多个monitor"><a href="#8-新增多个monitor" class="headerlink" title="8.新增多个monitor"></a>8.新增多个monitor</h3><blockquote><p><strong>防止单点故障的出现，配置多个<code>monitor</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy mon add ceph-node2[root@ceph-node1 ceph]# ceph-deploy mon add ceph-node3#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy mon add ceph-node3[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  subcommand                    : add[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f4d23612320&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  mon                           : [&#39;ceph-node3&#39;][ceph_deploy.cli][INFO  ]  func                          : &lt;function mon at 0x7f4d23662500&gt;[ceph_deploy.cli][INFO  ]  address                       : None[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.mon][INFO  ] ensuring configuration of new mon host: ceph-node3[ceph_deploy.admin][DEBUG ] Pushing admin keys and conf to ceph-node3[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph-node3][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph_deploy.mon][DEBUG ] Adding mon to cluster ceph, host ceph-node3[ceph_deploy.mon][DEBUG ] using mon address by resolving host: 192.168.140.12[ceph_deploy.mon][DEBUG ] detecting platform for host ceph-node3 ...[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph-node3][DEBUG ] find the location of an executable[ceph_deploy.mon][INFO  ] distro info: CentOS Linux 7.9.2009 Core[ceph-node3][DEBUG ] determining if provided host has same hostname in remote[ceph-node3][DEBUG ] get remote short hostname[ceph-node3][DEBUG ] adding mon to ceph-node3[ceph-node3][DEBUG ] get remote short hostname[ceph-node3][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node3][DEBUG ] create the mon path if it does not exist[ceph-node3][DEBUG ] checking for done path: &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node3&#x2F;done[ceph-node3][DEBUG ] done path does not exist: &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mon&#x2F;ceph-ceph-node3&#x2F;done[ceph-node3][INFO  ] creating keyring file: &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph-ceph-node3.mon.keyring[ceph-node3][DEBUG ] create the monitor keyring file[ceph-node3][INFO  ] Running command: ceph --cluster ceph mon getmap -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph.ceph-node3.monmap[ceph-node3][WARNIN] got monmap epoch 2[ceph-node3][INFO  ] Running command: ceph-mon --cluster ceph --mkfs -i ceph-node3 --monmap &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph.ceph-node3.monmap --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph-ceph-node3.mon.keyring --setuser 167 --setgroup 167[ceph-node3][INFO  ] unlinking keyring file &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;tmp&#x2F;ceph-ceph-node3.mon.keyring[ceph-node3][DEBUG ] create a done file to avoid re-doing the mon deployment[ceph-node3][DEBUG ] create the init path if it does not exist[ceph-node3][INFO  ] Running command: systemctl enable ceph.target[ceph-node3][INFO  ] Running command: systemctl enable ceph-mon@ceph-node3[ceph-node3][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-mon.target.wants&#x2F;ceph-mon@ceph-node3.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-mon@.service.[ceph-node3][INFO  ] Running command: systemctl start ceph-mon@ceph-node3[ceph-node3][INFO  ] Running command: ceph --cluster&#x3D;ceph --admin-daemon &#x2F;var&#x2F;run&#x2F;ceph&#x2F;ceph-mon.ceph-node3.asok mon_status[ceph-node3][WARNIN] ceph-node3 is not defined in &#96;mon initial members&#96;[ceph-node3][INFO  ] Running command: ceph --cluster&#x3D;ceph --admin-daemon &#x2F;var&#x2F;run&#x2F;ceph&#x2F;ceph-mon.ceph-node3.asok mon_status[ceph-node3][DEBUG ] ********************************************************************************[ceph-node3][DEBUG ] status for monitor: mon.ceph-node3[ceph-node3][DEBUG ] &#123;[ceph-node3][DEBUG ]   &quot;election_epoch&quot;: 1, [ceph-node3][DEBUG ]   &quot;extra_probe_peers&quot;: [[ceph-node3][DEBUG ]     &quot;192.168.140.11:6789&#x2F;0&quot;[ceph-node3][DEBUG ]   ], [ceph-node3][DEBUG ]   &quot;feature_map&quot;: &#123;[ceph-node3][DEBUG ]     &quot;mon&quot;: [[ceph-node3][DEBUG ]       &#123;[ceph-node3][DEBUG ]         &quot;features&quot;: &quot;0x3ffddff8ffacfffb&quot;, [ceph-node3][DEBUG ]         &quot;num&quot;: 1, [ceph-node3][DEBUG ]         &quot;release&quot;: &quot;luminous&quot;[ceph-node3][DEBUG ]       &#125;[ceph-node3][DEBUG ]     ][ceph-node3][DEBUG ]   &#125;, [ceph-node3][DEBUG ]   &quot;features&quot;: &#123;[ceph-node3][DEBUG ]     &quot;quorum_con&quot;: &quot;0&quot;, [ceph-node3][DEBUG ]     &quot;quorum_mon&quot;: [], [ceph-node3][DEBUG ]     &quot;required_con&quot;: &quot;144115188346404864&quot;, [ceph-node3][DEBUG ]     &quot;required_mon&quot;: [[ceph-node3][DEBUG ]       &quot;kraken&quot;, [ceph-node3][DEBUG ]       &quot;luminous&quot;, [ceph-node3][DEBUG ]       &quot;mimic&quot;, [ceph-node3][DEBUG ]       &quot;osdmap-prune&quot;[ceph-node3][DEBUG ]     ][ceph-node3][DEBUG ]   &#125;, [ceph-node3][DEBUG ]   &quot;monmap&quot;: &#123;[ceph-node3][DEBUG ]     &quot;created&quot;: &quot;2023-05-06 19:37:42.410479&quot;, [ceph-node3][DEBUG ]     &quot;epoch&quot;: 3, [ceph-node3][DEBUG ]     &quot;features&quot;: &#123;[ceph-node3][DEBUG ]       &quot;optional&quot;: [], [ceph-node3][DEBUG ]       &quot;persistent&quot;: [[ceph-node3][DEBUG ]         &quot;kraken&quot;, [ceph-node3][DEBUG ]         &quot;luminous&quot;, [ceph-node3][DEBUG ]         &quot;mimic&quot;, [ceph-node3][DEBUG ]         &quot;osdmap-prune&quot;[ceph-node3][DEBUG ]       ][ceph-node3][DEBUG ]     &#125;, [ceph-node3][DEBUG ]     &quot;fsid&quot;: &quot;bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1&quot;, [ceph-node3][DEBUG ]     &quot;modified&quot;: &quot;2023-05-06 19:48:46.297830&quot;, [ceph-node3][DEBUG ]     &quot;mons&quot;: [[ceph-node3][DEBUG ]       &#123;[ceph-node3][DEBUG ]         &quot;addr&quot;: &quot;192.168.140.10:6789&#x2F;0&quot;, [ceph-node3][DEBUG ]         &quot;name&quot;: &quot;ceph-node1&quot;, [ceph-node3][DEBUG ]         &quot;public_addr&quot;: &quot;192.168.140.10:6789&#x2F;0&quot;, [ceph-node3][DEBUG ]         &quot;rank&quot;: 0[ceph-node3][DEBUG ]       &#125;, [ceph-node3][DEBUG ]       &#123;[ceph-node3][DEBUG ]         &quot;addr&quot;: &quot;192.168.140.11:6789&#x2F;0&quot;, [ceph-node3][DEBUG ]         &quot;name&quot;: &quot;ceph-node2&quot;, [ceph-node3][DEBUG ]         &quot;public_addr&quot;: &quot;192.168.140.11:6789&#x2F;0&quot;, [ceph-node3][DEBUG ]         &quot;rank&quot;: 1[ceph-node3][DEBUG ]       &#125;, [ceph-node3][DEBUG ]       &#123;[ceph-node3][DEBUG ]         &quot;addr&quot;: &quot;192.168.140.12:6789&#x2F;0&quot;, [ceph-node3][DEBUG ]         &quot;name&quot;: &quot;ceph-node3&quot;, [ceph-node3][DEBUG ]         &quot;public_addr&quot;: &quot;192.168.140.12:6789&#x2F;0&quot;, [ceph-node3][DEBUG ]         &quot;rank&quot;: 2[ceph-node3][DEBUG ]       &#125;[ceph-node3][DEBUG ]     ][ceph-node3][DEBUG ]   &#125;, [ceph-node3][DEBUG ]   &quot;name&quot;: &quot;ceph-node3&quot;, [ceph-node3][DEBUG ]   &quot;outside_quorum&quot;: [], [ceph-node3][DEBUG ]   &quot;quorum&quot;: [], [ceph-node3][DEBUG ]   &quot;rank&quot;: 2, [ceph-node3][DEBUG ]   &quot;state&quot;: &quot;electing&quot;, [ceph-node3][DEBUG ]   &quot;sync_provider&quot;: [][ceph-node3][DEBUG ] &#125;[ceph-node3][DEBUG ] ********************************************************************************[ceph-node3][INFO  ] monitor: mon.ceph-node3 is running#可以看到这里我们新添加的monitor已经运行了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-查看集群状态"><a href="#9-查看集群状态" class="headerlink" title="9.查看集群状态"></a>9.查看集群状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_WARN            clock skew detected on mon.ceph-node2, mon.ceph-node3   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3#可以看到这里已经有3个monitor了    mgr: no daemons active    osd: 0 osds: 0 up, 0 in   data:    pools:   0 pools, 0 pgs    objects: 0  objects, 0 B    usage:   0 B used, 0 B &#x2F; 0 B avail    pgs:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、创建ceph-mgr"><a href="#六、创建ceph-mgr" class="headerlink" title="六、创建ceph mgr"></a>六、创建ceph mgr</h2><blockquote><p><code>ceph</code>自<code>L</code>版本后，添加<code>Ceph Manager Daemon</code>，简称<code>ceph-mgr</code><br>该组件的出现主要是为了缓解<code>ceph-monitor</code>的压力，分担了<code>moniotr</code>的工作，例如&#x3D;&#x3D;插件管理&#x3D;&#x3D;等，以更好的管理集群。</p></blockquote><h3 id="1-在ceph-node1节点创建ceph-mgr服务"><a href="#1-在ceph-node1节点创建ceph-mgr服务" class="headerlink" title="1.在ceph-node1节点创建ceph mgr服务"></a>1.在ceph-node1节点创建ceph mgr服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy mgr create ceph-node1#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy mgr create ceph-node1[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  mgr                           : [(&#39;ceph-node1&#39;, &#39;ceph-node1&#39;)][ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  subcommand                    : create[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f78a6252b90&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  func                          : &lt;function mgr at 0x7f78a6b33230&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.mgr][DEBUG ] Deploying mgr, cluster ceph hosts ceph-node1:ceph-node1[ceph-node1][DEBUG ] connected to host: ceph-node1 [ceph-node1][DEBUG ] detect platform information from remote host[ceph-node1][DEBUG ] detect machine type[ceph_deploy.mgr][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.mgr][DEBUG ] remote host will use systemd[ceph_deploy.mgr][DEBUG ] deploying mgr bootstrap to ceph-node1[ceph-node1][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node1][WARNIN] mgr keyring does not exist yet, creating one[ceph-node1][DEBUG ] create a keyring file[ceph-node1][DEBUG ] create path recursively if it doesn&#39;t exist[ceph-node1][INFO  ] Running command: ceph --cluster ceph --name client.bootstrap-mgr --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-mgr&#x2F;ceph.keyring auth get-or-create mgr.ceph-node1 mon allow profile mgr osd allow * mds allow * -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mgr&#x2F;ceph-ceph-node1&#x2F;keyring[ceph-node1][INFO  ] Running command: systemctl enable ceph-mgr@ceph-node1[ceph-node1][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-mgr.target.wants&#x2F;ceph-mgr@ceph-node1.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-mgr@.service.[ceph-node1][INFO  ] Running command: systemctl start ceph-mgr@ceph-node1[ceph-node1][INFO  ] Running command: systemctl enable ceph.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看集群状态"><a href="#2-查看集群状态" class="headerlink" title="2.查看集群状态"></a>2.查看集群状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_WARN            OSD count 0 &lt; osd_pool_default_size 3            clock skew detected on mon.ceph-node2, mon.ceph-node3   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3    mgr: ceph-node1(active)#可以看到mgr组件在node1运行    osd: 0 osds: 0 up, 0 in   data:    pools:   0 pools, 0 pgs    objects: 0  objects, 0 B    usage:   0 B used, 0 B &#x2F; 0 B avail    pgs:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-添加多个ceph-mgr"><a href="#3-添加多个ceph-mgr" class="headerlink" title="3.添加多个ceph mgr"></a>3.添加多个ceph mgr</h3><blockquote><p><strong>同理，避免单点故障</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy mgr create ceph-node2[root@ceph-node1 ceph]# ceph-deploy mgr create ceph-node3#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy mgr create ceph-node3[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  mgr                           : [(&#39;ceph-node3&#39;, &#39;ceph-node3&#39;)][ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  subcommand                    : create[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f5e2921db90&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  func                          : &lt;function mgr at 0x7f5e29afe230&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.mgr][DEBUG ] Deploying mgr, cluster ceph hosts ceph-node3:ceph-node3[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph_deploy.mgr][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.mgr][DEBUG ] remote host will use systemd[ceph_deploy.mgr][DEBUG ] deploying mgr bootstrap to ceph-node3[ceph-node3][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node3][WARNIN] mgr keyring does not exist yet, creating one[ceph-node3][DEBUG ] create a keyring file[ceph-node3][DEBUG ] create path recursively if it doesn&#39;t exist[ceph-node3][INFO  ] Running command: ceph --cluster ceph --name client.bootstrap-mgr --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-mgr&#x2F;ceph.keyring auth get-or-create mgr.ceph-node3 mon allow profile mgr osd allow * mds allow * -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;mgr&#x2F;ceph-ceph-node3&#x2F;keyring[ceph-node3][INFO  ] Running command: systemctl enable ceph-mgr@ceph-node3[ceph-node3][WARNIN] Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ceph-mgr.target.wants&#x2F;ceph-mgr@ceph-node3.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-mgr@.service.[ceph-node3][INFO  ] Running command: systemctl start ceph-mgr@ceph-node3[ceph-node3][INFO  ] Running command: systemctl enable ceph.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看集群状态"><a href="#4-查看集群状态" class="headerlink" title="4.查看集群状态"></a>4.查看集群状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_WARN            OSD count 0 &lt; osd_pool_default_size 3            clock skew detected on mon.ceph-node2, mon.ceph-node3   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3    mgr: ceph-node1(active), standbys: ceph-node2, ceph-node3#可以看到，已经添加了多个mgr，但是只有node1在活动，其他节点作为备用节点    osd: 0 osds: 0 up, 0 in   data:    pools:   0 pools, 0 pgs    objects: 0  objects, 0 B    usage:   0 B used, 0 B &#x2F; 0 B avail    pgs:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、创建OSD-数据盘"><a href="#七、创建OSD-数据盘" class="headerlink" title="七、创建OSD(数据盘)"></a>七、创建OSD(数据盘)</h2><h3 id="1-检查是否新增了硬盘"><a href="#1-检查是否新增了硬盘" class="headerlink" title="1.检查是否新增了硬盘"></a>1.检查是否新增了硬盘</h3><blockquote><p><strong>如果还没有新增硬盘，请回到第二步添加虚拟硬盘！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# for i in 10 11 12&gt; do&gt; ssh root@192.168.140.$i lsblk | grep sdb&gt; donesdb               8:16   0   20G  0 disk sdb               8:16   0   20G  0 disk sdb               8:16   0   20G  0 disk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-初始化磁盘，清空磁盘数据"><a href="#2-初始化磁盘，清空磁盘数据" class="headerlink" title="2.初始化磁盘，清空磁盘数据"></a>2.初始化磁盘，清空磁盘数据</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy disk zap ceph-node1 &#x2F;dev&#x2F;sdb[root@ceph-node1 ceph]# ceph-deploy disk zap ceph-node2 &#x2F;dev&#x2F;sdb[root@ceph-node1 ceph]# ceph-deploy disk zap ceph-node3 &#x2F;dev&#x2F;sdb#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy disk zap ceph-node3 &#x2F;dev&#x2F;sdb[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  debug                         : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  subcommand                    : zap[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7faf801fd830&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  host                          : ceph-node3[ceph_deploy.cli][INFO  ]  func                          : &lt;function disk at 0x7faf80238a28&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.cli][INFO  ]  disk                          : [&#39;&#x2F;dev&#x2F;sdb&#39;][ceph_deploy.osd][DEBUG ] zapping &#x2F;dev&#x2F;sdb on ceph-node3[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph-node3][DEBUG ] find the location of an executable[ceph_deploy.osd][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph-node3][DEBUG ] zeroing last few blocks of device[ceph-node3][DEBUG ] find the location of an executable[ceph-node3][INFO  ] Running command: &#x2F;usr&#x2F;sbin&#x2F;ceph-volume lvm zap &#x2F;dev&#x2F;sdb[ceph-node3][WARNIN] --&gt; Zapping: &#x2F;dev&#x2F;sdb[ceph-node3][WARNIN] --&gt; --destroy was not specified, but zapping a whole device will remove the partition table[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;dev&#x2F;sdb bs&#x3D;1M count&#x3D;10 conv&#x3D;fsync[ceph-node3][WARNIN]  stderr: 记录了10+0 的读入[ceph-node3][WARNIN] 记录了10+0 的写出[ceph-node3][WARNIN] 10485760字节(10 MB)已复制，0.0090652 秒，1.2 GB&#x2F;秒[ceph-node3][WARNIN] --&gt; Zapping successful for: &lt;Raw Device: &#x2F;dev&#x2F;sdb&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-将磁盘创建为osd"><a href="#3-将磁盘创建为osd" class="headerlink" title="3.将磁盘创建为osd"></a>3.将磁盘创建为<code>osd</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph-deploy osd create --data &#x2F;dev&#x2F;sdb ceph-node1[root@ceph-node1 ceph]# ceph-deploy osd create --data &#x2F;dev&#x2F;sdb ceph-node2[root@ceph-node1 ceph]# ceph-deploy osd create --data &#x2F;dev&#x2F;sdb ceph-node3#以下是部分提示信息[ceph_deploy.conf][DEBUG ] found configuration file at: &#x2F;root&#x2F;.cephdeploy.conf[ceph_deploy.cli][INFO  ] Invoked (2.0.1): &#x2F;usr&#x2F;bin&#x2F;ceph-deploy osd create --data &#x2F;dev&#x2F;sdb ceph-node3[ceph_deploy.cli][INFO  ] ceph-deploy options:[ceph_deploy.cli][INFO  ]  verbose                       : False[ceph_deploy.cli][INFO  ]  bluestore                     : None[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f9ffdc20950&gt;[ceph_deploy.cli][INFO  ]  cluster                       : ceph[ceph_deploy.cli][INFO  ]  fs_type                       : xfs[ceph_deploy.cli][INFO  ]  block_wal                     : None[ceph_deploy.cli][INFO  ]  default_release               : False[ceph_deploy.cli][INFO  ]  username                      : None[ceph_deploy.cli][INFO  ]  journal                       : None[ceph_deploy.cli][INFO  ]  subcommand                    : create[ceph_deploy.cli][INFO  ]  host                          : ceph-node3[ceph_deploy.cli][INFO  ]  filestore                     : None[ceph_deploy.cli][INFO  ]  func                          : &lt;function osd at 0x7f9ffdc579b0&gt;[ceph_deploy.cli][INFO  ]  ceph_conf                     : None[ceph_deploy.cli][INFO  ]  zap_disk                      : False[ceph_deploy.cli][INFO  ]  data                          : &#x2F;dev&#x2F;sdb[ceph_deploy.cli][INFO  ]  block_db                      : None[ceph_deploy.cli][INFO  ]  dmcrypt                       : False[ceph_deploy.cli][INFO  ]  overwrite_conf                : False[ceph_deploy.cli][INFO  ]  dmcrypt_key_dir               : &#x2F;etc&#x2F;ceph&#x2F;dmcrypt-keys[ceph_deploy.cli][INFO  ]  quiet                         : False[ceph_deploy.cli][INFO  ]  debug                         : False[ceph_deploy.osd][DEBUG ] Creating OSD on cluster ceph with data device &#x2F;dev&#x2F;sdb[ceph-node3][DEBUG ] connected to host: ceph-node3 [ceph-node3][DEBUG ] detect platform information from remote host[ceph-node3][DEBUG ] detect machine type[ceph-node3][DEBUG ] find the location of an executable[ceph_deploy.osd][INFO  ] Distro info: CentOS Linux 7.9.2009 Core[ceph_deploy.osd][DEBUG ] Deploying osd to ceph-node3[ceph-node3][DEBUG ] write cluster configuration to &#x2F;etc&#x2F;ceph&#x2F;&#123;cluster&#125;.conf[ceph-node3][WARNIN] osd keyring does not exist yet, creating one[ceph-node3][DEBUG ] create a keyring file[ceph-node3][DEBUG ] find the location of an executable[ceph-node3][INFO  ] Running command: &#x2F;usr&#x2F;sbin&#x2F;ceph-volume --cluster ceph lvm create --bluestore --data &#x2F;dev&#x2F;sdb[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ceph-authtool --gen-print-key[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ceph --cluster ceph --name client.bootstrap-osd --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-osd&#x2F;ceph.keyring -i - osd new 85add657-24b1-4a4f-a68b-a3d7d67d45a9[ceph-node3][WARNIN] Running command: &#x2F;usr&#x2F;sbin&#x2F;vgcreate --force --yes ceph-0b50d828-e42a-4226-8418-67369ec97bca &#x2F;dev&#x2F;sdb[ceph-node3][WARNIN]  stdout: Physical volume &quot;&#x2F;dev&#x2F;sdb&quot; successfully created.[ceph-node3][WARNIN]  stdout: Volume group &quot;ceph-0b50d828-e42a-4226-8418-67369ec97bca&quot; successfully created[ceph-node3][WARNIN] Running command: &#x2F;usr&#x2F;sbin&#x2F;lvcreate --yes -l 100%FREE -n osd-block-85add657-24b1-4a4f-a68b-a3d7d67d45a9 ceph-0b50d828-e42a-4226-8418-67369ec97bca[ceph-node3][WARNIN]  stdout: Logical volume &quot;osd-block-85add657-24b1-4a4f-a68b-a3d7d67d45a9&quot; created.[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ceph-authtool --gen-print-key[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;mount -t tmpfs tmpfs &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -h ceph:ceph &#x2F;dev&#x2F;ceph-0b50d828-e42a-4226-8418-67369ec97bca&#x2F;osd-block-85add657-24b1-4a4f-a68b-a3d7d67d45a9[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;dev&#x2F;dm-2[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ln -s &#x2F;dev&#x2F;ceph-0b50d828-e42a-4226-8418-67369ec97bca&#x2F;osd-block-85add657-24b1-4a4f-a68b-a3d7d67d45a9 &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;block[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ceph --cluster ceph --name client.bootstrap-osd --keyring &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;bootstrap-osd&#x2F;ceph.keyring mon getmap -o &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;activate.monmap[ceph-node3][WARNIN]  stderr: got monmap epoch 3[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ceph-authtool &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;keyring --create-keyring --name osd.2 --add-key AQBwRFZkRSJCJBAAWolZtOSfTuFfLaSRWlyBnA&#x3D;&#x3D;[ceph-node3][WARNIN]  stdout: creating &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;keyring[ceph-node3][WARNIN] added entity osd.2 auth auth(auid &#x3D; 18446744073709551615 key&#x3D;AQBwRFZkRSJCJBAAWolZtOSfTuFfLaSRWlyBnA&#x3D;&#x3D; with 0 caps)[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;keyring[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ceph-osd --cluster ceph --osd-objectstore bluestore --mkfs -i 2 --monmap &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;activate.monmap --keyfile - --osd-data &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F; --osd-uuid 85add657-24b1-4a4f-a68b-a3d7d67d45a9 --setuser ceph --setgroup ceph[ceph-node3][WARNIN] --&gt; ceph-volume lvm prepare successful for: &#x2F;dev&#x2F;sdb[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ceph-bluestore-tool --cluster&#x3D;ceph prime-osd-dir --dev &#x2F;dev&#x2F;ceph-0b50d828-e42a-4226-8418-67369ec97bca&#x2F;osd-block-85add657-24b1-4a4f-a68b-a3d7d67d45a9 --path &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2 --no-mon-config[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;ln -snf &#x2F;dev&#x2F;ceph-0b50d828-e42a-4226-8418-67369ec97bca&#x2F;osd-block-85add657-24b1-4a4f-a68b-a3d7d67d45a9 &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;block[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -h ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2&#x2F;block[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;dev&#x2F;dm-2[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;chown -R ceph:ceph &#x2F;var&#x2F;lib&#x2F;ceph&#x2F;osd&#x2F;ceph-2[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;systemctl enable ceph-volume@lvm-2-85add657-24b1-4a4f-a68b-a3d7d67d45a9[ceph-node3][WARNIN]  stderr: Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;ceph-volume@lvm-2-85add657-24b1-4a4f-a68b-a3d7d67d45a9.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-volume@.service.[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;systemctl enable --runtime ceph-osd@2[ceph-node3][WARNIN]  stderr: Created symlink from &#x2F;run&#x2F;systemd&#x2F;system&#x2F;ceph-osd.target.wants&#x2F;ceph-osd@2.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;ceph-osd@.service.[ceph-node3][WARNIN] Running command: &#x2F;bin&#x2F;systemctl start ceph-osd@2[ceph-node3][WARNIN] --&gt; ceph-volume lvm activate successful for osd ID: 2[ceph-node3][WARNIN] --&gt; ceph-volume lvm create successful for: &#x2F;dev&#x2F;sdb[ceph-node3][INFO  ] checking OSD status...[ceph-node3][DEBUG ] find the location of an executable[ceph-node3][INFO  ] Running command: &#x2F;bin&#x2F;ceph --cluster&#x3D;ceph osd stat --format&#x3D;json[ceph_deploy.osd][DEBUG ] Host ceph-node3 is now ready for osd use.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看集群状态-1"><a href="#4-查看集群状态-1" class="headerlink" title="4.查看集群状态"></a>4.查看集群状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_OK   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3    mgr: ceph-node1(active), standbys: ceph-node2, ceph-node3    osd: 3 osds: 3 up, 3 in#一共3个osd   data:    pools:   0 pools, 0 pgs    objects: 0  objects, 0 B    usage:   3.0 GiB used, 57 GiB &#x2F; 60 GiB avail#一共60G的空间，所有osd之和    pgs:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>如果您能坚持到这里，那么恭喜你，<code>ceph</code>基本集群环境已经部署完成了！</strong></p></blockquote><h3 id="拓展：集群节点扩容-即集群添加新节点"><a href="#拓展：集群节点扩容-即集群添加新节点" class="headerlink" title="拓展：集群节点扩容(即集群添加新节点)"></a>拓展：集群节点扩容(即集群添加新节点)</h3><ul><li>新节点配置系统基础环境(主机名解析、时间同步、ceph仓库)</li><li>新节点安装<code>ceph</code>、<code>ceph-radosgw</code>软件 </li><li>将集群文件同步给新节点<ul><li>#ceph-deploy admin &lt;新节点&gt;</li></ul></li><li>按需求在新节点上添加<code>osd</code></li></ul><h2 id="八、启用ceph-dashboard插件-可选的"><a href="#八、启用ceph-dashboard插件-可选的" class="headerlink" title="八、启用ceph dashboard插件(可选的)"></a>八、启用ceph dashboard插件(可选的)</h2><blockquote><p><strong><code>ceph dashboard</code>主要提供<code>webUI</code>界面</strong></p></blockquote><h3 id="1-确认mgr主节点"><a href="#1-确认mgr主节点" class="headerlink" title="1.确认mgr主节点"></a>1.确认mgr主节点</h3><blockquote><p><strong>以下操作将在<code>mgr</code>的主节点操作！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph -s  cluster:    id:     bf6cea08-aaf9-4f2c-9316-f1d1a66fcbc1    health: HEALTH_OK   services:    mon: 3 daemons, quorum ceph-node1,ceph-node2,ceph-node3    mgr: ceph-node1(active), standbys: ceph-node2, ceph-node3#可以看到node1是活动的主节点    osd: 3 osds: 3 up, 3 in   data:    pools:   0 pools, 0 pgs    objects: 0  objects, 0 B    usage:   3.0 GiB used, 57 GiB &#x2F; 60 GiB avail    pgs:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-开启dashboard模块"><a href="#2-开启dashboard模块" class="headerlink" title="2.开启dashboard模块"></a>2.开启<code>dashboard</code>模块</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph mgr module enable dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>如果提示<code>Error ENOENT: all mgr daemons do not support module &#39;dashboard&#39;, pass --force to force enablement</code>则需要在所有<code>mgr</code>节点安装<code>ceph-mgr-dashboard</code>软件</strong></p></blockquote><h3 id="3-查看所有模块"><a href="#3-查看所有模块" class="headerlink" title="3.查看所有模块"></a>3.查看所有模块</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph mgr module ls&#123;    &quot;enabled_modules&quot;: [#已启用的模块        &quot;balancer&quot;,        &quot;crash&quot;,        &quot;dashboard&quot;,        &quot;iostat&quot;,        &quot;restful&quot;,        &quot;status&quot;    ],    &quot;disabled_modules&quot;: [#未启用的模块        &#123;            &quot;name&quot;: &quot;hello&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;influx&quot;,            &quot;can_run&quot;: false,            &quot;error_string&quot;: &quot;influxdb python module not found&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;localpool&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;prometheus&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;selftest&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;smart&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;telegraf&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;telemetry&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;,        &#123;            &quot;name&quot;: &quot;zabbix&quot;,            &quot;can_run&quot;: true,            &quot;error_string&quot;: &quot;&quot;        &#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建自签证书"><a href="#4-创建自签证书" class="headerlink" title="4.创建自签证书"></a>4.创建自签证书</h3><blockquote><p><strong>因为<code>dashboard</code>模块的<code>web</code>界面提供<code>https</code>服务，我们需要生成<code>ssl</code>证书</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# ceph dashboard create-self-signed-certSelf-signed certificate created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-生成dashboard需要的自签证书"><a href="#5-生成dashboard需要的自签证书" class="headerlink" title="5.生成dashboard需要的自签证书"></a>5.生成<code>dashboard</code>需要的自签证书</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 ceph]# mkdir &#x2F;etc&#x2F;mgr-dashboard[root@ceph-node1 ceph]# cd &#x2F;etc&#x2F;mgr-dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 mgr-dashboard]# openssl req -new -nodes -x509 -subj &quot;&#x2F;O&#x3D;IT-ceph&#x2F;CN&#x3D;cn&quot; -days 3650 -keyout dashboard.key -out dashboard.crt -extensions v3_caGenerating a 2048 bit RSA private key...................................................+++.............................+++writing new private key to &#39;dashboard.key&#39;-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 mgr-dashboard]# lsdashboard.crt  dashboard.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-修改dashboard访问地址"><a href="#6-修改dashboard访问地址" class="headerlink" title="6.修改dashboard访问地址"></a>6.修改<code>dashboard</code>访问地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 mgr-dashboard]# ceph config set mgr mgr&#x2F;dashboard&#x2F;server_addr 192.168.140.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-修改dashboard监听端口-可选的"><a href="#7-修改dashboard监听端口-可选的" class="headerlink" title="7.修改dashboard监听端口(可选的)"></a>7.修改<code>dashboard</code>监听端口(可选的)</h3><blockquote><p><strong><code>dashboard</code>默认监听端口：<code>8443</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 mgr-dashboard]# ceph config set mgr mgr&#x2F;dashboard&#x2F;server_port 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-重启dashboard让修改生效"><a href="#8-重启dashboard让修改生效" class="headerlink" title="8.重启dashboard让修改生效"></a>8.重启<code>dashboard</code>让修改生效</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 mgr-dashboard]# ceph mgr module disable dashboard[root@ceph-node1 mgr-dashboard]# ceph mgr module enable dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-查看mgr-service状态"><a href="#9-查看mgr-service状态" class="headerlink" title="9.查看mgr service状态"></a>9.查看<code>mgr service</code>状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 mgr-dashboard]# ceph mgr services&#123;    &quot;dashboard&quot;: &quot;https:&#x2F;&#x2F;192.168.140.10:8888&#x2F;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-设置dashboard提供web界面认证的用户和密码"><a href="#10-设置dashboard提供web界面认证的用户和密码" class="headerlink" title="10.设置dashboard提供web界面认证的用户和密码"></a>10.设置<code>dashboard</code>提供<code>web</code>界面认证的用户和密码</h3><blockquote><p><strong>用户名：<code>wsjj</code> 密码：<code>redhat</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@ceph-node1 mgr-dashboard]# ceph dashboard set-login-credentials wsjj redhatUsername and password updated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-浏览器测试访问"><a href="#11-浏览器测试访问" class="headerlink" title="11.浏览器测试访问"></a>11.浏览器测试访问</h3><blockquote><p><strong>因为我们是&#x3D;&#x3D;自签证书&#x3D;&#x3D;，并不是网上公认的公有<code>CA</code>颁发的证书，所以这是正常提示！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/ceph10.png" alt="ceph10"></p><p><img src="https://www.wsjj.top/upload/2023/05/ceph12.png" alt="ceph12"></p><p><img src="https://www.wsjj.top/upload/2023/05/ceph13.png" alt="ceph13"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> 存储 </category>
          
          <category> ceph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> linux </tag>
            
            <tag> 分布式存储集群 </tag>
            
            <tag> ceph </tag>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> ceph-deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux存储系列教程】ceph的架构和原理</title>
      <link href="/2023/05/06/104/"/>
      <url>/2023/05/06/104/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux存储系列教程】ceph的架构和原理"><a href="#【Linux存储系列教程】ceph的架构和原理" class="headerlink" title="【Linux存储系列教程】ceph的架构和原理"></a>【Linux存储系列教程】ceph的架构和原理</h1><h2 id="一、ceph的介绍"><a href="#一、ceph的介绍" class="headerlink" title="一、ceph的介绍"></a>一、ceph的介绍</h2><ul><li>Ceph是一个&#x3D;&#x3D;统一&#x3D;&#x3D;的分布式存储系统，设计初衷是提供较好的性能、可靠性和可扩展性。</li><li>目前已得到众多云计算厂商的支持并被广泛应用。RedHat及OpenStack都可与Ceph整合以支持虚拟机镜像的后端存储。</li></ul><h2 id="二、ceph的特性"><a href="#二、ceph的特性" class="headerlink" title="二、ceph的特性"></a>二、ceph的特性</h2><ul><li>高性能<ul><li>采用<code>CRUSH</code>算法实现数据均衡分布</li><li>支持上千存储节点，支持TB到PB级的数据</li></ul></li><li>高可用性</li><li>高可扩展性</li><li>特性丰富<ul><li>支持三种存储接口：&#x3D;&#x3D;块存储&#x3D;&#x3D;、&#x3D;&#x3D;文件系统存储&#x3D;&#x3D;、&#x3D;&#x3D;对象存储&#x3D;&#x3D;</li><li>支持&#x3D;&#x3D;多种语言&#x3D;&#x3D;驱动</li></ul></li></ul><p><img src="https://www.wsjj.top/upload/2023/05/ceph01.png" alt="ceph01"></p><h2 id="三、ceph的核心概念"><a href="#三、ceph的核心概念" class="headerlink" title="三、ceph的核心概念"></a>三、ceph的核心概念</h2><p><img src="https://www.wsjj.top/upload/2023/05/ceph02.png" alt="ceph02"></p><h3 id="1-Monitor"><a href="#1-Monitor" class="headerlink" title="1.Monitor"></a>1.Monitor</h3><blockquote><p><strong>一个<code>ceph</code>集群需要多个<code>monitor</code>集群，它们通过<code>paxos</code>同步数据</strong><br><strong>用于保存<code>OSD</code>元数据</strong></p></blockquote><h3 id="2-OSD"><a href="#2-OSD" class="headerlink" title="2.OSD"></a>2.OSD</h3><blockquote><p><strong><code>Object Storage Device</code>对象存储设备</strong><br>**负责响应客户端请求、返回具体数据的进程 **<br><strong>一个<code>ceph</code>集群一般都存在多个<code>OSD</code></strong></p></blockquote><h3 id="3-MDS"><a href="#3-MDS" class="headerlink" title="3.MDS"></a>3.MDS</h3><blockquote><p><strong><code>Ceph Metadata Server</code>是<code>cephFS</code>依赖的元数据服务</strong></p></blockquote><h3 id="4-Object"><a href="#4-Object" class="headerlink" title="4.Object"></a>4.Object</h3><blockquote><p><strong><code>ceph</code>最底层的存储单元</strong><br><strong>每个<code>object</code>包含元数据和原始数据</strong></p></blockquote><h3 id="5-PG"><a href="#5-PG" class="headerlink" title="5.PG"></a>5.PG</h3><blockquote><p><strong><code>Placement Groups</code>一个<code>PG</code>包含多个<code>OSD</code></strong><br><strong>为了更好地分配、定位数据</strong></p></blockquote><h3 id="6-RADOS"><a href="#6-RADOS" class="headerlink" title="6.RADOS"></a>6.RADOS</h3><blockquote><p><strong><code>Reliable Automatic Distributed Object Store</code>实现数据分配、<code>Failover</code>等集群操作</strong></p></blockquote><h3 id="7-Libradio"><a href="#7-Libradio" class="headerlink" title="7.Libradio"></a>7.Libradio</h3><blockquote><p><strong>访问<code>RADIO</code>的库</strong><br><strong>提供<code>PHP</code>、<code>Ruby</code>、<code>Java</code>、<code>Python</code>、<code>C</code>和<code>C++</code>支持</strong></p></blockquote><h3 id="8-CRUSH"><a href="#8-CRUSH" class="headerlink" title="8.CRUSH"></a>8.CRUSH</h3><blockquote><p>**<code>ceph</code>使用的数据分布式算法 **</p></blockquote><h3 id="9-RBD"><a href="#9-RBD" class="headerlink" title="9.RBD"></a>9.RBD</h3><blockquote><p><strong><code>RADOS Block device</code></strong><br><strong><code>ceph</code>对外提供的块设备服务</strong></p></blockquote><h3 id="10-RGW"><a href="#10-RGW" class="headerlink" title="10.RGW"></a>10.RGW</h3><blockquote><p><strong><code>RADOS gateway</code></strong><br><strong><code>ceph</code>对外提供对象存储服务</strong></p></blockquote><h3 id="11-cephFS"><a href="#11-cephFS" class="headerlink" title="11.cephFS"></a>11.cephFS</h3><blockquote><p><strong><code>ceph file system</code></strong><br><strong><code>ceph</code>对外提供的文件系统服务</strong></p></blockquote><h2 id="四、ceph-IO流程"><a href="#四、ceph-IO流程" class="headerlink" title="四、ceph IO流程"></a>四、ceph IO流程</h2><p><img src="https://www.wsjj.top/upload/2023/05/ceph03.png" alt="ceph03"></p><h3 id="1-正常IO流程"><a href="#1-正常IO流程" class="headerlink" title="1.正常IO流程"></a>1.正常IO流程</h3><p><img src="https://www.wsjj.top/upload/2023/05/ceph04.png" alt="ceph04"></p><ol><li><code>client</code>创建<code>cluster handler</code>。</li><li><code>client</code>读取配置文件。</li><li><code>client</code>连接上<code>monitor</code>，获取集群<code>map</code>信息。</li><li><code>client</code>读写<code>io</code>根据<code>crshmap</code>算法请求对应的主<code>osd</code>数据节点。</li><li>主<code>osd</code>数据节点同时写入另外两个副本节点数据。</li><li>等待主节点以及另外两个副本节点写完数据状态。</li><li>主节点及副本节点写入状态都成功后，返回给<code>client</code>，<code>io</code>写入完成。</li></ol><h3 id="2-新主IO流程"><a href="#2-新主IO流程" class="headerlink" title="2.新主IO流程"></a>2.新主IO流程</h3><blockquote><p>如果新加入的OSD1取代了原有的 OSD4成为 Primary OSD, 由于 OSD1 上未创建 PG , 不存在数据，那么 PG 上的 I&#x2F;O 无法进行，怎样工作的呢？</p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/ceph05.png" alt="ceph05"></p><ol><li><code>client</code>连接<code>monitor</code>获取集群<code>map</code>信息。</li><li>同时新主<code>osd1</code>由于没有<code>pg</code>数据会主动上报<code>monitor</code>告知让<code>osd2</code>临时接替为主。</li><li>临时主<code>osd2</code>会把数据全量同步给新主<code>osd1</code>。</li><li><code>client IO</code>读写直接连接临时主<code>osd2</code>进行读写。</li><li><code>osd2</code>收到读写<code>io</code>，同时写入另外两副本节点。</li><li>等待<code>osd2</code>以及另外两副本写入成功。</li><li><code>osd2</code>三份数据都写入成功返回给<code>client</code>, 此时<code>client io</code>读写完毕。</li><li>如果<code>osd1</code>数据同步完毕，临时主<code>osd2</code>会交出主角色。</li><li><code>osd1</code>成为主节点，<code>osd2</code>变成副本。</li></ol><h3 id="3-ceph-IO算法流程"><a href="#3-ceph-IO算法流程" class="headerlink" title="3.ceph IO算法流程"></a>3.ceph IO算法流程</h3><p><img src="https://www.wsjj.top/upload/2023/05/ceph06.png" alt="ceph06"></p><h4 id="File用户需要读写的文件File-gt-Object映射："><a href="#File用户需要读写的文件File-gt-Object映射：" class="headerlink" title="File用户需要读写的文件File-&gt;Object映射："></a><code>File</code>用户需要读写的文件<code>File-&gt;Object</code>映射：</h4><ol><li><code>ino</code>File的元数据，File的唯一id</li><li><code>ono</code>File切分产生的某个object的序号，默认以4M切分一个块大小</li><li><code>oid</code>object id: ino + ono</li></ol><h4 id="Object是RADOS需要的对象。Ceph指定一个静态hash函数计算oid的值，将oid映射成一个近似均匀分布的伪随机值，然后和mask按位相与，得到pgid-Object-gt-PG映射："><a href="#Object是RADOS需要的对象。Ceph指定一个静态hash函数计算oid的值，将oid映射成一个近似均匀分布的伪随机值，然后和mask按位相与，得到pgid-Object-gt-PG映射：" class="headerlink" title="Object是RADOS需要的对象。Ceph指定一个静态hash函数计算oid的值，将oid映射成一个近似均匀分布的伪随机值，然后和mask按位相与，得到pgid  Object-&gt;PG映射："></a><code>Object</code>是<code>RADOS</code>需要的对象。<code>Ceph</code>指定一个静态<code>hash</code>函数计算<code>oid</code>的值，将<code>oid</code>映射成一个近似均匀分布的伪随机值，然后和<code>mask</code>按位相与，得到<code>pgid</code>  <code>Object-&gt;PG</code>映射：</h4><ol><li>hash(oid) &amp; mask-&gt; pgid </li><li>mask &#x3D; PG总数m(m为2的整数幂)-1</li></ol><h4 id="PG-Placement-Group-用途是对object的存储进行组织和位置映射-类似于redis-cluster里面的slot的概念-一个PG里面会有很多object。采用CRUSH算法，将pgid代入其中，然后得到一组OSD。PG-gt-OSD映射："><a href="#PG-Placement-Group-用途是对object的存储进行组织和位置映射-类似于redis-cluster里面的slot的概念-一个PG里面会有很多object。采用CRUSH算法，将pgid代入其中，然后得到一组OSD。PG-gt-OSD映射：" class="headerlink" title="PG(Placement Group),用途是对object的存储进行组织和位置映射, (类似于redis cluster里面的slot的概念) 一个PG里面会有很多object。采用CRUSH算法，将pgid代入其中，然后得到一组OSD。PG-&gt;OSD映射："></a>PG(Placement Group),用途是对<code>object</code>的存储进行组织和位置映射, (类似于redis cluster里面的slot的概念) 一个<code>PG</code>里面会有很多<code>object</code>。采用<code>CRUSH</code>算法，将<code>pgid</code>代入其中，然后得到一组<code>OSD</code>。<code>PG-&gt;OSD</code>映射：</h4><ol><li>CRUSH(pgid)-&gt;(osd1,osd2,osd3) 。</li></ol><h2 id="五、ceph心跳机制"><a href="#五、ceph心跳机制" class="headerlink" title="五、ceph心跳机制"></a>五、ceph心跳机制</h2><h3 id="1-OSD节点监听端口"><a href="#1-OSD节点监听端口" class="headerlink" title="1.OSD节点监听端口"></a>1.OSD节点监听端口</h3><ul><li><code>OSD</code>节点会监听<code>public</code>、<code>cluster</code>、<code>front</code>和<code>back</code>四个端口<ul><li><code>public</code>端口，监听来自<code>Monitor</code>和<code>Client</code>的连接 </li><li><code>cluster</code>端口，监听来自<code>OSD peer</code>的连接 </li><li><code>front</code>端口，供客户端连接集群使用的网卡，临时给集群内部间进行心跳</li><li><code>back</code>端口，供集群内部使用的端口，用于集群内部间进行心跳</li><li><code>hbclient</code>端口，发送<code>ping</code>心跳的<code>message</code></li></ul></li></ul><h3 id="2-OSD之间的心跳"><a href="#2-OSD之间的心跳" class="headerlink" title="2.OSD之间的心跳"></a>2.OSD之间的心跳</h3><p><img src="https://www.wsjj.top/upload/2023/05/ceph07.png" alt="ceph07"></p><ul><li>同一个<code>PG</code>内<code>OSD</code>互相心跳，他们互相发送<code>PING/PONG</code>信息。</li><li>每隔<code>6s</code>检测一次(实际会在这个基础上加一个随机时间来避免峰值)。</li><li><code>20s</code>没有检测到心跳回复，加入<code>failure</code>队列。</li></ul><h3 id="3-OSD与Monitor间的心跳"><a href="#3-OSD与Monitor间的心跳" class="headerlink" title="3.OSD与Monitor间的心跳"></a>3.OSD与Monitor间的心跳</h3><p><img src="https://www.wsjj.top/upload/2023/05/ceph08.png" alt="ceph08"></p><ul><li><code>OSD</code>有事件发生时（比如故障、PG变更）。</li><li>自身启动<code>5</code>秒内。</li><li><code>OSD</code>周期性的上报给<code>Monitor</code><ul><li><code>OSD</code>检查<code>failure_queue</code>中的伙伴<code>OSD</code>失败信息。</li><li>向<code>Monitor</code>发送失效报告，并将失败信息加入<code>failure_pending</code>队列，然后将其从<code>failure_queue</code>移除。</li><li>收到来自<code>failure_queue</code>或者<code>failure_pending</code>中的<code>OSD</code>的心跳时，将其从两个队列中移除，并告知<code>Monitor</code>取消之前的失效报告。</li><li>当发生与<code>Monitor</code>网络重连时，会将<code>failure_pending</code>中的错误报告加回到<code>failure_queue</code>中，并再次发送给<code>Monitor</code>。</li></ul></li><li><code>Monitor</code>统计下线<code>OSD</code><ul><li><code>Monitor</code>集来自<code>OSD</code>的伙伴失效报告。</li><li>当错误报告指向的<code>OSD</code>失效超过一定阈值，且有足够多的<code>OSD</code>报告其失效时，将该<code>OSD</code>下线。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> 存储 </category>
          
          <category> ceph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> linux </tag>
            
            <tag> 分布式存储集群 </tag>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux存储系列教程】glusterfs分布式文件系统</title>
      <link href="/2023/05/05/103/"/>
      <url>/2023/05/05/103/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux存储系列教程】glusterfs分布式文件系统"><a href="#【Linux存储系列教程】glusterfs分布式文件系统" class="headerlink" title="【Linux存储系列教程】glusterfs分布式文件系统"></a>【Linux存储系列教程】glusterfs分布式文件系统</h1><h2 id="一、关于分布式文件系统"><a href="#一、关于分布式文件系统" class="headerlink" title="一、关于分布式文件系统"></a>一、关于分布式文件系统</h2><ul><li>作用：<ul><li>适用于海量数据</li><li>增加数据的处理速度</li></ul></li><li>构建分布式文件存储系统常见的软件：<ul><li>hadoop, hdfs【大数据】</li><li>glusterfs【云平台】</li><li>ceph【现在比较流行】</li></ul></li></ul><h3 id="1-gluster的特性"><a href="#1-gluster的特性" class="headerlink" title="1.gluster的特性"></a>1.gluster的特性</h3><ul><li>开源的</li><li>容量达到PB级、服务器的最多达到千台  </li><li>提升数据读写速度、高用性</li><li>无元数据metadata的架构, 采用弹性hash定位数据</li><li>可以廉价的pc server上构建</li></ul><h3 id="2-gluster的结构"><a href="#2-gluster的结构" class="headerlink" title="2.gluster的结构"></a>2.gluster的结构</h3><blockquote><p><strong><code>brick</code>真实的存储空间，表现为磁盘挂载点</strong><br><strong><code>volume</code>虚拟的存储空间，用于前端业务挂载使用</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/gluster01.png" alt="gluster01"></p><h2 id="二、安装gluster分布式文件系统集群"><a href="#二、安装gluster分布式文件系统集群" class="headerlink" title="二、安装gluster分布式文件系统集群"></a>二、安装gluster分布式文件系统集群</h2><blockquote><p><strong>准备：<code>5</code>台虚拟机，<code>master</code>节点用于挂载后端<code>node</code>节点的<code>volume</code>，每台<code>node</code>节点添加<code>4</code>块虚拟硬盘</strong><br><strong>master01.linux.com 192.168.140.10</strong><br><strong>node1.linux.com 192.168.140.12</strong><br><strong>node2.linux.com 192.168.140.13</strong><br><strong>node3.linux.com 192.168.140.14</strong><br><strong>node4.linux.com 192.168.140.15</strong><br><strong>注：添加虚拟硬盘的时候，虚拟机应处于关机状态！</strong></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/05/gluster02.png" alt="gluster02"></p><h3 id="1-关闭防火墙和SElinux、设置时间同步"><a href="#1-关闭防火墙和SElinux、设置时间同步" class="headerlink" title="1.关闭防火墙和SElinux、设置时间同步"></a>1.关闭防火墙和SElinux、设置时间同步</h3><blockquote><p><strong>过程省略</strong></p></blockquote><h3 id="2-配置免密SSH"><a href="#2-配置免密SSH" class="headerlink" title="2.配置免密SSH"></a>2.配置免密SSH</h3><blockquote><p><strong>在<code>node1</code>上操作</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ssh-keygen -t rsaGenerating public&#x2F;private rsa key pair.Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa): &#x2F;root&#x2F;.ssh&#x2F;id_rsa already exists.Overwrite (y&#x2F;n)? yEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub.The key fingerprint is:SHA256:OG9ejEMDAz5S1uZbHkeU888zKWL7PmUSEKTqrsZmmLo root@node1The key&#39;s randomart image is:+---[RSA 2048]----+|    +.   o+o     ||   + .o  .&#x3D;      ||  . ooo .. +     ||   . ..&#x3D;o . o    ||      ++So   + . ||     ..+.+o o O  ||   +  . &#x3D;.oo &#x3D; o ||  o &#x3D;. o o. .    ||Eo +... .  oo.   |+----[SHA256]-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mv &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;root&#x2F;.ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.10:&#x2F;root&#x2F;[root@node1 ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.13:&#x2F;root&#x2F;[root@node1 ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.14:&#x2F;root&#x2F;[root@node1 ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.140.15:&#x2F;root&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置主机名解析"><a href="#3-配置主机名解析" class="headerlink" title="3.配置主机名解析"></a>3.配置主机名解析</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.10          master01.linux.com192.168.140.12          node1.linux.com192.168.140.13          node2.linux.com192.168.140.14          node3.linux.com192.168.140.15          node4.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把hosts文件拷贝给其他主机"><a href="#把hosts文件拷贝给其他主机" class="headerlink" title="把hosts文件拷贝给其他主机"></a>把<code>hosts</code>文件拷贝给其他主机</h4><blockquote><p><strong>利用<code>for</code>循环快速拷贝过去</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# for i in 10 13 14 15&gt; do&gt; scp &#x2F;etc&#x2F;hosts root@192.168.140.$i:&#x2F;etc&#x2F;&gt; donehosts                                                   100%  322    91.2KB&#x2F;s   00:00    hosts                                                   100%  322   132.7KB&#x2F;s   00:00    hosts                                                   100%  322   130.7KB&#x2F;s   00:00    hosts                                                   100%  322    96.9KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置gluster软件仓库"><a href="#4-配置gluster软件仓库" class="headerlink" title="4.配置gluster软件仓库"></a>4.配置gluster软件仓库</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;gluster.repo[gluster6]name&#x3D;gluster6baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;centos&#x2F;7.9.2009&#x2F;storage&#x2F;x86_64&#x2F;gluster-6enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="把仓库拷贝给其他虚拟机"><a href="#把仓库拷贝给其他虚拟机" class="headerlink" title="把仓库拷贝给其他虚拟机"></a>把仓库拷贝给其他虚拟机</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# for i in 10 13 14 15&gt; do&gt; scp &#x2F;etc&#x2F;yum.repos.d&#x2F;gluster.repo root@192.168.140.$i:&#x2F;etc&#x2F;yum.repos.d&#x2F;&gt; donegluster.repo                                            100%  122    88.0KB&#x2F;s   00:00    gluster.repo                                            100%  122   248.6KB&#x2F;s   00:00    gluster.repo                                            100%  122   196.2KB&#x2F;s   00:00    gluster.repo                                            100%  122   117.6KB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Node节点安装gluster"><a href="#5-Node节点安装gluster" class="headerlink" title="5.Node节点安装gluster"></a>5.Node节点安装gluster</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# for i in 12 13 14 15&gt; do&gt; ssh root@192.168.140.$i yum install -y glusterfs-server glusterfs-fuse glusterfs&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置开机自启动，并且检查服务运行状态"><a href="#设置开机自启动，并且检查服务运行状态" class="headerlink" title="设置开机自启动，并且检查服务运行状态"></a>设置开机自启动，并且检查服务运行状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# for i in 12 13 14 15&gt; do&gt; ssh root@192.168.140.$i systemctl enable --now glusterd&gt; ssh root@192.168.140.$i hostname; systemctl is-active glusterd&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Master节点安装gluster"><a href="#6-Master节点安装gluster" class="headerlink" title="6.Master节点安装gluster"></a>6.Master节点安装gluster</h3><blockquote><p><strong>因为我们<code>Master</code>节点只需要挂载<code>volume</code>，不需要提供服务，所以不用安装<code>glusterfs-server</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# yum install -y glusterfs glusterfs-fuse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-创建gluster集群"><a href="#7-创建gluster集群" class="headerlink" title="7.创建gluster集群"></a>7.创建gluster集群</h3><blockquote><p><strong>回到<code>Node</code>节点</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# for i in 2 3 4; do gluster peer probe node$i.linux.com; donepeer probe: success. peer probe: success. peer probe: success.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h4><blockquote><p><strong>任意一台<code>Node</code>节点都可以</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster peer statusNumber of Peers: 3Hostname: node2.linux.comUuid: 3525ea43-5105-4fdf-9733-1220b611eac0State: Peer in Cluster (Connected)#已连接Hostname: node3.linux.comUuid: d3707ddf-943c-4a09-b6fc-9933c8620835State: Peer in Cluster (Connected)#已连接Hostname: node4.linux.comUuid: 73392f76-fc7c-4fd9-809a-1697eeca3c89State: Peer in Cluster (Connected)#已连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、格式化磁盘"><a href="#三、格式化磁盘" class="headerlink" title="三、格式化磁盘"></a>三、格式化磁盘</h2><h3 id="1-格式化所有node节点后添加的4块硬盘"><a href="#1-格式化所有node节点后添加的4块硬盘" class="headerlink" title="1.格式化所有node节点后添加的4块硬盘"></a>1.格式化所有<code>node</code>节点后添加的4块硬盘</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# for i in 12 13 14 15&gt; do&gt; ssh root@192.168.140.$i mkfs -t xfs &#x2F;dev&#x2F;sdb&gt; ssh root@192.168.140.$i mkfs -t xfs &#x2F;dev&#x2F;sdc&gt; ssh root@192.168.140.$i mkfs -t xfs &#x2F;dev&#x2F;sdd&gt; ssh root@192.168.140.$i mkfs -t xfs &#x2F;dev&#x2F;sde&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建挂载点-挂载目录"><a href="#2-创建挂载点-挂载目录" class="headerlink" title="2.创建挂载点(挂载目录)"></a>2.创建挂载点(挂载目录)</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# for i in 12 13 14 15&gt; do&gt; ssh root@192.168.140.$i mkdir &#x2F;data&#123;1..4&#125;&gt; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置永久挂载"><a href="#3-配置永久挂载" class="headerlink" title="3.配置永久挂载"></a>3.配置永久挂载</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;fstab&#x2F;dev&#x2F;sdb        &#x2F;data1  xfs defaults 0 0&#x2F;dev&#x2F;sdc        &#x2F;data2  xfs defaults 0 0&#x2F;dev&#x2F;sdd        &#x2F;data3  xfs defaults 0 0&#x2F;dev&#x2F;sde        &#x2F;data4  xfs defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# df -hT&#x2F;dev&#x2F;sdb                xfs        20G   33M   20G    1% &#x2F;data1&#x2F;dev&#x2F;sdc                xfs        20G   33M   20G    1% &#x2F;data2&#x2F;dev&#x2F;sdd                xfs        20G   33M   20G    1% &#x2F;data3&#x2F;dev&#x2F;sde                xfs        20G   33M   20G    1% &#x2F;data4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他node节点配置永久挂载"><a href="#其他node节点配置永久挂载" class="headerlink" title="其他node节点配置永久挂载"></a>其他<code>node</code>节点配置永久挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;fstab&#x2F;dev&#x2F;sdb        &#x2F;data1  xfs defaults 0 0&#x2F;dev&#x2F;sdc        &#x2F;data2  xfs defaults 0 0&#x2F;dev&#x2F;sdd        &#x2F;data3  xfs defaults 0 0&#x2F;dev&#x2F;sde        &#x2F;data4  xfs defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、volume卷类型"><a href="#四、volume卷类型" class="headerlink" title="四、volume卷类型"></a>四、<code>volume</code>卷类型</h2><h3 id="1-分布式卷distributed-volume"><a href="#1-分布式卷distributed-volume" class="headerlink" title="1.分布式卷distributed volume"></a>1.分布式卷<code>distributed volume</code></h3><p><img src="https://www.wsjj.top/upload/2023/05/gluster03.png" alt="gluster03"></p><ul><li>特征: <ul><li>以单个文件为单位，分散存储到不同的<code>brick</code>上</li></ul></li><li>适用场景<ul><li>海量<code>小文件</code>存储，以增加<code>读写</code>速度</li></ul></li><li>容量<ul><li>所有<code>brick</code>之和，无<code>brick</code>数量限制</li></ul></li></ul><h4 id="A-创建brick"><a href="#A-创建brick" class="headerlink" title="A.创建brick"></a>A.创建<code>brick</code></h4><blockquote><p><strong>过程&#x3D;&#x3D;省略&#x3D;&#x3D;，刚刚我们已经&#x3D;&#x3D;提前&#x3D;&#x3D;创建过了</strong></p></blockquote><h4 id="B-创建volume卷"><a href="#B-创建volume卷" class="headerlink" title="B.创建volume卷"></a>B.创建<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume create dis_volume \&gt; node1.linux.com:&#x2F;data1&#x2F;br1 \&gt; node2.linux.com:&#x2F;data1&#x2F;br1volume create: dis_volume: success: please start the volume to access data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动volume卷"><a href="#C-启动volume卷" class="headerlink" title="C.启动volume卷"></a>C.启动<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume start dis_volumevolume start: dis_volume: success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-查看刚刚创建的volume卷信息"><a href="#D-查看刚刚创建的volume卷信息" class="headerlink" title="D.查看刚刚创建的volume卷信息"></a>D.查看刚刚创建的<code>volume</code>卷信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume info dis_volume Volume Name: dis_volumeType: DistributeVolume ID: 23331fcc-65a6-4eba-a677-166755832a88Status: StartedSnapshot Count: 0Number of Bricks: 2Transport-type: tcpBricks:Brick1: node1.linux.com:&#x2F;data1&#x2F;br1Brick2: node2.linux.com:&#x2F;data1&#x2F;br1Options Reconfigured:transport.address-family: inetnfs.disable: on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-查看当前集群存在的volume卷"><a href="#E-查看当前集群存在的volume卷" class="headerlink" title="E.查看当前集群存在的volume卷"></a>E.查看当前集群存在的<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume listdis_volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="F-Master主机测试挂载"><a href="#F-Master主机测试挂载" class="headerlink" title="F.Master主机测试挂载"></a>F.<code>Master</code>主机测试挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mkdir &#x2F;test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;fstabnode2.linux.com:&#x2F;dis_volume     &#x2F;test1  glusterfs defaults,_netdev 0 0#前面的节点写任意一个node都可以，只要在同一个集群下就可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Master测试数据读写"><a href="#Master测试数据读写" class="headerlink" title="Master测试数据读写"></a><code>Master</code>测试数据读写</h5><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# touch &#x2F;test1&#x2F;&#123;1..10&#125;.mp3[root@master01 ~]# ls &#x2F;test1&#x2F;10.mp3  1.mp3  2.mp3  3.mp3  4.mp3  5.mp3  6.mp3  7.mp3  8.mp3  9.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看后台Node节点存储情况"><a href="#查看后台Node节点存储情况" class="headerlink" title="查看后台Node节点存储情况"></a>查看后台<code>Node</code>节点存储情况</h5><blockquote><p><strong>适合海量&#x3D;&#x3D;小文件&#x3D;&#x3D;存储场景</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ls &#x2F;data1&#x2F;br1&#x2F;1.mp3  2.mp3  3.mp3  7.mp3  8.mp3[root@node2 ~]# ls &#x2F;data1&#x2F;br1&#x2F;10.mp3  4.mp3  5.mp3  6.mp3  9.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-复制卷replicate-volume"><a href="#2-复制卷replicate-volume" class="headerlink" title="2.复制卷replicate volume"></a>2.复制卷<code>replicate volume</code></h3><p><img src="https://www.wsjj.top/upload/2023/05/gluster04.png" alt="gluster04"></p><ul><li>特征<ul><li>以单个文件为单位，每个文件会被复制多份存储 </li><li>提升数据可靠性</li></ul></li><li>浪费<code>1/2</code>存储空间 </li><li><code>replicas</code>指定的复制数量与<code>brick</code>数量一致</li></ul><h4 id="A-创建brick-1"><a href="#A-创建brick-1" class="headerlink" title="A.创建brick"></a>A.创建<code>brick</code></h4><blockquote><p><strong>过程&#x3D;&#x3D;省略&#x3D;&#x3D;，刚刚我们已经提前&#x3D;&#x3D;创建&#x3D;&#x3D;过了</strong></p></blockquote><h4 id="B-创建volume卷-1"><a href="#B-创建volume卷-1" class="headerlink" title="B.创建volume卷"></a>B.创建<code>volume</code>卷</h4><blockquote><p><strong><code>replicas</code>指定的复制数量与<code>brick</code>数量一致</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume create repli_volume replica 3 \&gt; node1.linux.com:&#x2F;data2&#x2F;br1 \&gt; node2.linux.com:&#x2F;data2&#x2F;br1 \&gt; node3.linux.com:&#x2F;data2&#x2F;br1volume create: repli_volume: success: please start the volume to access data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动volume卷-1"><a href="#C-启动volume卷-1" class="headerlink" title="C.启动volume卷"></a>C.启动<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume start repli_volumevolume start: repli_volume: success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-查看volume卷信息"><a href="#D-查看volume卷信息" class="headerlink" title="D.查看volume卷信息"></a>D.查看<code>volume</code>卷信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume info repli_volume Volume Name: repli_volumeType: ReplicateVolume ID: 36df6979-e86d-467f-b7dd-9ab399c0717fStatus: StartedSnapshot Count: 0Number of Bricks: 1 x 3 &#x3D; 3#每存一份数据，将被复制成3份存到后端brick上Transport-type: tcpBricks:Brick1: node1.linux.com:&#x2F;data2&#x2F;br1Brick2: node2.linux.com:&#x2F;data2&#x2F;br1Brick3: node3.linux.com:&#x2F;data2&#x2F;br1Options Reconfigured:transport.address-family: inetnfs.disable: onperformance.client-io-threads: off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-查看当前集群所有卷组"><a href="#E-查看当前集群所有卷组" class="headerlink" title="E.查看当前集群所有卷组"></a>E.查看当前集群所有卷组</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume listdis_volumerepli_volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="F-Master节点挂载测试"><a href="#F-Master节点挂载测试" class="headerlink" title="F.Master节点挂载测试"></a>F.<code>Master</code>节点挂载测试</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mkdir &#x2F;test2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;fstabnode3.linux.com:&#x2F;repli_volume   &#x2F;test2  glusterfs defaults,_netdev 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="测试数据读写"><a href="#测试数据读写" class="headerlink" title="测试数据读写"></a>测试数据读写</h5><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# touch &#x2F;test2&#x2F;&#123;1..10&#125;.txt[root@master01 ~]# ls &#x2F;test210.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看后端Node节点"><a href="#查看后端Node节点" class="headerlink" title="查看后端Node节点"></a>查看后端<code>Node</code>节点</h5><blockquote><p><strong>可以看到数据被复制了三份</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ls &#x2F;data2&#x2F;br1&#x2F;10.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt[root@node2 ~]# ls &#x2F;data2&#x2F;br1&#x2F;10.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt[root@node3 ~]# ls &#x2F;data2&#x2F;br1&#x2F;10.txt  1.txt  2.txt  3.txt  4.txt  5.txt  6.txt  7.txt  8.txt  9.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-分布式复制卷Distributed-replicate"><a href="#3-分布式复制卷Distributed-replicate" class="headerlink" title="3.分布式复制卷Distributed-replicate"></a>3.分布式复制卷<code>Distributed-replicate</code></h3><p><img src="https://www.wsjj.top/upload/2023/05/gluster05.png" alt="gluster05"></p><ul><li>特征<ul><li>所有文件分散存储，不同的文件再进行复制</li></ul></li><li>适用场景 <ul><li>适用于小文件存储，提升可靠性</li></ul></li><li><code>brick</code>数量为<code>replica</code>参数的整倍数</li></ul><h4 id="A-创建brick-2"><a href="#A-创建brick-2" class="headerlink" title="A.创建brick"></a>A.创建<code>brick</code></h4><blockquote><p><strong>过程&#x3D;&#x3D;省略&#x3D;&#x3D;，刚刚我们已经提前&#x3D;&#x3D;创建&#x3D;&#x3D;过了</strong></p></blockquote><h4 id="B-创建volume卷-2"><a href="#B-创建volume卷-2" class="headerlink" title="B.创建volume卷"></a>B.创建<code>volume</code>卷</h4><blockquote><p><strong><code>replicas</code>指定的复制数量与<code>brick</code>数量一致</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume create dis_repli_volume replica 2 \&gt; node1.linux.com:&#x2F;data3&#x2F;br1 \&gt; node2.linux.com:&#x2F;data3&#x2F;br1 \&gt; node3.linux.com:&#x2F;data3&#x2F;br1 \&gt; node4.linux.com:&#x2F;data3&#x2F;br1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动volume卷-2"><a href="#C-启动volume卷-2" class="headerlink" title="C.启动volume卷"></a>C.启动<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume start dis_repli_volumevolume start: dis_repli_volume: success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-查看volume卷详细信息"><a href="#D-查看volume卷详细信息" class="headerlink" title="D.查看volume卷详细信息"></a>D.查看<code>volume</code>卷详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume info dis_repli_volume Volume Name: dis_repli_volumeType: Distributed-ReplicateVolume ID: aeae303f-51dd-402f-9017-29d00bc9d416Status: StartedSnapshot Count: 0Number of Bricks: 2 x 2 &#x3D; 4Transport-type: tcpBricks:Brick1: node1.linux.com:&#x2F;data3&#x2F;br1Brick2: node2.linux.com:&#x2F;data3&#x2F;br1Brick3: node3.linux.com:&#x2F;data3&#x2F;br1Brick4: node4.linux.com:&#x2F;data3&#x2F;br1Options Reconfigured:transport.address-family: inetnfs.disable: onperformance.client-io-threads: off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-查看当前集群volume卷"><a href="#E-查看当前集群volume卷" class="headerlink" title="E.查看当前集群volume卷"></a>E.查看当前集群<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume listdis_repli_volumedis_volumerepli_volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-Master节点挂载"><a href="#F-Master节点挂载" class="headerlink" title="F.Master节点挂载"></a>F.Master节点挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mkdir &#x2F;test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;fstabnode1.linux.com:&#x2F;dis_repli_volume       &#x2F;test3  glusterfs defaults,_netdev 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="测试数据读写-1"><a href="#测试数据读写-1" class="headerlink" title="测试数据读写"></a>测试数据读写</h5><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# touch &#x2F;test3&#x2F;&#123;1..10&#125;.jpg[root@master01 ~]# ls &#x2F;test310.jpg  1.jpg  2.jpg  3.jpg  4.jpg  5.jpg  6.jpg  7.jpg  8.jpg  9.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="查看后端Node节点-1"><a href="#查看后端Node节点-1" class="headerlink" title="查看后端Node节点"></a>查看后端Node节点</h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ls &#x2F;data3&#x2F;br1&#x2F;2.jpg  4.jpg  6.jpg  7.jpg  8.jpg  9.jpg[root@node2 ~]# ls &#x2F;data3&#x2F;br1&#x2F;2.jpg  4.jpg  6.jpg  7.jpg  8.jpg  9.jpg[root@node3 ~]# ls &#x2F;data3&#x2F;br1&#x2F;10.jpg  1.jpg  3.jpg  5.jpg[root@node4 ~]# ls &#x2F;data3&#x2F;br1&#x2F;10.jpg  1.jpg  3.jpg  5.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-分散卷Disperse"><a href="#4-分散卷Disperse" class="headerlink" title="4.分散卷Disperse"></a>4.分散卷<code>Disperse</code></h3><ul><li>特征: <ul><li>单个文件会被拆成多部分分散存储， 同时存储数据的校验码</li></ul></li><li>适用场景<ul><li>存储大文件，提升速度</li></ul></li><li><code>disperse</code>用于指定<code>brick</code>数量</li><li><code>redundany</code>指定用于保存校验码的<code>brick</code>数量，不指定的话，<code>gluster</code>集群会自动选定<code>brick</code>数量用于保存&#x3D;&#x3D;校验码&#x3D;&#x3D;</li></ul><h4 id="A-创建brick-3"><a href="#A-创建brick-3" class="headerlink" title="A.创建brick"></a>A.创建<code>brick</code></h4><blockquote><p><strong>过程&#x3D;&#x3D;省略&#x3D;&#x3D;，刚刚我们已经提前&#x3D;&#x3D;创建&#x3D;&#x3D;过了</strong></p></blockquote><h4 id="B-创建volume卷-3"><a href="#B-创建volume卷-3" class="headerlink" title="B.创建volume卷"></a>B.创建<code>volume</code>卷</h4><blockquote><p><strong><code>disperse</code>要和<code>brick</code>相等</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume create disperse_volume disperse 4 \&gt; node1.linux.com:&#x2F;data4&#x2F;br1 \&gt; node2.linux.com:&#x2F;data4&#x2F;br1 \&gt; node3.linux.com:&#x2F;data4&#x2F;br1 \&gt; node4.linux.com:&#x2F;data4&#x2F;br1There isn&#39;t an optimal redundancy value for this configuration. Do you want to create the volume with redundancy 1 ? (y&#x2F;n) y#如果不手动指定redundany，工具会自动帮我们按照brick的数量划分volume create: disperse_volume: success: please start the volume to access data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动volume卷-3"><a href="#C-启动volume卷-3" class="headerlink" title="C.启动volume卷"></a>C.启动<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume start disperse_volumevolume start: disperse_volume: success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-查看volume卷详细信息-1"><a href="#D-查看volume卷详细信息-1" class="headerlink" title="D.查看volume卷详细信息"></a>D.查看<code>volume</code>卷详细信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume info disperse_volume Volume Name: disperse_volumeType: DisperseVolume ID: c0aa03de-a23a-49d3-a7bc-443e938df5d4Status: StartedSnapshot Count: 0Number of Bricks: 1 x (3 + 1) &#x3D; 4#一份数据会被分成3份，其中另外1份为校验码Transport-type: tcpBricks:Brick1: node1.linux.com:&#x2F;data4&#x2F;br1Brick2: node2.linux.com:&#x2F;data4&#x2F;br1Brick3: node3.linux.com:&#x2F;data4&#x2F;br1Brick4: node4.linux.com:&#x2F;data4&#x2F;br1Options Reconfigured:transport.address-family: inetnfs.disable: on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-查看当前集群的所有volume卷"><a href="#E-查看当前集群的所有volume卷" class="headerlink" title="E.查看当前集群的所有volume卷"></a>E.查看当前集群的所有<code>volume</code>卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume listdis_repli_volumedis_volumedisperse_volumerepli_volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-Master节点挂载-1"><a href="#F-Master节点挂载-1" class="headerlink" title="F.Master节点挂载"></a>F.<code>Master</code>节点挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mkdir &#x2F;test4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;fstabnode4.linux.com:&#x2F;disperse_volume        &#x2F;test4  glusterfs defaults,_netdev 0 0#节点随便哪个都可以，只要在同一个集群下即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="测试数据读写-2"><a href="#测试数据读写-2" class="headerlink" title="测试数据读写"></a>测试数据读写</h5><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;test4&#x2F;file01 bs&#x3D;1M count&#x3D;20[root@master01 ~]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;test4&#x2F;file02 bs&#x3D;1M count&#x3D;20[root@master01 ~]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;test4&#x2F;file03 bs&#x3D;1M count&#x3D;20[root@master01 ~]# ls -lh &#x2F;test4总用量 61M-rw-r--r-- 1 root root 20M 5月   5 19:56 file01-rw-r--r-- 1 root root 20M 5月   5 19:56 file02-rw-r--r-- 1 root root 20M 5月   5 19:56 file03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看后端Node节点-2"><a href="#查看后端Node节点-2" class="headerlink" title="查看后端Node节点"></a>查看后端<code>Node</code>节点</h5><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ls -lh &#x2F;data4&#x2F;br1&#x2F;总用量 22M-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file01-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file02-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# ls -lh &#x2F;data4&#x2F;br1&#x2F;总用量 23M-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file01-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file02-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# ls -lh &#x2F;data4&#x2F;br1&#x2F;总用量 21M-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file01-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file02-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# ls -lh &#x2F;data4&#x2F;br1&#x2F;总用量 23M-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file01-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file02-rw-r--r-- 2 root root 6.7M 5月   5 19:56 file03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、扩容卷容量"><a href="#五、扩容卷容量" class="headerlink" title="五、扩容卷容量"></a>五、扩容卷容量</h2><h3 id="1-扩展卷容量"><a href="#1-扩展卷容量" class="headerlink" title="1.扩展卷容量"></a>1.扩展卷容量</h3><blockquote><p><strong>扩展分布复制卷时，添加的<code>brick</code>数量是<code>replica</code>参数的整倍数</strong></p></blockquote><h3 id="2-扩容分布式卷"><a href="#2-扩容分布式卷" class="headerlink" title="2.扩容分布式卷"></a>2.扩容分布式卷</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume add-brick dis_volume \&gt; node3.linux.com:&#x2F;data1&#x2F;br1volume add-brick: success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意扩容卷后，还要<code>rebalance</code>一下，否则新的<code>brick</code>不会存储数据</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume rebalance dis_volume start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>可以使用<code>status</code>查看状态</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume rebalance dis_volume status                                    Node Rebalanced-files          size       scanned      failures       skipped               status  run time in h:m:s                               ---------      -----------   -----------   -----------   -----------   -----------         ------------     --------------                         node2.linux.com                2        0Bytes             5             0             0            completed        0:00:00                         node3.linux.com                0        0Bytes             0             0             0            completed        0:00:00                               localhost                2        0Bytes             5             0             0            completed        0:00:00volume rebalance: dis_volume: success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Master节点测试"><a href="#3-Master节点测试" class="headerlink" title="3.Master节点测试"></a>3.Master节点测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# touch &#x2F;test1&#x2F;&#123;1..20&#125;.img[root@master01 ~]# ls &#x2F;test110.img  12.img  15.img  18.img  1.mp3   2.mp3  4.img  5.mp3  7.img  8.mp310.mp3  13.img  16.img  19.img  20.img  3.img  4.mp3  6.img  7.mp3  9.img11.img  14.img  17.img  1.img   2.img   3.mp3  5.img  6.mp3  8.img  9.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看后端Node节点"><a href="#4-查看后端Node节点" class="headerlink" title="4.查看后端Node节点"></a>4.查看后端<code>Node</code>节点</h3><blockquote><p><strong>可以看到新添的<code>node3</code>已经有数据了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ls &#x2F;data1&#x2F;br1&#x2F;11.img  12.img  13.img  15.img  16.img  17.img  18.img  1.mp3  2.mp3  3.img  5.img  8.mp3[root@node2 ~]# ls &#x2F;data1&#x2F;br1&#x2F;10.img  10.mp3  14.img  19.img  20.img  4.mp3  8.img  9.img  9.mp3[root@node3 ~]# ls &#x2F;data1&#x2F;br1&#x2F;1.img  2.img  3.mp3  4.img  5.mp3  6.img  6.mp3  7.img  7.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、缩减卷容量"><a href="#六、缩减卷容量" class="headerlink" title="六、缩减卷容量"></a>六、缩减卷容量</h2><blockquote><p><strong>缩减分布复制卷时，缩减的<code>brick</code>数量是<code>replica</code>参数的整倍数</strong></p></blockquote><h3 id="1-缩减分布式卷"><a href="#1-缩减分布式卷" class="headerlink" title="1.缩减分布式卷"></a>1.缩减分布式卷</h3><blockquote><p><strong>在缩减容量之前，一定要提前&#x3D;&#x3D;转移&#x3D;&#x3D;里面的数据，<code>gluster</code>会自动做转移数据的操作</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume remove-brick dis_volume \&gt; node3.linux.com:&#x2F;data1&#x2F;br1 start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-查看状态"><a href="#2-查看状态" class="headerlink" title="2.查看状态"></a>2.查看状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume remove-brick dis_volume node3.linux.com:&#x2F;data1&#x2F;br1 status                                    Node Rebalanced-files          size       scanned      failures       skipped               status  run time in h:m:s                               ---------      -----------   -----------   -----------   -----------   -----------         ------------     --------------                         node3.linux.com                9        0Bytes             9             0             0            completed        0:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看卷详细信息"><a href="#3-查看卷详细信息" class="headerlink" title="3.查看卷详细信息"></a>3.查看卷详细信息</h3><blockquote><p>此时<code>node3</code>并没有被踢出去</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume info dis_volume Volume Name: dis_volumeType: DistributeVolume ID: 23331fcc-65a6-4eba-a677-166755832a88Status: StartedSnapshot Count: 0Number of Bricks: 3Transport-type: tcpBricks:Brick1: node1.linux.com:&#x2F;data1&#x2F;br1Brick2: node2.linux.com:&#x2F;data1&#x2F;br1Brick3: node3.linux.com:&#x2F;data1&#x2F;br1Options Reconfigured:performance.client-io-threads: ontransport.address-family: inetnfs.disable: on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# ls &#x2F;data1&#x2F;br1&#x2F;[root@node3 ~]##确认node3上面的数据已经转移走了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-提交修改"><a href="#4-提交修改" class="headerlink" title="4.提交修改"></a>4.提交修改</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume remove-brick dis_volume node3.linux.com:&#x2F;data1&#x2F;br1 commitvolume remove-brick commit: successCheck the removed bricks to ensure all files are migrated.If files with data are found on the brick path, copy them via a gluster mount point before re-purposing the removed brick.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-再次查看卷详细信息"><a href="#5-再次查看卷详细信息" class="headerlink" title="5.再次查看卷详细信息"></a>5.再次查看卷详细信息</h3><blockquote><p><strong>此时已经没有<code>node3</code>了</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume info dis_volume Volume Name: dis_volumeType: DistributeVolume ID: 23331fcc-65a6-4eba-a677-166755832a88Status: StartedSnapshot Count: 0Number of Bricks: 2Transport-type: tcpBricks:Brick1: node1.linux.com:&#x2F;data1&#x2F;br1Brick2: node2.linux.com:&#x2F;data1&#x2F;br1Options Reconfigured:performance.client-io-threads: ontransport.address-family: inetnfs.disable: on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、替换故障卷Replace-faulty-brick"><a href="#七、替换故障卷Replace-faulty-brick" class="headerlink" title="七、替换故障卷Replace faulty brick"></a>七、替换故障卷Replace faulty brick</h2><h3 id="1-替换分布卷的brick"><a href="#1-替换分布卷的brick" class="headerlink" title="1.替换分布卷的brick"></a>1.替换分布卷的brick</h3><ul><li>添加新<code>brick</code>(不需要手动<code>rebalance</code>)</li><li>删除旧<code>brick</code></li></ul><h3 id="2-替换旧的故障卷"><a href="#2-替换旧的故障卷" class="headerlink" title="2.替换旧的故障卷"></a>2.替换旧的故障卷</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume replace-brick repli_volume node3.linux.com:&#x2F;data2&#x2F;br1 node4.linux.com:&#x2F;data2&#x2F;br1 commit force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看卷详细信息-1"><a href="#3-查看卷详细信息-1" class="headerlink" title="3.查看卷详细信息"></a>3.查看卷详细信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# gluster volume info repli_volume Volume Name: repli_volumeType: ReplicateVolume ID: 36df6979-e86d-467f-b7dd-9ab399c0717fStatus: StartedSnapshot Count: 0Number of Bricks: 1 x 3 &#x3D; 3Transport-type: tcpBricks:Brick1: node1.linux.com:&#x2F;data2&#x2F;br1Brick2: node2.linux.com:&#x2F;data2&#x2F;br1Brick3: node4.linux.com:&#x2F;data2&#x2F;br1Options Reconfigured:transport.address-family: inetnfs.disable: onperformance.client-io-threads: off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、设置卷的参数"><a href="#八、设置卷的参数" class="headerlink" title="八、设置卷的参数"></a>八、设置卷的参数</h2><pre class="line-numbers language-none"><code class="language-none">gluster volume set &lt;VOLNAME&gt; &lt;OPT-NAME&gt; &lt;OPT-VALUE&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-常用参数"><a href="#1-常用参数" class="headerlink" title="1.常用参数"></a>1.常用参数</h3><ul><li>基于IP地址认证<ul><li>auth.allow</li><li>auth.reject</li></ul></li><li>performance.write-behind-window-size<ul><li>设置写缓冲区Buffer大小，默认1M</li></ul></li><li>performance.io-thread-count<ul><li>设置卷的IO线程数量 1–64</li></ul></li><li>performance.cache-size<ul><li>设置卷的缓存大小</li></ul></li><li>performance.cache-max-file-size<ul><li>设置缓存的最大文件大小</li></ul></li><li>performance.cache-min-file-size<ul><li>设置缓存的最小文件大小</li></ul></li><li>performance.cache-refresh-timeout<ul><li>设置缓存区的刷新时间间隔, 单位秒</li></ul></li></ul><blockquote><p><strong>更多参数详情请到官网查看：<a href="https://docs.gluster.org/en/latest/Administrator-Guide/Tuning-Volume-Options/">https://docs.gluster.org/en/latest/Administrator-Guide/Tuning-Volume-Options/</a></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> 存储 </category>
          
          <category> gluster </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> gluster </tag>
            
            <tag> 分布式文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux存储系列教程】常见存储类型</title>
      <link href="/2023/05/04/102/"/>
      <url>/2023/05/04/102/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux存储系列教程】常见存储类型"><a href="#【Linux存储系列教程】常见存储类型" class="headerlink" title="【Linux存储系列教程】常见存储类型"></a>【Linux存储系列教程】常见存储类型</h1><h2 id="一、存储类型"><a href="#一、存储类型" class="headerlink" title="一、存储类型"></a>一、存储类型</h2><h3 id="1-DAS直接附加存储"><a href="#1-DAS直接附加存储" class="headerlink" title="1.DAS直接附加存储"></a>1.DAS直接附加存储</h3><ul><li>存储设备通过数据总线连接到主板 </li><li>优势：速度快</li><li>劣势:  不便于共享  </li><li>常见磁盘接口:<ul><li>SCSI接口<ul><li>320M&#x2F;s</li></ul></li><li>SATA接口<ul><li>6G&#x2F;s</li></ul></li><li>SAS接口<ul><li>6G&#x2F;s</li></ul></li><li>M.2</li><li>PCI-E</li></ul></li></ul><h3 id="2-NAS网络附加存储"><a href="#2-NAS网络附加存储" class="headerlink" title="2.NAS网络附加存储"></a>2.NAS网络附加存储</h3><ul><li>基于文件系统的共享</li><li>通过NFS协议、CIFS协议将存储空间进行共享 </li><li>实现方式:<ul><li>专业存储设备</li><li>NFS服务器(Linux)</li><li>CIFS服务器(Windows)</li></ul></li></ul><p><img src="/.work//2023/05/san01.png" alt="san01"></p><p><img src="/.work//2023/05/san02.png" alt="san02"></p><h3 id="3-SAN存储区域网络"><a href="#3-SAN存储区域网络" class="headerlink" title="3.SAN存储区域网络"></a>3.SAN存储区域网络</h3><ul><li>基于块设备的共享 </li><li>实现方式:<ul><li>专业的存储设备</li></ul></li><li>SAN类型：<ul><li>FC SAN<ul><li>光纤网络存储</li><li>SCSI协议</li></ul></li><li>IP SAN<ul><li>以太网络存储</li><li>iSCSI协议</li></ul></li></ul></li></ul><p><img src="https://www.wsjj.top/upload/2023/05/san03.png" alt="san03"></p><p><img src="https://www.wsjj.top/upload/2023/05/san04.png" alt="san04"></p><p><img src="https://www.wsjj.top/upload/2023/05/san05.png" alt="san05"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> DAS </tag>
            
            <tag> NAS </tag>
            
            <tag> SAN </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7部署SSPanel UIM前端教程</title>
      <link href="/2023/05/03/101/"/>
      <url>/2023/05/03/101/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7部署SSPanel-UIM前端教程"><a href="#Centos7部署SSPanel-UIM前端教程" class="headerlink" title="Centos7部署SSPanel UIM前端教程"></a>Centos7部署SSPanel UIM前端教程</h1><blockquote><p><strong>官方文档<a href="https://wiki.sspanel.org/#/install-using-rpm">使用 RPM 包部署 SSPanel UIM</a></strong></p></blockquote><p><strong>部署<code>LNMP</code>环境</strong></p><p><code>Linux</code>:<code>Centos7</code></p><p><code>Nginx</code>:<code>1.20</code></p><p><code>MriaDB</code>：<code>10.6</code></p><p><code>PHP</code>:<code>8.1</code></p><h2 id="一、关闭防火墙和SElinux"><a href="#一、关闭防火墙和SElinux" class="headerlink" title="一、关闭防火墙和SElinux"></a>一、关闭防火墙和SElinux</h2><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl mask firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">SELINUX&#x3D;disabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、配置Yum源和Epel源-国内源"><a href="#二、配置Yum源和Epel源-国内源" class="headerlink" title="二、配置Yum源和Epel源(国内源)"></a>二、配置Yum源和Epel源(国内源)</h2><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、安装Nginx-自己编译"><a href="#三、安装Nginx-自己编译" class="headerlink" title="三、安装Nginx(自己编译)"></a>三、安装Nginx(自己编译)</h2><blockquote><p>编译安装Nginx教程<a href="https://www.wsjj.top/archives/83">【Linux基础服务教程】Nginx的安装和介绍 </a></p></blockquote><h4 id="A-下载Nginx安装包"><a href="#A-下载Nginx安装包" class="headerlink" title="A.下载Nginx安装包"></a>A.下载Nginx安装包</h4><pre class="line-numbers language-none"><code class="language-none">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.20.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-安装必要的依赖"><a href="#B-安装必要的依赖" class="headerlink" title="B.安装必要的依赖"></a>B.安装必要的依赖</h4><pre class="line-numbers language-none"><code class="language-none">yum install -y gcc openssl-devel pcre-devel zlib-devel <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-创建Nginx临时文件目录"><a href="#C-创建Nginx临时文件目录" class="headerlink" title="C.创建Nginx临时文件目录"></a>C.创建Nginx临时文件目录</h4><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;&#123;client,proxy,fastcgi,uwsgi,scgi&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-创建Nginx用户"><a href="#D-创建Nginx用户" class="headerlink" title="D.创建Nginx用户"></a>D.创建Nginx用户</h4><pre class="line-numbers language-none"><code class="language-none">useradd -s &#x2F;sbin&#x2F;nologin nginx <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-解压Nginx"><a href="#E-解压Nginx" class="headerlink" title="E.解压Nginx"></a>E.解压Nginx</h4><pre class="line-numbers language-none"><code class="language-none">tar xf nginx-1.20.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cd nginx-1.20.2&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-编译并安装"><a href="#F-编译并安装" class="headerlink" title="F.编译并安装"></a>F.编译并安装</h4><pre class="line-numbers language-none"><code class="language-none">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-stream --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-默认路径"><a href="#G-默认路径" class="headerlink" title="G.默认路径"></a>G.默认路径</h4><p><code>/usr/local/nginx</code></p><blockquote><p>暂时不要启动<code>Nginx</code></p></blockquote><h2 id="四、安装PHP8-1"><a href="#四、安装PHP8-1" class="headerlink" title="四、安装PHP8.1"></a>四、安装PHP8.1</h2><h4 id="A-配置epel源"><a href="#A-配置epel源" class="headerlink" title="A.配置epel源"></a>A.配置epel源</h4><pre class="line-numbers language-none"><code class="language-none">yum install -y epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-配置REMI"><a href="#B-配置REMI" class="headerlink" title="B.配置REMI"></a>B.配置<code>REMI</code></h4><pre class="line-numbers language-none"><code class="language-none">yum -y install https:&#x2F;&#x2F;rpms.remirepo.net&#x2F;enterprise&#x2F;remi-release-7.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-安装yum-utils"><a href="#C-安装yum-utils" class="headerlink" title="C.安装yum-utils"></a>C.安装yum-utils</h4><pre class="line-numbers language-none"><code class="language-none">yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-安装PHP8-1"><a href="#D-安装PHP8-1" class="headerlink" title="D.安装PHP8.1"></a>D.安装PHP8.1</h4><pre class="line-numbers language-none"><code class="language-none">yum-config-manager --enable remi-php81<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum install -y php  php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json php-redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-查询PHP版本"><a href="#E-查询PHP版本" class="headerlink" title="E.查询PHP版本"></a>E.查询PHP版本</h4><pre class="line-numbers language-none"><code class="language-none">php -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>PHP 8.1.18 (cli) (built: Apr 11 2023 16:47:45) (NTS gcc x86_64)<br>Copyright (c) The PHP Group<br>Zend Engine v4.1.18, Copyright (c) Zend Technologies</p></blockquote><h4 id="F-启动PHP和Nginx"><a href="#F-启动PHP和Nginx" class="headerlink" title="F.启动PHP和Nginx"></a>F.启动PHP和Nginx</h4><blockquote><p><strong>如果想<code>Nginx</code>开机自启动，请把启动命令加入<code>rc.local</code>文件内<code>/etc/rc.d/rc.local</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">systemctl enable --now php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-修改PHP用户"><a href="#G-修改PHP用户" class="headerlink" title="G.修改PHP用户"></a>G.修改PHP用户</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">user &#x3D; nginx#把默认的apache改成nginxgroup &#x3D; nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="H-重启PHP"><a href="#H-重启PHP" class="headerlink" title="H.重启PHP"></a>H.重启PHP</h4><pre class="line-numbers language-none"><code class="language-none">systemctl restart php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="I-可以查看端口状态，是否成功启动"><a href="#I-可以查看端口状态，是否成功启动" class="headerlink" title="I.可以查看端口状态，是否成功启动"></a>I.可以查看端口状态，是否成功启动</h4><pre class="line-numbers language-none"><code class="language-none">netstat -tunlp | grep -e &quot;nginx&quot; -e &quot;php&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果没有netstat命令，请安装<code>yum install -y net-tools</code></p><p>tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6852&#x2F;nginx: master<br>tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      6845&#x2F;php-fpm: master</p></blockquote><h2 id="五、安装MariaDB10-6"><a href="#五、安装MariaDB10-6" class="headerlink" title="五、安装MariaDB10.6"></a>五、安装MariaDB10.6</h2><h3 id="1-安装MariaDB"><a href="#1-安装MariaDB" class="headerlink" title="1.安装MariaDB"></a>1.安装MariaDB</h3><h4 id="A-配置yum源"><a href="#A-配置yum源" class="headerlink" title="A.配置yum源"></a>A.配置yum源</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;yum.repos.d&#x2F;MariaDB.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[mariadb]name &#x3D; MariaDBbaseurl &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;mariadb&#x2F;yum&#x2F;10.6&#x2F;centos7-amd64gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;mariadb&#x2F;yum&#x2F;RPM-GPG-KEY-MariaDBgpgcheck&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-安装MariaDB"><a href="#B-安装MariaDB" class="headerlink" title="B.安装MariaDB"></a>B.安装MariaDB</h4><pre class="line-numbers language-none"><code class="language-none">yum install -y MariaDB-server MariaDB-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改配置文件-可选的"><a href="#C-修改配置文件-可选的" class="headerlink" title="C.修改配置文件(可选的)"></a>C.修改配置文件(可选的)</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf.d&#x2F;server.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[mysqld]server_id&#x3D;10#指定IDlog_bin&#x3D;master#开启二进制日志sql_mode&#x3D;NO_ENGINE_SUBSTITUTION#禁用严格模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-设置开机自启动"><a href="#C-设置开机自启动" class="headerlink" title="C.设置开机自启动"></a>C.设置开机自启动</h4><pre class="line-numbers language-none"><code class="language-none">systemctl enable --now mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-初始化设置MariaDB"><a href="#D-初始化设置MariaDB" class="headerlink" title="D.初始化设置MariaDB"></a>D.初始化设置MariaDB</h4><pre class="line-numbers language-none"><code class="language-none">mariadb-secure-installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Enter current password for root (enter for none):  输入当前的root密码(默认空)，直接回车<br>Set root password? [Y&#x2F;n] 设置新密码，y<br>Remove anonymous users? [Y&#x2F;n] 移除匿名用户，y<br>Disallow root login remotely? [Y&#x2F;n] 禁止root用户远程登录，y<br>Remove test database and access to it? [Y&#x2F;n] 移除测试数据库，y<br>Reload privilege tables now? [Y&#x2F;n] y</p></blockquote><h4 id="E-创建用到的库"><a href="#E-创建用到的库" class="headerlink" title="E.创建用到的库"></a>E.创建用到的库</h4><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE sspanel CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-创建用户和给予权限"><a href="#F-创建用户和给予权限" class="headerlink" title="F.创建用户和给予权限"></a>F.创建用户和给予权限</h4><pre class="line-numbers language-none"><code class="language-none">CREATE USER &#39;sspanel&#39;@&#39;localhost&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">GRANT ALL PRIVILEGES ON sspanel.* TO &#39;sspanel&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;WWW.1.com&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-刷新用户数据"><a href="#G-刷新用户数据" class="headerlink" title="G.刷新用户数据"></a>G.刷新用户数据</h4><pre class="line-numbers language-none"><code class="language-none">FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="H-退出数据库"><a href="#H-退出数据库" class="headerlink" title="H.退出数据库"></a>H.退出数据库</h4><pre class="line-numbers language-none"><code class="language-none">exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、安装SSPanel-UIM"><a href="#六、安装SSPanel-UIM" class="headerlink" title="六、安装SSPanel UIM"></a>六、安装SSPanel UIM</h2><h3 id="1-配置Nginx"><a href="#1-配置Nginx" class="headerlink" title="1.配置Nginx"></a>1.配置Nginx</h3><h4 id="A-创建网页目录"><a href="#A-创建网页目录" class="headerlink" title="A.创建网页目录"></a>A.创建网页目录</h4><blockquote><p><strong>我这里在根目录创建<code>VPN</code>目录做演示</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;vpn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="A-创建子配置文件目录"><a href="#A-创建子配置文件目录" class="headerlink" title="A.创建子配置文件目录"></a>A.创建子配置文件目录</h4><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-创建子配置文件"><a href="#B-创建子配置文件" class="headerlink" title="B.创建子配置文件"></a>B.创建子配置文件</h4><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;你设置的网站域名.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">server &#123;          listen 80;        listen [::]:80;        root &#x2F;path&#x2F;to&#x2F;your&#x2F;site&#x2F;public; #你的站点文件路径 + &#x2F;public        index index.php index.html;        server_name 你设置的网站域名;        location &#x2F; &#123;            try_files $uri &#x2F;index.php$is_args$args;        &#125;        location ~ \.php$ &#123;            include fastcgi_params;            fastcgi_pass php-fpm;#如果检测这里报错，请更换为IP+端口，比如127.0.0.1:9000            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;            fastcgi_param PATH_INFO $fastcgi_path_info;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面是官方的，下面是我自己改的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">server &#123;        listen 80;        listen [::]:80; #这里的IPV6地址根据情况可以不写        root &#x2F;vpn&#x2F;SSPanel-Uim&#x2F;public;        access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;vpn_access.log main;   #指定访问日志               error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;vpn_error.log error;#指定错误日志        index index.php index.html;        server_name vpn.wsjj.com;        location &#x2F; &#123;            try_files $uri &#x2F;index.php$is_args$args;        &#125;        location ~ \.php$ &#123;            root           &#x2F;vpn&#x2F;SSPanel-Uim&#x2F;public;            fastcgi_pass   127.0.0.1:9000;            fastcgi_index  index.php;            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;            fastcgi_param PATH_INFO $fastcgi_path_info;            include        fastcgi_params;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果您跟我写的配置文件一样定义的<code>日志</code>，那么就需要创建日志需要存放的目录</p></blockquote><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;var&#x2F;log&#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改主配置文件"><a href="#C-修改主配置文件" class="headerlink" title="C.修改主配置文件"></a>C.修改主配置文件</h4><blockquote><p>把我们刚刚写好的子配置文件引用到主配置文件内</p><p>记住，如果跟我一样，定义了日志，请写到日志的下面！</p></blockquote><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conflog_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;#如果您写的配置文件跟我一样，请把Nginx官方的日志变量，前面的注释删除，并且把下面的include写到日志变量的下面！include &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-检查配置文件"><a href="#D-检查配置文件" class="headerlink" title="D.检查配置文件"></a>D.检查配置文件</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -tnginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is oknginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-重新加载配置文件"><a href="#E-重新加载配置文件" class="headerlink" title="E.重新加载配置文件"></a>E.重新加载配置文件</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-前往网站根目录下载需要的文件"><a href="#2-前往网站根目录下载需要的文件" class="headerlink" title="2.前往网站根目录下载需要的文件"></a>2.前往网站根目录下载需要的文件</h3><h4 id="A-前往网站根目录"><a href="#A-前往网站根目录" class="headerlink" title="A.前往网站根目录"></a>A.前往网站根目录</h4><pre class="line-numbers language-none"><code class="language-none">cd 你的站点目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-安装Git环境"><a href="#B-安装Git环境" class="headerlink" title="B.安装Git环境"></a>B.安装Git环境</h4><blockquote><p><strong>如果提示找不到包，请配置<code>epel</code>源！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">yum install -y git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-克隆项目"><a href="#C-克隆项目" class="headerlink" title="C.克隆项目"></a>C.克隆项目</h4><pre class="line-numbers language-none"><code class="language-none">git clone -b dev https:&#x2F;&#x2F;github.com&#x2F;Anankke&#x2F;SSPanel-Uim.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cd SSPanel-Uim&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git config core.filemode false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;getcomposer.org&#x2F;installer -O composer.phar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>如果没有<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">php composer.phar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">php composer.phar install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-给予网页目录权限"><a href="#D-给予网页目录权限" class="headerlink" title="D.给予网页目录权限"></a>D.给予网页目录权限</h4><pre class="line-numbers language-none"><code class="language-none">chmod -R 755 &#x2F;你的网页目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-修改属主和属组"><a href="#E-修改属主和属组" class="headerlink" title="E.修改属主和属组"></a>E.修改属主和属组</h4><pre class="line-numbers language-none"><code class="language-none">chown -R nginx.nginx &#x2F;你的网页目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-修改数据库连接信息"><a href="#F-修改数据库连接信息" class="headerlink" title="F.修改数据库连接信息"></a>F.修改数据库连接信息</h4><pre class="line-numbers language-none"><code class="language-none">cp config&#x2F;.config.example.php config&#x2F;.config.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cp config&#x2F;appprofile.example.php config&#x2F;appprofile.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim config&#x2F;.config.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$_ENV[&#39;db_driver&#39;]    &#x3D; &#39;mysql&#39;;$_ENV[&#39;db_host&#39;]      &#x3D; &#39;localhost&#39;;$_ENV[&#39;db_socket&#39;]    &#x3D; &#39;&#39;;$_ENV[&#39;db_database&#39;]  &#x3D; &#39;sspanel&#39;;           &#x2F;&#x2F;数据库名$_ENV[&#39;db_username&#39;]  &#x3D; &#39;sspanel&#39;;              &#x2F;&#x2F;数据库用户名$_ENV[&#39;db_password&#39;]  &#x3D; &#39;WWW.1.com&#39;;           &#x2F;&#x2F;用户名对应的密码$_ENV[&#39;db_port&#39;]      &#x3D; &#39;3306&#39;;              &#x2F;&#x2F;端口#高级$_ENV[&#39;db_charset&#39;]   &#x3D; &#39;utf8mb4&#39;;$_ENV[&#39;db_collation&#39;] &#x3D; &#39;utf8mb4_unicode_ci&#39;;$_ENV[&#39;db_prefix&#39;]    &#x3D; &#39;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>仅展示修改数据库的地方，其他地方按需修改</strong></p></blockquote><h4 id="G-站点初始化"><a href="#G-站点初始化" class="headerlink" title="G.站点初始化"></a>G.站点初始化</h4><pre class="line-numbers language-none"><code class="language-none">php xcat Migration newphp xcat Tool importAllSettingsphp xcat Tool createAdminphp xcat ClientDownload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-设置计划任务"><a href="#H-设置计划任务" class="headerlink" title="H.设置计划任务"></a>H.设置计划任务</h4><pre class="line-numbers language-none"><code class="language-none">crontab -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong><code>/vpn/</code>为你的网页目录</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">*&#x2F;5 * * * * &#x2F;usr&#x2F;bin&#x2F;php &#x2F;vpn&#x2F;sspanel&#x2F;xcat  Cron*&#x2F;1 * * * * &#x2F;usr&#x2F;bin&#x2F;php &#x2F;vpn&#x2F;sspanel&#x2F;xcat  Job CheckJob0 *&#x2F;1 * * * &#x2F;usr&#x2F;bin&#x2F;php &#x2F;vpn&#x2F;sspanel&#x2F;xcat  Job UserJob0 0 * * * &#x2F;usr&#x2F;bin&#x2F;php -n &#x2F;vpn&#x2F;sspanel&#x2F;xcat Job DailyJob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以下是可选的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">5 0 * * * &#x2F;usr&#x2F;bin&#x2F;php &#x2F;vpn&#x2F;sspanel&#x2F;xcat FinanceMail day 6 0 * * 0 &#x2F;usr&#x2F;bin&#x2F;php &#x2F;vpn&#x2F;sspanel&#x2F;xcat FinanceMail week7 0 1 * * &#x2F;usr&#x2F;bin&#x2F;php &#x2F;vpn&#x2F;sspanel&#x2F;xcat FinanceMail month*&#x2F;1 * * * * &#x2F;usr&#x2F;bin&#x2F;php &#x2F;vpn&#x2F;sspanel&#x2F;xcat DetectGFW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sspanel </tag>
            
            <tag> 分享 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux集群系列教程】keepalived高可用集群</title>
      <link href="/2023/04/27/100/"/>
      <url>/2023/04/27/100/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux集群系列教程】keepalived高可用集群"><a href="#【Linux集群系列教程】keepalived高可用集群" class="headerlink" title="【Linux集群系列教程】keepalived高可用集群"></a>【Linux集群系列教程】keepalived高可用集群</h1><h2 id="一、keepalived介绍"><a href="#一、keepalived介绍" class="headerlink" title="一、keepalived介绍"></a>一、keepalived介绍</h2><blockquote><p><strong><code>keepalived</code>基于<code>vrrp</code>(虚拟冗余路由)协议开发</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/keep01.png" alt="keep01"></p><h2 id="二、案例1：keepalived高可用集群MySQL"><a href="#二、案例1：keepalived高可用集群MySQL" class="headerlink" title="二、案例1：keepalived高可用集群MySQL"></a>二、案例1：<code>keepalived</code>高可用集群<code>MySQL</code></h2><blockquote><p><strong>上一期教程：<a href="https://www.wsjj.top/archives/99">HAProxy负载均衡集群</a></strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/keep02.png" alt="keep02"></p><blockquote><p><code>192.168.140.10</code>作为<code>Nginx</code>服务器，反向代理到后台<code>MySQL</code>，并且作为<code>主</code>调度器<br><code>192.168.140.11</code>作为<code>Nginx</code>服务器，反向代理到后台<code>MySQL</code>，并且作为<code>备用</code>调度器<br><code>192.168.140.12</code>作为<code>MySQL</code>数据库，配置<code>双主</code>环境<br><code>192.168.140.13</code>作为<code>MySQL</code>数据库，配置<code>双主</code>环境</p></blockquote><h3 id="1-关闭防火墙和SElinux、配置时间同步-重要"><a href="#1-关闭防火墙和SElinux、配置时间同步-重要" class="headerlink" title="1.关闭防火墙和SElinux、配置时间同步(重要)"></a>1.关闭防火墙和SElinux、配置时间同步(重要)</h3><blockquote><p><strong>务必同步时间！否则会出现<code>脑裂</code>现象！</strong></p></blockquote><h3 id="2-配置MySQL双主复制环境"><a href="#2-配置MySQL双主复制环境" class="headerlink" title="2.配置MySQL双主复制环境"></a>2.配置<code>MySQL</code>双主复制环境</h3><blockquote><p><strong><code>MySQL5.7</code>安装教程：<a href="https://www.wsjj.top/archives/65">https://www.wsjj.top/archives/65</a></strong><br><strong><code>MySQL5.7</code>配置<code>双主</code>复制环境教程：<a href="https://www.wsjj.top/archives/76">https://www.wsjj.top/archives/76</a></strong></p></blockquote><h3 id="3-查看MySQL数据库双主复制状态"><a href="#3-查看MySQL数据库双主复制状态" class="headerlink" title="3.查看MySQL数据库双主复制状态"></a>3.查看<code>MySQL</code>数据库<code>双主</code>复制状态</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.140.13                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000002          Read_Master_Log_Pos: 640               Relay_Log_File: node1-relay-bin.000004                Relay_Log_Pos: 445        Relay_Master_Log_File: master.000002             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 640              Relay_Log_Space: 1187              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 13                  Master_UUID: bda75efb-e4ac-11ed-b6fd-000c29d2b7fd             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: bda75efb-e4ac-11ed-b6fd-000c29d2b7fd:1-2            Executed_Gtid_Set: 95a397fa-e4ac-11ed-8f67-000c290f55d2:1-4,bda75efb-e4ac-11ed-b6fd-000c29d2b7fd:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.140.12                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000002          Read_Master_Log_Pos: 1038               Relay_Log_File: node2-relay-bin.000004                Relay_Log_Pos: 745        Relay_Master_Log_File: master.000002             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 1038              Relay_Log_Space: 1743              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 12                  Master_UUID: 95a397fa-e4ac-11ed-8f67-000c290f55d2             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 95a397fa-e4ac-11ed-8f67-000c290f55d2:1-4            Executed_Gtid_Set: 95a397fa-e4ac-11ed-8f67-000c290f55d2:1-4,bda75efb-e4ac-11ed-b6fd-000c29d2b7fd:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置Nginx"><a href="#4-配置Nginx" class="headerlink" title="4.配置Nginx"></a>4.配置Nginx</h3><h4 id="A-安装Nginx"><a href="#A-安装Nginx" class="headerlink" title="A.安装Nginx"></a>A.安装Nginx</h4><blockquote><p><strong><code>Nginx</code>的安装教程地址：<a href="https://www.wsjj.top/archives/83">https://www.wsjj.top/archives/83</a></strong></p></blockquote><h4 id="B-修改Nginx配置文件"><a href="#B-修改Nginx配置文件" class="headerlink" title="B.修改Nginx配置文件"></a>B.修改<code>Nginx</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf#user  nobody;worker_processes  auto;#error_log  logs&#x2F;error.log;#error_log  logs&#x2F;error.log  notice;#error_log  logs&#x2F;error.log  info;#pid        logs&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;stream &#123;   upstream dbserver &#123;        server 192.168.140.12:3306;        server 192.168.140.13:3306;   &#125;   server &#123;        listen 3306;        proxy_pass dbserver;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf#user  nobody;worker_processes  auto;#error_log  logs&#x2F;error.log;#error_log  logs&#x2F;error.log  notice;#error_log  logs&#x2F;error.log  info;#pid        logs&#x2F;nginx.pid;events &#123;    worker_connections  1024;&#125;stream &#123;   upstream dbserver &#123;        server 192.168.140.12:3306;        server 192.168.140.13:3306;   &#125;   server &#123;        listen 3306;        proxy_pass dbserver;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动Nginx"><a href="#C-启动Nginx" class="headerlink" title="C.启动Nginx"></a>C.启动Nginx</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx[root@master02 ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-回到数据库创建授权用户"><a href="#D-回到数据库创建授权用户" class="headerlink" title="D.回到数据库创建授权用户"></a>D.回到数据库创建授权用户</h4><blockquote><p><strong>因为我们配置了<code>双主</code>环境，所以<code>任意一台</code>上创建即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant all on *.* to &#39;admin&#39;@&#39;192.168.140.%&#39; identified by &#39;WWW.1.com&#39;; Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-Windows连接测试"><a href="#E-Windows连接测试" class="headerlink" title="E.Windows连接测试"></a>E.<code>Windows</code>连接测试</h4><p><img src="https://www.wsjj.top//upload/2023/04/keep03.png" alt="keep03"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep04.png" alt="keep04"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep05.png" alt="keep05"></p><h3 id="5-配置keeplived"><a href="#5-配置keeplived" class="headerlink" title="5.配置keeplived"></a>5.配置<code>keeplived</code></h3><h4 id="A-安装keeplived"><a href="#A-安装keeplived" class="headerlink" title="A.安装keeplived"></a>A.安装<code>keeplived</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# yum install -y keepalived[root@master02 ~]# yum install -y keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-编写脚本用于检测Nginx提供的3306端口"><a href="#B-编写脚本用于检测Nginx提供的3306端口" class="headerlink" title="B.编写脚本用于检测Nginx提供的3306端口"></a>B.编写<code>脚本</code>用于检测<code>Nginx</code>提供的<code>3306</code>端口</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;root&#x2F;nginx_mysql.sh#! &#x2F;bin&#x2F;bashnetstat -tunlp | grep 3306 &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -ne 0 ]; then    systemctl stop keepalivedfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-给予执行权限"><a href="#C-给予执行权限" class="headerlink" title="C.给予执行权限"></a>C.给予执行权限</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# chmod 777 &#x2F;root&#x2F;nginx_mysql.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-将脚本拷贝给备用调度器"><a href="#D-将脚本拷贝给备用调度器" class="headerlink" title="D.将脚本拷贝给备用调度器"></a>D.将脚本拷贝给<code>备用</code>调度器</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# scp  &#x2F;root&#x2F;nginx_mysql.sh root@192.168.140.11:&#x2F;root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="给予执行权限"><a href="#给予执行权限" class="headerlink" title="给予执行权限"></a>给予执行权限</h5><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# chmod 777 &#x2F;root&#x2F;nginx_mysql.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-回到主调度器，编辑keepalived配置文件"><a href="#E-回到主调度器，编辑keepalived配置文件" class="headerlink" title="E.回到主调度器，编辑keepalived配置文件"></a>E.回到<code>主</code>调度器，编辑<code>keepalived</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id master_nginx&#125;vrrp_script check_mysql &#123;#引用外部脚本，并且定义名字    script &quot;&#x2F;root&#x2F;nginx_mysql.sh&quot;#外部脚本路径    interval 1#每1秒执行一次脚本&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_mysql#调用外部脚本，名字是我们上面自己起的    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-配置备用调度器"><a href="#F-配置备用调度器" class="headerlink" title="F.配置备用调度器"></a>F.配置<code>备用</code>调度器</h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id slave_nginx&#125;vrrp_script check_mysql &#123;    script &quot;&#x2F;root&#x2F;nginx_mysql.sh&quot;    interval 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    virtual_router_id 51    priority 50    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_mysql    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-启动keepalived服务"><a href="#G-启动keepalived服务" class="headerlink" title="G.启动keepalived服务"></a>G.启动<code>keepalived</code>服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl start keepalived.service[root@master02 ~]# systemctl start keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="H-Windows连接测试"><a href="#H-Windows连接测试" class="headerlink" title="H.Windows连接测试"></a>H.Windows连接测试</h4><p><img src="https://www.wsjj.top//upload/2023/04/keep06.png" alt="keep06"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep07.png" alt="keep07"></p><h4 id="I-模拟主调度故障"><a href="#I-模拟主调度故障" class="headerlink" title="I.模拟主调度故障"></a>I.模拟主调度故障</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>这时主调度的<code>keepalived</code>服务已经被脚本自动关闭了</strong><br><strong>可以看到我们在配置文件内定义的<code>192.168.140.100</code>的IP跑到了<code>备用</code>节点上</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1&#x2F;128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group defaultqlen 1000    link&#x2F;ether 00:0c:29:37:97:c7 brd ff:ff:ff:ff:ff:ff    inet 192.168.140.11&#x2F;24 brd 192.168.140.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet 192.168.140.100&#x2F;32 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe37:97c7&#x2F;64 scope link        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="J-Windows测试连接"><a href="#J-Windows测试连接" class="headerlink" title="J.Windows测试连接"></a>J.<code>Windows</code>测试连接</h4><blockquote><p><strong>模拟<code>Nginx</code>故障</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/keep06.png" alt="keep06"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep07.png" alt="keep07"></p><h4 id="K-恢复主调度运行"><a href="#K-恢复主调度运行" class="headerlink" title="K.恢复主调度运行"></a>K.恢复主调度运行</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx[root@master01 ~]# systemctl start keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>可以看到我们的<code>192.168.140.100</code>这个IP回到了<code>主</code>调度上</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1&#x2F;128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link&#x2F;ether 00:0c:29:8e:07:d7 brd ff:ff:ff:ff:ff:ff    inet 192.168.140.10&#x2F;24 brd 192.168.140.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet 192.168.140.100&#x2F;32 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe8e:7d7&#x2F;64 scope link        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1&#x2F;128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link&#x2F;ether 00:0c:29:37:97:c7 brd ff:ff:ff:ff:ff:ff    inet 192.168.140.11&#x2F;24 brd 192.168.140.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe37:97c7&#x2F;64 scope link        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-keepalived心跳管理"><a href="#6-keepalived心跳管理" class="headerlink" title="6.keepalived心跳管理"></a>6.<code>keepalived</code>心跳管理</h3><blockquote><p><strong><code>keepalived</code>心跳地址默认使用<code>224.0.0.1</code>是个组播地址</strong></p></blockquote><h4 id="A-修改组播地址为单播地址"><a href="#A-修改组播地址为单播地址" class="headerlink" title="A.修改组播地址为单播地址"></a>A.修改<code>组播</code>地址为<code>单播</code>地址</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id master_nginx&#125;vrrp_script check_mysql &#123;    script &quot;&#x2F;root&#x2F;nginx_mysql.sh&quot;    interval 1&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_mysql    &#125;    unicast_src_ip 192.168.140.10#指定源地址    unicast_peer &#123;        192.168.140.11#指定目标地址    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id slave_nginx&#125;vrrp_script check_mysql &#123;    script &quot;&#x2F;root&#x2F;nginx_mysql.sh&quot;    interval 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    virtual_router_id 51    priority 50    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_mysql    &#125;    unicast_src_ip 192.168.140.11#源地址(本机地址)    unicast_peer &#123;        192.168.140.10#目标地址    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-查看心跳"><a href="#B-查看心跳" class="headerlink" title="B.查看心跳"></a>B.查看心跳</h4><blockquote><p><strong>如果没有<code>tcpdump</code>命令，请安装<code>yum install -y tcpdump</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# tcpdump -i ens33 -nn vrrptcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes15:15:52.856323 IP 192.168.140.10 &gt; 192.168.140.11: VRRPv2, Advertisement, vrid 51, prio 100, authtype simple, intvl 1s, length 2015:15:53.857127 IP 192.168.140.10 &gt; 192.168.140.11: VRRPv2, Advertisement, vrid 51, prio 100, authtype simple, intvl 1s, length 2015:15:54.857973 IP 192.168.140.10 &gt; 192.168.140.11: VRRPv2, Advertisement, vrid 51, prio 100, authtype simple, intvl 1s, length 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# tcpdump -i ens33 -nn vrrptcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on ens33, link-type EN10MB (Ethernet), capture size 262144 bytes15:13:32.830104 IP 192.168.140.11 &gt; 192.168.140.10: VRRPv2, Advertisement, vrid 51, prio 100, authtype simple, intvl 1s, length 2015:13:33.830501 IP 192.168.140.11 &gt; 192.168.140.10: VRRPv2, Advertisement, vrid 51, prio 100, authtype simple, intvl 1s, length 2015:13:34.830965 IP 192.168.140.11 &gt; 192.168.140.10: VRRPv2, Advertisement, vrid 51, prio 100, authtype simple, intvl 1s, length 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-配置keepalived不抢占VIP"><a href="#7-配置keepalived不抢占VIP" class="headerlink" title="7.配置keepalived不抢占VIP"></a>7.配置<code>keepalived</code>不抢占<code>VIP</code></h3><blockquote><p><strong><code>keepalived</code>默认模式下，当<code>主</code>调度器<code>挂了</code>以后，<code>备用</code>调度器拿到<code>VIP</code>，而<code>主</code>调度器恢复以后，<code>VIP</code>会被<code>主</code>调度器<code>抢占</code>回来。</strong><br><strong>只在<code>优先级高</code>的修改此配置！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf ! Configuration File for keepalivedglobal_defs &#123;   router_id master_nginx&#125;vrrp_script check_mysql &#123;    script &quot;&#x2F;root&#x2F;nginx_mysql.sh&quot;    interval 1&#125;vrrp_instance VI_1 &#123;    state BACKUP#修改MASTER为BACKUP    nopreempt#新增此条    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_mysql    &#125;    unicast_src_ip 192.168.140.10    unicast_peer &#123;        192.168.140.11    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、案例2：配置MyCAT集群"><a href="#三、案例2：配置MyCAT集群" class="headerlink" title="三、案例2：配置MyCAT集群"></a>三、案例2：配置MyCAT集群</h2><p><img src="https://www.wsjj.top//upload/2023/04/keep08.png" alt="keep08"></p><h3 id="1-配置MySQL主从环境"><a href="#1-配置MySQL主从环境" class="headerlink" title="1.配置MySQL主从环境"></a>1.配置MySQL主从环境</h3><blockquote><p><strong><code>MySQL5.7</code>安装教程：<a href="https://www.wsjj.top/archives/65">https://www.wsjj.top/archives/65</a></strong><br><strong><code>MySQL5.7</code>配置<code>主从</code>环境教程：<a href="https://www.wsjj.top/archives/76">https://www.wsjj.top/archives/76</a></strong><br><strong>从库要开启<code>只读</code>模式！切记！</strong></p></blockquote><h4 id="A-查看从库状态"><a href="#A-查看从库状态" class="headerlink" title="A.查看从库状态"></a>A.查看从库状态</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.140.14                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000002          Read_Master_Log_Pos: 738               Relay_Log_File: slave_mysql-relay-bin.000006                Relay_Log_Pos: 445        Relay_Master_Log_File: master.000002             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 738              Relay_Log_Space: 698              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 14                  Master_UUID: 15a4ce3b-e4da-11ed-801c-000c299a65ec             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 15a4ce3b-e4da-11ed-801c-000c299a65ec:1-3            Executed_Gtid_Set: 15a4ce3b-e4da-11ed-801c-000c299a65ec:1-3,45da0776-e4da-11ed-8218-000c29572e76:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-配置从库为只读"><a href="#B-配置从库为只读" class="headerlink" title="B.配置从库为只读"></a>B.配置从库为<code>只读</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@slave_mysql ~]# vim &#x2F;etc&#x2F;my.cnf#配置文件并不完整，仅展示修改和添加的部分server_id&#x3D;15log_bin&#x3D;mastergtid_mode&#x3D;onread_only&#x3D;1#开启只读enforce_gtid_consistency&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置MyCat"><a href="#2-配置MyCat" class="headerlink" title="2.配置MyCat"></a>2.配置<code>MyCat</code></h3><blockquote><p><strong><code>MyCat</code>部署教程：<a href="https://www.wsjj.top/archives/97">https://www.wsjj.top/archives/97</a></strong><br><strong><code>192.168.140.12</code>部署<code>MyCat</code></strong><br><strong><code>192.168.140.13</code>部署<code>MyCat</code></strong></p></blockquote><h4 id="A-添加主机名解析"><a href="#A-添加主机名解析" class="headerlink" title="A.添加主机名解析"></a>A.添加主机名解析</h4><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.12 mycat01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@mycat02 ~]# vim &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.140.13 mycat02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-安装jdk环境"><a href="#B-安装jdk环境" class="headerlink" title="B.安装jdk环境"></a>B.安装<code>jdk</code>环境</h4><blockquote><p><strong>如果提示找不到<code>wget</code>命令，请安装<code>yum install -y wget</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# wget https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;java&#x2F;jdk&#x2F;8u191-b12&#x2F;jdk-8u191-linux-x64.tar.gz[root@mycat02 ~]# wget https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;java&#x2F;jdk&#x2F;8u191-b12&#x2F;jdk-8u191-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# tar xf jdk-8u191-linux-x64.tar.gz -C &#x2F;usr&#x2F;local[root@mycat02 ~]# tar xf jdk-8u191-linux-x64.tar.gz -C &#x2F;usr&#x2F;local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# vim &#x2F;etc&#x2F;profileexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin#文件后面加上2行内容#配置文件并不完整，请勿删改其他！[root@mycat01 ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@mycat02 ~]# vim &#x2F;etc&#x2F;profileexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin#文件后面加上2行内容#配置文件并不完整，请勿删改其他！[root@mycat02 ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-安装MyCat"><a href="#C-安装MyCat" class="headerlink" title="C.安装MyCat"></a>C.安装<code>MyCat</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# tar xf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz -C &#x2F;usr&#x2F;local&#x2F;[root@mycat02 ~]# tar xf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz -C &#x2F;usr&#x2F;local&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-修改MyCat配置文件"><a href="#D-修改MyCat配置文件" class="headerlink" title="D.修改MyCat配置文件"></a>D.修改MyCat配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# vim &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf&#x2F;schema.xml&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;&lt;schema name&#x3D;&quot;mysql&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot; dataNode&#x3D;&#39;dn1&#39;&gt;&lt;&#x2F;schema&gt;&lt;dataNode name&#x3D;&quot;dn1&quot; dataHost&#x3D;&quot;localhost1&quot; database&#x3D;&quot;mysql&quot; &#x2F;&gt;&lt;dataHost name&#x3D;&quot;localhost1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;1&quot;  writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;&lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;&lt;!-- can have multi write hosts --&gt;&lt;writeHost host&#x3D;&quot;hostM1&quot; url&#x3D;&quot;192.168.140.14:3306&quot; user&#x3D;&quot;admin&quot;   password&#x3D;&quot;WWW.1.com&quot;&gt;&lt;&#x2F;writeHost&gt;&lt;writeHost host&#x3D;&quot;hostS1&quot; url&#x3D;&quot;192.168.140.15:3316&quot; user&#x3D;&quot;admin&quot;   password&#x3D;&quot;WWW.1.com&quot; &#x2F;&gt;&lt;!-- &lt;writeHost host&#x3D;&quot;hostM2&quot; url&#x3D;&quot;localhost:3316&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123456&quot;&#x2F;&gt; --&gt;&lt;&#x2F;dataHost&gt;&lt;&#x2F;mycat:schema&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# vim &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf&#x2F;server.xml #在文件底部做修改&lt;user name&#x3D;&quot;wsjj&quot;&gt;                &lt;property name&#x3D;&quot;password&quot;&gt;redhat&lt;&#x2F;property&gt;                &lt;property name&#x3D;&quot;schemas&quot;&gt;mysql&lt;&#x2F;property&gt;        &lt;&#x2F;user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="回到主数据库创建MyCat登录的用户"><a href="#回到主数据库创建MyCat登录的用户" class="headerlink" title="回到主数据库创建MyCat登录的用户"></a>回到<code>主</code>数据库创建<code>MyCat</code>登录的用户</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant all on *.* to &#39;admin&#39;@&#39;192.168.140.%&#39; identified by &#39;WWW.1.com&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>启动<code>MyCat</code></strong><br><strong>如果没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;bin&#x2F;mycat startStarting Mycat-server...[root@mycat01 ~]# netstat -tunlp | grep javatcp        0      0 127.0.0.1:32000         0.0.0.0:*               LISTEN      3630&#x2F;java           tcp6       0      0 :::41941                :::*                    LISTEN      3630&#x2F;java           tcp6       0      0 :::42367                :::*                    LISTEN      3630&#x2F;java           tcp6       0      0 :::1984                 :::*                    LISTEN      3630&#x2F;java           tcp6       0      0 :::8066                 :::*                    LISTEN      3630&#x2F;java           tcp6       0      0 :::9066                 :::*                    LISTEN      3630&#x2F;java  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Windows测试连接"><a href="#Windows测试连接" class="headerlink" title="Windows测试连接"></a>Windows测试连接</h5><p><img src="https://www.wsjj.top//upload/2023/04/keep09.png" alt="keep09"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep10.png" alt="keep10"></p><h5 id="修改MyCat02配置文件"><a href="#修改MyCat02配置文件" class="headerlink" title="修改MyCat02配置文件"></a>修改<code>MyCat02</code>配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@mycat01 ~]# scp &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf&#x2F;schema.xml root@192.168.140.13:&#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf&#x2F;[root@mycat01 ~]# scp &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf&#x2F;server.xml root@192.168.140.13:&#x2F;usr&#x2F;local&#x2F;mycat&#x2F;conf&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="启动MyCat02"><a href="#启动MyCat02" class="headerlink" title="启动MyCat02"></a>启动<code>MyCat02</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@mycat02 ~]# &#x2F;usr&#x2F;local&#x2F;mycat&#x2F;bin&#x2F;mycat startStarting Mycat-server...[root@mycat02 ~]# netstat -tunlp | grep javatcp        0      0 127.0.0.1:32000         0.0.0.0:*               LISTEN      13146&#x2F;java          tcp6       0      0 :::1984                 :::*                    LISTEN      13146&#x2F;java          tcp6       0      0 :::8066                 :::*                    LISTEN      13146&#x2F;java          tcp6       0      0 :::9066                 :::*                    LISTEN      13146&#x2F;java          tcp6       0      0 :::34506                :::*                    LISTEN      13146&#x2F;java          tcp6       0      0 :::34384                :::*                    LISTEN      13146&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试MyCat02"><a href="#测试MyCat02" class="headerlink" title="测试MyCat02"></a>测试<code>MyCat02</code></h5><p><img src="https://www.wsjj.top//upload/2023/04/keep11.png" alt="keep11"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep12.png" alt="keep12"></p><h3 id="3-配置haproxy主备调度器"><a href="#3-配置haproxy主备调度器" class="headerlink" title="3.配置haproxy主备调度器"></a>3.配置<code>haproxy</code>主备调度器</h3><h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装<code>MySQL</code></h4><blockquote><p><strong>MySQL安装教程：<a href="https://www.wsjj.top/archives/65">https://www.wsjj.top/archives/65</a></strong></p></blockquote><h4 id="A-安装haproxy"><a href="#A-安装haproxy" class="headerlink" title="A.安装haproxy"></a>A.安装<code>haproxy</code></h4><blockquote><p><strong>分别在<code>master01</code>上<code>192.168.140.10</code></strong><br><strong><code>master02</code>上<code>192.168.140.11</code>安装</strong><br><strong>关于HAProxy教程：<a href="https://www.wsjj.top/archives/99">https://www.wsjj.top/archives/99</a></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# yum install -y haproxy[root@master02 ~]# yum install -y haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-编辑haproxy配置文件"><a href="#B-编辑haproxy配置文件" class="headerlink" title="B.编辑haproxy配置文件"></a>B.编辑<code>haproxy</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfgglobal    log         127.0.0.1 local2    chroot      &#x2F;var&#x2F;lib&#x2F;haproxy    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid    maxconn     4000    user        haproxy    group       haproxy    daemon    # turn on stats unix socket    stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;statsdefaults    mode                    http    log                     global    option                  httplog    option                  dontlognull    option http-server-close    option forwardfor       except 127.0.0.0&#x2F;8    option                  redispatch    retries                 3    timeout http-request    10s    timeout queue           1m    timeout connect         10s    timeout client          1m    timeout server          1m    timeout http-keep-alive 10s    timeout check           10s    maxconn                 3000listen mycat_service       bind 0.0.0.0:8066       mode tcp       balance source       server mycat01 192.168.140.12:8066 weight 3 check inter 2000 rise 1 fall 2       server mycat02 192.168.140.13:8066 weight 3 check inter 2000 rise 1 fall 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动haproxy"><a href="#C-启动haproxy" class="headerlink" title="C.启动haproxy"></a>C.启动<code>haproxy</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl enable --now haproxy[root@master01 ~]# scp &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg root@192.168.140.11:&#x2F;etc&#x2F;haproxy&#x2F;[root@master02 ~]# systemctl enable --now haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="D-本地测试连接"><a href="#D-本地测试连接" class="headerlink" title="D.本地测试连接"></a>D.本地测试连接</h4><p><img src="https://www.wsjj.top//upload/2023/04/keep13.png" alt="keep13"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep14.png" alt="keep14"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep15.png" alt="keep15"></p><h3 id="4-配置keepalived"><a href="#4-配置keepalived" class="headerlink" title="4.配置keepalived"></a>4.配置<code>keepalived</code></h3><h4 id="A-安装keepalived"><a href="#A-安装keepalived" class="headerlink" title="A.安装keepalived"></a>A.安装<code>keepalived</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# yum install -y keepalived[root@master02 ~]# yum install -y keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-编写脚本"><a href="#B-编写脚本" class="headerlink" title="B.编写脚本"></a>B.编写脚本</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;root&#x2F;check_mycat.sh#! &#x2F;bin&#x2F;bashnetstat -tunlp | grep 8066 &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -ne 0 ]; then    systemctl stop keeplivedfi[root@master01 ~]# chmod 777 &#x2F;root&#x2F;check_mycat.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# vim &#x2F;root&#x2F;check_mycat.sh#! &#x2F;bin&#x2F;bashnetstat -tunlp | grep 8066 &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -ne 0 ]; then    systemctl stop keeplivedfi[root@master02 ~]# chmod 777 &#x2F;root&#x2F;check_mycat.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-修改配置文件"><a href="#C-修改配置文件" class="headerlink" title="C.修改配置文件"></a>C.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id master_mycat&#125;vrrp_script check_mycat &#123;    script &quot;&#x2F;root&#x2F;check_mycat.sh&quot;    interval 1&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    virtual_router_id 51    priority 100    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_mycat    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id slave_mycat&#125;vrrp_script check_mycat &#123;    script &quot;&#x2F;root&#x2F;check_mycat.sh&quot;    interval 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    virtual_router_id 51    priority 50    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;    track_script &#123;        check_mycat    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-启动服务"><a href="#D-启动服务" class="headerlink" title="D.启动服务"></a>D.启动服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl start keepalived.service[root@master02 ~]# systemctl start keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-连接测试"><a href="#E-连接测试" class="headerlink" title="E.连接测试"></a>E.连接测试</h4><p><img src="https://www.wsjj.top//upload/2023/04/keep16.png" alt="keep16"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep17.png" alt="keep17"></p><h4 id="F-模拟主调度上的服务挂掉"><a href="#F-模拟主调度上的服务挂掉" class="headerlink" title="F.模拟主调度上的服务挂掉"></a>F.模拟主调度上的服务挂掉</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl stop haproxy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>可以看到现在<code>VIP</code>已经跑到了<code>备用</code>调度器上</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1&#x2F;128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link&#x2F;ether 00:0c:29:37:97:c7 brd ff:ff:ff:ff:ff:ff    inet 192.168.140.11&#x2F;24 brd 192.168.140.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet 192.168.140.100&#x2F;32 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe37:97c7&#x2F;64 scope link        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>再次连接测试</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/keep16.png" alt="keep16"></p><p><img src="https://www.wsjj.top//upload/2023/04/keep17.png" alt="keep17"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
          <category> 集群 </category>
          
          <category> nginx集群 </category>
          
          <category> keepalived </category>
          
          <category> haproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> nginx </tag>
            
            <tag> 集群 </tag>
            
            <tag> 负载均衡集群 </tag>
            
            <tag> keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux集群系列教程】HAProxy负载均衡集群</title>
      <link href="/2023/04/26/99/"/>
      <url>/2023/04/26/99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux集群系列教程】HAProxy负载均衡集群"><a href="#【Linux集群系列教程】HAProxy负载均衡集群" class="headerlink" title="【Linux集群系列教程】HAProxy负载均衡集群"></a>【Linux集群系列教程】HAProxy负载均衡集群</h1><h2 id="一、关于HAProxy"><a href="#一、关于HAProxy" class="headerlink" title="一、关于HAProxy"></a>一、关于HAProxy</h2><ul><li><code>HAProxy</code>是一个开源的、高性能的、基于<code>TCP</code>和<code>HTTP</code>应用的负载均衡软件，借助<code>HAProxy</code>可快速、可靠地提供基于<code>TCP</code>和<code>HTTP</code>应用的负载均衡解决方案</li></ul><h3 id="1-调度器类型"><a href="#1-调度器类型" class="headerlink" title="1.调度器类型"></a>1.调度器类型</h3><ul><li>四层调度<ul><li>仅能根据<code>IP地址</code>、<code>端口号</code>进行调度 </li><li>LVS, nginx</li></ul></li><li>七层调度<ul><li>根据应用数据<code>HTTP协议</code>进行调度</li><li>nginx</li></ul></li></ul><h3 id="2-HAProxy特性"><a href="#2-HAProxy特性" class="headerlink" title="2.HAProxy特性"></a>2.HAProxy特性</h3><ul><li>可靠性和<code>稳定</code>性非常好</li><li>最高可以同时维护<code>40000</code>–<code>50000</code>个并发连接，单位时间内处理的最大请求数为<code>20000</code>个，最大数据处理能力可达<code>10Gbps</code></li><li>支持多于<code>8种</code>负载均衡算法 ，同时也支持<code>session</code>保持</li><li>支持<code>虚拟主机</code>功能</li><li>从<code>HAProxy 1.3</code>版本后开始支持连接拒绝、全透明代理等功能</li><li><code>HAProxy</code>拥有一个功能强大的服务器状态监控页面</li><li><code>HAProxy</code>拥有功能强大的<code>ACL</code>支持</li></ul><h3 id="3-HAProxy配置文件结构"><a href="#3-HAProxy配置文件结构" class="headerlink" title="3.HAProxy配置文件结构"></a>3.HAProxy配置文件结构</h3><ul><li>global<ul><li>全局配置、进程数、日志等</li></ul></li><li>defaults<ul><li>默认参数</li></ul></li><li>frontend<ul><li>定义虚拟服务、调度算法</li></ul></li><li>backend<ul><li>定义后端real server</li></ul></li><li>listen<ul><li>配置监听、用于展示监控页面、用于配置虚拟服务</li></ul></li></ul><h2 id="二、HAProxy配置文件解析"><a href="#二、HAProxy配置文件解析" class="headerlink" title="二、HAProxy配置文件解析"></a>二、HAProxy配置文件解析</h2><blockquote><p><strong>配置文件默认路径：<code>/etc/haproxy/haproxy.cfg</code></strong></p></blockquote><h3 id="1-global全局配置"><a href="#1-global全局配置" class="headerlink" title="1.global全局配置"></a>1.<code>global</code>全局配置</h3><pre class="line-numbers language-none"><code class="language-none">global nbproc 1# 指定haproxy启动的进程数maxconn 4096# 最大连接数user nobody# 指定haproxy进程启动的用户group nobodydaemon# 后台启动pidfile &#x2F;usr&#x2F;local&#x2F;haproxy&#x2F;logs&#x2F;haproxy.pid 日志级别: debug, info, notice, warn, error, alert, emercy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-defaults默认配置"><a href="#2-defaults默认配置" class="headerlink" title="2.defaults默认配置"></a>2.<code>defaults</code>默认配置</h3><pre class="line-numbers language-none"><code class="language-none">defaults     timeout connect 10# 连接real server的超时时间，单位毫秒    timeout client 20s# 连接客户端的超时时间    timeout server 30s# real server连接客户端的超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-frontend定义虚拟服务"><a href="#3-frontend定义虚拟服务" class="headerlink" title="3.frontend定义虚拟服务"></a>3.<code>frontend</code>定义虚拟服务</h3><pre class="line-numbers language-none"><code class="language-none">frontend xxxxx# 定义虚拟服务的名称bind IP:port# 定义虚拟服务监听的IP及端口mode &#123;tcp|http&#125;# 工作模式; http: 七层调度    tcp：四层调度option forwardfor# 后端服务器记录日志时，记录真实客户端地址 option httpclose# 优化参数, 高并发场景下，haproxy会自动断开连接时间过长的客户端请求use_backend XXX# 定义后端服务器default_backend XXX# 定义默认后端服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-backend定义后端real-server"><a href="#4-backend定义后端real-server" class="headerlink" title="4.backend定义后端real server"></a>4.<code>backend</code>定义后端<code>real server</code></h3><pre class="line-numbers language-none"><code class="language-none">backend xxxxxxx# 定义后端服务器的名称 mode &#123;tcp|http&#125;option abortonclose# 优化参数, 高并发场景下让后端服务器自动结束处理时间较长的请求option redispatch# 前端访问的时候，会检测后端服务器是否挂掉，如果挂掉会强制转向另一个没有挂掉的服务器上cookie SERVERID# 植入cookie的时候，新增主机ID，让客户端访问的时候能找到刚刚访问的服务器balance roundrobin# 调度算法server web1 10.1.1.1:80 cookie s1 weight 6 check inter 2000 rise 2 fall 3server web2 10.1.1.2:80 cookie s2 weight 6 check inter 2000 rise 2 fall 3#cookie s1代表我们定义了一个名叫S1的主机ID，将来这个ID会加入到cookie里#weight权重#inter 2000 rise 2 fall 3 每2000毫秒，检测一次，如果超过3次无响应，则判定服务器已经挂掉，当服务器上线以后，超过2次回应，再上线服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A-支持的调度算法"><a href="#A-支持的调度算法" class="headerlink" title="A.支持的调度算法"></a>A.支持的调度算法</h4><blockquote><p><code>roundrobin</code>基于权重进行轮询调度的算法 <br><code>static-rr</code>基于权重进行轮询调度的算法，不过此算法为静态算法，在运行时调整其服务器权重不会生效<br><code>source</code>源<code>hash</code>, 将同一个客户端的请求转发到同一个后端服务器<br><code>leastconn</code>最少连接<br><code>uri</code>此算法会对部分或整个<code>URI</code>进行<code>HASH</code>运算，再经过与服务器的总权重相除，最后转发到某台匹配的后端服务器上<br><code>uri_param</code>此算法会根据<code>URL</code>路径中的参数进行转发，这样可保证在后端真实服务器数据不变时，同一个用户的请求始终分发到同一台机器上</p></blockquote><h4 id="B-健康状态检测"><a href="#B-健康状态检测" class="headerlink" title="B.健康状态检测"></a>B.健康状态检测</h4><pre class="line-numbers language-none"><code class="language-none">server web1 10.1.1.1:80 cookie server1 weight 6 check inter 2000 rise 2 fall 3web1#后端服务器名称weight 6#权重check inter 2000 rise 2 fall 3#定义健康状态检查参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-会话保持配置"><a href="#C-会话保持配置" class="headerlink" title="C.会话保持配置"></a>C.会话保持配置</h4><pre class="line-numbers language-none"><code class="language-none">cookie SERVERIDserver ..... cookie server1 .......服务器在给客户端响应时，要在响应数据中插入事先指定的serverid, 用于实现会话保持option redispatch此参数用于cookie保持的环境中。在默认情况下，HAProxy会将其请求的后端服务器的serverID插入cookie中，以保证会话的session持久性。而如果后端服务器出现故障，客户端的cookie是不会刷新的，这就会造成无法访问。此时，如果设置了此参数，就会将客户的请求强制定向到另外一台健康的后端服务器上，以保证服务正常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-listen配置监听"><a href="#5-listen配置监听" class="headerlink" title="5.listen配置监听"></a>5.<code>listen</code>配置监听</h3><pre class="line-numbers language-none"><code class="language-none">listen admin_status# 定义服务名称bind 0.0.0.0:9188# 服务监听的地址及端口stats refresh 30s# 数据刷新的时间stats uri &#x2F;haproxy-status# 访问监控页面的uri地址stats realm Welcome login# 用户名对话框提示信息stats auth admin:admin# 认证的用户名、密码stats hide-version# 监控页面不显示软件版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、HAProxy的ACL功能"><a href="#三、HAProxy的ACL功能" class="headerlink" title="三、HAProxy的ACL功能"></a>三、HAProxy的<code>ACL</code>功能</h2><h3 id="1-ACL介绍"><a href="#1-ACL介绍" class="headerlink" title="1.ACL介绍"></a>1.<code>ACL</code>介绍</h3><ul><li><code>ACL</code>访问控制列表  </li><li>用于匹配<code>客户端</code>访问请求</li><li>只能应用在<code>frontend</code>、<code>listen</code>中</li><li>作用:<ul><li>访问控制 </li><li>七层调度</li></ul></li></ul><h3 id="2-ACL语法"><a href="#2-ACL语法" class="headerlink" title="2.ACL语法"></a>2.<code>ACL</code>语法</h3><pre class="line-numbers language-none"><code class="language-none">acl  &lt;acl名称&gt;  &lt;匹配请求的方法&gt; -i &lt;具体条件&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>-i</code>忽略大小写</p></blockquote><h3 id="3-常用ACL方法"><a href="#3-常用ACL方法" class="headerlink" title="3.常用ACL方法"></a>3.常用<code>ACL</code>方法</h3><ul><li>hdr_reg(host)<ul><li>以正则表达式的方式匹配主机名</li><li><code>acl test1 hdr_reg(host) -i www</code></li></ul></li><li>hdr_dom(host)<ul><li>精确匹配主机名</li><li><code>acl test2 hdr_dom(host) -i music.linux.com</code></li></ul></li><li>hdr_beg(host)<ul><li>匹配主机名以xxx开头</li><li><code>acl test3 hdr_beg(host) -i download.</code></li></ul></li><li>path_end<ul><li>url以xxxx结尾</li><li><code>acl test4 path_end -i .jpg  .jpeg  .gif  .png</code></li></ul></li><li>path_beg<ul><li>url以xxxx开头</li><li><code>acl test5 path_beg -i https://</code></li></ul></li><li>url_ip<ul><li>匹配数据目的IP</li><li><code>acl test5 url_ip 10.1.1.1</code></li></ul></li><li>src <ul><li>匹配数据源IP</li></ul></li><li>method <ul><li>匹配HTTP请求的方法；GET, POST</li><li><code>acl test7 method POST</code></li></ul></li></ul><h4 id="示例1：实现七层调度"><a href="#示例1：实现七层调度" class="headerlink" title="示例1：实现七层调度"></a>示例1：实现七层调度</h4><pre class="line-numbers language-none"><code class="language-none">acl www_policyhdr_reg(host)  -i ^(www.z.cn|z.cn)       acl bbs_policyhdr_dom(host)  -i   bbs.z.cn        acl url_policy      url_sub   -i       buy_sid&#x3D;       use_backend   server_www  if   www_policy       use_backend   server_app   if  bbs_policy       use_backend   server_bbs   if url_policy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例2：实现七层调度"><a href="#示例2：实现七层调度" class="headerlink" title="示例2：实现七层调度"></a>示例2：实现七层调度</h4><pre class="line-numbers language-none"><code class="language-none">acl  host_www   hdr_beg(host)   -i www         acl  host_static   hdr_beg(host)   -i img. vedio. download. ftp.        use_backend  static   if host_static || host_www <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例3：实现数据过滤"><a href="#示例3：实现数据过滤" class="headerlink" title="示例3：实现数据过滤"></a>示例3：实现数据过滤</h4><pre class="line-numbers language-none"><code class="language-none">acl forbidden_dst   url_ip  192.168.0.0&#x2F;16       acl forbidden_dst   url_ip  172.16.0.0&#x2F;12       acl forbidden_dst   url_ip  10.0.0.0&#x2F;8       http-request deny if forbidden_dst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例4：实现数据过滤"><a href="#示例4：实现数据过滤" class="headerlink" title="示例4：实现数据过滤"></a>示例4：实现数据过滤</h4><pre class="line-numbers language-none"><code class="language-none">acl  allow_host  src  192.168.200.150&#x2F;32       http-request  deny  if  !  allow_host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、案例1：基于HAProxy实现web服务器调度"><a href="#四、案例1：基于HAProxy实现web服务器调度" class="headerlink" title="四、案例1：基于HAProxy实现web服务器调度"></a>四、案例1：基于<code>HAProxy</code>实现<code>web</code>服务器调度</h2><blockquote><p><strong>上一期教程：<a href="https://www.wsjj.top/archives/98">LB集群(keepalived结合LVS)+LAMP环境+WordPress博客</a></strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/hap01.png" alt="hap01"></p><blockquote><p><strong>如图所示，需要准备<code>6</code>台虚拟机</strong><br><strong><code>192.168.140.10</code>主调度器</strong><br><strong><code>192.168.140.11</code>备用调度器</strong><br><strong><code>192.168.140.12</code> ，<code>web1</code>服务器，跑着<code>vedio</code>业务</strong><br><strong><code>192.168.140.13</code> ，<code>web2</code>服务器，跑着<code>vedio</code>业务</strong><br><strong><code>192.168.140.14</code> ，<code>web3</code>服务器，跑着<code>music</code>业务</strong><br><strong><code>192.168.140.15</code> ，<code>web4</code>服务器，跑着<code>music</code>业务</strong></p></blockquote><h3 id="1-关闭防火墙和SElinux、设置时间同步！"><a href="#1-关闭防火墙和SElinux、设置时间同步！" class="headerlink" title="1.关闭防火墙和SElinux、设置时间同步！"></a>1.关闭防火墙和SElinux、设置时间同步！</h3><blockquote><p><strong>请务必设置时间同步！防止出现<code>脑裂</code>现象！</strong></p></blockquote><h3 id="2-配置虚拟网卡和静态IP"><a href="#2-配置虚拟网卡和静态IP" class="headerlink" title="2.配置虚拟网卡和静态IP"></a>2.配置虚拟网卡和静态IP</h3><p><img src="https://www.wsjj.top//upload/2023/04/LB02.png" alt="LB02"></p><blockquote><p><strong><code>六台</code>虚拟机都要修改网卡模式为<code>NAT</code>，默认<code>NAT</code>模式下使用<code>VMnet8</code>网卡</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/LB03.png" alt="LB03"></p><h4 id="A-配置静态IP"><a href="#A-配置静态IP" class="headerlink" title="A.配置静态IP"></a>A.配置静态IP</h4><blockquote><p><strong>过程省略</strong><br><strong>配置网卡教程：<a href="https://www.wsjj.top/archives/50">https://www.wsjj.top/archives/50</a></strong></p></blockquote><h3 id="3-配置4台web服务器"><a href="#3-配置4台web服务器" class="headerlink" title="3.配置4台web服务器"></a>3.配置<code>4</code>台<code>web</code>服务器</h3><blockquote><p><strong><code>192.168.140.12</code> ，<code>web1</code>服务器，跑着<code>vedio</code>业务</strong><br><strong><code>192.168.140.13</code> ，<code>web2</code>服务器，跑着<code>vedio</code>业务</strong><br><strong><code>192.168.140.14</code> ，<code>web3</code>服务器，跑着<code>music</code>业务</strong><br><strong><code>192.168.140.15</code> ，<code>web4</code>服务器，跑着<code>music</code>业务</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y httpd[root@node2 ~]# yum install -y httpd[root@node3 ~]# yum install -y httpd[root@node4 ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A-创建index页面"><a href="#A-创建index页面" class="headerlink" title="A.创建index页面"></a>A.创建<code>index</code>页面</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;192.168.140.12 vedio&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;192.168.140.13 vedio&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node3 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;192.168.140.14 music&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node4 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;192.168.140.15 music&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-启动httpd服务"><a href="#B-启动httpd服务" class="headerlink" title="B.启动httpd服务"></a>B.启动httpd服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl enable --now httpd[root@node2 ~]# systemctl enable --now httpd[root@node3 ~]# systemctl enable --now httpd[root@node4 ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-浏览器测试访问"><a href="#C-浏览器测试访问" class="headerlink" title="C.浏览器测试访问"></a>C.浏览器测试访问</h4><p><img src="https://www.wsjj.top//upload/2023/04/hap02.png" alt="hap02"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap03.png" alt="hap03"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap04.png" alt="hap04"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap05.png" alt="hap05"></p><h3 id="4-配置调度器"><a href="#4-配置调度器" class="headerlink" title="4.配置调度器"></a>4.配置调度器</h3><h4 id="A-安装haproxy"><a href="#A-安装haproxy" class="headerlink" title="A.安装haproxy"></a>A.安装<code>haproxy</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# yum install -y haproxy[root@master02 ~]# yum install -y haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-在主调度器修改配置文件"><a href="#B-在主调度器修改配置文件" class="headerlink" title="B.在主调度器修改配置文件"></a>B.在<code>主</code>调度器修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfgglobal    log         127.0.0.1 local2    chroot      &#x2F;var&#x2F;lib&#x2F;haproxy    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid    maxconn     4000    user        haproxy    group       haproxy    daemon    # turn on stats unix socket    stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;statsdefaults    mode                    http    log                     global    option                  httplog    option                  dontlognull    option http-server-close    option forwardfor       except 127.0.0.0&#x2F;8    option                  redispatch    retries                 3    timeout http-request    10s    timeout queue           1m    timeout connect         10s    timeout client          1m    timeout server          1m    timeout http-keep-alive 10s    timeout check           10s    maxconn                 3000frontend web_service    bind 0.0.0.0:80#监听地址为所有地址    mode http#使用7层调度    option forwardfor#优化参数    acl vedio_policy hdr_reg(host) -i vedio#配置页面规则，当用户输入的域名包含vedio    acl music_policy hdr_reg(host) -i music    use_backend vedio_server if vedio_policy#匹配到上面的vedio规则，访问vedio服务器    use_backend music_server if music_policy    default_backend vedio_serverbackend vedio_server#配置组名vedio    mode http#7层调度    balance roundrobin    server vedio1 192.168.140.12:80 check inter 2000 fall 3 rise 2    server vedio2 192.168.140.13:80 check inter 2000 fall 3 rise 2backend music_server    mode http    balance roundrobin    server music1 192.168.140.14:80 check inter 2000 fall 3 rise 2    server music2 192.168.140.15:80 check inter 2000 fall 3 rise 2listen admin_status#配置状态页面    bind 0.0.0.0:8888#配置监听IP和端口    mode http#使用7层调度    stats refresh 30s    stats uri &#x2F;status#访问路径    stats realm please login#提示语句    stats auth admin:redhat#配置登录的账号和密码    stats hide-version#隐藏版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动主调度器上的HAProxy"><a href="#启动主调度器上的HAProxy" class="headerlink" title="启动主调度器上的HAProxy"></a>启动主调度器上的<code>HAProxy</code></h5><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl start haproxy[root@master01 ~]# systemctl enable haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-复制配置文件到备用调度器上"><a href="#C-复制配置文件到备用调度器上" class="headerlink" title="C.复制配置文件到备用调度器上"></a>C.复制配置文件到备用调度器上</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# scp &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg root@192.168.140.11:&#x2F;etc&#x2F;haproxy&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-启动备用调度器上的HAProxy"><a href="#D-启动备用调度器上的HAProxy" class="headerlink" title="D.启动备用调度器上的HAProxy"></a>D.启动备用调度器上的<code>HAProxy</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# systemctl start haproxy[root@master02 ~]# systemctl enable haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-两台调度器安装keepalived"><a href="#5-两台调度器安装keepalived" class="headerlink" title="5.两台调度器安装keepalived"></a>5.两台调度器安装<code>keepalived</code></h3><blockquote><p><strong>用于实现<code>主备</code>的效果</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# yum install -y keepalived[root@master02 ~]# yum install -y keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="A-配置主调度器上的keepalived配置文件"><a href="#A-配置主调度器上的keepalived配置文件" class="headerlink" title="A.配置主调度器上的keepalived配置文件"></a>A.配置主调度器上的<code>keepalived</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id haproxy_master&#125;vrrp_instance VI_1 &#123;    state MASTER#主调度    interface ens33    virtual_router_id 51    priority 100#默认权重(0-255)    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动主调度器keepalived服务"><a href="#启动主调度器keepalived服务" class="headerlink" title="启动主调度器keepalived服务"></a>启动主调度器keepalived服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl start keepalived[root@master01 ~]# systemctl enable keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-修改备用调度器上的keepalived配置文件"><a href="#B-修改备用调度器上的keepalived配置文件" class="headerlink" title="B.修改备用调度器上的keepalived配置文件"></a>B.修改备用调度器上的<code>keepalived</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id haproxy_salve&#125;vrrp_instance VI_1 &#123;    state BACKUP#备用调度    interface ens33    virtual_router_id 51    priority 50#修改权重    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动备用调度器keepalived服务"><a href="#启动备用调度器keepalived服务" class="headerlink" title="启动备用调度器keepalived服务"></a>启动备用调度器<code>keepalived</code>服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# systemctl start keepalived[root@master02 ~]# systemctl enable keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-浏览器测试访问"><a href="#6-浏览器测试访问" class="headerlink" title="6.浏览器测试访问"></a>6.浏览器测试访问</h3><h4 id="A-修改Windows上的hosts文件"><a href="#A-修改Windows上的hosts文件" class="headerlink" title="A.修改Windows上的hosts文件"></a>A.修改<code>Windows</code>上的<code>hosts</code>文件</h4><p><img src="https://www.wsjj.top//upload/2023/04/hap06.png" alt="hap06"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap07.png" alt="hap07"></p><h4 id="B-测试访问"><a href="#B-测试访问" class="headerlink" title="B.测试访问"></a>B.测试访问</h4><p><img src="https://www.wsjj.top//upload/2023/04/hap08.png" alt="hap08"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap09.png" alt="hap09"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap10.png" alt="hap10"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap11.png" alt="hap11"></p><h4 id="C-测试status页面"><a href="#C-测试status页面" class="headerlink" title="C.测试status页面"></a>C.测试status页面</h4><blockquote><p><strong>随便一个<code>域名</code>都可以访问，这里的<code>账号</code>和<code>密码</code>，填写我们提前<code>设置</code>好的</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/hap12.png" alt="hap12"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap13.png" alt="hap13"></p><h2 id="五、案例2：基于HAProxy实现MySQL调度"><a href="#五、案例2：基于HAProxy实现MySQL调度" class="headerlink" title="五、案例2：基于HAProxy实现MySQL调度"></a>五、案例2：基于<code>HAProxy</code>实现<code>MySQL</code>调度</h2><blockquote><p><strong>首先准备<code>2</code>台<code>MySQL</code>服务器</strong><br><strong><code>192.168.140.12</code>和<code>192.168.140.13</code></strong><br><strong>并且配置数据库<code>互主互从</code>策略</strong></p></blockquote><h3 id="1-安装MySQL5-7"><a href="#1-安装MySQL5-7" class="headerlink" title="1.安装MySQL5.7"></a>1.安装<code>MySQL5.7</code></h3><blockquote><p><strong>过程省略</strong><br><strong>MySQL安装教程：<a href="https://www.wsjj.top/archives/65">https://www.wsjj.top/archives/65</a></strong></p></blockquote><h3 id="2-配置互主互从环境"><a href="#2-配置互主互从环境" class="headerlink" title="2.配置互主互从环境"></a>2.配置<code>互主互从</code>环境</h3><blockquote><p><strong>过程省略</strong><br><strong>MySQL主从配置教程：<a href="https://www.wsjj.top/archives/76">https://www.wsjj.top/archives/76</a></strong></p></blockquote><h4 id="A-查看两台MySQL数据库双主状态"><a href="#A-查看两台MySQL数据库双主状态" class="headerlink" title="A.查看两台MySQL数据库双主状态"></a>A.查看两台<code>MySQL</code>数据库<code>双主</code>状态</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status \G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.140.13                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000001          Read_Master_Log_Pos: 154               Relay_Log_File: node1-relay-bin.000002                Relay_Log_Pos: 361        Relay_Master_Log_File: master.000001             Slave_IO_Running: Yes#IO线程OK            Slave_SQL_Running: Yes#SQL线程OK              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 568              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 13                  Master_UUID: fd95c20c-e40d-11ed-ab10-000c29d2b7fd             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set: ee0e03c2-e40d-11ed-b369-000c290f55d2:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 192.168.140.12                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000001          Read_Master_Log_Pos: 454               Relay_Log_File: node2-relay-bin.000002                Relay_Log_Pos: 661        Relay_Master_Log_File: master.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 454              Relay_Log_Space: 868              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 12                  Master_UUID: ee0e03c2-e40d-11ed-b369-000c290f55d2             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: ee0e03c2-e40d-11ed-b369-000c290f55d2:1            Executed_Gtid_Set: ee0e03c2-e40d-11ed-b369-000c290f55d2:1                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-回到主调度器修改HAProxy配置文件"><a href="#3-回到主调度器修改HAProxy配置文件" class="headerlink" title="3.回到主调度器修改HAProxy配置文件"></a>3.回到<code>主调度器</code>修改<code>HAProxy</code>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg#在配置文件底部新增内容listen MySQL_service    bind 0.0.0.0:3306#监听所有IP和3306端口    mode tcp#基于4层调度    balance source    server vedio1 192.168.140.12:3306 check inter 2000 fall 3 rise 2    server vedio2 192.168.140.13:3306 check inter 2000 fall 3 rise 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-重启主调度器HAProxy服务"><a href="#4-重启主调度器HAProxy服务" class="headerlink" title="4.重启主调度器HAProxy服务"></a>4.重启<code>主</code>调度器<code>HAProxy</code>服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl restart haproxy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>可以使用<code>netstat</code>查看是否启动，如果没有这条命令请安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# netstat -tunlp | grep 3306tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      3974&#x2F;haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-复制主调度配置文件到备用调度"><a href="#5-复制主调度配置文件到备用调度" class="headerlink" title="5.复制主调度配置文件到备用调度"></a>5.复制<code>主</code>调度配置文件到<code>备用</code>调度</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# scp &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg root@192.168.140.11:&#x2F;etc&#x2F;haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重启备用调度"><a href="#重启备用调度" class="headerlink" title="重启备用调度"></a>重启备用调度</h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# systemctl restart haproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-访问测试"><a href="#6-访问测试" class="headerlink" title="6.访问测试"></a>6.访问测试</h3><h4 id="A-后台MySQL创建授权用户"><a href="#A-后台MySQL创建授权用户" class="headerlink" title="A.后台MySQL创建授权用户"></a>A.后台MySQL创建授权用户</h4><blockquote><p><strong>因为配置了<code>双主</code>复制环境，所以<code>任意</code>一台数据库都可以！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant all on *.* to &#39;admin&#39;@&#39;192.168.140.%&#39; identified by &#39;WWW.1.com&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-Windows测试连接"><a href="#B-Windows测试连接" class="headerlink" title="B.Windows测试连接"></a>B.<code>Windows</code>测试连接</h4><p><img src="https://www.wsjj.top//upload/2023/04/hap14.png" alt="hap14"></p><p><img src="https://www.wsjj.top//upload/2023/04/hap15.png" alt="hap15"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> LVS </category>
          
          <category> keepalived </category>
          
          <category> haproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> 负载均衡集群 </tag>
            
            <tag> keepalived </tag>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> lvs </tag>
            
            <tag> haproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux集群系列教程】LB集群(keepalived结合LVS)+LAMP环境+WordPress博客</title>
      <link href="/2023/04/25/98/"/>
      <url>/2023/04/25/98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux集群系列教程】LB集群-keepalived结合LVS-LAMP环境-WordPress博客"><a href="#【Linux集群系列教程】LB集群-keepalived结合LVS-LAMP环境-WordPress博客" class="headerlink" title="【Linux集群系列教程】LB集群(keepalived结合LVS)+LAMP环境+WordPress博客"></a>【Linux集群系列教程】LB集群(keepalived结合LVS)+LAMP环境+WordPress博客</h1><blockquote><p><strong>上一期教程<a href="https://www.wsjj.top/archives/96">LVS集群</a></strong><br><strong>关于LAMP+WordPress博客教程：<a href="https://www.wsjj.top/archives/88">https://www.wsjj.top/archives/88</a></strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/LB01.png" alt="LB01"></p><blockquote><p>虚拟机工作安排：<br><code>192.168.140.10</code>主调度器<br><code>192.168.140.11</code>从调度器<br><code>192.168.140.12</code>负责<code>web</code>服务，安装<code>httpd</code>、<code>PHP</code><br><code>192.168.140.13</code>负责<code>web</code>服务，安装<code>httpd</code>、<code>PHP</code><br><code>192.168.140.14</code>负责<code>NFS</code>存储共享，存储<code>网页</code>数据，安装<code>MySQL</code></p></blockquote><h2 id="一、配合keepalived管理LVS"><a href="#一、配合keepalived管理LVS" class="headerlink" title="一、配合keepalived管理LVS"></a>一、配合keepalived管理LVS</h2><ul><li>实现<code>调度器</code>的高可用</li><li>自动生成<code>LVS</code>负载均衡规则</li><li>对后端<code>real server</code>进行健康状态检测</li></ul><h2 id="二、关闭防火墙SElinux和设置时间同步"><a href="#二、关闭防火墙SElinux和设置时间同步" class="headerlink" title="二、关闭防火墙SElinux和设置时间同步"></a>二、关闭防火墙SElinux和设置时间同步</h2><blockquote><p>过程省略，一定要配置时间同步！否则会出现<code>脑裂</code>问题！</p></blockquote><h2 id="三、配置虚拟机网卡和静态IP"><a href="#三、配置虚拟机网卡和静态IP" class="headerlink" title="三、配置虚拟机网卡和静态IP"></a>三、配置虚拟机网卡和静态IP</h2><p><img src="https://www.wsjj.top//upload/2023/04/LB02.png" alt="LB02"></p><h3 id="五台虚拟机都要修改网卡模式为NAT，默认NAT模式下使用VMnet8网卡"><a href="#五台虚拟机都要修改网卡模式为NAT，默认NAT模式下使用VMnet8网卡" class="headerlink" title="五台虚拟机都要修改网卡模式为NAT，默认NAT模式下使用VMnet8网卡"></a><code>五台</code>虚拟机都要修改网卡模式为<code>NAT</code>，默认<code>NAT</code>模式下使用<code>VMnet8</code>网卡</h3><p><img src="https://www.wsjj.top//upload/2023/04/LB03.png" alt="LB03"></p><h3 id="配置IP"><a href="#配置IP" class="headerlink" title="配置IP"></a>配置IP</h3><blockquote><p><strong>过程省略</strong><br><strong>配置网卡教程：<a href="https://www.wsjj.top/archives/50">https://www.wsjj.top/archives/50</a></strong></p></blockquote><h2 id="四、配置后端NFS服务器-MySQL服务器"><a href="#四、配置后端NFS服务器-MySQL服务器" class="headerlink" title="四、配置后端NFS服务器+MySQL服务器"></a>四、配置后端NFS服务器+MySQL服务器</h2><blockquote><p><strong>按照规划，应该在<code>192.168.140.14</code>这台服务器上配置</strong><br><strong>关于NFS服务搭建教程：<a href="https://www.wsjj.top/archives/62">https://www.wsjj.top/archives/62</a></strong></p></blockquote><h3 id="1-添加一块挂载硬盘"><a href="#1-添加一块挂载硬盘" class="headerlink" title="1.添加一块挂载硬盘"></a>1.添加一块挂载硬盘</h3><p><img src="https://www.wsjj.top//upload/2023/04/LB04.png" alt="LB04"></p><blockquote><p><strong>添加完后，自行<code>重启</code>服务器</strong></p></blockquote><h3 id="2-安装nfs-utils服务"><a href="#2-安装nfs-utils服务" class="headerlink" title="2.安装nfs-utils服务"></a>2.安装<code>nfs-utils</code>服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# yum install -y nfs-utils rpcbind<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-格式化新增的硬盘"><a href="#3-格式化新增的硬盘" class="headerlink" title="3.格式化新增的硬盘"></a>3.格式化新增的硬盘</h3><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  500M  0 part &#x2F;boot└─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sdb               8:16   0   20G  0 disk #可以看到我们新增的硬盘已经检测到了sr0              11:0    1 1024M  0 rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# fdisk &#x2F;dev&#x2F;sdb命令(输入 m 获取帮助)：g#转换成GPT格式的磁盘Building a new GPT disklabel (GUID: A91567D7-42D7-404E-B38B-72069B1E4D6F)命令(输入 m 获取帮助)：n#创建一个新分区分区号 (1-128，默认 1)：1#默认1第一个扇区 (2048-41943006，默认 2048)：#默认回车即可Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-41943006，默认 41943006)：#默认回车已创建分区 1命令(输入 m 获取帮助)：w#保存The partition table has been altered!Calling ioctl() to re-read partition table.正在同步磁盘。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A-格式化分区"><a href="#A-格式化分区" class="headerlink" title="A.格式化分区"></a>A.格式化分区</h4><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# mkfs -t xfs &#x2F;dev&#x2F;sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-配置永久挂载"><a href="#B-配置永久挂载" class="headerlink" title="B.配置永久挂载"></a>B.配置永久挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# mkdir &#x2F;wordpress#创建好数据目录[root@node3-nfs ~]# vim &#x2F;etc&#x2F;fstab&#x2F;dev&#x2F;sdb1       &#x2F;wordpress      xfs     defaults        0 0[root@node3-nfs ~]# mount -a#挂载所有<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查刚刚挂载的分区"><a href="#检查刚刚挂载的分区" class="headerlink" title="检查刚刚挂载的分区"></a>检查刚刚挂载的分区</h4><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# df -hT | grep -i sdb1&#x2F;dev&#x2F;sdb1               xfs        20G   33M   20G    1% &#x2F;wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-配置NFS"><a href="#4-配置NFS" class="headerlink" title="4.配置NFS"></a>4.配置NFS</h3><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# vim &#x2F;etc&#x2F;exports&#x2F;wordpress      192.168.140.12(rw,no_root_squash)  192.168.140.13(rw,no_root_squash)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="A-准备WordPress安装包"><a href="#A-准备WordPress安装包" class="headerlink" title="A.准备WordPress安装包"></a>A.准备WordPress安装包</h4><blockquote><p>使用截止教程编写日期，最新<code>6.2</code>版本</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# wget https:&#x2F;&#x2F;cn.wordpress.org&#x2F;latest-zh_CN.tar.gz[root@node3-nfs ~]# tar xf latest-zh_CN.tar.gz[root@node3-nfs ~]# mv .&#x2F;wordpress&#x2F;* &#x2F;wordpress[root@node3-nfs ~]# ls &#x2F;wordpressindex.php        wp-admin              wp-content         wp-load.php      wp-signup.phplicense.txt      wp-blog-header.php    wp-cron.php        wp-login.php     wp-trackback.phpreadme.html      wp-comments-post.php  wp-includes        wp-mail.php      xmlrpc.phpwp-activate.php  wp-config-sample.php  wp-links-opml.php  wp-settings.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-设置权限"><a href="#B-设置权限" class="headerlink" title="B.设置权限"></a>B.设置权限</h4><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# chmod -R 777 &#x2F;wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-启动NFS服务，并设置开机自启动"><a href="#C-启动NFS服务，并设置开机自启动" class="headerlink" title="C.启动NFS服务，并设置开机自启动"></a>C.启动NFS服务，并设置开机自启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# systemctl enable --now nfs-serverCreated symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;nfs-server.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nfs-server.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# showmount -e localhost#可以检查是否创建服务成功Export list for localhost:&#x2F;wordpress 192.168.140.13,192.168.140.12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-配置web服务器挂载NFS网络存储"><a href="#5-配置web服务器挂载NFS网络存储" class="headerlink" title="5.配置web服务器挂载NFS网络存储"></a>5.配置<code>web</code>服务器挂载<code>NFS</code>网络存储</h3><blockquote><p><strong>需要回到<code>192.168.140.12</code>和<code>192.168.140.13</code>配置<code>NFS</code>共享</strong></p></blockquote><h4 id="A-两台web服务器需要安装NFS用来支持NFS文件系统"><a href="#A-两台web服务器需要安装NFS用来支持NFS文件系统" class="headerlink" title="A.两台web服务器需要安装NFS用来支持NFS文件系统"></a>A.两台<code>web</code>服务器需要安装<code>NFS</code>用来支持<code>NFS</code>文件系统</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y nfs-utils[root@node2 ~]# yum install -y nfs-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-创建挂载目录"><a href="#B-创建挂载目录" class="headerlink" title="B.创建挂载目录"></a>B.创建挂载目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mkdir &#x2F;wordpress[root@node2 ~]# mkdir &#x2F;wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-配置永久挂载"><a href="#C-配置永久挂载" class="headerlink" title="C.配置永久挂载"></a>C.配置永久挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;fstab192.168.140.14:&#x2F;wordpress &#x2F;wordpress nfs defaults 0 0[root@node2 ~]# vim &#x2F;etc&#x2F;fstab192.168.140.14:&#x2F;wordpress &#x2F;wordpress nfs defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-挂载"><a href="#D-挂载" class="headerlink" title="D.挂载"></a>D.挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mount -a[root@node2 ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ls &#x2F;wordpress&#x2F;#可以看到NFS服务器上的文件已经挂载到本地了！index.php        wp-admin              wp-content         wp-load.php      wp-signup.phplicense.txt      wp-blog-header.php    wp-cron.php        wp-login.php     wp-trackback.phpreadme.html      wp-comments-post.php  wp-includes        wp-mail.php      xmlrpc.phpwp-activate.php  wp-config-sample.php  wp-links-opml.php  wp-settings.php[root@node2 ~]# ls &#x2F;wordpress&#x2F;index.php        wp-admin              wp-content         wp-load.php      wp-signup.phplicense.txt      wp-blog-header.php    wp-cron.php        wp-login.php     wp-trackback.phpreadme.html      wp-comments-post.php  wp-includes        wp-mail.php      xmlrpc.phpwp-activate.php  wp-config-sample.php  wp-links-opml.php  wp-settings.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-回到NFS服务器，配置MySQL"><a href="#6-回到NFS服务器，配置MySQL" class="headerlink" title="6.回到NFS服务器，配置MySQL"></a>6.回到NFS服务器，配置MySQL</h3><blockquote><p><strong>回到<code>192.168.140.14</code>配置<code>MySQL</code>数据库</strong><br><strong>MySQL5.7安装教程：<a href="https://www.wsjj.top/archives/65">https://www.wsjj.top/archives/65</a></strong></p></blockquote><h4 id="A-创建WordPress数据库"><a href="#A-创建WordPress数据库" class="headerlink" title="A.创建WordPress数据库"></a>A.创建WordPress数据库</h4><blockquote><p><strong>创建一个库名为<code>wordpress</code>的库，字符集为<code>utf8mb4</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database wordpress charset utf8mb4;Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-创建授权登录用户"><a href="#B-创建授权登录用户" class="headerlink" title="B.创建授权登录用户"></a>B.创建授权登录用户</h4><blockquote><p><strong>我们这里要授权<code>2</code>台<code>web</code>服务器登录，所以<code>ip</code>要写<code>2</code>台<code>web</code>服务器的<code>IP</code></strong><br><strong>我们创建了用户<code>wordpress</code>，并且设置了密码为<code>WWW.1.com</code>，并且只允许对<code>wordpress库</code>有权限</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;192.168.140.12&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;192.168.140.13&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>至此我们<code>NFS</code>服务器和<code>MySQL</code>服务配置完毕。</strong></p></blockquote><h2 id="五、配置2台web服务器"><a href="#五、配置2台web服务器" class="headerlink" title="五、配置2台web服务器"></a>五、配置2台web服务器</h2><blockquote><p><strong>需要到<code>192.168.140.12</code>和<code>192.168.140.13</code>配置</strong></p></blockquote><h3 id="1-安装httpd"><a href="#1-安装httpd" class="headerlink" title="1.安装httpd"></a>1.安装<code>httpd</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y httpd[root@node2 ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl enable --now httpd#启动httpd服务，并且加入到开机自启项[root@node2 ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-安装PHP7-4"><a href="#2-安装PHP7-4" class="headerlink" title="2.安装PHP7.4"></a>2.安装<code>PHP7.4</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y epel-release[root@node2 ~]# yum install -y epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum -y install https:&#x2F;&#x2F;rpms.remirepo.net&#x2F;enterprise&#x2F;remi-release-7.rpm[root@node2 ~]# yum -y install https:&#x2F;&#x2F;rpms.remirepo.net&#x2F;enterprise&#x2F;remi-release-7.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y yum-utils[root@node2 ~]# yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum-config-manager --enable remi-php74[root@node2 ~]# yum-config-manager --enable remi-php74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y php  php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json php-redis[root@node2 ~]# yum install -y php  php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json php-redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="A-查看PHP版本"><a href="#A-查看PHP版本" class="headerlink" title="A.查看PHP版本"></a>A.查看<code>PHP</code>版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# php -vPHP 7.4.33 (cli) (built: Feb 14 2023 09:31:03) ( NTS )Copyright (c) The PHP GroupZend Engine v3.4.0, Copyright (c) Zend Technologies[root@node2 ~]# php -vPHP 7.4.33 (cli) (built: Feb 14 2023 09:31:04) ( NTS )Copyright (c) The PHP GroupZend Engine v3.4.0, Copyright (c) Zend Technologies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置httpd虚拟主机"><a href="#3-配置httpd虚拟主机" class="headerlink" title="3.配置httpd虚拟主机"></a>3.配置<code>httpd</code>虚拟主机</h3><h4 id="A-编写虚拟主机配置文件"><a href="#A-编写虚拟主机配置文件" class="headerlink" title="A.编写虚拟主机配置文件"></a>A.编写虚拟主机配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;wp.conf&lt;VirtualHost *:80&gt;           ServerName blog1.wsjj.top       DocumentRoot &#x2F;wordpress     ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;wp_error.log            CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;wp_access.log combined    &lt;&#x2F;VirtualHost&gt;&lt;Directory &#x2F;wordpress&gt;    Require all granted         &lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;wp.conf&lt;VirtualHost *:80&gt;           ServerName blog2.wsjj.top       DocumentRoot &#x2F;wordpress     ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;wp_error.log            CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;wp_access.log combined    &lt;&#x2F;VirtualHost&gt;&lt;Directory &#x2F;wordpress&gt;    Require all granted         &lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-检查配置文件"><a href="#B-检查配置文件" class="headerlink" title="B.检查配置文件"></a>B.检查配置文件</h4><blockquote><p><strong>这里的<code>AH00558</code>不是报错，可以到主配置文件<code>/etc/httpd/conf/httpd.conf</code>修改<code>ServerName</code>后面的内容为<code>Localhost:80</code>即可</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# httpd -tAH00558: httpd: Could not reliably determine the server&#39;s fully qualified domain name, using fe80::20c:29ff:fe0f:55d2. Set the &#39;ServerName&#39; directive globally to suppress this messageSyntax OK[root@node2 ~]# httpd -tAH00558: httpd: Could not reliably determine the server&#39;s fully qualified domain name, using fe80::20c:29ff:fe0f:55d2. Set the &#39;ServerName&#39; directive globally to suppress this messageSyntax OK[root@node1 ~]# httpd -t#修改主配置文件之后再检查Syntax OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-重启服务器"><a href="#C-重启服务器" class="headerlink" title="C.重启服务器"></a>C.重启服务器</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart httpd[root@node2 ~]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-测试2台web服务器"><a href="#4-测试2台web服务器" class="headerlink" title="4.测试2台web服务器"></a>4.测试2台web服务器</h3><p><img src="https://www.wsjj.top//upload/2023/04/LB05.png" alt="LB05"></p><p><img src="https://www.wsjj.top//upload/2023/04/LB06.png" alt="LB06"></p><h3 id="5-配置WordPress"><a href="#5-配置WordPress" class="headerlink" title="5.配置WordPress"></a>5.配置WordPress</h3><blockquote><p><strong>两台<code>web</code>服务器任意一台即可，因为我们后端采用<code>NFS</code>共享存储</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/LB07.png" alt="LB07"></p><p><img src="https://www.wsjj.top//upload/2023/04/LB09.png" alt="LB09"></p><p><img src="https://www.wsjj.top//upload/2023/04/LB10.png" alt="LB10"></p><p><img src="https://www.wsjj.top//upload/2023/04/LB11.png" alt="LB11"></p><p><img src="https://www.wsjj.top//upload/2023/04/LB12.png" alt="LB12"></p><p><img src="https://www.wsjj.top//upload/2023/04/wp8.png" alt="wp8"></p><h3 id="6-修改wp-config-php文件，防止今后插件无法安装"><a href="#6-修改wp-config-php文件，防止今后插件无法安装" class="headerlink" title="6.修改wp-config.php文件，防止今后插件无法安装"></a>6.修改<code>wp-config.php</code>文件，防止今后插件无法安装</h3><blockquote><p><strong>需要回到<code>NFS</code>服务器上配置<code>192.168.140.14</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# vim &#x2F;wordpress&#x2F;wp-config.php#在文件最后加入以下三行内容define(&quot;FS_METHOD&quot;, &quot;direct&quot;);define(&quot;FS_CHMOD_DIR&quot;, 0777);define(&quot;FS_CHMOD_FILE&quot;, 0777);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-在两台web服务器配置VIP和arp内核参数"><a href="#7-在两台web服务器配置VIP和arp内核参数" class="headerlink" title="7.在两台web服务器配置VIP和arp内核参数"></a>7.在两台web服务器配置VIP和arp内核参数</h3><blockquote><p><strong>当net.ipv4.conf.all.arp_ignore等于0的时候，<code>响应任意</code>网卡上接收到的对<code>本机IP</code>地址的<code>arp</code>请求<code>包括环回网卡上的地址</code>，而<code>不管</code>该目的<code>IP</code>是否在<code>接收</code>网卡上。</strong><br><strong>当net.ipv4.conf.all.arp_ignore等于1的时候，<code>只响应</code>目的<code>IP</code>地址为<code>接收</code>网卡上的<code>本地地址</code>的<code>arp</code>请求。</strong><br><strong>当net.ipv4.conf.all.arp_announce等于0的时候，<code>本机</code>所有<code>IP地址</code>都向<code>任何</code>一个接口通告<code>ARP</code>报文。</strong><br><strong>当net.ipv4.conf.all.arp_announce等于1的时候，<code>尽量</code>仅向<code>该网卡</code>回应与<code>该网段</code>匹配的<code>ARP</code>报文。</strong><br><strong>当net.ipv4.conf.all.arp_announce等于2的时候，<code>只</code>向<code>该网卡</code>回应与<code>该网段</code>匹配的<code>ARP</code>报文。</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ip addr add dev lo 192.168.140.100&#x2F;32[root@node2 ~]# ip addr add dev lo 192.168.140.100&#x2F;32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;sysctl.confnet.ipv4.conf.all.arp_ignore &#x3D; 1net.ipv4.conf.all.arp_announce &#x3D; 2[root@node1 ~]# sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;etc&#x2F;sysctl.confnet.ipv4.conf.all.arp_ignore &#x3D; 1net.ipv4.conf.all.arp_announce &#x3D; 2[root@node2 ~]# sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>至此两台<code>web</code>服务器都配置完毕！</strong></p></blockquote><h2 id="六、配置主从调度器"><a href="#六、配置主从调度器" class="headerlink" title="六、配置主从调度器"></a>六、配置主从调度器</h2><h3 id="1-安装keepalived和ipvsadm"><a href="#1-安装keepalived和ipvsadm" class="headerlink" title="1.安装keepalived和ipvsadm"></a>1.安装<code>keepalived</code>和<code>ipvsadm</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# yum install -y keepalived ipvsadm[root@master02 ~]# yum install -y keepalived ipvsadm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-编辑主调度器配置文件"><a href="#2-编辑主调度器配置文件" class="headerlink" title="2.编辑主调度器配置文件"></a>2.编辑<code>主</code>调度器配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id master_LVS#指定调度器id&#125;vrrp_instance wordpress &#123;#指定虚拟组名    state MASTER#指定主备状态，与之相对的为BACKUP    interface ens33#指定VIP在哪块网卡上    virtual_router_id 51#组ID    priority 100#优先级0-255数字越大权限越高    advert_int 1#心跳时间间隔    authentication &#123;        auth_type PASS        auth_pass redhat#设置密码    &#125;    virtual_ipaddress &#123;        192.168.140.100#设置VIP    &#125;&#125;virtual_server 192.168.140.100 80 &#123;#指定虚拟服务器为192.168.140.100    delay_loop 6    lb_algo rr#算法轮询    lb_kind DR#指定工作模式为DR    persistence_timeout 300#超时时间    protocol TCP#基于TCP连接    real_server 192.168.140.12 80 &#123;#web1服务器        weight 1        TCP_CHECK &#123;            connect_port 80#指定80端口            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;    real_server 192.168.140.13 80 &#123;#web2服务器        weight 1        TCP_CHECK &#123;            connect_port 80            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置备用调度器的配置文件"><a href="#3-配置备用调度器的配置文件" class="headerlink" title="3.配置备用调度器的配置文件"></a>3.配置<code>备用</code>调度器的配置文件</h3><h4 id="快速拷贝主配置文件"><a href="#快速拷贝主配置文件" class="headerlink" title="快速拷贝主配置文件"></a>快速拷贝主配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# scp &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf root@192.168.140.11:&#x2F;etc&#x2F;keepalived<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改备用调度器配置文件"><a href="#修改备用调度器配置文件" class="headerlink" title="修改备用调度器配置文件"></a>修改<code>备用</code>调度器配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf! Configuration File for keepalivedglobal_defs &#123;   router_id salve_LVS#修改组名&#125;vrrp_instance wordpress &#123;    state BACKUP#修改模式为备用    interface ens33    virtual_router_id 51    priority 50#修改权重    advert_int 1    authentication &#123;        auth_type PASS        auth_pass redhat    &#125;    virtual_ipaddress &#123;        192.168.140.100    &#125;&#125;virtual_server 192.168.140.100 80 &#123;    delay_loop 6    lb_algo rr    lb_kind DR    persistence_timeout 300    protocol TCP    real_server 192.168.140.12 80 &#123;        weight 1        TCP_CHECK &#123;            connect_port 80            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;    real_server 192.168.140.13 80 &#123;        weight 1        TCP_CHECK &#123;            connect_port 80            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-启动主调度器和备用调度器"><a href="#4-启动主调度器和备用调度器" class="headerlink" title="4.启动主调度器和备用调度器"></a>4.启动<code>主</code>调度器和<code>备用</code>调度器</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl enable --now keepalived.service[root@master02 ~]# systemctl enable --now keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-查看LVS工作状态"><a href="#5-查看LVS工作状态" class="headerlink" title="5.查看LVS工作状态"></a>5.查看LVS工作状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.140.100:80 rr persistent 300  -&gt; 192.168.140.12:80            Route   1      0          0           -&gt; 192.168.140.13:80            Route   1      0          0[root@master02 ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.140.100:80 rr persistent 300  -&gt; 192.168.140.12:80            Route   1      0          0           -&gt; 192.168.140.13:80            Route   1      0          0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><p><img src="https://www.wsjj.top//upload/2023/04/LB13.png" alt="LB13"></p><h3 id="7-模拟主调度器挂掉"><a href="#7-模拟主调度器挂掉" class="headerlink" title="7.模拟主调度器挂掉"></a>7.模拟<code>主调度器</code>挂掉</h3><pre class="line-numbers language-none"><code class="language-none">[root@master01 ~]# systemctl stop keepalived.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="A-查看网页是否正常"><a href="#A-查看网页是否正常" class="headerlink" title="A.查看网页是否正常"></a>A.查看<code>网页</code>是否正常</h4><p><img src="https://www.wsjj.top//upload/2023/04/LB13.png" alt="LB13"></p><h4 id="B-查看备用调度器工作状态"><a href="#B-查看备用调度器工作状态" class="headerlink" title="B.查看备用调度器工作状态"></a>B.查看<code>备用</code>调度器工作状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.140.100:80 rr persistent 300  -&gt; 192.168.140.12:80            Route   1      0          0           -&gt; 192.168.140.13:80            Route   1      0          2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-模拟挂掉一个web服务器"><a href="#8-模拟挂掉一个web服务器" class="headerlink" title="8.模拟挂掉一个web服务器"></a>8.模拟挂掉一个<code>web</code>服务器</h3><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# systemctl stop httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="A-测试访问"><a href="#A-测试访问" class="headerlink" title="A.测试访问"></a>A.测试访问</h4><p><img src="https://www.wsjj.top//upload/2023/04/LB13.png" alt="LB13"></p><h4 id="B-查看备用节点工作状态"><a href="#B-查看备用节点工作状态" class="headerlink" title="B.查看备用节点工作状态"></a>B.查看<code>备用</code>节点工作状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@master02 ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.140.100:80 rr persistent 300  -&gt; 192.168.140.12:80            Route   1      0          8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、为WordPress配置Redis数据库"><a href="#七、为WordPress配置Redis数据库" class="headerlink" title="七、为WordPress配置Redis数据库"></a>七、为<code>WordPress</code>配置<code>Redis</code>数据库</h2><blockquote><p><strong>关于Redis教程链接：<a href="https://www.wsjj.top/archives/91">https://www.wsjj.top/archives/91</a><a href="https://www.wsjj.top/archives/92">https://www.wsjj.top/archives/92</a></strong><br><strong>回到<code>NFS</code>服务器<code>192.168.140.14</code>，安装<code>Redis</code></strong><br><strong>尝试修改配置文件<code>/wordpress/wp-config.php</code>在文件最后加入以下三行内容</strong><br><strong>define(“FS_METHOD”, “direct”);</strong><br><strong>define(“FS_CHMOD_DIR”, 0777);</strong><br><strong>define(“FS_CHMOD_FILE”, 0777);</strong></p></blockquote><h3 id="1-安装Redis"><a href="#1-安装Redis" class="headerlink" title="1.安装Redis"></a>1.安装Redis</h3><blockquote><p><strong>如果提示找不到<code>软件包</code>，请配置<code>epel</code>源</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# yum install -y redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-修改Redis配置文件"><a href="#2-修改Redis配置文件" class="headerlink" title="2.修改Redis配置文件"></a>2.修改<code>Redis</code>配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# vim &#x2F;etc&#x2F;redis.confbind 192.168.140.14#指定IP地址port 6379#端口保持默认daemonize yes#启用后台运行logfile &#x2F;var&#x2F;log&#x2F;redis&#x2F;redis_6379.logappendonly yes#启用aof日志appendfilename &quot;appendonly_6379.aof&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动Redis"><a href="#3-启动Redis" class="headerlink" title="3.启动Redis"></a>3.启动<code>Redis</code></h3><blockquote><p><strong>如果提示找不到<code>netstat</code>命令，需要安装<code>yum install -y net-tools</code></strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# redis-server &#x2F;etc&#x2F;redis.conf[root@node3-nfs ~]# netstat -tunlp | grep redistcp        0      0 192.168.140.14:6379     0.0.0.0:*               LISTEN      2363&#x2F;redis-server 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-本地连接测试"><a href="#4-本地连接测试" class="headerlink" title="4.本地连接测试"></a>4.本地连接测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# redis-cli -h 192.168.140.14192.168.140.14:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-配置WordPress连接Redis"><a href="#5-配置WordPress连接Redis" class="headerlink" title="5.配置WordPress连接Redis"></a>5.配置<code>WordPress</code>连接<code>Redis</code></h3><h4 id="A-后台Redis安装插件"><a href="#A-后台Redis安装插件" class="headerlink" title="A.后台Redis安装插件"></a>A.后台<code>Redis</code>安装插件</h4><blockquote><p><strong>下载完，暂时<code>不要</code>启用</strong><br><strong>如果下载<code>失败</code>，请确认是否拥有<code>权限</code>！执行<code>chmod -R 777 /wordpress</code>再试试</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/LB14.png" alt="LB14"></p><h4 id="B-修改WordPress配置文件"><a href="#B-修改WordPress配置文件" class="headerlink" title="B.修改WordPress配置文件"></a>B.修改WordPress配置文件</h4><blockquote><p><strong>随便一台服务器上修改<code>web1</code>、<code>web2</code>、<code>NFS</code></strong><br><strong>找到相应字段并修改</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node3-nfs ~]# vim &#x2F;wordpress&#x2F;wp-content&#x2F;plugins&#x2F;redis-cache&#x2F;includes&#x2F;object-cache.phpprotected function build_parameters() &#123;        $parameters &#x3D; [            &#39;scheme&#39; &#x3D;&gt; &#39;tcp&#39;,            &#39;host&#39; &#x3D;&gt; &#39;192.168.140.14&#39;,#这里修改IP地址            &#39;port&#39; &#x3D;&gt; 6379,            &#39;database&#39; &#x3D;&gt; 0,            &#39;timeout&#39; &#x3D;&gt; 1,            &#39;read_timeout&#39; &#x3D;&gt; 1,            &#39;retry_interval&#39; &#x3D;&gt; null,            &#39;persistent&#39; &#x3D;&gt; false,        ];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-查看插件启用状态"><a href="#C-查看插件启用状态" class="headerlink" title="C.查看插件启用状态"></a>C.查看<code>插件</code>启用状态</h4><blockquote><p><strong><code>改完</code>上面的<code>配置文件</code>，就可以安全的<code>启用</code>啦！</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/LB15.png" alt="LB15"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> httpd </category>
          
          <category> mysql </category>
          
          <category> 集群 </category>
          
          <category> LVS </category>
          
          <category> keepalived </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> 负载均衡集群 </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> wordpress </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> httpd </tag>
            
            <tag> php </tag>
            
            <tag> lb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】Mycat读写分离</title>
      <link href="/2023/04/24/97/"/>
      <url>/2023/04/24/97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】Mycat读写分离"><a href="#【数据库系列教程】Mycat读写分离" class="headerlink" title="【数据库系列教程】Mycat读写分离"></a>【数据库系列教程】Mycat读写分离</h1><h2 id="一、关于Mycat"><a href="#一、关于Mycat" class="headerlink" title="一、关于Mycat"></a>一、关于Mycat</h2><blockquote><p><code>Mycat</code>是一个开源数据库中间件；它可以管理你的所有数据库，并对他们进行读写分离，分库分表等。<br>使用起来的话<code>Mycat</code>就是一个近似于<code>MySQL</code>的数据库服务器，你可以用连接<code>MySQL</code>的方式去连接<code>Mycat</code>(除了端口不同，默认的Mycat端口是8066而非MySQL的3306)</p></blockquote><h2 id="二、配置Mycat读写分离"><a href="#二、配置Mycat读写分离" class="headerlink" title="二、配置Mycat读写分离"></a>二、配置Mycat读写分离</h2><h3 id="1-配置jdk环境"><a href="#1-配置jdk环境" class="headerlink" title="1.配置jdk环境"></a>1.配置jdk环境</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# wget https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;java&#x2F;jdk&#x2F;8u191-b12&#x2F;jdk-8u191-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>如果提示找不到<code>wget</code>命令请使用<code>yum install -y wget</code>安装！</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar xf jdk-8u191-linux-x64.tar.gz -C &#x2F;usr&#x2F;local[root@localhost ~]# ls &#x2F;usr&#x2F;localbin  etc  games  include  jdk1.8.0_191  lib  lib64  libexec  sbin  share  src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="A-配置jdk环境"><a href="#A-配置jdk环境" class="headerlink" title="A.配置jdk环境"></a>A.配置<code>jdk</code>环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;profileexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin#文件后面加上2行内容#配置文件并不完整，请勿删改其他！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-让配置文件生效，测试jdk环境"><a href="#B-让配置文件生效，测试jdk环境" class="headerlink" title="B.让配置文件生效，测试jdk环境"></a>B.让配置文件生效，测试<code>jdk</code>环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# source &#x2F;etc&#x2F;profile[root@localhost ~]# java -versionjava version &quot;1.8.0_191&quot;Java(TM) SE Runtime Environment (build 1.8.0_191-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-下载Mycat"><a href="#2-下载Mycat" class="headerlink" title="2.下载Mycat"></a>2.下载<code>Mycat</code></h3><blockquote><p><strong>自行寻找即可</strong></p></blockquote><h3 id="3-解压Mycat"><a href="#3-解压Mycat" class="headerlink" title="3.解压Mycat"></a>3.解压Mycat</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar xf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-准备MySQL主从复制环境"><a href="#4-准备MySQL主从复制环境" class="headerlink" title="4.准备MySQL主从复制环境"></a>4.准备MySQL主从复制环境</h3><blockquote><p><strong>请观看<a href="https://www.wsjj.top/archives/76">MySQL主从复制</a>教程</strong><br><strong><code>192.168.177.30</code>主库</strong><br><strong><code>192.168.146.100</code>从库</strong></p></blockquote><h3 id="5-创建Mycat登录用户"><a href="#5-创建Mycat登录用户" class="headerlink" title="5.创建Mycat登录用户"></a>5.创建Mycat登录用户</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant all on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-修改Mycat配置文件"><a href="#6-修改Mycat配置文件" class="headerlink" title="6.修改Mycat配置文件"></a>6.修改Mycat配置文件</h3><blockquote><p><strong>配置文件<code>并不</code>完整</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost mycat]# vim conf&#x2F;schema.xml&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;        &lt;schema name&#x3D;&quot;wordpress&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot; dataNode&#x3D;&quot;dn1&quot;&gt;                &lt;!-- auto sharding by id (long) --&gt;                &lt;table name&#x3D;&quot;wp&quot; primaryKey&#x3D;&quot;id&quot; dataNode&#x3D;&quot;dn1&quot; &#x2F;&gt;        &lt;&#x2F;schema&gt;        &lt;dataNode name&#x3D;&quot;dn1&quot; dataHost&#x3D;&quot;localhost1&quot; database&#x3D;&quot;wordpress&quot; &#x2F;&gt;        &lt;!--&lt;dataNode name&#x3D;&quot;dn4&quot; dataHost&#x3D;&quot;sequoiadb1&quot; database&#x3D;&quot;SAMPLE&quot; &#x2F;&gt;         &lt;dataNode name&#x3D;&quot;jdbc_dn1&quot; dataHost&#x3D;&quot;jdbchost&quot; database&#x3D;&quot;db1&quot; &#x2F;&gt;        &lt;dataNode       name&#x3D;&quot;jdbc_dn2&quot; dataHost&#x3D;&quot;jdbchost&quot; database&#x3D;&quot;db2&quot; &#x2F;&gt;        &lt;dataNode name&#x3D;&quot;jdbc_dn3&quot;       dataHost&#x3D;&quot;jdbchost&quot; database&#x3D;&quot;db3&quot; &#x2F;&gt; --&gt;        &lt;dataHost name&#x3D;&quot;localhost1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;0&quot;                          writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;                &lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;                &lt;!-- can have multi write hosts --&gt;                &lt;writeHost host&#x3D;&quot;hostM1&quot; url&#x3D;&quot;192.168.146.100:3306&quot; user&#x3D;&quot;root&quot;                                   password&#x3D;&quot;WWW.1.com&quot;&gt;                        &lt;!-- can have multi read hosts --&gt;                &lt;&#x2F;writeHost&gt;                &lt;writeHost host&#x3D;&quot;hostS1&quot; url&#x3D;&quot;192.168.177.30:3306&quot; user&#x3D;&quot;root&quot;                                   password&#x3D;&quot;WWW.1.com&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-在server-xml文件定义Mycat用户"><a href="#7-在server-xml文件定义Mycat用户" class="headerlink" title="7.在server.xml文件定义Mycat用户"></a>7.在server.xml文件定义Mycat用户</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost mycat]# vim conf&#x2F;server.xml &lt;user name&#x3D;&quot;wsjj&quot;&gt;                &lt;property name&#x3D;&quot;password&quot;&gt;WWW.1.com&lt;&#x2F;property&gt;                &lt;property name&#x3D;&quot;schemas&quot;&gt;wordpress&lt;&#x2F;property&gt;        &lt;&#x2F;user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-启动Mycat"><a href="#8-启动Mycat" class="headerlink" title="8.启动Mycat"></a>8.启动Mycat</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost mycat]# .&#x2F;bin&#x2F;mycat start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-测试连接"><a href="#9-测试连接" class="headerlink" title="9.测试连接"></a>9.测试连接</h3><p><img src="https://www.wsjj.top//upload/2023/04/mycat01.png" alt="mycat01"></p><blockquote><p><strong>注意<code>Mycat</code>默认使用<code>8066</code>端口</strong></p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/mycat02.png" alt="mycat02"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux集群系列教程】LVS负载均衡集群</title>
      <link href="/2023/04/24/96/"/>
      <url>/2023/04/24/96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux集群系列教程】LVS负载均衡集群"><a href="#【Linux集群系列教程】LVS负载均衡集群" class="headerlink" title="【Linux集群系列教程】LVS负载均衡集群"></a>【Linux集群系列教程】LVS负载均衡集群</h1><h2 id="一、关于集群"><a href="#一、关于集群" class="headerlink" title="一、关于集群"></a>一、关于集群</h2><h3 id="1-集群的类型"><a href="#1-集群的类型" class="headerlink" title="1.集群的类型"></a>1.集群的类型</h3><ul><li>负载均衡集群 全称：<code>Load Balance</code> 简称：<code>LB</code></li><li>高可用集群 全称：<code>High Avalibility</code> 简称：<code>HA</code></li><li>高性能计算集群 全称：<code>High Performace Compute</code> 简称：<code>HPC</code></li></ul><h4 id="A-负载均衡集群"><a href="#A-负载均衡集群" class="headerlink" title="A.负载均衡集群"></a>A.负载均衡集群</h4><blockquote><p>作用：提稿业务的<code>并发能力</code></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/04/lvs01.png" alt="lvs01"></p><h4 id="B-高可用集群"><a href="#B-高可用集群" class="headerlink" title="B.高可用集群"></a>B.高可用集群</h4><blockquote><p>作用：解决<code>单点故障</code>、<code>提高可用性</code></p><p>可用性：运行时间&#x2F;(运行时间+故障修复时间)</p></blockquote><p><img src="https://www.wsjj.top/upload/2023/04/lvs02.png" alt="lvs02"></p><h4 id="C-高性能计算集群"><a href="#C-高性能计算集群" class="headerlink" title="C.高性能计算集群"></a>C.高性能计算集群</h4><blockquote><p>作用：提高数据的<code>处理能力</code></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/04/lvs03.png" alt="lvs03"></p><h2 id="二、关于LVS-Linux-Virtual-Service"><a href="#二、关于LVS-Linux-Virtual-Service" class="headerlink" title="二、关于LVS(Linux Virtual Service)"></a>二、关于LVS(Linux Virtual Service)</h2><blockquote><p><code>lvs</code>被集成在<code>linux</code>内核，速度快 </p><p><code>ipvsadm</code>管理工具 </p></blockquote><h3 id="1-调度算法scheduler"><a href="#1-调度算法scheduler" class="headerlink" title="1.调度算法scheduler"></a>1.调度算法<code>scheduler</code></h3><ol><li><p><code>rr</code> 全称：<code>round robin</code> 轮询</p></li><li><p><code>wrr</code>基于权重的轮询<code>weight</code> </p><p>会话保持方案:</p><p>a. 会话共享存储 </p><p>b. 换调度算法 </p></li><li><p><code>lc</code> 全称：<code>least connection</code> 最少连接</p></li><li><p><code>wlc</code>     基于权重的最少连接  <strong>默认</strong></p></li><li><p><code>sh</code>      source hash    源hash</p><p>根据客户端<code>IP</code>计算<code>hash</code>值，相同<code>hash</code>值的请求转发到同一个后端服务器</p><p>一定程度可以解决会话保持问题</p></li></ol><h3 id="2-LVS工作模式"><a href="#2-LVS工作模式" class="headerlink" title="2.LVS工作模式"></a>2.LVS工作模式</h3><h4 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h4><p><img src="https://www.wsjj.top/upload/2023/04/lvs04.png" alt="lvs04"></p><h4 id="DR模式"><a href="#DR模式" class="headerlink" title="DR模式"></a>DR模式</h4><p><img src="https://www.wsjj.top/upload/2023/04/lvs05.png" alt="lvs05"></p><h3 id="3-NAT模式的核心要素"><a href="#3-NAT模式的核心要素" class="headerlink" title="3.NAT模式的核心要素"></a>3.NAT模式的核心要素</h3><ul><li>请求、响应都要经过<code>调度器</code>转发 </li><li><code>DIP</code>、<code>VIP</code>要分属不同的网络</li><li>调度器开启<code>路由转发</code>功能</li><li>所有<code>real server</code>网关要指向<code>DIP</code></li></ul><h3 id="4-NAT模式的工作原理"><a href="#4-NAT模式的工作原理" class="headerlink" title="4.NAT模式的工作原理"></a>4.NAT模式的工作原理</h3><p><img src="https://www.wsjj.top/upload/2023/04/lvs06.png" alt="lvs06"></p><p><img src="https://www.wsjj.top/upload/2023/04/lvs07.png" alt="lvs07"></p><h2 id="三、基于NAT模式的LVS集群"><a href="#三、基于NAT模式的LVS集群" class="headerlink" title="三、基于NAT模式的LVS集群"></a>三、基于NAT模式的LVS集群</h2><h3 id="1-实验规划"><a href="#1-实验规划" class="headerlink" title="1.实验规划"></a>1.实验规划</h3><p><img src="https://www.wsjj.top/upload/2023/04/lvs08.png" alt="lvs08"></p><h3 id="2-所有服务器关闭防火墙和SElinux、设置时间同步"><a href="#2-所有服务器关闭防火墙和SElinux、设置时间同步" class="headerlink" title="2.所有服务器关闭防火墙和SElinux、设置时间同步"></a>2.所有服务器关闭防火墙和SElinux、设置时间同步</h3><blockquote><p>过程省略，时间一定要同步！否则会出现<code>脑裂</code>现象！</p></blockquote><h3 id="3-划分子网"><a href="#3-划分子网" class="headerlink" title="3.划分子网"></a>3.划分子网</h3><p><img src="https://www.wsjj.top/upload/2023/04/lvs10.png" alt="lvs09"></p><blockquote><p>提前规划好子网</p></blockquote><h3 id="4-在调度器上安装ipvsadm"><a href="#4-在调度器上安装ipvsadm" class="headerlink" title="4.在调度器上安装ipvsadm"></a>4.在调度器上安装ipvsadm</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y ipvsadm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-在2台web服务器安装httpd用于测试"><a href="#5-在2台web服务器安装httpd用于测试" class="headerlink" title="5.在2台web服务器安装httpd用于测试"></a>5.在2台web服务器安装httpd用于测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-配置静态IP"><a href="#6-配置静态IP" class="headerlink" title="6.配置静态IP"></a>6.配置静态IP</h3><h4 id="A-调度器上配置网卡"><a href="#A-调度器上配置网卡" class="headerlink" title="A.调度器上配置网卡"></a>A.调度器上配置网卡</h4><p><img src="https://www.wsjj.top/upload/2023/04/lvs12.png" alt="lvs12"></p><h4 id="B-配置调度器静态IP"><a href="#B-配置调度器静态IP" class="headerlink" title="B.配置调度器静态IP"></a>B.配置调度器静态IP</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;7ec71d4c-13c5-413c-b03b-05b1c9705b0b&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.146.100NETMASK&#x3D;255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens36TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens36&quot;DEVICE&#x3D;&quot;ens36&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.177.254NETMASK&#x3D;255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-开启调度器的路由转发功能"><a href="#C-开启调度器的路由转发功能" class="headerlink" title="C.开启调度器的路由转发功能"></a>C.开启调度器的路由转发功能</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;sysctl.confnet.ipv4.ip_forward &#x3D; 1[root@master ~]# sysctl -pnet.ipv4.ip_forward &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-两台web服务器，更改网卡为VMnet2"><a href="#D-两台web服务器，更改网卡为VMnet2" class="headerlink" title="D.两台web服务器，更改网卡为VMnet2"></a>D.两台web服务器，更改网卡为VMnet2</h4><p><img src="https://www.wsjj.top/upload/2023/04/lvs13.png" alt="lvs13"></p><p><img src="https://www.wsjj.top/upload/2023/04/lvs13.png" alt="lvs13"></p><h4 id="E-为2台web服务器配置静态IP"><a href="#E-为2台web服务器配置静态IP" class="headerlink" title="E.为2台web服务器配置静态IP"></a>E.为2台web服务器配置静态IP</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.177.10NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.177.254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.177.20NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.177.254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-重启网卡服务"><a href="#F-重启网卡服务" class="headerlink" title="F.重启网卡服务"></a>F.重启网卡服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart network[root@node2 ~]# systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-在2台web服务器创建测试页面"><a href="#7-在2台web服务器创建测试页面" class="headerlink" title="7.在2台web服务器创建测试页面"></a>7.在2台web服务器创建测试页面</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl enable --now httpd#设置开机自启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;This is 192.168.177.10!&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;This is 192.168.177.20!&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl restart httpd#重启Apache服务器[root@node1 ~]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-测试2台web服务器正常工作"><a href="#8-测试2台web服务器正常工作" class="headerlink" title="8.测试2台web服务器正常工作"></a>8.测试2台web服务器正常工作</h3><blockquote><p>如果无法访问，请尝试修改<code>控制面板</code>-<code>网络和Internet</code>-<code>网络共享中心</code>-<code>更改适配器设置</code>-<code>VMnet2</code>-<code>修改网关地址为192.168.177.254</code></p></blockquote><p><img src="https://www.wsjj.top/upload/2023/04/lvs14.png" alt="lvs14"></p><p><img src="https://www.wsjj.top/upload/2023/04/lvs15.png" alt="lvs15"></p><h3 id="9-回到调度器上，配置虚拟服务"><a href="#9-回到调度器上，配置虚拟服务" class="headerlink" title="9.回到调度器上，配置虚拟服务"></a>9.回到调度器上，配置虚拟服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -A -t 192.168.146.100:80 -s rr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>-s</code>指定调度算法<br><code>-A</code>添加虚拟服务<br><code>-t</code>指定地址和虚拟端口</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.146.100:80 rr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>-L</code>显示内核中虚拟服务规则<br><code>-n</code>以数字形式显示IP和端口</p></blockquote><h3 id="10-添加real-server"><a href="#10-添加real-server" class="headerlink" title="10.添加real server"></a>10.添加<code>real server</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -a -t 192.168.146.100:80 -r 192.168.177.10:80 -m [root@master ~]# ipvsadm -a -t 192.168.146.100:80 -r 192.168.177.20:80 -m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>-a</code>在虚拟服务中添加<code>真实服务器</code><br><code>-t</code>基于<code>TCP</code>的服务<br><code>-m</code>设置工作模式为<code>NAT</code></p></blockquote><h3 id="11-查看负载均衡表"><a href="#11-查看负载均衡表" class="headerlink" title="11.查看负载均衡表"></a>11.查看负载均衡表</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.146.100:80 rr  -&gt; 192.168.177.10:80            Masq    1      0          0           -&gt; 192.168.177.20:80            Masq    1      0          0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-测试访问"><a href="#12-测试访问" class="headerlink" title="12.测试访问"></a>12.测试访问</h3><p><img src="https://www.wsjj.top/upload/2023/04/lvs16.png" alt="lvs16"></p><p><img src="https://www.wsjj.top/upload/2023/04/lvs17.png" alt="lvs17"></p><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -L -n -cIPVS connection entriespro expire state       source             virtual            destinationTCP 01:48  TIME_WAIT   192.168.146.1:11417 192.168.146.100:80 192.168.177.10:80TCP 00:55  TIME_WAIT   192.168.146.1:11398 192.168.146.100:80 192.168.177.20:80TCP 00:30  TIME_WAIT   192.168.146.1:11365 192.168.146.100:80 192.168.177.10:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>-c</code>查询当前ipvs中存在的连接</p></blockquote><h3 id="13-保存或恢复规则-默认不是永久存储"><a href="#13-保存或恢复规则-默认不是永久存储" class="headerlink" title="13.保存或恢复规则(默认不是永久存储)"></a>13.保存或恢复规则(默认不是永久存储)</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -S &gt; &#x2F;opt&#x2F;web_rule<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -R &lt; &#x2F;opt&#x2F;web_rule<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、基于DR模式的LVS集群环境"><a href="#四、基于DR模式的LVS集群环境" class="headerlink" title="四、基于DR模式的LVS集群环境"></a>四、基于DR模式的LVS集群环境</h2><h3 id="1-实验规划-1"><a href="#1-实验规划-1" class="headerlink" title="1.实验规划"></a>1.实验规划</h3><p><img src="https://www.wsjj.top//upload/2023/04/lvs18.png" alt="lvs18"></p><h3 id="2-所有服务器关闭防火墙和SElinux、设置时间同步-1"><a href="#2-所有服务器关闭防火墙和SElinux、设置时间同步-1" class="headerlink" title="2.所有服务器关闭防火墙和SElinux、设置时间同步"></a>2.所有服务器关闭防火墙和SElinux、设置时间同步</h3><blockquote><p>过程省略，时间一定要同步！否则会出现<code>脑裂</code>现象！</p></blockquote><h3 id="3-虚拟机划分子网"><a href="#3-虚拟机划分子网" class="headerlink" title="3.虚拟机划分子网"></a>3.虚拟机划分子网</h3><p><img src="https://www.wsjj.top//upload/2023/04/lvs19.png" alt="lvs19"></p><h3 id="4-配置静态IP"><a href="#4-配置静态IP" class="headerlink" title="4.配置静态IP"></a>4.配置静态IP</h3><blockquote><p>三台虚拟机修改网卡模式为<code>NAT</code>模式，此模式下默认使用<code>VMnet8</code>网卡</p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/lvs20.png" alt="lvs20"></p><h4 id="A-修改调度器的IP"><a href="#A-修改调度器的IP" class="headerlink" title="A.修改调度器的IP"></a>A.修改<code>调度器</code>的IP</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;7ec71d4c-13c5-413c-b03b-05b1c9705b0b&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.140.10NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.140.2DNS1&#x3D;114.114.114.114DNS2&#x3D;8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-为调度器配置虚拟网卡的IP-VIP"><a href="#B-为调度器配置虚拟网卡的IP-VIP" class="headerlink" title="B.为调度器配置虚拟网卡的IP(VIP)"></a>B.为<code>调度器</code>配置虚拟网卡的IP(VIP)</h4><blockquote><p>这只是临时的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ip addr add dev lo 192.168.140.100&#x2F;32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以把这个命令加到<code>/etc/rc.d/rc.local</code>里实现<code>永久</code>生效</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;rc.d&#x2F;rc.localip addr add dev lo 192.168.140.100&#x2F;32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# chmod a+x &#x2F;etc&#x2F;rc.d&#x2F;rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-为2台real-server配置IP"><a href="#C-为2台real-server配置IP" class="headerlink" title="C.为2台real server配置IP"></a>C.为2台<code>real server</code>配置IP</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;0682810a-3437-4af7-bf07-227ec3d502c8&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.140.20NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.140.2DNS1&#x3D;114.114.114.114DNS2&#x3D;8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;b3a870e2-3754-4205-9947-c94fb7716913&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.140.30NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.140.2DNS1&#x3D;114.114.114.114DNS2&#x3D;8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-为2台real-server配置虚拟网卡的IP-VIP"><a href="#D-为2台real-server配置虚拟网卡的IP-VIP" class="headerlink" title="D.为2台real server配置虚拟网卡的IP(VIP)"></a>D.为2台<code>real server</code>配置虚拟网卡的IP(VIP)</h4><blockquote><p>这只是临时的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ip addr add dev lo 192.168.140.100&#x2F;32[root@node2 ~]# ip addr add dev lo 192.168.140.100&#x2F;32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可以把这个命令加到<code>/etc/rc.d/rc.local</code>里实现<code>永久</code>生效</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;rc.d&#x2F;rc.localip addr add dev lo 192.168.140.100&#x2F;32[root@node2 ~]# vim &#x2F;etc&#x2F;rc.d&#x2F;rc.localip addr add dev lo 192.168.140.100&#x2F;32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# chmod a+x &#x2F;etc&#x2F;rc.d&#x2F;rc.local[root@node2 ~]# chmod a+x &#x2F;etc&#x2F;rc.d&#x2F;rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-修改所有real-server内核参数"><a href="#5-修改所有real-server内核参数" class="headerlink" title="5.修改所有real server内核参数"></a>5.修改所有<code>real server</code>内核参数</h3><blockquote><p><strong>当net.ipv4.conf.all.arp_ignore等于0的时候，<code>响应任意</code>网卡上接收到的对<code>本机IP</code>地址的<code>arp</code>请求<code>包括环回网卡上的地址</code>，而<code>不管</code>该目的<code>IP</code>是否在<code>接收</code>网卡上。</strong><br><strong>当net.ipv4.conf.all.arp_ignore等于1的时候，<code>只响应</code>目的<code>IP</code>地址为<code>接收</code>网卡上的<code>本地地址</code>的<code>arp</code>请求。</strong><br><strong>当net.ipv4.conf.all.arp_announce等于0的时候，<code>本机</code>所有<code>IP地址</code>都向<code>任何</code>一个接口通告<code>ARP</code>报文。</strong><br><strong>当net.ipv4.conf.all.arp_announce等于1的时候，<code>尽量</code>仅向<code>该网卡</code>回应与<code>该网段</code>匹配的<code>ARP</code>报文。</strong><br><strong>当net.ipv4.conf.all.arp_announce等于2的时候，<code>只</code>向<code>该网卡</code>回应与<code>该网段</code>匹配的<code>ARP</code>报文。</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;sysctl.confnet.ipv4.conf.all.arp_ignore &#x3D; 1net.ipv4.conf.all.arp_announce &#x3D; 2[root@node1 ~]# sysctl -pnet.ipv4.conf.all.arp_ignore &#x3D; 1net.ipv4.conf.all.arp_announce &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node2 ~]# vim &#x2F;etc&#x2F;sysctl.confnet.ipv4.conf.all.arp_ignore &#x3D; 1net.ipv4.conf.all.arp_announce &#x3D; 2[root@node2 ~]# sysctl -pnet.ipv4.conf.all.arp_ignore &#x3D; 1net.ipv4.conf.all.arp_announce &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-在所有real-server安装httpd"><a href="#6-在所有real-server安装httpd" class="headerlink" title="6.在所有real server安装httpd"></a>6.在所有<code>real server</code>安装<code>httpd</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y httpd[root@node2 ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="A-创建测试页面"><a href="#A-创建测试页面" class="headerlink" title="A.创建测试页面"></a>A.创建测试页面</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;This is 192.168.140.20!&lt;&#x2F;h1&gt;[root@node2 ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;This is 192.168.140.30!&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-设置开机自启动"><a href="#B-设置开机自启动" class="headerlink" title="B.设置开机自启动"></a>B.设置开机自启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl enable --now httpd[root@node2 ~]# systemctl enable --now httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-浏览器访问测试"><a href="#C-浏览器访问测试" class="headerlink" title="C.浏览器访问测试"></a>C.浏览器访问测试</h4><p><img src="https://www.wsjj.top//upload/2023/04/lvs21.png" alt="lvs21"></p><p><img src="https://www.wsjj.top//upload/2023/04/lvs22.png" alt="lvs22"></p><h3 id="7-回到调度器配置虚拟服务"><a href="#7-回到调度器配置虚拟服务" class="headerlink" title="7.回到调度器配置虚拟服务"></a>7.回到<code>调度器</code>配置虚拟服务</h3><h4 id="A-安装ipvsadm"><a href="#A-安装ipvsadm" class="headerlink" title="A.安装ipvsadm"></a>A.安装<code>ipvsadm</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y ipvsadm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-创建虚拟服务"><a href="#B-创建虚拟服务" class="headerlink" title="B.创建虚拟服务"></a>B.创建虚拟服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -A -t 192.168.140.100:80 -s rr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>-s</code>指定调度算法<br><code>-A</code>添加虚拟服务<br><code>-t</code>指定地址和虚拟端口</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.140.100:80 rr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>-L</code>显示内核中虚拟服务规则<br><code>-n</code>以数字形式显示IP和端口</p></blockquote><h4 id="C-添加real-server"><a href="#C-添加real-server" class="headerlink" title="C.添加real server"></a>C.添加<code>real server</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -a -t 192.168.140.100:80 -r 192.168.140.20:80 -g[root@master ~]# ipvsadm -a -t 192.168.140.100:80 -r 192.168.140.30:80 -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>-a</code>在虚拟服务中添加<code>真实服务器</code><br><code>-t</code>基于<code>TCP</code>的服务<br><code>-g</code>设置工作模式为<code>DR</code></p></blockquote><h4 id="D-查看虚拟服务工作状态"><a href="#D-查看虚拟服务工作状态" class="headerlink" title="D.查看虚拟服务工作状态"></a>D.查看虚拟服务工作状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.140.100:80 rr  -&gt; 192.168.140.20:80            Route   1      0          0           -&gt; 192.168.140.30:80            Route   1      0          0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-浏览器测试访问"><a href="#E-浏览器测试访问" class="headerlink" title="E.浏览器测试访问"></a>E.浏览器测试访问</h4><p><img src="https://www.wsjj.top//upload/2023/04/lvs23.png" alt="lvs23"></p><p><img src="https://www.wsjj.top//upload/2023/04/lvs24.png" alt="lvs24"></p><h2 id="五、持久性连接"><a href="#五、持久性连接" class="headerlink" title="五、持久性连接"></a>五、持久性连接</h2><blockquote><p>作用：<br>在<code>指定时间</code>范围内， <code>同一个客户端</code>的请求会被转发到<code>同一个real server</code><br>保持会话<code>持久</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -E -t 192.168.140.100:80 -s rr -p 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>-E</code>修改之前已经创建过的虚拟服务<br><code>-p</code>配置<code>持久化</code>时间，如题我配置了<code>10</code>秒，也就是<code>10</code>秒内，<code>客户端</code>访问的时候都是<code>同一个</code>服务器</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ipvsadm -L -nIP Virtual Server version 1.2.1 (size&#x3D;4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.140.100:80 rr persistent 10#可以看到这里新增了规则  -&gt; 192.168.140.20:80            Route   1      0          0           -&gt; 192.168.140.30:80            Route   1      0          0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 集群 </category>
          
          <category> LVS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> 负载均衡集群 </tag>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> lvs </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> lb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】memcached缓存服务器</title>
      <link href="/2023/04/23/95/"/>
      <url>/2023/04/23/95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】memcached缓存服务器"><a href="#【Linux基础服务教程】memcached缓存服务器" class="headerlink" title="【Linux基础服务教程】memcached缓存服务器"></a>【Linux基础服务教程】memcached缓存服务器</h1><h2 id="一、关于memcached"><a href="#一、关于memcached" class="headerlink" title="一、关于memcached"></a>一、关于memcached</h2><ul><li>开源的</li><li>高性能的</li><li>分布式缓存服务器</li><li>基于内存存储数据、key-value</li></ul><p><img src="https://www.wsjj.top//upload/2023/04/mem01.png" alt="mem01"></p><h2 id="二、memcached内存分配方式"><a href="#二、memcached内存分配方式" class="headerlink" title="二、memcached内存分配方式"></a>二、memcached内存分配方式</h2><p><img src="https://www.wsjj.top//upload/2023/04/mem02.png" alt="mem02"></p><blockquote><p>默认分配的内存大小为<code>48Bytes</code>，以<code>1.25</code>倍向上递僧</p></blockquote><h2 id="三、安装memcached"><a href="#三、安装memcached" class="headerlink" title="三、安装memcached"></a>三、安装memcached</h2><h4 id="A-安装libevent依赖"><a href="#A-安装libevent依赖" class="headerlink" title="A.安装libevent依赖"></a>A.安装libevent依赖</h4><blockquote><p>自行准备安装包</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar xf libevent-2.1.8-stable.tar.gz [root@localhost ~]# cd libevent-2.1.8-stable&#x2F;[root@localhost libevent-2.1.8-stable]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;libevent [root@localhost libevent-2.1.8-stable]# make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-安装memcached"><a href="#B-安装memcached" class="headerlink" title="B.安装memcached"></a>B.安装memcached</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# wget https:&#x2F;&#x2F;www.memcached.org&#x2F;files&#x2F;memcached-1.6.19.tar.gz[root@localhost ~]# tar xf memcached-1.6.19.tar.gz [root@localhost ~]# cd memcached-1.6.19&#x2F;[root@localhost memcached-1.6.19]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;memcached --with-libevent&#x3D;&#x2F;usr&#x2F;local&#x2F;libevent [root@localhost memcached-1.6.19]# make &amp;&amp; make install <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-启动memcached"><a href="#C-启动memcached" class="headerlink" title="C.启动memcached"></a>C.启动memcached</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# useradd -s &#x2F;sbin&#x2F;nologin memcached[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;memcached&#x2F;bin&#x2F;memcached -p 11211 -l 192.168.140.12 -u memcached -d -m 500M -c 2000 -n 20 -f 2 -t 10 [root@localhost ~]# netstat -antp | grep memcatcp        0      0 192.168.140.12:11211    0.0.0.0:*               LISTEN      25743&#x2F;memcached     [root@localhost ~]# ps -elf | grep memcached1 S memcach+  25743      1  0  80   0 - 214343 ep_pol 15:53 ?       00:00:00 &#x2F;usr&#x2F;local&#x2F;memcached&#x2F;bin&#x2F;memcached -p 11211 -l 192.168.140.12 -u memcached -d -m 500M -c 2000 -n 20 -f 2 -t 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动参数说明：<br><code>-p</code>端口<br><code>-l</code>监听地址<br><code>-u</code>启动用户<br><code>-d</code>后台启动<br><code>-m</code>允许<code>memcached</code>所使用的最大内存<br><code>-c</code>最大并发连接数<br><code>-f</code>增长因子，默认1.25倍<br><code>-n</code> <code>memcached</code>分配内存的基本大小，默认48B<br><code>-t</code>线程数</p></blockquote><h4 id="D-测试数据读写"><a href="#D-测试数据读写" class="headerlink" title="D.测试数据读写"></a>D.测试数据读写</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# telnet 192.168.140.12 11211Trying 192.168.140.12...Connected to 192.168.140.12.Escape character is &#39;^]&#39;.set name 0 20 6     20  过期时间  6 数据的长度martinSTOREDget nameVALUE name 0 6martinENDget nameENDquit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-利用PHP连接memcached"><a href="#E-利用PHP连接memcached" class="headerlink" title="E.利用PHP连接memcached"></a>E.利用PHP连接memcached</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y httpd php gd php-gd php-devel php-pecl-memcache[root@localhost ~]# php -m | grep -i memmemcache[root@localhost ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;test1.php&lt;?php   $memcache_obj &#x3D; memcache_connect(&#39;192.168.140.10&#39;, 11211);   $memcache_obj-&gt;add(&quot;name&quot;, &quot;Martin&quot;);   echo $memcache_obj-&gt;get(&quot;name&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、关于分布式算法"><a href="#四、关于分布式算法" class="headerlink" title="四、关于分布式算法"></a>四、关于分布式算法</h2><h3 id="1-根据hash值的余数"><a href="#1-根据hash值的余数" class="headerlink" title="1.根据hash值的余数"></a>1.根据hash值的余数</h3><blockquote><p>原理： “根据服务器台数的余数进行分散”。求得键的整数哈希值，再除以服务器台数，根据其余数来选择服务器。<br>缺点： 余数计算的方法简单，数据的hash也相当优秀，但也有其缺点。那就是当添加或移除服务器时，缓存重组的；代价相当巨大。添加服务器后余数就会产生巨变，这样就无法获取与保存时相同的服务器，从而影响缓存的命中率。</p></blockquote><h3 id="2-一致性hash算法"><a href="#2-一致性hash算法" class="headerlink" title="2.一致性hash算法"></a>2.一致性hash算法</h3><blockquote><p>原理： <code>Consistent Hashing</code> : 首先求出<code>memcached</code>服务器(节点)的哈希值，并将其配置到<code>0~2^32</code>的圆<code>continuum</code>上。然后用同样的方法求出存储数据的键的哈希值，并映射到圆上。然后从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器上。如果超过<code>2^32</code>仍然找不到服务器,就会保存到第一台<code>memcached</code>服务器上。</p></blockquote><p><img src="https://www.wsjj.top//upload/2023/04/mem03.png" alt="mem03"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> memcached </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> redis </tag>
            
            <tag> memcached </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Redis分片集群</title>
      <link href="/2023/04/23/94/"/>
      <url>/2023/04/23/94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Redis分片集群"><a href="#【Linux基础服务教程】Redis分片集群" class="headerlink" title="【Linux基础服务教程】Redis分片集群"></a>【Linux基础服务教程】Redis分片集群</h1><h2 id="一、关于分片集群"><a href="#一、关于分片集群" class="headerlink" title="一、关于分片集群"></a>一、关于分片集群</h2><blockquote><p><code>redis 3.x</code>版本后开始支持<br>1.提高缓存数据读写速度<br>2.提高缓存数据的可用性、可靠性 </p></blockquote><h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h3><ul><li><code>Redis</code>集群使用<code>哈希槽slot</code>进行数据分片</li><li><code>Redis</code>集群有<code>16384</code>个<code>哈希槽</code>, 每个<code>key</code>通过<code>CRC16</code>校验后对<code>16384</code>取模来决定放置哪个槽, 集群的每个节点负责一部分<code>hash槽</code></li></ul><blockquote><p>举个例子：<br>比如当前集群有<code>3</code>个节点。<br>那么:<br>节点 <code>A </code>包含<code>0</code>到<code>5500</code>号哈希槽。<br>节点 <code>B</code> 包含<code>5501</code>到<code>11000</code>号哈希槽。<br>节点 <code>C </code>包含<code>11001</code>到<code>16384</code>号哈希槽。<br>数据究竟存放到哪个槽上？<br>数据做<code>hash运算</code>除以<code>16384</code>除余</p></blockquote><p><img src="https://www.wsjj.top/upload/2023/04/redis01.png" alt="redis01"></p><h2 id="二、部署Redis分片集群"><a href="#二、部署Redis分片集群" class="headerlink" title="二、部署Redis分片集群"></a>二、部署Redis分片集群</h2><h3 id="1-环境描述"><a href="#1-环境描述" class="headerlink" title="1.环境描述"></a>1.环境描述</h3><blockquote><p><code>10.10.10.128</code><code>3</code>个<code>集群模式</code>实例端口：<code>7001</code>、<code>7002</code>、<code>7003</code><br><code>10.10.10.129</code><code>3</code>个<code>集群模式</code>实例端口：<code>7004</code>、<code>7005</code>、<code>7006</code></p></blockquote><h3 id="2-关闭防火墙、SElinux、同步时间"><a href="#2-关闭防火墙、SElinux、同步时间" class="headerlink" title="2.关闭防火墙、SElinux、同步时间"></a>2.关闭防火墙、SElinux、同步时间</h3><blockquote><p>过程省略，时间<code>一定</code>要同步，否则会出现<code>脑裂</code>问题</p></blockquote><h3 id="3-二台服务器安装Redis"><a href="#3-二台服务器安装Redis" class="headerlink" title="3.二台服务器安装Redis"></a>3.二台服务器安装Redis</h3><p><strong><a href="https://www.wsjj.top/archives/91">点我跳转</a><code>Redis</code>的安装教程</strong></p><h3 id="4-在第一台服务器上创建3个实例"><a href="#4-在第一台服务器上创建3个实例" class="headerlink" title="4.在第一台服务器上创建3个实例"></a>4.在第一台服务器上创建3个实例</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# mkdir -p &#x2F;opt&#x2F;700&#123;1,2,3&#125;&#x2F;&#123;conf,data&#125;[root@master ~]# cp  &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf &#x2F;opt&#x2F;7001&#x2F;conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="A-修改配置文件"><a href="#A-修改配置文件" class="headerlink" title="A.修改配置文件"></a>A.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;opt&#x2F;7001&#x2F;conf&#x2F;redis.confbind 10.10.10.128#按照规划，更改为本机IPport 7001#按照规划，更改相应端口daemonize yes#启用后台运行pidfile &#x2F;var&#x2F;run&#x2F;redis_7001.pid#按照规划，修改pid命名规则，方便后续区分loglevel warning#默认日志等级太低，修改高等级logfile &quot;&#x2F;var&#x2F;log&#x2F;redis_7001.log&quot;#指定日志存放目录，并且为了区分加上相应的端口号dbfilename dump_7001.rdb#为了方便区分数据文件，修改命名规则dir &#x2F;opt&#x2F;7001&#x2F;data#按照规划，修改默认数据文件存放目录appendonly yes#启动aof日志appendfilename &quot;appendonly_7001.aof&quot;#为了区分aof日志，修改命名规则cluster-enabled yes#启用集群模式cluster-config-file nodes-7001.conf#启动集群配置文件，为了方便区分，并修改命名规则cluster-node-timeout 15000#启用超时时间(单位毫秒)，超过限定时间，则判定对面已挂掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-修改另外2个实例的配置文件"><a href="#B-修改另外2个实例的配置文件" class="headerlink" title="B.修改另外2个实例的配置文件"></a>B.修改另外2个实例的配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cp &#x2F;opt&#x2F;7001&#x2F;conf&#x2F;redis.conf &#x2F;opt&#x2F;7002&#x2F;conf&#x2F;[root@master ~]# cp &#x2F;opt&#x2F;7001&#x2F;conf&#x2F;redis.conf &#x2F;opt&#x2F;7003&#x2F;conf&#x2F;#快速拷贝修改好的配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -ri &#39;s|7001|7002|g&#39; &#x2F;opt&#x2F;7002&#x2F;conf&#x2F;redis.conf [root@master ~]# sed -ri &#39;s|7001|7003|g&#39; &#x2F;opt&#x2F;7003&#x2F;conf&#x2F;redis.conf#可以使用sed命令快速修改端口信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-启动第一台上的三个实例"><a href="#C-启动第一台上的三个实例" class="headerlink" title="C.启动第一台上的三个实例"></a>C.启动第一台上的三个实例</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-server &#x2F;opt&#x2F;7001&#x2F;conf&#x2F;redis.conf [root@master ~]# redis-server &#x2F;opt&#x2F;7002&#x2F;conf&#x2F;redis.conf [root@master ~]# redis-server &#x2F;opt&#x2F;7003&#x2F;conf&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="D-可以使用netstat查看是否启动"><a href="#D-可以使用netstat查看是否启动" class="headerlink" title="D.可以使用netstat查看是否启动"></a>D.可以使用netstat查看是否启动</h4><blockquote><p>如果提示没有<code>netstat</code>命令，可以使用<code>yum install -y net-tools</code>安装</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# netstat -tunlp | grep redistcp        0      0 10.10.10.128:17001      0.0.0.0:*               LISTEN      7474&#x2F;redis-server 1 tcp        0      0 10.10.10.128:17002      0.0.0.0:*               LISTEN      7479&#x2F;redis-server 1 tcp        0      0 10.10.10.128:17003      0.0.0.0:*               LISTEN      7484&#x2F;redis-server 1 tcp        0      0 10.10.10.128:7001       0.0.0.0:*               LISTEN      7474&#x2F;redis-server 1 tcp        0      0 10.10.10.128:7002       0.0.0.0:*               LISTEN      7479&#x2F;redis-server 1 tcp        0      0 10.10.10.128:7003       0.0.0.0:*               LISTEN      7484&#x2F;redis-server 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到，除了我们创建好了<code>三个实例</code>，<code>redis</code>还会自动创建一个端口<code>+10000端口</code>的进程，这个进程主要用于后续<code>集群</code>环境，内部<code>互相通信</code>，其中一个作用是：互相检测<code>存活</code>状态。</p></blockquote><h3 id="5-在第二台服务器上创建三个实例"><a href="#5-在第二台服务器上创建三个实例" class="headerlink" title="5.在第二台服务器上创建三个实例"></a>5.在第二台服务器上创建三个实例</h3><blockquote><p>如果没有<code>tree</code>命令，可以使用<code>yum install -y tree</code>安装</p></blockquote><h4 id="A-创建必要的数据目录"><a href="#A-创建必要的数据目录" class="headerlink" title="A.创建必要的数据目录"></a>A.创建必要的数据目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mkdir -p &#x2F;opt&#x2F;700&#123;4,5,6&#125;&#x2F;&#123;conf,data&#125;[root@node1 ~]# tree &#x2F;opt&#x2F;opt├── 7004│   ├── conf│   └── data├── 7005│   ├── conf│   └── data└── 7006    ├── conf    └── data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-修改配置文件"><a href="#B-修改配置文件" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# scp &#x2F;opt&#x2F;7001&#x2F;conf&#x2F;redis.conf root@10.10.10.129:&#x2F;opt&#x2F;7004&#x2F;confredis.conf                                                    100%   62KB   7.6MB&#x2F;s   00:00#可以回到第一个服务器上，快速拷贝配置文件[root@master ~]# scp &#x2F;opt&#x2F;7001&#x2F;conf&#x2F;redis.conf root@10.10.10.129:&#x2F;opt&#x2F;7005&#x2F;confredis.conf                                                    100%   62KB   6.2MB&#x2F;s   00:00    [root@master ~]# scp &#x2F;opt&#x2F;7001&#x2F;conf&#x2F;redis.conf root@10.10.10.129:&#x2F;opt&#x2F;7006&#x2F;confredis.conf                                                    100%   62KB   8.6MB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用<code>sed</code>命令，快速修改<code>IP</code>地址，这里使用了<code>sed</code>内的正则<code>反向引用</code><br>关于sed命令反向引用：<a href="https://www.wsjj.top/archives/81">https://www.wsjj.top/archives/81</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# sed -ri &#39;s|(10.10.10.)128|\1129|g&#39; &#x2F;opt&#x2F;7004&#x2F;conf&#x2F;redis.conf[root@node1 ~]# sed -ri &#39;s|(10.10.10.)128|\1129|g&#39; &#x2F;opt&#x2F;7005&#x2F;conf&#x2F;redis.conf [root@node1 ~]# sed -ri &#39;s|(10.10.10.)128|\1129|g&#39; &#x2F;opt&#x2F;7006&#x2F;conf&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# sed -ri &#39;s|7001|7004|g&#39; &#x2F;opt&#x2F;7004&#x2F;conf&#x2F;redis.conf#可以使用sed命令快速改文件内端口[root@node1 ~]# sed -ri &#39;s|7001|7005|g&#39; &#x2F;opt&#x2F;7005&#x2F;conf&#x2F;redis.conf[root@node1 ~]# sed -ri &#39;s|7001|7006|g&#39; &#x2F;opt&#x2F;7006&#x2F;conf&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-启动第二台服务器上的三个实例"><a href="#C-启动第二台服务器上的三个实例" class="headerlink" title="C.启动第二台服务器上的三个实例"></a>C.启动第二台服务器上的三个实例</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# redis-server &#x2F;opt&#x2F;7004&#x2F;conf&#x2F;redis.conf [root@node1 ~]# redis-server &#x2F;opt&#x2F;7005&#x2F;conf&#x2F;redis.conf [root@node1 ~]# redis-server &#x2F;opt&#x2F;7006&#x2F;conf&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="D-检查实例是否启动"><a href="#D-检查实例是否启动" class="headerlink" title="D.检查实例是否启动"></a>D.检查实例是否启动</h4><blockquote><p>如果提示没有<code>netstat</code>命令，可以使用<code>yum install -y net-tools</code>安装</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# netstat -tunlp | grep redistcp        0      0 10.10.10.129:17004      0.0.0.0:*               LISTEN      2730&#x2F;redis-server 1 tcp        0      0 10.10.10.129:17005      0.0.0.0:*               LISTEN      2748&#x2F;redis-server 1 tcp        0      0 10.10.10.129:17006      0.0.0.0:*               LISTEN      2743&#x2F;redis-server 1 tcp        0      0 10.10.10.129:7004       0.0.0.0:*               LISTEN      2730&#x2F;redis-server 1 tcp        0      0 10.10.10.129:7005       0.0.0.0:*               LISTEN      2748&#x2F;redis-server 1 tcp        0      0 10.10.10.129:7006       0.0.0.0:*               LISTEN      2743&#x2F;redis-server 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、创建Redis分片集群"><a href="#三、创建Redis分片集群" class="headerlink" title="三、创建Redis分片集群"></a>三、创建Redis分片集群</h2><h3 id="1-创建集群"><a href="#1-创建集群" class="headerlink" title="1.创建集群"></a>1.创建集群</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# redis-cli --cluster create \&gt; 10.10.10.128:7001 \&gt; 10.10.10.128:7002 \&gt; 10.10.10.128:7003 \&gt; 10.10.10.129:7004 \&gt; 10.10.10.129:7005 \&gt; 10.10.10.129:7006 \&gt; --cluster-replicas 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922#redis会自动帮我们分配好哈希槽Master[2] -&gt; Slots 10923 - 16383Adding replica 10.10.10.129:7006 to 10.10.10.128:7001Adding replica 10.10.10.128:7003 to 10.10.10.129:7004Adding replica 10.10.10.129:7005 to 10.10.10.128:7002M: 6e108d11270632ca9af9202a6effb77ae11dbebe 10.10.10.128:7001#默认随机分配主从M为主，S为从   slots:[0-5460] (5461 slots) masterM: 3b7927dce6ad42ff2d5a24b331ee538f4dc745ff 10.10.10.128:7002   slots:[10923-16383] (5461 slots) masterS: 17621d815c5169f30dc861c038efbe614815d602 10.10.10.128:7003   replicates bddec0b161e908780d7e7953905322851b822b5eM: bddec0b161e908780d7e7953905322851b822b5e 10.10.10.129:7004   slots:[5461-10922] (5462 slots) masterS: 76ba74cdc067f05da20c86f56963ab08f539a7f8 10.10.10.129:7005   replicates 3b7927dce6ad42ff2d5a24b331ee538f4dc745ffS: cd7479781f15252cd3016837a398dc40761b0267 10.10.10.129:7006   replicates 6e108d11270632ca9af9202a6effb77ae11dbebeCan I set the above configuration? (type &#39;yes&#39; to accept): yes#如果这里选择no会重新分配主从&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join&gt;&gt;&gt; Performing Cluster Check (using node 10.10.10.128:7001)M: 6e108d11270632ca9af9202a6effb77ae11dbebe 10.10.10.128:7001   slots:[0-5460] (5461 slots) master   1 additional replica(s)S: 17621d815c5169f30dc861c038efbe614815d602 10.10.10.128:7003   slots: (0 slots) slave   replicates bddec0b161e908780d7e7953905322851b822b5eM: bddec0b161e908780d7e7953905322851b822b5e 10.10.10.129:7004   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: cd7479781f15252cd3016837a398dc40761b0267 10.10.10.129:7006   slots: (0 slots) slave   replicates 6e108d11270632ca9af9202a6effb77ae11dbebeM: 3b7927dce6ad42ff2d5a24b331ee538f4dc745ff 10.10.10.128:7002   slots:[10923-16383] (5461 slots) master   1 additional replica(s)S: 76ba74cdc067f05da20c86f56963ab08f539a7f8 10.10.10.129:7005   slots: (0 slots) slave   replicates 3b7927dce6ad42ff2d5a24b331ee538f4dc745ff[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.#成功创建集群<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看集群信息"><a href="#2-查看集群信息" class="headerlink" title="2.查看集群信息"></a>2.查看集群信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# redis-cli --cluster info 10.10.10.128:700110.10.10.128:7001 (6e108d11...) -&gt; 0 keys | 5461 slots | 1 slaves.10.10.10.129:7004 (bddec0b1...) -&gt; 0 keys | 5462 slots | 1 slaves.10.10.10.128:7002 (3b7927dc...) -&gt; 0 keys | 5461 slots | 1 slaves.[OK] 0 keys in 3 masters.0.00 keys per slot on average.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-连接集群，测试读写数据"><a href="#3-连接集群，测试读写数据" class="headerlink" title="3.连接集群，测试读写数据"></a>3.连接集群，测试读写数据</h3><blockquote><p><code>随机</code>选择一个<code>主节点</code>登录即可，一定要加上<code>-c</code>参数，以<code>集群模式</code>登录！</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 7001 -c10.10.10.128:7001&gt; set url https:&#x2F;&#x2F;www.wsjj.top-&gt; Redirected to slot [12521] located at 10.10.10.128:7002OK10.10.10.128:7002&gt; get url&quot;https:&#x2F;&#x2F;www.wsjj.top&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="以下是错误操作"><a href="#以下是错误操作" class="headerlink" title="以下是错误操作"></a>以下是错误操作</h4><blockquote><p>不加<code>-c</code>参数，存储数据就会返回错误！</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 700110.10.10.128:7001&gt; set url https:&#x2F;&#x2F;www.wsjj.top(error) MOVED 12521 10.10.10.128:7002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> redis </category>
          
          <category> 集群 </category>
          
          <category> redis集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Redis多实例和主从复制</title>
      <link href="/2023/04/23/93/"/>
      <url>/2023/04/23/93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Redis多实例和主从复制"><a href="#【Linux基础服务教程】Redis多实例和主从复制" class="headerlink" title="【Linux基础服务教程】Redis多实例和主从复制"></a>【Linux基础服务教程】Redis多实例和主从复制</h1><h2 id="一、Redis多实例"><a href="#一、Redis多实例" class="headerlink" title="一、Redis多实例"></a>一、Redis多实例</h2><blockquote><p>环境准备：<br>redis实例:<code>/opt/6380</code>数据目录:<code>/opt/6380/data</code>日志:<code>/var/log/redis_6380.log</code><br>redis实例:<code>/opt/6381</code>数据目录:<code>/opt/6381/data</code>日志:<code>/var/log/redis_6381.log</code></p></blockquote><h3 id="1-规划实例目录"><a href="#1-规划实例目录" class="headerlink" title="1.规划实例目录"></a>1.规划实例目录</h3><blockquote><p>如果没有<code>tree</code>命令，可以使用<code>yum install -y tree</code>安装</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# mkdir -p &#x2F;opt&#x2F;638&#123;0,1&#125;&#x2F;&#123;data,conf&#125;[root@master ~]# tree &#x2F;opt&#x2F;opt├── 6380│   ├── conf│   └── data└── 6381    ├── conf    └── data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cp &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf &#x2F;opt&#x2F;6380&#x2F;conf&#x2F;#复制一份原配置文件[root@master ~]# vim &#x2F;opt&#x2F;6380&#x2F;conf&#x2F;redis.confbind 10.10.10.128#按照规划，更改为本机IPport 6380#按照规划，更改端口daemonize yes#开启后台运行pidfile &#x2F;var&#x2F;run&#x2F;redis_6380.pid#修改pid文件loglevel warning#避免空间利用问题，修改日志等级为最高logfile &quot;&#x2F;var&#x2F;log&#x2F;redis_6380.log&quot;#按照规划，指定日志文件存放路径dbfilename dump_6380.rdb#修改数据文件命名规则，方便区分其他dir &#x2F;opt&#x2F;6380&#x2F;data#按照规划，指定数据文件存放路径appendonly yes#启用aof日志appendfilename &quot;appendonly_6380.aof&quot;#为了方便区分其他，更改命名规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cp &#x2F;opt&#x2F;6380&#x2F;conf&#x2F;redis.conf &#x2F;opt&#x2F;6381&#x2F;conf&#x2F;#拷贝配置文件给第二个实例[root@master ~]# sed -ri &#39;s|6380|6381|g&#39; &#x2F;opt&#x2F;6381&#x2F;conf&#x2F;redis.conf#快速修改里面的端口和配置文件命名规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-启动实例"><a href="#3-启动实例" class="headerlink" title="3.启动实例"></a>3.启动实例</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-server &#x2F;opt&#x2F;6380&#x2F;conf&#x2F;redis.conf [root@master ~]# redis-server &#x2F;opt&#x2F;6381&#x2F;conf&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-检查实例是否成功启动"><a href="#4-检查实例是否成功启动" class="headerlink" title="4.检查实例是否成功启动"></a>4.检查实例是否成功启动</h3><blockquote><p>如果提示没有<code>netstat</code>命令，可以使用<code>yum install -y net-tools</code>安装</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# netstat -tunlp | grep redistcp        0      0 10.10.10.128:6380       0.0.0.0:*               LISTEN      6308&#x2F;redis-server 1 tcp        0      0 10.10.10.128:6381       0.0.0.0:*               LISTEN      6313&#x2F;redis-server 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-测试数据读写"><a href="#5-测试数据读写" class="headerlink" title="5.测试数据读写"></a>5.测试数据读写</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 638010.10.10.128:6380&gt; set uid 1001OK10.10.10.128:6380&gt; get uid&quot;1001&quot;[root@master ~]# redis-cli -h 10.10.10.128 -p 638110.10.10.128:6381&gt; set uid 1002OK10.10.10.128:6381&gt; get uid&quot;1002&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、主从复制"><a href="#二、主从复制" class="headerlink" title="二、主从复制"></a>二、主从复制</h2><blockquote><p>作用: 避免<code>单点</code>故障、提高<code>可用性</code> </p></blockquote><h3 id="1-主从复制核心要素"><a href="#1-主从复制核心要素" class="headerlink" title="1.主从复制核心要素"></a>1.主从复制核心要素</h3><ul><li>基于异步进行数据复制</li><li>支持一主多从</li><li>复制数据时不影响前端业务， 非阻塞</li><li>redis 2.6版本开始，从服务器为只读模式</li></ul><h3 id="2-修改配置文件-1"><a href="#2-修改配置文件-1" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><blockquote><p>基于上面的<code>多实例</code>修改<br><code>10.10.10.128 6380</code>作从节点<br><code>10.10.10.128 6381</code>作主节点</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;opt&#x2F;6380&#x2F;conf&#x2F;redis.confreplicaof 10.10.10.128 6381#后面跟上主节点的IP和端口# masterauth &lt;master-password&gt;#后面跟上主节点的密码，因为我们没有配置密码，故不做修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重启实例"><a href="#3-重启实例" class="headerlink" title="3.重启实例"></a>3.重启实例</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 6380 shutdown[root@master ~]# redis-server &#x2F;opt&#x2F;6380&#x2F;conf&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-检查主从"><a href="#4-检查主从" class="headerlink" title="4.检查主从"></a>4.检查主从</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 6381#登录主库10.10.10.128:6381&gt; info Replication#查看主从信息# Replicationrole:masterconnected_slaves:1slave0:ip&#x3D;10.10.10.128,port&#x3D;6380,state&#x3D;online,offset&#x3D;224,lag&#x3D;1master_replid:77eb31bbfbe2f21f6a8f3f19a3b5e58df5fd0edemaster_replid2:0000000000000000000000000000000000000000master_repl_offset:224second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:224<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 6380#登录从库10.10.10.128:6380&gt; info Replication#查看从库信息# Replicationrole:slavemaster_host:10.10.10.128master_port:6381master_link_status:upmaster_last_io_seconds_ago:8master_sync_in_progress:0slave_repl_offset:378slave_priority:100slave_read_only:1connected_slaves:0master_replid:77eb31bbfbe2f21f6a8f3f19a3b5e58df5fd0edemaster_replid2:0000000000000000000000000000000000000000master_repl_offset:378second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:378<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-主从切换"><a href="#5-主从切换" class="headerlink" title="5.主从切换"></a>5.主从切换</h3><h4 id="A-模拟主库故障"><a href="#A-模拟主库故障" class="headerlink" title="A.模拟主库故障"></a>A.模拟主库故障</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 6381 shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-将原来的从提升到新主"><a href="#B-将原来的从提升到新主" class="headerlink" title="B.将原来的从提升到新主"></a>B.将原来的从提升到新主</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 638010.10.10.128:6380&gt; slaveof no oneOK10.10.10.128:6380&gt; info Replication# Replicationrole:masterconnected_slaves:0#此时从节点为0master_replid:1cafa25aebcd5a8943818f151f66e6ccb97a3de6master_replid2:77eb31bbfbe2f21f6a8f3f19a3b5e58df5fd0edemaster_repl_offset:574second_repl_offset:575repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:574<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-注释掉原来的配置信息"><a href="#C-注释掉原来的配置信息" class="headerlink" title="C.注释掉原来的配置信息"></a>C.注释掉原来的配置信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;opt&#x2F;6380&#x2F;conf&#x2F;redis.conf# replicaof 10.10.10.128 6381<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-修改配置文件，配置新从库"><a href="#D-修改配置文件，配置新从库" class="headerlink" title="D.修改配置文件，配置新从库"></a>D.修改配置文件，配置新从库</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;opt&#x2F;6381&#x2F;conf&#x2F;redis.confreplicaof 10.10.10.128 6380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-模拟数据库恢复"><a href="#E-模拟数据库恢复" class="headerlink" title="E.模拟数据库恢复"></a>E.模拟数据库恢复</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-server &#x2F;opt&#x2F;6381&#x2F;conf&#x2F;redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-登录数据库查看新的主从关系"><a href="#F-登录数据库查看新的主从关系" class="headerlink" title="F.登录数据库查看新的主从关系"></a>F.登录数据库查看新的主从关系</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 638110.10.10.128:6381&gt; info replication# Replicationrole:slavemaster_host:10.10.10.128master_port:6380master_link_status:upmaster_last_io_seconds_ago:7master_sync_in_progress:0slave_repl_offset:616slave_priority:100slave_read_only:1connected_slaves:0master_replid:1cafa25aebcd5a8943818f151f66e6ccb97a3de6master_replid2:0000000000000000000000000000000000000000master_repl_offset:616second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:575repl_backlog_histlen:42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 638010.10.10.128:6380&gt; info Replication# Replicationrole:masterconnected_slaves:1#有1个从库slave0:ip&#x3D;10.10.10.128,port&#x3D;6381,state&#x3D;online,offset&#x3D;756,lag&#x3D;0master_replid:1cafa25aebcd5a8943818f151f66e6ccb97a3de6master_replid2:77eb31bbfbe2f21f6a8f3f19a3b5e58df5fd0edemaster_repl_offset:756second_repl_offset:575repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:756<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Redis配置文件</title>
      <link href="/2023/04/22/92/"/>
      <url>/2023/04/22/92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Redis配置文件"><a href="#【Linux基础服务教程】Redis配置文件" class="headerlink" title="【Linux基础服务教程】Redis配置文件"></a>【Linux基础服务教程】Redis配置文件</h1><blockquote><p><strong>上一期教程<a href="https://www.wsjj.top/archives/91">Redis的安装和基本使用</a></strong></p></blockquote><h2 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h2><blockquote><p>配置文件路径：<code>/usr/local/redis/conf/redis.conf</code></p></blockquote><h3 id="1-加载子配置文件"><a href="#1-加载子配置文件" class="headerlink" title="1.加载子配置文件"></a>1.加载子配置文件</h3><pre class="line-numbers language-none"><code class="language-none"># include &#x2F;path&#x2F;to&#x2F;local.conf# include &#x2F;path&#x2F;to&#x2F;other.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-加载模块"><a href="#2-加载模块" class="headerlink" title="2.加载模块"></a>2.加载模块</h3><pre class="line-numbers language-none"><code class="language-none"># loadmodule &#x2F;path&#x2F;to&#x2F;my_module.so# loadmodule &#x2F;path&#x2F;to&#x2F;other_module.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-修改Redis监听地址"><a href="#3-修改Redis监听地址" class="headerlink" title="3.修改Redis监听地址"></a>3.修改<code>Redis</code>监听地址</h3><pre class="line-numbers language-none"><code class="language-none"># bind 192.168.1.100 10.0.0.1# bind 127.0.0.1 ::1bind 10.10.10.128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>-h</code>指定登录地址</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.12810.10.10.128:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 shutdown#如果修改了监听地址，关闭数据库的时候也要带上地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-修改Redis监听端口"><a href="#4-修改Redis监听端口" class="headerlink" title="4.修改Redis监听端口"></a>4.修改<code>Redis</code>监听端口</h3><pre class="line-numbers language-none"><code class="language-none">port 6379#&#96;redis&#96;默认监听端口port 8888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 8888 10.10.10.128:8888&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -p 8888 shutdown #如果修改了端口和地址，在结束和登录的时候都要加上新地址和端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-修改Redis请求接收队列长度"><a href="#5-修改Redis请求接收队列长度" class="headerlink" title="5.修改Redis请求接收队列长度"></a>5.修改<code>Redis</code>请求接收队列长度</h3><pre class="line-numbers language-none"><code class="language-none">tcp-backlog 511#默认511很小<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">tcp-backlog 800#建议800-10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果修改了这里的<code>默认</code>参数，实际上是<code>不生效</code>的，虽然<code>redis</code>生效了，但是需要修改一些系统的默认参数。<br>需要调整<code>somaxconn</code>、<code>tcp_max_syn_backlog</code>内核参数<br><code>somaxconn</code>: 系统层面，网卡接收请求的队列长度<br><code>tcp_max_syn_backlog</code>：系统层面，网卡接收TCP第一次握手的队列长度</p></blockquote><h4 id="A-临时修改内核参数"><a href="#A-临时修改内核参数" class="headerlink" title="A.临时修改内核参数"></a>A.临时修改内核参数</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# echo 1000 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn[root@localhost ~]# echo 1000 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog[root@localhost ~]# [root@localhost ~]# cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn 1000[root@localhost ~]# cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_max_syn_backlog 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-永久修改内核参数"><a href="#B-永久修改内核参数" class="headerlink" title="B.永久修改内核参数"></a>B.永久修改内核参数</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;sysctl.conf net.core.somaxconn &#x3D; 1000net.ipv4.tcp_max_syn_backlog &#x3D; 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sysctl -pnet.core.somaxconn &#x3D; 1000net.ipv4.tcp_max_syn_backlog &#x3D; 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>查看所有参数<code>sysctl -a</code></p></blockquote><h3 id="6-设置客户端空闲的超时时间"><a href="#6-设置客户端空闲的超时时间" class="headerlink" title="6.设置客户端空闲的超时时间"></a>6.设置客户端空闲的超时时间</h3><pre class="line-numbers language-none"><code class="language-none">timeout 30#超过这个时间就自动断开<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-设置Redis后台启动"><a href="#7-设置Redis后台启动" class="headerlink" title="7.设置Redis后台启动"></a>7.设置<code>Redis</code>后台启动</h3><pre class="line-numbers language-none"><code class="language-none">daemonize yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-指定Redis的PID文件"><a href="#8-指定Redis的PID文件" class="headerlink" title="8.指定Redis的PID文件"></a>8.指定<code>Redis</code>的<code>PID</code>文件</h3><pre class="line-numbers language-none"><code class="language-none">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-错误日志"><a href="#9-错误日志" class="headerlink" title="9.错误日志"></a>9.错误日志</h3><pre class="line-numbers language-none"><code class="language-none">loglevel notice#默认notice等级loglevel warning#避免资源浪费，修改至最高等级<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10指定错误日志存放路径"><a href="#10指定错误日志存放路径" class="headerlink" title="10指定错误日志存放路径"></a>10指定错误日志存放路径</h3><pre class="line-numbers language-none"><code class="language-none">logfile &quot;&quot;#默认为空，不存储日志logfile &quot;&#x2F;var&#x2F;log&#x2F;redis_6379.log&quot;#我们手动指定一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-默认库"><a href="#11-默认库" class="headerlink" title="11.默认库"></a>11.默认库</h3><pre class="line-numbers language-none"><code class="language-none">databases 16#默认16个库(0-15)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-定义Redis自动持久化的频率"><a href="#12-定义Redis自动持久化的频率" class="headerlink" title="12.定义Redis自动持久化的频率"></a>12.定义<code>Redis</code>自动持久化的频率</h3><pre class="line-numbers language-none"><code class="language-none">save 900 1#900秒存1次save 300 10#300秒存10次save 60 10000#60秒存10000次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-指定rdb数据文件存储位置"><a href="#13-指定rdb数据文件存储位置" class="headerlink" title="13.指定rdb数据文件存储位置"></a>13.指定<code>rdb</code>数据文件存储位置</h3><pre class="line-numbers language-none"><code class="language-none">dbfilename dump.rdb#默认文件名dir .&#x2F;#默认存在当前目录dir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;data#可以手动指定一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="14-启动aof日志"><a href="#14-启动aof日志" class="headerlink" title="14.启动aof日志"></a>14.启动<code>aof</code>日志</h3><pre class="line-numbers language-none"><code class="language-none">appendonly no#&#96;aof&#96;日志默认是关闭的appendonly yesappendfilename &quot;appendonly.aof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="15-设置Redis密码"><a href="#15-设置Redis密码" class="headerlink" title="15.设置Redis密码"></a>15.设置<code>Redis</code>密码</h3><pre class="line-numbers language-none"><code class="language-none">requirepass redhat#需要手动指定密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.12810.10.10.128:6379&gt; set uid 1001(error) NOAUTH Authentication required.10.10.10.128:6379&gt; auth redhat#设置密码后，需要手动输入密码，才可存储数据OK10.10.10.128:6379&gt; set uid 1001OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli -h 10.10.10.128 -a redhat#或者在外面输入密码10.10.10.128:6379&gt; set uid1 1002OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="16-设置Redis最大并发连接"><a href="#16-设置Redis最大并发连接" class="headerlink" title="16.设置Redis最大并发连接"></a>16.设置<code>Redis</code>最大并发连接</h3><pre class="line-numbers language-none"><code class="language-none"># maxclients 10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="17-设置Redis最大存储策略"><a href="#17-设置Redis最大存储策略" class="headerlink" title="17.设置Redis最大存储策略"></a>17.设置<code>Redis</code>最大存储策略</h3><pre class="line-numbers language-none"><code class="language-none"># maxmemory &lt;bytes&gt;maxmemory 200Mmaxmemory-policy noeviction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="支持的策略详情："><a href="#支持的策略详情：" class="headerlink" title="支持的策略详情："></a>支持的策略详情：</h4><ul><li><code>noeviction</code>默认策略 内存空间不足时，添加新的数据会返回报错信息</li><li><code>allkeys‐lru</code>内存不足时，<code>redis</code>会按照<code>LRU</code>(最近最少访问)算法清除缓存数据</li><li><code>allkeys‐random</code>内存不足时，<code>redis</code>会随机删除缓存数据</li><li><code>volatile‐lru</code>内存不足时，<code>redis</code>会在设置了过期时间的<code>缓存数据</code>中，按照<code>LRU</code>算法清除数据</li><li><code>volatile‐random</code>内存<code>不足</code>时，<code>redis</code>会在设置了<code>过期时间</code>的缓存数据中，<code>随机</code>清除数据</li><li><code>volatile‐ttl</code>内存不足时，<code>redis</code>会在设置了过期时间的缓存数据中，优先清除<code>过期时间较早</code>的数据</li><li><code>allkeys-lfu</code></li><li><code>volatile-lfu</code></li><li><code>lfu</code>全称<code>Least Frequently Used</code>算法根据数据的<code>历史访问频率</code>来<code>淘汰数据</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Redis安装和基本使用</title>
      <link href="/2023/04/21/91/"/>
      <url>/2023/04/21/91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Redis安装和基本使用"><a href="#【Linux基础服务教程】Redis安装和基本使用" class="headerlink" title="【Linux基础服务教程】Redis安装和基本使用"></a>【Linux基础服务教程】Redis安装和基本使用</h1><h2 id="一、数据库的类型"><a href="#一、数据库的类型" class="headerlink" title="一、数据库的类型"></a>一、数据库的类型</h2><ul><li>关系型数据库<code>RDBMS</code></li><li><code>MySQL</code>、<code>Oracle</code>、<code>PostgreSQL</code></li><li>适用场景: </li><li>业务数据的<code>持久化</code>存储 </li><li>非关系型数据库<code>NoSQL(Not Only SQL)</code><ul><li><code>memcached</code>、<code>mongoDB</code>、<code>redis</code></li><li>优势: 支持高并发、速度快<ul><li>没有严格的数据约束规范(数据类型、主键等)</li><li>以<code>key-value</code>键值对的方式进行存储</li><li>基于内存进行存储</li></ul></li><li>适用场景:<ul><li>缓存服务器 </li><li>存储业务<code>session</code></li></ul></li></ul></li></ul><h2 id="二、Redis特性"><a href="#二、Redis特性" class="headerlink" title="二、Redis特性"></a>二、<code>Redis</code>特性</h2><p><strong>官网：<a href="https://redis.io/">https://redis.io</a></strong></p><ul><li>开源的、跨平台的</li><li>以<code>key-value</code>存储数据</li><li>基于<code>内存</code>存储数据 </li><li>支持<code>持久化</code>存储数据<ul><li>两种方式：<ul><li>rdb数据文件<code>*.rdb</code></li><li><code>aof</code>日志</li></ul></li></ul></li><li>支持事务、主从复制、分片集群 </li><li>支持多实例</li><li>配置简单</li></ul><h2 id="三、Redis安装部署"><a href="#三、Redis安装部署" class="headerlink" title="三、Redis安装部署"></a>三、Redis安装部署</h2><h3 id="1-安装gcc编译器"><a href="#1-安装gcc编译器" class="headerlink" title="1.安装gcc编译器"></a>1.安装<code>gcc</code>编译器</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-下载Redis"><a href="#2-下载Redis" class="headerlink" title="2.下载Redis"></a>2.下载Redis</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# wget https:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.14.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-安装Redis"><a href="#3-安装Redis" class="headerlink" title="3.安装Redis"></a>3.安装Redis</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# tar xf redis-5.0.14.tar.gz[root@master ~]# cd redis-5.0.14&#x2F;[root@master redis-5.0.14]# make[root@master redis-5.0.14]# make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis install#指定安装目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-准备Redis配置文件"><a href="#4-准备Redis配置文件" class="headerlink" title="4.准备Redis配置文件"></a>4.准备Redis配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@master redis-5.0.14]# mkdir &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf[root@master redis-5.0.14]# cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;profileexport PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin[root@master ~]# source &#x2F;etc&#x2F;profile#让环境变量生效[root@master ~]# redis-server --version#测试Redis server v&#x3D;5.0.14 sha&#x3D;00000000:0 malloc&#x3D;jemalloc-5.1.0 bits&#x3D;64 build&#x3D;a8b13b484d1142e5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-启动Redis"><a href="#6-启动Redis" class="headerlink" title="6.启动Redis"></a>6.启动<code>Redis</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf#前台启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# nohup redis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf &amp;[1] 6899[root@master ~]# nohup: 忽略输入并把输出追加到&quot;nohup.out&quot;[root@master ~]# ps -aux | grep redisroot       6899  0.0  0.4 154000  8100 pts&#x2F;1    Sl   20:14   0:00 redis-server 127.0.0.1:6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-加入开机启动项"><a href="#7-加入开机启动项" class="headerlink" title="7.加入开机启动项"></a>7.加入开机启动项</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;rc.d&#x2F;rc.localexport PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;redis&#x2F;binredis-server &#x2F;usr&#x2F;local&#x2F;redis&#x2F;conf&#x2F;redis.conf[root@master ~]# chmod 777 &#x2F;etc&#x2F;rc.d&#x2F;rc.local[root@master ~]# reboot[root@master ~]# ps -aux | grep redis#自行重启测试root        889  0.0  0.4 154000  8092 ?        Sl   20:24   0:00 redis-server 127.0.0.1:6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-关闭Redis服务"><a href="#8-关闭Redis服务" class="headerlink" title="8.关闭Redis服务"></a>8.关闭<code>Redis</code>服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、数据库管理操作"><a href="#四、数据库管理操作" class="headerlink" title="四、数据库管理操作"></a>四、数据库管理操作</h2><h3 id="1-登录数据库"><a href="#1-登录数据库" class="headerlink" title="1.登录数据库"></a>1.登录数据库</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# redis-cli127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-数据读写"><a href="#2-数据读写" class="headerlink" title="2.数据读写"></a>2.数据读写</h3><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; set url 127.0.0.1#set 键&#x3D;值OK127.0.0.1:6379&gt; set uid 1001#写入数据OK127.0.0.1:6379&gt; get url#get 键&quot;127.0.0.1&quot;127.0.0.1:6379&gt; get uid#查询数据&quot;1001&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; mset uid1 1002 uid2 1003 url1 10.10.10.128#插入多条数据OK127.0.0.1:6379&gt; mget uid uid1 url1#查询多条数据1) &quot;1001&quot;2) &quot;1002&quot;3) &quot;10.10.10.128&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数据删除"><a href="#3-数据删除" class="headerlink" title="3.数据删除"></a>3.数据删除</h3><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; del uid#删除数据(integer) 1127.0.0.1:6379&gt; del uid1 uid2 url#删除多条数据(integer) 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-切换数据库"><a href="#4-切换数据库" class="headerlink" title="4.切换数据库"></a>4.切换数据库</h3><blockquote><p><code>redis</code>默认提供<code>16</code>个数据库，编号从<code>0-15</code>，默认使用<code>0</code><br><code>每个</code>数据库，数据都是<code>独立</code>的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; select 2OK127.0.0.1:6379[2]&gt; select 4OK127.0.0.1:6379[3]&gt; set uid 1001#在3号库中写入数据OK127.0.0.1:6379[3]&gt; select 0#切换0号数据库OK127.0.0.1:6379&gt; set uid 1001#在0中写入同样的数据OK127.0.0.1:6379&gt; get uid&quot;1001&quot;127.0.0.1:6379&gt; select 3OK127.0.0.1:6379[3]&gt; get uid&quot;1001&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-数字管理操作"><a href="#5-数字管理操作" class="headerlink" title="5.数字管理操作"></a>5.数字管理操作</h3><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; set data 10OK127.0.0.1:6379&gt; INCR data#自增长1(integer) 11127.0.0.1:6379&gt; get data&quot;11&quot;127.0.0.1:6379&gt; INCR data(integer) 12127.0.0.1:6379&gt; get data&quot;12&quot;127.0.0.1:6379&gt; 127.0.0.1:6379&gt; DECR data#自减1(integer) 11127.0.0.1:6379&gt; DECR data(integer) 10127.0.0.1:6379&gt; get data&quot;10&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h3><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379[3]&gt; multi#开始事务OK127.0.0.1:6379[3]&gt; incr uidQUEUED#不会直接显示结果127.0.0.1:6379[3]&gt; incr uidQUEUED127.0.0.1:6379[3]&gt; get uidQUEUED127.0.0.1:6379[3]&gt; exec#提交事务1) (integer) 1002#最后统一显示结果2) (integer) 10033) &quot;1003&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：如果在事务中存在<code>错误操作</code>，不会保存<code>当前</code>事务！</p></blockquote><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379[3]&gt; multiOK127.0.0.1:6379[3]&gt; incr uidQUEUED127.0.0.1:6379[3]&gt; 123jdasjdja(error) ERR unknown command &#96;123jdasjdja&#96;, with args beginning with: 127.0.0.1:6379[3]&gt; get uidQUEUED127.0.0.1:6379[3]&gt; exec(error) EXECABORT Transaction discarded because of previous errors.127.0.0.1:6379[3]&gt; get uid&quot;1003&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、通过PHP连接Redis数据库"><a href="#五、通过PHP连接Redis数据库" class="headerlink" title="五、通过PHP连接Redis数据库"></a>五、通过<code>PHP</code>连接<code>Redis</code>数据库</h2><h3 id="1-部署PHP环境"><a href="#1-部署PHP环境" class="headerlink" title="1.部署PHP环境"></a>1.部署<code>PHP</code>环境</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y httpd php php-gd php-mysql php-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-创建测试页面"><a href="#2-创建测试页面" class="headerlink" title="2.创建测试页面"></a>2.创建测试页面</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&lt;?php  $redis &#x3D; new Redis();  $redis -&gt; connect(&quot;127.0.0.1&quot;,6379);  $redis -&gt; set(&quot;name&quot;, &quot;Tome&quot;);  $var &#x3D; $redis -&gt; get(&quot;name&quot;);  echo $var;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动httpd服务并测试"><a href="#3-启动httpd服务并测试" class="headerlink" title="3.启动httpd服务并测试"></a>3.启动<code>httpd</code>服务并测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# systemctl start httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/04/php1.png" alt="php1"></p><blockquote><p>可以看到并<code>不能</code>正常访问，这是正常的，因为我们的<code>php</code>默认是不能连接到<code>redis</code></p></blockquote><h3 id="4-为PHP添加连接Redis模块"><a href="#4-为PHP添加连接Redis模块" class="headerlink" title="4.为PHP添加连接Redis模块"></a>4.为<code>PHP</code>添加连接<code>Redis</code>模块</h3><h4 id="1-下载模块并解压"><a href="#1-下载模块并解压" class="headerlink" title="1.下载模块并解压"></a>1.下载模块并解压</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# lsredis-php-4.1.1.tgz[root@master ~]# tar xf redis-php-4.1.1.tgz[root@master ~]# cd redis-4.1.1&#x2F;[root@master redis-4.1.1]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-安装模块"><a href="#2-安装模块" class="headerlink" title="2.安装模块"></a>2.安装模块</h4><pre class="line-numbers language-none"><code class="language-none">[root@master redis-4.1.1]# &#x2F;usr&#x2F;bin&#x2F;phpizeConfiguring for:PHP Api Version:         20100412Zend Module Api No:      20100525Zend Extension Api No:   220100525[root@master redis-4.1.1]# .&#x2F;configure --enable-redis --with-php-config&#x3D;&#x2F;usr&#x2F;bin&#x2F;php-config[root@master redis-4.1.1]# make &amp;&amp; make installInstalling shared extensions:     &#x2F;usr&#x2F;lib64&#x2F;php&#x2F;modules&#x2F;#安装目录输出信息[root@master redis-4.1.1]# ls &#x2F;usr&#x2F;lib64&#x2F;php&#x2F;modules&#x2F;curl.so      gd.so    mysqli.so  pdo_mysql.so  pdo_sqlite.so  redis.so    zip.sofileinfo.so  json.so  mysql.so   pdo.so        phar.so        sqlite3.so#可以看到多了redis.so的模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-在PHP中加载模块"><a href="#3-在PHP中加载模块" class="headerlink" title="3.在PHP中加载模块"></a>3.在<code>PHP</code>中加载模块</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;php.iniextension&#x3D;&#x2F;usr&#x2F;lib64&#x2F;php&#x2F;modules&#x2F;redis.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-重启httpd服务并验证模块"><a href="#4-重启httpd服务并验证模块" class="headerlink" title="4.重启httpd服务并验证模块"></a>4.重启<code>httpd</code>服务并验证模块</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# systemctl restart httpd[root@master ~]# php -m | grep -i redis#可以使用这个命令查看模块是否加载redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/04/php2.png" alt="php2"></p><blockquote><p>可以看到成功加载出来了！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> httpd </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> php </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Tomcat的应用</title>
      <link href="/2023/04/20/90/"/>
      <url>/2023/04/20/90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Tomcat的应用"><a href="#【Linux基础服务教程】Tomcat的应用" class="headerlink" title="【Linux基础服务教程】Tomcat的应用"></a>【Linux基础服务教程】Tomcat的应用</h1><h2 id="一、Tomcat的应用"><a href="#一、Tomcat的应用" class="headerlink" title="一、Tomcat的应用"></a>一、Tomcat的应用</h2><ul><li><code>java</code>应用程序的<code>中间件</code>， 部署运行<code>java</code>应用程序  </li><li><code>动态</code>网站:<ul><li>PHP语言<code>*.php</code></li></ul></li><li><code>lnmp</code>平台 <ul><li>Java语言<code>*.jsp</code></li><li>tomcat</li></ul></li></ul><h3 id="1-java应用的中间件"><a href="#1-java应用的中间件" class="headerlink" title="1.java应用的中间件"></a>1.java应用的中间件</h3><ul><li>tomcat<ul><li><code>Apache</code>组织</li></ul></li><li>webLogical<ul><li><code>Oracle</code>公司、商业</li></ul></li><li>websphere<ul><li><code>IBM</code>公司、商业</li></ul></li></ul><h3 id="2-Tomcat的特性"><a href="#2-Tomcat的特性" class="headerlink" title="2.Tomcat的特性"></a>2.Tomcat的特性</h3><ul><li>开源的、跨平台</li><li>支持多实例的部署方式</li><li>支持https</li><li>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></li></ul><h2 id="二、安装Tomcat"><a href="#二、安装Tomcat" class="headerlink" title="二、安装Tomcat"></a>二、安装<code>Tomcat</code></h2><h3 id="1-安装jdk"><a href="#1-安装jdk" class="headerlink" title="1.安装jdk"></a>1.安装<code>jdk</code></h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# wget https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;java&#x2F;jdk&#x2F;8u191-b12&#x2F;jdk-8u191-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果提示找不到<code>wget</code>命令请使用<code>yum install -y wget</code>安装！</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# tar xf jdk-8u191-linux-x64.tar.gz -C &#x2F;usr&#x2F;local[root@node1 ~]# ls &#x2F;usr&#x2F;localbin  etc  games  include  jdk1.8.0_191  lib  lib64  libexec  sbin  share  src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="A-配置jdk环境"><a href="#A-配置jdk环境" class="headerlink" title="A.配置jdk环境"></a>A.配置<code>jdk</code>环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;profileexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin#文件后面加上2行内容#配置文件并不完整，请勿删改其他！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-让配置文件生效，测试jdk环境"><a href="#B-让配置文件生效，测试jdk环境" class="headerlink" title="B.让配置文件生效，测试jdk环境"></a>B.让配置文件生效，测试<code>jdk</code>环境</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# source &#x2F;etc&#x2F;profile[root@node1 ~]# java -versionjava version &quot;1.8.0_191&quot;Java(TM) SE Runtime Environment (build 1.8.0_191-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-安装Tomcat"><a href="#2-安装Tomcat" class="headerlink" title="2.安装Tomcat"></a>2.安装<code>Tomcat</code></h3><h4 id="A-下载Tomcat"><a href="#A-下载Tomcat" class="headerlink" title="A.下载Tomcat"></a>A.下载<code>Tomcat</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# wget --no-check-certificate https:&#x2F;&#x2F;dlcdn.apache.org&#x2F;tomcat&#x2F;tomcat-8&#x2F;v8.5.88&#x2F;bin&#x2F;apache-tomcat-8.5.88.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-安装Tomcat并且改名"><a href="#B-安装Tomcat并且改名" class="headerlink" title="B.安装Tomcat并且改名"></a>B.安装<code>Tomcat</code>并且改名</h4><blockquote><p>默认解压的名字并不有利于今后的维护</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# tar xf apache-tomcat-8.5.88.tar.gz -C &#x2F;usr&#x2F;local&#x2F;[root@node1 ~]# mv &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.88 &#x2F;usr&#x2F;local&#x2F;tomcat85[root@node1 ~]# ls &#x2F;usr&#x2F;local&#x2F;bin  etc  games  include  jdk1.8.0_191  lib  lib64  libexec  sbin  share  src  tomcat85<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-定义Tomcat环境变量"><a href="#C-定义Tomcat环境变量" class="headerlink" title="C.定义Tomcat环境变量"></a>C.定义<code>Tomcat</code>环境变量</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;profile......export CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat85#配置文件并不完整，请勿删改其他！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-重新加载配置文件"><a href="#D-重新加载配置文件" class="headerlink" title="D.重新加载配置文件"></a>D.重新加载配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-Tomcat相关目录"><a href="#E-Tomcat相关目录" class="headerlink" title="E.Tomcat相关目录"></a>E.<code>Tomcat</code>相关目录</h4><ul><li>tomcat安装目录&#x2F;bin</li><li>tomcat安装目录&#x2F;conf&#x2F;server.xml</li><li>tomcat安装目录&#x2F;logs</li><li>tomcat安装目录&#x2F;webapps</li><li>tomcat安装目录&#x2F;lib</li><li>库文件   .jar</li></ul><h4 id="F-启动Tomcat"><a href="#F-启动Tomcat" class="headerlink" title="F.启动Tomcat"></a>F.启动<code>Tomcat</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;catalina.sh startUsing CATALINA_BASE:   &#x2F;usr&#x2F;local&#x2F;tomcat85Using CATALINA_HOME:   &#x2F;usr&#x2F;local&#x2F;tomcat85Using CATALINA_TMPDIR: &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;tempUsing JRE_HOME:        &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191Using CLASSPATH:       &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-查看进程和端口"><a href="#G-查看进程和端口" class="headerlink" title="G.查看进程和端口"></a>G.查看进程和端口</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ps -aux | grep java#因为Tomcat基于java开发，所以进程名叫javaroot       2012  4.4  4.2 2492680 78316 pts&#x2F;2   Sl   19:56   0:01 &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191&#x2F;bin&#x2F;java -Djava.util.logging.config.file&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;conf&#x2F;logging.properties -Djava.util.logging.manager&#x3D;org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize&#x3D;2048 -Djava.protocol.handler.pkgs&#x3D;org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK&#x3D;0027 -Dignore.endorsed.dirs&#x3D; -classpath &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;tomcat-juli.jar -Dcatalina.base&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat85 -Dcatalina.home&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat85 -Djava.io.tmpdir&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;temp org.apache.catalina.startup.Bootstrap start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果提示没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# netstat -tunlp | grep java#因为Tomcat基于java开发，所以进程名叫javatcp6       0      0 :::8080                 :::*                    LISTEN      2012&#x2F;java           tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      2012&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>8005:</code>tomcat实例端口<br><code>8080</code>提供http服务的端口<br><code>8009</code>配置httpd做反向代理的端口(仅限老版本，新版本已废除)</p></blockquote><h4 id="H-设置Tomcat开机自启动"><a href="#H-设置Tomcat开机自启动" class="headerlink" title="H.设置Tomcat开机自启动"></a>H.设置<code>Tomcat</code>开机自启动</h4><blockquote><p>关于为什么要重新定义一下<code>java</code>环境，因为<code>Linux</code>在启动的时候<code>优先</code>加载<code>rc.local</code>配置文件，<code>profile</code>还没加载，所以要在<code>rc.local</code>里再定义一遍</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;rc.d&#x2F;rc.local export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;catalina.sh start[root@node1 ~]# chmod a+x &#x2F;etc&#x2F;rc.d&#x2F;rc.local#给权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="I-重启测试"><a href="#I-重启测试" class="headerlink" title="I.重启测试"></a>I.重启测试</h4><blockquote><p>如果提示没有<code>netstat</code>命令，请安装<code>yum install -y net-tools</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# reboot[root@node1 ~]# netstat -tunlp | grep java#重启后可以查到端口运行的程序tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      928&#x2F;java            tcp6       0      0 :::8080                 :::*                    LISTEN      928&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Tomcat配置文件"><a href="#三、Tomcat配置文件" class="headerlink" title="三、Tomcat配置文件"></a>三、<code>Tomcat</code>配置文件</h2><h3 id="1-Tomcat默认项目目录"><a href="#1-Tomcat默认项目目录" class="headerlink" title="1.Tomcat默认项目目录"></a>1.<code>Tomcat</code>默认项目目录</h3><blockquote><p><code>tomcat</code>安装目录<code>/webapps</code></p></blockquote><ul><li>注意：</li><li>一个项目目录可以部署<code>多个</code>项目</li><li>默认访问项目目录<code>/ROOT</code>子目录中的项目</li></ul><h3 id="2-主配置文件server-xml"><a href="#2-主配置文件server-xml" class="headerlink" title="2.主配置文件server.xml"></a>2.主配置文件<code>server.xml</code></h3><blockquote><p>主配置文件<code>默认</code>路径：<code>/usr/local/tomcat85/conf/server.xml</code></p></blockquote><h4 id="A-Tomcat默认实例端口"><a href="#A-Tomcat默认实例端口" class="headerlink" title="A.Tomcat默认实例端口"></a>A.<code>Tomcat</code>默认实例端口</h4><pre class="line-numbers language-none"><code class="language-none">&lt;Server port&#x3D;&quot;8005&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-提供http服务的端口"><a href="#B-提供http服务的端口" class="headerlink" title="B.提供http服务的端口"></a>B.提供<code>http</code>服务的端口</h4><pre class="line-numbers language-none"><code class="language-none">&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;               connectionTimeout&#x3D;&quot;20000&quot;               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-配置虚拟主机"><a href="#C-配置虚拟主机" class="headerlink" title="C.配置虚拟主机"></a>C.配置<code>虚拟主机</code></h4><pre class="line-numbers language-none"><code class="language-none">&lt;Host name&#x3D;&quot;localhost&quot;  appBase&#x3D;&quot;&#x2F;test&quot;            unpackWARs&#x3D;&quot;true&quot; autoDeploy&#x3D;&quot;true&quot;&gt;        &lt;Context path&#x3D;&quot;&#x2F;AA&quot; docBase&#x3D;&quot;hello&quot; &#x2F;&gt;#项目访问别名        &lt;Context path&#x3D;&quot;&#x2F;BB&quot; docBase&#x3D;&quot;linux&quot; &#x2F;&gt;#项目访问别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>name</code>虚拟主机名称<br><code>appBase</code>项目目录<br><code>&lt;Context path=&quot;/AA&quot; docBase=&quot;hello&quot; /&gt;</code>项目的访问别名<br><code>path=</code>别名，空表示通过主机名访问<br><code>docBase=</code>项目路径，相对于<code>appBase</code>写 </p></blockquote><h4 id="D-日志"><a href="#D-日志" class="headerlink" title="D.日志"></a>D.日志</h4><pre class="line-numbers language-none"><code class="language-none">&lt;Valve className&#x3D;&quot;org.apache.catalina.valves.AccessLogValve&quot; directory&#x3D;&quot;logs&quot;               prefix&#x3D;&quot;localhost_access_log&quot; suffix&#x3D;&quot;.txt&quot;               pattern&#x3D;&quot;%h %l %u %t &quot;%r&quot; %s %b&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>&lt;Valve ....</code>定义访问日志<br><code>directory=&quot;&quot;</code>访问日志存放路径<br><code>prefix=&quot;&quot;</code>访问日志的开头<br><code>suffix=&quot;&quot;</code>定义访问日志的结尾<br><code>patter=&quot;&quot;</code>访问日志格式</p></blockquote><h4 id="E-默认的虚拟主机"><a href="#E-默认的虚拟主机" class="headerlink" title="E.默认的虚拟主机"></a>E.默认的虚拟主机</h4><pre class="line-numbers language-none"><code class="language-none">&lt;Engine name&#x3D;&quot;Catalina&quot; defaultHost&#x3D;&quot;localhost&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、Tomcat部署多实例"><a href="#四、Tomcat部署多实例" class="headerlink" title="四、Tomcat部署多实例"></a>四、<code>Tomcat</code>部署多实例</h2><h3 id="1-环境介绍"><a href="#1-环境介绍" class="headerlink" title="1.环境介绍"></a>1.环境介绍</h3><blockquote><p>安装目录: &#x2F;opt&#x2F;tomcat01实例端口: 8006HTTP服务: 8888项目目录: &#x2F;opt&#x2F;tomcat01&#x2F;webapps<br>安装目录: &#x2F;opt&#x2F;tomcat02实例端口: 8007HTTP服务: 8899项目目录: &#x2F;opt&#x2F;tomcat02&#x2F;webapps</p></blockquote><h3 id="2-创建项目目录"><a href="#2-创建项目目录" class="headerlink" title="2.创建项目目录"></a>2.创建<code>项目</code>目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mkdir -p &#x2F;opt&#x2F;tomcat01&#x2F;&#123;webapps,logs,conf&#125;[root@node1 ~]# mkdir -p &#x2F;opt&#x2F;tomcat02&#x2F;&#123;webapps,logs,conf&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-复制配置文件到项目目录"><a href="#3-复制配置文件到项目目录" class="headerlink" title="3.复制配置文件到项目目录"></a>3.复制配置文件到项目目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# cp -r &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;conf&#x2F;* &#x2F;opt&#x2F;tomcat01&#x2F;conf&#x2F;[root@node1 ~]# cp -r &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;conf&#x2F;* &#x2F;opt&#x2F;tomcat02&#x2F;conf&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-编辑项目配置文件"><a href="#4-编辑项目配置文件" class="headerlink" title="4.编辑项目配置文件"></a>4.编辑项目配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;tomcat01&#x2F;conf&#x2F;server.xml&lt;Server port&#x3D;&quot;8006&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;#按照规划，修改实例1端口为8006&lt;Connector port&#x3D;&quot;8888&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;#按照规划，修改实例1端口为8888&lt;Host name&#x3D;&quot;localhost&quot;  appBase&#x3D;&quot;&#x2F;opt&#x2F;tomcat01&#x2F;webapps&quot;#按照规划，修改项目目录&lt;Valve className&#x3D;&quot;org.apache.catalina.valves.AccessLogValve&quot; directory&#x3D;&quot;&#x2F;opt&#x2F;tomcat01&#x2F;logs&quot;#按照规划，更改日志存目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;tomcat02&#x2F;conf&#x2F;server.xml&lt;Server port&#x3D;&quot;8007&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;&lt;Connector port&#x3D;&quot;8899&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;&lt;Host name&#x3D;&quot;localhost&quot;  appBase&#x3D;&quot;&#x2F;opt&#x2F;tomcat02&#x2F;webapps&quot;&lt;Valve className&#x3D;&quot;org.apache.catalina.valves.AccessLogValve&quot; directory&#x3D;&quot;&#x2F;opt&#x2F;tomcat02&#x2F;logs&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-准备java项目-自行准备"><a href="#5-准备java项目-自行准备" class="headerlink" title="5.准备java项目(自行准备)"></a>5.准备java项目(自行准备)</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# lsphone_war.war  project.war<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="复制项目到webapps目录下"><a href="#复制项目到webapps目录下" class="headerlink" title="复制项目到webapps目录下"></a>复制项目到<code>webapps</code>目录下</h4><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# cp project.war &#x2F;opt&#x2F;tomcat01&#x2F;webapps&#x2F;[root@node1 ~]# cp project.war &#x2F;opt&#x2F;tomcat02&#x2F;webapps&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-准备启动脚本"><a href="#6-准备启动脚本" class="headerlink" title="6.准备启动脚本"></a>6.准备启动脚本</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;tomcat01&#x2F;daemon.sh#! &#x2F;bin&#x2F;bashexport CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat85export CATALINA_BASE&#x3D;&#x2F;opt&#x2F;tomcat01#指定启动时查找配置文件的路径case $1 in   start)       $CATALINA_HOME&#x2F;bin&#x2F;startup.sh       ;;   stop)       $CATALINA_HOME&#x2F;bin&#x2F;shutdown.sh       ;;   restart)       $CATALINA_HOME&#x2F;bin&#x2F;shutdown.sh       sleep 1       $CATALINA_HOME&#x2F;bin&#x2F;startup.sh       ;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;opt&#x2F;tomcat02&#x2F;daemon.sh#! &#x2F;bin&#x2F;bashexport CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat85export CATALINA_BASE&#x3D;&#x2F;opt&#x2F;tomcat02#指定启动时查找配置文件的路径case $1 in   start)       $CATALINA_HOME&#x2F;bin&#x2F;startup.sh       ;;   stop)       $CATALINA_HOME&#x2F;bin&#x2F;shutdown.sh       ;;   restart)       $CATALINA_HOME&#x2F;bin&#x2F;shutdown.sh       sleep 1       $CATALINA_HOME&#x2F;bin&#x2F;startup.sh       ;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-启动实例测试"><a href="#7-启动实例测试" class="headerlink" title="7.启动实例测试"></a>7.启动实例测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# bash &#x2F;opt&#x2F;tomcat01&#x2F;daemon.sh startUsing CATALINA_BASE:   &#x2F;opt&#x2F;tomcat01Using CATALINA_HOME:   &#x2F;usr&#x2F;local&#x2F;tomcat85Using CATALINA_TMPDIR: &#x2F;opt&#x2F;tomcat01&#x2F;tempUsing JRE_HOME:        &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191Using CLASSPATH:       &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.[root@node1 ~]# bash &#x2F;opt&#x2F;tomcat02&#x2F;daemon.sh startUsing CATALINA_BASE:   &#x2F;opt&#x2F;tomcat02Using CATALINA_HOME:   &#x2F;usr&#x2F;local&#x2F;tomcat85Using CATALINA_TMPDIR: &#x2F;opt&#x2F;tomcat02&#x2F;tempUsing JRE_HOME:        &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_191Using CLASSPATH:       &#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;local&#x2F;tomcat85&#x2F;bin&#x2F;tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# netstat -tunlp | grep javatcp6       0      0 :::8888                 :::*                    LISTEN      4400&#x2F;java           tcp6       0      0 :::8899                 :::*                    LISTEN      4436&#x2F;java           tcp6       0      0 127.0.0.1:8006          :::*                    LISTEN      4400&#x2F;java           tcp6       0      0 127.0.0.1:8007          :::*                    LISTEN      4436&#x2F;java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.wsjj.top/upload/2023/04/tom01.png" alt="tom01"></p><p><img src="https://www.wsjj.top/upload/2023/04/tom02.png" alt="tom02"></p><h2 id="五、利用Nginx反向代理实现Tomcat负载均衡"><a href="#五、利用Nginx反向代理实现Tomcat负载均衡" class="headerlink" title="五、利用Nginx反向代理实现Tomcat负载均衡"></a>五、利用<code>Nginx</code>反向代理实现<code>Tomcat</code>负载均衡</h2><blockquote><p>自行准备第二台虚拟机</p></blockquote><p><strong>上一期教程<a href="https://www.wsjj.top/archives/86">Nginx反向代理和负载均衡</a></strong></p><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confupstream tomcat&#123;        server 10.10.10.129:8888;        server 10.10.10.129:8899;    &#125;    server &#123;        listen       80;        server_name  localhost;        #charset koi8-r;        #access_log  logs&#x2F;host.access.log  main;        location &#x2F;rc &#123;          proxy_pass http:&#x2F;&#x2F;tomcat&#x2F;project;#这里后面一定要加上访问路径！        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p><img src="https://www.wsjj.top/upload/2023/04/tom03.png" alt="tom03"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> tomcat </tag>
            
            <tag> linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Nginx平滑升级</title>
      <link href="/2023/04/20/89/"/>
      <url>/2023/04/20/89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Nginx平滑升级"><a href="#【Linux基础服务教程】Nginx平滑升级" class="headerlink" title="【Linux基础服务教程】Nginx平滑升级"></a>【Linux基础服务教程】Nginx平滑升级</h1><blockquote><p>第一期教程<code>Nginx</code>的安装<a href="https://www.wsjj.top/archives/83">教程</a></p></blockquote><h2 id="一、查看旧Nginx的参数"><a href="#一、查看旧Nginx的参数" class="headerlink" title="一、查看旧Nginx的参数"></a>一、查看旧Nginx的参数</h2><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# nginx -Vnginx version: nginx&#x2F;1.23.4built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) built with OpenSSL 1.0.2k-fips  26 Jan 2017TLS SNI support enabledconfigure arguments: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意<code>--prefix</code>后面的所有参数，我们升级的时候都要带上！</p></blockquote><h2 id="二、平滑升级新Nginx操作"><a href="#二、平滑升级新Nginx操作" class="headerlink" title="二、平滑升级新Nginx操作"></a>二、平滑升级新Nginx操作</h2><h3 id="1-以相同的配置，配置新版本Nginx"><a href="#1-以相同的配置，配置新版本Nginx" class="headerlink" title="1.以相同的配置，配置新版本Nginx"></a>1.以相同的配置，配置新版本Nginx</h3><h4 id="下载新版本Nginx"><a href="#下载新版本Nginx" class="headerlink" title="下载新版本Nginx"></a>下载新版本<code>Nginx</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.24.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解压新版本Nginx"><a href="#解压新版本Nginx" class="headerlink" title="解压新版本Nginx"></a>解压新版本<code>Nginx</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# tar xf nginx-1.24.0.tar.gz [root@master ~]# cd nginx-1.24.0&#x2F;[root@master nginx-1.24.0]# lsauto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  README  src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译新版本"><a href="#编译新版本" class="headerlink" title="编译新版本"></a>编译新版本</h4><blockquote><p>请勿执行<code>make install</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;[root@master nginx-1.24.0]# make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="会在当前目录下objs目录下生成新版本"><a href="#会在当前目录下objs目录下生成新版本" class="headerlink" title="会在当前目录下objs目录下生成新版本"></a>会在当前目录下<code>objs</code>目录下生成新版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# ls objs&#x2F;autoconf.err  nginx    ngx_auto_config.h   ngx_modules.c  srcMakefile      nginx.8  ngx_auto_headers.h  ngx_modules.o[root@master nginx-1.24.0]# objs&#x2F;nginx -vnginx version: nginx&#x2F;1.24.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="备份旧版本，拷贝新版本"><a href="#备份旧版本，拷贝新版本" class="headerlink" title="备份旧版本，拷贝新版本"></a>备份旧版本，拷贝新版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# mv &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx.bak[root@master nginx-1.24.0]# cp objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;[root@master nginx-1.24.0]# ls &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx  nginx.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启动新版本"><a href="#2-启动新版本" class="headerlink" title="2.启动新版本"></a>2.启动新版本</h3><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# kill -USR2 $(cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid)[root@master nginx-1.24.0]# ps -aux | grep nginxroot       7724  0.0  0.1  46016  3312 ?        S    14:58   0:00 nginx: master process &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxnginx      7725  0.0  0.1  46480  2148 ?        S    14:58   0:00 nginx: worker processroot      14194  0.0  0.1  46032  3344 ?        S    18:54   0:00 nginx: master process &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxnginx     14195  0.0  0.1  46496  1900 ?        S    18:54   0:00 nginx: worker processroot      14197  0.0  0.0 112824   988 pts&#x2F;0    R+   18:54   0:00 grep --color&#x3D;auto nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# ls &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log  error.log  nginx.pid  nginx.pid.oldbin#可以发现多了一个pid文件nginx.pid.oldbin存着旧版本的pid[root@master nginx-1.24.0]# cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid14194#新版本的进程ID[root@master nginx-1.24.0]# cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid.oldbin 7724#旧版本的进程ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关闭旧的工作进程，并且查看仅剩旧版本主进程未关闭"><a href="#关闭旧的工作进程，并且查看仅剩旧版本主进程未关闭" class="headerlink" title="关闭旧的工作进程，并且查看仅剩旧版本主进程未关闭"></a>关闭旧的工作进程，并且查看仅剩旧版本主进程未关闭</h4><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# kill -WINCH $(cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid.oldbin)[root@master nginx-1.24.0]# ps -aux | grep nginxroot       7724  0.0  0.1  46016  3312 ?        S    14:58   0:00 nginx: master process &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxroot      14194  0.0  0.1  46032  3344 ?        S    18:54   0:00 nginx: master process &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxnginx     14195  0.0  0.1  46496  1900 ?        S    18:54   0:00 nginx: worker processroot      14215  0.0  0.0 112824   988 pts&#x2F;0    R+   18:58   0:00 grep --color&#x3D;auto nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关闭旧版本主进程"><a href="#关闭旧版本主进程" class="headerlink" title="关闭旧版本主进程"></a>关闭旧版本主进程</h4><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# kill 7724[root@master nginx-1.24.0]# ps -aux | grep nginxroot      14194  0.0  0.1  46032  3344 ?        S    18:54   0:00 nginx: master process &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxnginx     14195  0.0  0.1  46496  1900 ?        S    18:54   0:00 nginx: worker processroot      14218  0.0  0.0 112824   984 pts&#x2F;0    R+   19:00   0:00 grep --color&#x3D;auto nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清理旧版本"><a href="#清理旧版本" class="headerlink" title="清理旧版本"></a>清理旧版本</h4><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# rm -rf &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看升级后的版本信息和配置信息"><a href="#查看升级后的版本信息和配置信息" class="headerlink" title="查看升级后的版本信息和配置信息"></a>查看升级后的版本信息和配置信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@master nginx-1.24.0]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -Vnginx version: nginx&#x2F;1.24.0built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) built with OpenSSL 1.0.2k-fips  26 Jan 2017TLS SNI support enabledconfigure arguments: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】LNMP环境安装+部署WordPress博客</title>
      <link href="/2023/04/20/88/"/>
      <url>/2023/04/20/88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】LNMP环境安装-部署WordPress博客"><a href="#【Linux基础服务教程】LNMP环境安装-部署WordPress博客" class="headerlink" title="【Linux基础服务教程】LNMP环境安装+部署WordPress博客"></a>【Linux基础服务教程】LNMP环境安装+部署WordPress博客</h1><p><strong>上一期教程<a href="https://www.wsjj.top/archives/wordpress">LAMP环境部署WordPress博客</a></strong></p><ul><li>环境版本：<ul><li>Linux：<code>Centos7.9</code></li><li>Nginx：<code>1.20.1(Centos)</code></li><li>MySQL：<code>MySQL5.7</code></li><li>PHP：<code>PHP7.4</code></li><li>WordPress <code>6.2</code></li></ul></li></ul><h2 id="一、关于LNMP环境"><a href="#一、关于LNMP环境" class="headerlink" title="一、关于LNMP环境"></a>一、关于<code>LNMP</code>环境</h2><p><strong>又叫<code>LEMP</code>环境</strong></p><ul><li>L指→ <code>Linux</code>系统</li><li>N指→ <code>Nginx</code>提供<code>web</code>服务</li><li>M指→ <code>Mysql</code>或<code>MariaDB</code>提供数据库<code>存储</code>服务</li><li>P指→ <code>PHP</code>提供后台以及<code>web</code>动态处理</li></ul><h2 id="二、关于WordPress博客"><a href="#二、关于WordPress博客" class="headerlink" title="二、关于WordPress博客"></a>二、关于<code>WordPress</code>博客</h2><h3 id="摘自百度百科"><a href="#摘自百度百科" class="headerlink" title="摘自百度百科"></a>摘自<a href="https://baike.baidu.com/item/Wordpress/450615">百度百科</a></h3><p><strong><code>WordPress</code>是使用<code>PHP</code>语言开发的<code>博客</code>平台，用户可以在支持<code>PHP</code>和<code>MySQL</code>数据库的服务器上架设属于自己的<code>网站</code>。也可以把<code>WordPress</code>当作一个<code>内容管理系统</code>（CMS）来使用。</strong></p><h2 id="三、部署LAMP环境"><a href="#三、部署LAMP环境" class="headerlink" title="三、部署LAMP环境"></a>三、部署<code>LAMP</code>环境</h2><h3 id="1-部署Linux系统"><a href="#1-部署Linux系统" class="headerlink" title="1.部署Linux系统"></a>1.部署<code>Linux</code>系统</h3><p><strong>安装过程省略<a href="https://www.wangshengjj.work/archives/17">点我跳转</a><code>Linux</code>的安装</strong></p><blockquote><p>一定要配置<code>yum</code>源和<code>epel</code>源！</p></blockquote><h3 id="2-部署Nginx环境"><a href="#2-部署Nginx环境" class="headerlink" title="2.部署Nginx环境"></a>2.部署<code>Nginx</code>环境</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="A-创建网页目录-用于存放WordPress站点"><a href="#A-创建网页目录-用于存放WordPress站点" class="headerlink" title="A.创建网页目录(用于存放WordPress站点)"></a>A.创建<code>网页</code>目录(用于存放<code>WordPress</code>站点)</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# mkdir -p &#x2F;www&#x2F;wwwroot&#x2F;boke.wsjj.top#boke.wsjj.top自定义文件夹名字，请勿和我用一样的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-给网页数据目录权限"><a href="#B-给网页数据目录权限" class="headerlink" title="B.给网页数据目录权限"></a>B.给网页数据<code>目录</code>权限</h4><pre class="line-numbers language-none"><code class="language-none">[root@wsjj ~]# chmod 757 -R &#x2F;www&#x2F;wwwroot&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-创建基于虚拟主机的网页"><a href="#C-创建基于虚拟主机的网页" class="headerlink" title="C.创建基于虚拟主机的网页"></a>C.创建基于<code>虚拟主机</code>的网页</h4><p><strong>关于Nginx<code>虚拟主机</code>详细教程<a href="https://www.wsjj.top/archives/84">点我跳转</a></strong></p><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;boke.conf[root@master ~]# cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;boke.confserver &#123;   listen 80;#指定监听端口   server_name boke.wsjj.top;#指定网站名   access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;boke_access.log main;#指定访问日志，和记录格式   error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;boke_error.log error;#指定错误日志和记录格式   location &#x2F; &#123;       root &#x2F;www&#x2F;wwwroot&#x2F;boke.wsjj.top;#指定网站数据目录       index index.html index.php;#指定首页   &#125;   location ~ \.php$ &#123;#配置php相关配置       root           &#x2F;www&#x2F;wwwroot&#x2F;boke.wsjj.top;#php的目录       fastcgi_pass   127.0.0.1:9000;#监听IP和端口       fastcgi_index  index.php;       fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;#$document_root是Nginx里自带的一个变量,用于传递上面的目录       include        fastcgi_params;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-暂时不要启动Nginx"><a href="#D-暂时不要启动Nginx" class="headerlink" title="D.暂时不要启动Nginx"></a>D.暂时不要启动Nginx</h4><blockquote><p>因为还没安装配置<code>PHP</code></p></blockquote><h3 id="3-部署PHP7-4"><a href="#3-部署PHP7-4" class="headerlink" title="3.部署PHP7.4"></a>3.部署<code>PHP7.4</code></h3><h4 id="A-添加EPEL和REMI存储库"><a href="#A-添加EPEL和REMI存储库" class="headerlink" title="A.添加EPEL和REMI存储库"></a>A.添加<code>EPEL</code>和<code>REMI</code>存储库</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum -y install https:&#x2F;&#x2F;rpms.remirepo.net&#x2F;enterprise&#x2F;remi-release-7.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-安装PHP7-4"><a href="#B-安装PHP7-4" class="headerlink" title="B.安装PHP7.4"></a>B.<code>安装PHP7.4</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum-config-manager --enable remi-php74<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果提示没有<code>yum-config-manager</code>这个命令请安装<code>yum install -y yum-utils</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y php  php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json php-redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-查看PHP版本信息"><a href="#C-查看PHP版本信息" class="headerlink" title="C.查看PHP版本信息"></a>C.查看<code>PHP</code>版本信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# php -versionPHP 7.4.33 (cli) (built: Feb 14 2023 09:31:03) ( NTS )Copyright (c) The PHP GroupZend Engine v3.4.0, Copyright (c) Zend Technologies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-优化PHP-可选的"><a href="#D-优化PHP-可选的" class="headerlink" title="D.优化PHP(可选的)"></a>D.优化<code>PHP</code>(可选的)</h4><h5 id="优化进程"><a href="#优化进程" class="headerlink" title="优化进程"></a>优化进程</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf........#上面内容省略，不代表配置文件就是这样子listen &#x3D; 127.0.0.1:9000#默认监听本机IP+9000端口pm.max_children &#x3D; 50#允许启动的最多的进程数pm.start_servers &#x3D; 8#启动时，默认启动的进程数pm.min_spare_servers &#x3D; 8#最小空闲进程数pm.max_spare_servers &#x3D; 16#最大空闲进程数pm.max_requests &#x3D; 4096#最大请求........#下面内容省略，不代表配置文件就是这样子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改日志记录等级"><a href="#修改日志记录等级" class="headerlink" title="修改日志记录等级"></a>修改日志记录等级</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;php-fpm.conferror_log &#x3D; &#x2F;var&#x2F;log&#x2F;php-fpm&#x2F;error.log#默认错误日志路径log_level &#x3D; error#默认等级太低，避免记录一些不必要的东西<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-启动PHP和Nginx"><a href="#E-启动PHP和Nginx" class="headerlink" title="E.启动PHP和Nginx"></a>E.启动<code>PHP</code>和<code>Nginx</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl start php-fpm[root@localhost ~]# systemctl enable php-fpm[root@master ~]# systemctl start nginx[root@master ~]# systemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-部署MySQL5-7"><a href="#4-部署MySQL5-7" class="headerlink" title="4.部署MySQL5.7"></a>4.部署<code>MySQL5.7</code></h3><h4 id="A-创建文件夹"><a href="#A-创建文件夹" class="headerlink" title="A.创建文件夹"></a>A.创建<code>文件夹</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# mkdir &#x2F;mysql57<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-下载MySQL软件包"><a href="#B-下载MySQL软件包" class="headerlink" title="B.下载MySQL软件包"></a>B.下载<code>MySQL</code>软件包</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# wget https:&#x2F;&#x2F;cdn.mysql.com&#x2F;&#x2F;Downloads&#x2F;MySQL-5.7&#x2F;mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="如果提示没有wget命令请安装"><a href="#如果提示没有wget命令请安装" class="headerlink" title="如果提示没有wget命令请安装"></a>如果提示没有<code>wget</code>命令请安装</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-解压软件包"><a href="#C-解压软件包" class="headerlink" title="C.解压软件包"></a>C.<code>解压</code>软件包</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# tar xf mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar -C &#x2F;mysql57<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-创建本地yum仓库"><a href="#D-创建本地yum仓库" class="headerlink" title="D.创建本地yum仓库"></a>D.创建本地<code>yum</code>仓库</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y createrepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# createrepo &#x2F;mysql57Spawning worker 0 with 10 pkgsWorkers FinishedSaving Primary metadataSaving file lists metadataSaving other metadataGenerating sqlite DBsSqlite DBs complete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="a-创建yum源"><a href="#a-创建yum源" class="headerlink" title="a.创建yum源"></a>a.创建<code>yum</code>源</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;mysql.repo[mysql5.7]name&#x3D;mysql5.7baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mysql57enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-安装MySQL5-7"><a href="#E-安装MySQL5-7" class="headerlink" title="E.安装MySQL5.7"></a>E.安装<code>MySQL5.7</code></h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# yum install -y mysql-comm*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-开启二进制日志-可忽略"><a href="#F-开启二进制日志-可忽略" class="headerlink" title="F.开启二进制日志(可忽略)"></a>F.开启<code>二进制日志</code>(可忽略)</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;10log_bin&#x3D;master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-启用Mysql服务并设置开机自启动"><a href="#F-启用Mysql服务并设置开机自启动" class="headerlink" title="F.启用Mysql服务并设置开机自启动"></a>F.启用<code>Mysql</code>服务并设置开机自启动</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# systemctl start mysqld[root@master ~]# systemctl enable mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="G-修改MySQL的root密码"><a href="#G-修改MySQL的root密码" class="headerlink" title="G.修改MySQL的root密码"></a>G.修改<code>MySQL</code>的<code>root</code>密码</h4><h5 id="a-查看日志获取临时密码"><a href="#a-查看日志获取临时密码" class="headerlink" title="a.查看日志获取临时密码"></a>a.查看<code>日志</code>获取<code>临时</code>密码</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep -i password2023-04-10T11:04:33.118928Z 1 [Note] A temporary password is generated for root@localhost: Y?.Ce5duxf7n#临时密码就是最后的随机数+英文字母<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="b-使用临时密码登录，然后更改密码"><a href="#b-使用临时密码登录，然后更改密码" class="headerlink" title="b.使用临时密码登录，然后更改密码"></a>b.使用<code>临时</code>密码登录，然后<code>更改</code>密码</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]#  mysql -uroot -pEnter password: Y?.Ce5duxf7n#输入密码的时候不会明文显示哦！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set password for &#39;root&#39;@&#39;localhost&#39; &#x3D; password(&quot;WWW.1.com&quot;);#这里修改密码为WWW.1.comQuery OK, 0 rows affected, 1 warning (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="H-创建WordPress用到的数据库"><a href="#H-创建WordPress用到的数据库" class="headerlink" title="H.创建WordPress用到的数据库"></a>H.创建<code>WordPress</code>用到的<code>数据库</code></h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database wordpress charset utf8mb4;Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="I-创建WordPress用到的数据库用户"><a href="#I-创建WordPress用到的数据库用户" class="headerlink" title="I.创建WordPress用到的数据库用户"></a>I.创建<code>WordPress</code>用到的<code>数据库</code>用户</h4><p><strong>创建一个名为<code>wordpress</code>的用户，密码为<code>WWW.1.com</code>，并且这个用户对<code>wordpress库</code>拥有<code>全部</code>权限。</strong></p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant all on wordpress.* to &#39;wordpress&#39;@&#39;localhost&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="J-退出数据库"><a href="#J-退出数据库" class="headerlink" title="J.退出数据库"></a>J.退出<code>数据库</code></h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; exitBye[root@master ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、部署WordPress6-2博客"><a href="#四、部署WordPress6-2博客" class="headerlink" title="四、部署WordPress6.2博客"></a>四、部署<code>WordPress6.2</code>博客</h2><h3 id="1-下载WordPress软件"><a href="#1-下载WordPress软件" class="headerlink" title="1.下载WordPress软件"></a>1.下载<code>WordPress</code>软件</h3><pre class="line-numbers language-none"><code class="language-none">[root@wsjj ~]# wget https:&#x2F;&#x2F;cn.wordpress.org&#x2F;latest-zh_CN.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><pre class="line-numbers language-none"><code class="language-none">[root@wsjj ~]# tar xf latest-zh_CN.tar.gz [root@wsjj ~]# lslatest-zh_CN.tar.gz  wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-移动文件到网页目录"><a href="#3-移动文件到网页目录" class="headerlink" title="3.移动文件到网页目录"></a>3.<code>移动</code>文件到<code>网页</code>目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@wsjj ~]# mv .&#x2F;wordpress&#x2F;* &#x2F;www&#x2F;wwwroot&#x2F;boke.wsjj.top&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-浏览器测试"><a href="#4-浏览器测试" class="headerlink" title="4.浏览器测试"></a>4.<code>浏览器</code>测试</h3><p><img src="https://www.wsjj.top/upload/2023/04/wp1.png" alt="wp1"></p><h4 id="如果无法访问，请检查云服务商防火墙是否已经开启80端口，或者系统防火墙和SElinux是否关闭"><a href="#如果无法访问，请检查云服务商防火墙是否已经开启80端口，或者系统防火墙和SElinux是否关闭" class="headerlink" title="如果无法访问，请检查云服务商防火墙是否已经开启80端口，或者系统防火墙和SElinux是否关闭"></a>如果无法访问，请检查云服务商<code>防火墙</code>是否已经开启<code>80</code>端口，或者<code>系统防火墙</code>和<code>SElinux</code>是否关闭</h4><p><img src="https://www.wsjj.top/upload/2023/04/wp2.png" alt="wp2"></p><h4 id="成功进入配置页面"><a href="#成功进入配置页面" class="headerlink" title="成功进入配置页面"></a>成功进入<code>配置</code>页面</h4><p><img src="https://www.wsjj.top/upload/2023/04/wp3.png" alt="wp3"></p><h3 id="5-开始网页端配置"><a href="#5-开始网页端配置" class="headerlink" title="5.开始网页端配置"></a>5.开始<code>网页端</code>配置</h3><h4 id="A-连接数据库"><a href="#A-连接数据库" class="headerlink" title="A.连接数据库"></a>A.连接<code>数据库</code></h4><p><img src="https://www.wsjj.top/upload/2023/04/wp4.png" alt="wp4"></p><h4 id="B-开始安装"><a href="#B-开始安装" class="headerlink" title="B.开始安装"></a>B.开始<code>安装</code></h4><p><img src="https://www.wsjj.top/upload/2023/04/wp5.png" alt="wp5"></p><p><img src="https://www.wsjj.top/upload/2023/04/wp6.png" alt="wp6"></p><p><img src="https://www.wsjj.top/upload/2023/04/wp7.png" alt="wp7"></p><p><img src="https://www.wsjj.top/upload/2023/04/wp8.png" alt="wp8"></p><h4 id="C-进入后台"><a href="#C-进入后台" class="headerlink" title="C.进入后台"></a>C.进入<code>后台</code></h4><p><img src="https://www.wsjj.top/upload/2023/04/wp9.png" alt="wp9"></p><h4 id="D-进入前台"><a href="#D-进入前台" class="headerlink" title="D.进入前台"></a>D.进入<code>前台</code></h4><p><img src="https://www.wsjj.top/upload/2023/04/wp10.png" alt="wp10"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
          <category> nginx </category>
          
          <category> wordpress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> nginx </tag>
            
            <tag> wordpress </tag>
            
            <tag> lamp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本一键安装YunZai-Bot V3教程(Centos7)</title>
      <link href="/2023/04/20/87/"/>
      <url>/2023/04/20/87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Shell脚本一键安装YunZai-Bot-V3教程-Centos7"><a href="#Shell脚本一键安装YunZai-Bot-V3教程-Centos7" class="headerlink" title="Shell脚本一键安装YunZai-Bot V3教程(Centos7)"></a>Shell脚本一键安装YunZai-Bot V3教程(Centos7)</h1><ul><li>Docker安装YunZai<a href="https://www.wsjj.top/archives/5">教程</a></li><li>TRSS-YunZai搭建<a href="https://www.wsjj.top/archives/trss-yunzai">教程</a></li><li>Github开源<a href="https://github.com/wangshengjj/YunZai-Bot_Shell">地址</a></li><li>Gitee开源<a href="https://gitee.com/wangshengjj/YunZai-Bot_Shell">地址</a></li></ul><h2 id="一、克隆仓库"><a href="#一、克隆仓库" class="headerlink" title="一、克隆仓库"></a>一、克隆仓库</h2><h2 id="这是一个还在测试的脚本，目前仅支持Centos7系统"><a href="#这是一个还在测试的脚本，目前仅支持Centos7系统" class="headerlink" title="这是一个还在测试的脚本，目前仅支持Centos7系统"></a>这是一个还在测试的脚本，目前仅支持<code>Centos7</code>系统</h2><ul><li>用到的环境：<ul><li><a href="https://nodejs.org/en">Nodejs</a></li><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://redis.io/">Redis</a></li><li><a href="https://github.com/yoimiya-kokomi/Miao-Yunzai">Miao-YunZai-Bot V3</a></li><li><a href="https://gitee.com/TimeRainStarSky/TRSS_Yunzai">TRSS-YunZai-Bot</a></li><li><a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a></li></ul></li></ul><h2 id="如果您懂得其他，发行版Linux系统的使用，可以根据您的使用习惯修改命令"><a href="#如果您懂得其他，发行版Linux系统的使用，可以根据您的使用习惯修改命令" class="headerlink" title="如果您懂得其他，发行版Linux系统的使用，可以根据您的使用习惯修改命令"></a>如果您懂得其他，发行版<code>Linux</code>系统的使用，可以根据您的使用习惯<code>修改</code>命令</h2><h2 id="二、使用教程："><a href="#二、使用教程：" class="headerlink" title="二、使用教程："></a>二、使用教程：</h2><h3 id="1、使用Git-clone仓库-Github"><a href="#1、使用Git-clone仓库-Github" class="headerlink" title="1、使用Git clone仓库(Github)"></a>1、使用Git clone仓库(Github)</h3><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;wangshengjj&#x2F;YunZai-Bot_Shell.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Gitee(国内首推)</strong></p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;gitee.com&#x2F;wangshengjj&#x2F;YunZai-Bot_Shell.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、赋予执行权限"><a href="#2、赋予执行权限" class="headerlink" title="2、赋予执行权限"></a>2、赋予执行权限</h3><pre class="line-numbers language-none"><code class="language-none">chmod 777 .&#x2F;YunZai-Bot_Shell&#x2F;yunzai-bot.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、执行"><a href="#3、执行" class="headerlink" title="3、执行"></a>3、执行</h3><pre class="line-numbers language-none"><code class="language-none">.&#x2F;YunZai-Bot_Shell&#x2F;yunzai-bot.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>或</strong></p><pre class="line-numbers language-none"><code class="language-none">bash .&#x2F;YunZai-Bot_Shell&#x2F;yunzai-bot.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、报错解决"><a href="#4、报错解决" class="headerlink" title="4、报错解决"></a>4、报错解决</h3><p>如果go-cqhttp提示如下报错，请修改<code>Yunzai/go-cqhttp/device.json</code>文件</p><blockquote><p>把<code>&quot;protocol&quot;:6,&quot;imei&quot;</code> 里面的<code>6</code>改成<code>3</code>即可</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[2023-04-19 23:30:11] [WARNING]: 登录失败: 登录失败，建议升级最新版本后重试，或通过问题反馈与我们联系。 Code: 45 [2023-04-19 23:30:11] [WARNING]: 你的账号涉嫌违规被限制在非常用设备登录, 请在手机QQ登录并根据提示完成认证 [2023-04-19 23:30:11] [WARNING]: 或使用 -update-protocol 升级到最新协议后重试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> centos </category>
          
          <category> shell脚本 </category>
          
          <category> yunzai </category>
          
          <category> 云崽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云崽 </tag>
            
            <tag> YunZai-Bot </tag>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> yunzai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Nginx的反向代理和负载均衡功能</title>
      <link href="/2023/04/19/86/"/>
      <url>/2023/04/19/86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Nginx的反向代理和负载均衡功能"><a href="#【Linux基础服务教程】Nginx的反向代理和负载均衡功能" class="headerlink" title="【Linux基础服务教程】Nginx的反向代理和负载均衡功能"></a>【Linux基础服务教程】Nginx的反向代理和负载均衡功能</h1><h2 id="一、Nginx反向代理功能"><a href="#一、Nginx反向代理功能" class="headerlink" title="一、Nginx反向代理功能"></a>一、Nginx反向代理功能</h2><ul><li>应用范围：<ul><li><code>web</code>服务</li><li><code>mail</code>服务</li><li><code>数据库</code>服务</li></ul></li></ul><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><pre class="line-numbers language-none"><code class="language-none">location &#x2F;  &#123;proxy_pass    后端服务器地址&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.示例</h3><ul><li><code>Nginx</code>服务器IP：192.168.140.10</li><li>后端<code>web</code>服务器IP：192.168.140.11</li></ul><h4 id="A-将192-168-140-10-x2F-mp3的请求，通过反向代理交给192-168-140-11-x2F-music"><a href="#A-将192-168-140-10-x2F-mp3的请求，通过反向代理交给192-168-140-11-x2F-music" class="headerlink" title="A.将192.168.140.10&#x2F;mp3的请求，通过反向代理交给192.168.140.11&#x2F;music"></a>A.将192.168.140.10&#x2F;mp3的请求，通过反向代理交给192.168.140.11&#x2F;music</h4><blockquote><p>我们前端<code>浏览器</code>的地址还是<code>192.168.140.10/mp3</code>，但是内容却是<code>192.168.140.11/music</code>下的内容</p></blockquote><pre class="line-numbers language-none"><code class="language-none">location &#x2F;mp3 &#123;     proxy_pass http:&#x2F;&#x2F;192.168.140.11&#x2F;music;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-Nginx默认会把用户的访问地址，拼接到反向代理地址的后面"><a href="#B-Nginx默认会把用户的访问地址，拼接到反向代理地址的后面" class="headerlink" title="B.Nginx默认会把用户的访问地址，拼接到反向代理地址的后面"></a>B.Nginx默认会把用户的访问地址，拼接到反向代理地址的后面</h4><blockquote><p>如下所示，我们前端浏览器访问<code>192.168.140.10/testA</code>的时候，后端<code>反向代理</code>交给的地址是<code>192.168.140.11/testA</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">location &#x2F;testA &#123;            proxy_pass http:&#x2F;&#x2F;192.168.140.11;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-当location以正则的方式匹配的时候，后端反向代理仅支持写IP地址"><a href="#C-当location以正则的方式匹配的时候，后端反向代理仅支持写IP地址" class="headerlink" title="C.当location以正则的方式匹配的时候，后端反向代理仅支持写IP地址"></a>C.当location以正则的方式匹配的时候，后端反向代理仅支持写IP地址</h4><pre class="line-numbers language-none"><code class="language-none">location ~ &#x2F;testB &#123;             proxy_pass http:&#x2F;&#x2F;192.168.140.11;        &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-显示前端真实IP"><a href="#3-显示前端真实IP" class="headerlink" title="3.显示前端真实IP"></a>3.显示前端真实IP</h3><blockquote><p>当<code>不加</code>参数的时候，后端<code>web</code>服务器访问日志会记录<code>Nginx</code>的IP地址</p></blockquote><pre class="line-numbers language-none"><code class="language-none">location &#x2F;mp3 &#123;            proxy_pass http:&#x2F;&#x2F;192.168.140.11&#x2F;music;            proxy_set_header X-REAL-IP $remote_addr;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>$remote_addr<br>nginx内置变量，真实客户端地址</p></blockquote><h4 id="修改httpd的日志-当后端web服务器为Apache时"><a href="#修改httpd的日志-当后端web服务器为Apache时" class="headerlink" title="修改httpd的日志(当后端web服务器为Apache时)"></a>修改httpd的日志(当后端web服务器为Apache时)</h4><pre class="line-numbers language-none"><code class="language-none">[root@web01 ~]# grep &quot;LogFormat&quot; &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf     LogFormat &quot;%&#123;X-REAL-IP&#125;i %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改第一个记录<code>客户端IP</code>的变量</p></blockquote><h4 id="反向代理到https链接"><a href="#反向代理到https链接" class="headerlink" title="反向代理到https链接"></a>反向代理到https链接</h4><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;       proxy_pass https:&#x2F;&#x2F;wsjj.top;       proxy_set_header X-REAL-IP $remote_addr;       proxy_ssl_server_name on;#开启支持https，同样适用站点接入了Cloudflare   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、upstream模块应用-实现负载均衡"><a href="#二、upstream模块应用-实现负载均衡" class="headerlink" title="二、upstream模块应用(实现负载均衡)"></a>二、upstream模块应用(实现负载均衡)</h2><h3 id="1-upstream模块的作用"><a href="#1-upstream模块的作用" class="headerlink" title="1.upstream模块的作用"></a>1.upstream模块的作用</h3><ul><li>实现后端服务的<code>负载均衡</code></li><li>实现对后端服务的<code>健康状态</code>检查</li></ul><h3 id="2-upstream模块调度算法"><a href="#2-upstream模块调度算法" class="headerlink" title="2.upstream模块调度算法"></a>2.upstream模块调度算法</h3><ul><li><code>rr</code>轮询(默认)<ul><li>将不同的请求转交到不同的后端服务器处理 </li><li>支持权重weight</li><li>解决会话保持&#x2F;持久</li></ul></li><li><code>ip_hash</code><ul><li>根据客户端地址进行hash运算</li><li>将同一个客户端的请求在一段时间内转交到同一个后端服务器处理</li><li>权重越高，Nginx自动分配的请求越多</li></ul></li><li><code>least_conn</code><ul><li>最少连接</li><li>会根据不同服务器收到的连接，把请求交给收到连接最少的服务器</li></ul></li></ul><h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><blockquote><p><code>upstream</code>组<code>不能</code>定义在某个<code>server&#123;&#125;</code>虚拟主机内部!!!!</p></blockquote><pre class="line-numbers language-none"><code class="language-none">upstream  组名 &#123;    [调度算法];    server  IP:port  [weight&#x3D;数字]  [max_fails&#x3D;2]  [fail_timeout&#x3D;2];    server  IP:port  [weight&#x3D;数字]  [max_fails&#x3D;2]  [fail_timeout&#x3D;2];    server  IP:port  [weight&#x3D;数字]  [max_fails&#x3D;2]  [fail_timeout&#x3D;2] [backup];&#125;#backup为备用服务器location &#123;    proxy_pass  http:&#x2F;&#x2F;组名;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>IP:port<ul><li>后端真实服务器的地址</li></ul></li><li>weight<ul><li>权重，默认为1，数字越大，权重越高</li></ul></li><li>max_fails<ul><li>健康状态检查时，最大的失败次数</li></ul></li><li>fail_timeout<ul><li>失败次数的间隔时间，单位为秒</li></ul></li><li>backup<ul><li>指定备份服务器</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">upstream webserver &#123;       server 192.168.140.11:80 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;2;       server 192.168.140.12:80 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;2;       server 127.0.0.1:8000 backup;    &#125;location &#x2F; &#123;           proxy_pass http:&#x2F;&#x2F;webserver;#反向代理到自定义的组名           proxy_set_header X-REAL-IP $remote_addr;        &#125;server &#123;        listen       8000;        server_name  localhost;        location &#x2F; &#123;            root   &#x2F;test2;            index  index.html index.htm;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Nginx的location写法和URL重写</title>
      <link href="/2023/04/19/85/"/>
      <url>/2023/04/19/85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Nginx的location写法和URL重写"><a href="#【Linux基础服务教程】Nginx的location写法和URL重写" class="headerlink" title="【Linux基础服务教程】Nginx的location写法和URL重写"></a>【Linux基础服务教程】Nginx的location写法和URL重写</h1><h2 id="一、location的写法"><a href="#一、location的写法" class="headerlink" title="一、location的写法"></a>一、location的写法</h2><blockquote><p>作用：匹配<code>客户端</code>的<code>访问</code>请求</p></blockquote><pre class="line-numbers language-none"><code class="language-none">location [ &#x3D; | ~ | ~* | ^~ ] uri &#123;    ..........&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-x3D-精确匹配"><a href="#1-x3D-精确匹配" class="headerlink" title="1. &#x3D; 精确匹配"></a>1. &#x3D; 精确匹配</h3><pre class="line-numbers language-none"><code class="language-none">location &#x3D; &#x2F;test &#123;    xxxxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location &#x3D; &#x2F; &#123;    xxxxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-正则表达式匹配请求-区分大小写"><a href="#2-正则表达式匹配请求-区分大小写" class="headerlink" title="2.~ 正则表达式匹配请求(区分大小写)"></a>2.~ 正则表达式匹配请求(区分大小写)</h3><pre class="line-numbers language-none"><code class="language-none">location ~ &#x2F;test &#123;    xxxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location ~ \.(jpg|jpeg|gif|png)$ &#123;    xxxxxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location ~ \.php$ &#123;    xxxxxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-正则表达式匹配请求-不区分大小写"><a href="#3-正则表达式匹配请求-不区分大小写" class="headerlink" title="3. ~* 正则表达式匹配请求(不区分大小写)"></a>3. ~* 正则表达式匹配请求(不区分大小写)</h3><pre class="line-numbers language-none"><code class="language-none">location ~* \.php$ &#123;    xxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-不以正则的方式匹配请求"><a href="#4-不以正则的方式匹配请求" class="headerlink" title="4.^~ 不以正则的方式匹配请求"></a>4.^~ 不以正则的方式匹配请求</h3><blockquote><p>xxxx开头</p></blockquote><pre class="line-numbers language-none"><code class="language-none">location ^~ &#x2F;test &#123;xxxxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-定义错误页面-404举例"><a href="#5-定义错误页面-404举例" class="headerlink" title="5.定义错误页面(404举例)"></a>5.定义错误页面(404举例)</h3><pre class="line-numbers language-none"><code class="language-none">error_page 404 &#x2F;sorry.html;#指定触发404错误默认文件location &#x3D; &#x2F;sorry.html &#123;#默认跳转地址   root &#x2F;game;#网页目录(存放404页面目录)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、location的优先级排序"><a href="#二、location的优先级排序" class="headerlink" title="二、location的优先级排序"></a>二、location的优先级排序</h2><ul><li>如果一个请求被多个location匹配，使用优先级高location处理</li><li>&#x3D; ,  ^~,  ~,  ~*,  location &#x2F;</li></ul><pre class="line-numbers language-none"><code class="language-none">location &#x3D; &#x2F; &#123;    [ configuration A ]&#125;location &#x2F; &#123;    [ configuration B ]&#125;location &#x2F;documents&#x2F; &#123;    [ configuration C ]&#125;location ^~ &#x2F;images&#x2F; &#123;    [ configuration D ]&#125;location ~* \.(gif|jpg|jpeg)$ &#123;    [ configuration E ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、URL重写"><a href="#三、URL重写" class="headerlink" title="三、URL重写"></a>三、URL重写</h2><h3 id="1-语法和用法"><a href="#1-语法和用法" class="headerlink" title="1.语法和用法"></a>1.语法和用法</h3><pre class="line-numbers language-none"><code class="language-none">location &#x2F;  &#123;xxxxxxxxrewrite  uri地址  新uri地址 [标志];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意事项：<br>1、<code>server, location</code>这2个字段<code>大括号</code>里头都可以写，也可以用<code>if</code>语句<br>2、<code>rewrite</code>可以存在多条, 依次进行处理<br>3、旧<code>uri</code>地址支持<code>正则表达式</code>; 新<code>uri</code>支持反向引用<br>4、旧<code>uri</code>地址匹配客户端时，不包括请求中的参数<br>5、支持<code>变量</code>的使用</p></blockquote><h3 id="2-标志"><a href="#2-标志" class="headerlink" title="2.标志"></a>2.标志</h3><ul><li>last<ul><li>终止本<code>location</code>块中的匹配，将新地址转交给下一个<code>location</code></li></ul></li><li>break<ul><li><code>不会</code>将新地址交给其他的<code>location</code>处理，只在本<code>location</code>中处理</li></ul></li><li>redirect<ul><li><code>临时</code>重定向, 状态码<code>302</code></li></ul></li><li>permanet<ul><li><code>永久</code>重定向, 状态码<code>301</code></li></ul></li></ul><h3 id="3-URL重写例子"><a href="#3-URL重写例子" class="headerlink" title="3.URL重写例子"></a>3.URL重写例子</h3><h4 id="改写旧地址的目录"><a href="#改写旧地址的目录" class="headerlink" title="改写旧地址的目录"></a>改写旧地址的目录</h4><pre class="line-numbers language-none"><code class="language-none">rewrite ^&#x2F;mp3 http:&#x2F;&#x2F;python.linux.com&#x2F;music;#不可靠的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">rewrite ^&#x2F;mp3&#x2F;(.*)  http:&#x2F;&#x2F;python.linux.com&#x2F;music&#x2F;$1;#改写的同时，支持用户访问的文件不变<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="域名跳转"><a href="#域名跳转" class="headerlink" title="域名跳转"></a>域名跳转</h4><pre class="line-numbers language-none"><code class="language-none">rewrite ^&#x2F;  https:&#x2F;&#x2F;www.baidu.com;#当前域名跳转到www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实现https自动跳转"><a href="#实现https自动跳转" class="headerlink" title="实现https自动跳转"></a>实现https自动跳转</h4><blockquote><p>修改原来<code>http</code>协议的域名子配置文件</p></blockquote><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;      root &#x2F;data&#x2F;python;      index index.html;      if ($host &#x3D; www.linux.com) &#123;          rewrite ^&#x2F;(.*)  https:&#x2F;&#x2F;www.linux.com&#x2F;$1;      &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Nginx配置文件</title>
      <link href="/2023/04/19/84/"/>
      <url>/2023/04/19/84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Nginx配置文件"><a href="#【Linux基础服务教程】Nginx配置文件" class="headerlink" title="【Linux基础服务教程】Nginx配置文件"></a>【Linux基础服务教程】Nginx配置文件</h1><blockquote><p>默认<code>配置文件</code>路径：<code>/usr/local/nginx/conf/nginx.conf</code></p></blockquote><h2 id="一、配置文件的基本结构"><a href="#一、配置文件的基本结构" class="headerlink" title="一、配置文件的基本结构"></a>一、配置文件的基本结构</h2><pre class="line-numbers language-none"><code class="language-none">全局配置事件驱动模型配置http服务配置http &#123;    server &#123;                location &#123;            响应方式        &#125;                location &#123;                    &#125;                location &#123;&#125;            &#125;        server &#123;            &#125;        server &#123;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>server {}<ul><li>一个<code>server</code>的配置就对应一个<code>虚拟</code>主机</li></ul></li><li>location {}<ul><li><code>匹配</code>客户端访问请求，以不同的方式给<code>客户端</code>响应</li></ul></li></ul><h3 id="1-全局配置"><a href="#1-全局配置" class="headerlink" title="1.全局配置"></a>1.全局配置</h3><ul><li>user  nobody;<ul><li>指定启动工作进程的用户</li></ul></li><li>worker_processes  8;<ul><li>定义Nginx默认启动的工作进程数</li><li>建议与CPU数量一致，或2倍</li><li>或者auto设置自动</li></ul></li><li>error_log  logs&#x2F;error.log  notice;<ul><li>定义错误日志 </li><li>错误日志等级：debug, info, notice, warn, error, crit, alert, emerg</li></ul></li></ul><h3 id="2-事件驱动模型配置"><a href="#2-事件驱动模型配置" class="headerlink" title="2.事件驱动模型配置"></a>2.事件驱动模型配置</h3><ul><li>worker_connections  1024;<ul><li>定义工作进程所能接收的<code>最大连接数</code></li></ul></li><li>use epoll;  <ul><li>定义事件驱动模型</li><li><code>nginx</code>安装在<code>freeBSD Linux</code>时，名称要改为<code>kqueue</code></li></ul></li></ul><h3 id="3-http服务的相关配置"><a href="#3-http服务的相关配置" class="headerlink" title="3.http服务的相关配置"></a>3.http服务的相关配置</h3><ul><li>include   文件名称;<ul><li>加载子配置文件</li></ul></li><li>access_log  logs&#x2F;access.log  main;<ul><li>定义访问日志</li></ul></li></ul><blockquote><p>Nginx默认的日志变量 log_format  main  ‘$remote_addr - $remote_user [$time_local] “$request” ‘<br>                      ‘$status $body_bytes_sent “$http_referer” ‘<br>                      ‘“$http_user_agent” “$http_x_forwarded_for”‘;</p></blockquote><h4 id="变量说明："><a href="#变量说明：" class="headerlink" title="变量说明："></a>变量说明：</h4><ul><li><p>$remote_addr：客户端<code>地址</code></p></li><li><p>$remote_user： 基于用户认证访问时，客户端输入的<code>用户名</code></p></li><li><p>$time_local: 访问<code>时间</code> </p></li><li><p>$request： 请求方法<code>(GET/POST)</code>   文件名称  <code>HTTP</code>协议版本 </p></li><li><p>$status: http<code>状态码</code> </p></li><li><p>$body_bytes_sent:  <code>响应</code>数据大小，单位字节 </p></li><li><p>$http_referer: <code>超链接</code>地址</p></li><li><p>$http_user_agent：<code>客户端</code>浏览器类型</p></li><li><p>keepalive_timeout  65</p><ul><li>定义长连接的空闲<code>超时</code>时间</li></ul></li><li><p>keepalive_requests  1000;</p><ul><li>定义长连接的<code>最大</code>请求数</li></ul></li><li><p>gzip  on;</p><ul><li>启用<code>gzip</code>压缩</li></ul></li></ul><h2 id="二、虚拟主机"><a href="#二、虚拟主机" class="headerlink" title="二、虚拟主机"></a>二、虚拟主机</h2><h3 id="1-格式"><a href="#1-格式" class="headerlink" title="1.格式"></a>1.格式</h3><pre class="line-numbers language-none"><code class="language-none">server&#123;xxxxxxxxxxxxxxxxxxxxxxxxxx&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-参数说明"><a href="#2-参数说明" class="headerlink" title="2.参数说明"></a>2.参数说明</h3><ul><li>listen       80;<ul><li>指定监听<code>地址</code>,<code>端口</code> </li><li>listen  IP:port;</li></ul></li><li>server_name  localhost;<ul><li>指定网站<code>主机名</code> </li><li>server_name  名称1  名称2  名称3;</li></ul></li><li>location的写法<ul><li>匹配客户端请求，定义不同<code>响应</code>的方式</li></ul></li></ul><h4 id="location格式"><a href="#location格式" class="headerlink" title="location格式"></a>location格式</h4><pre class="line-numbers language-none"><code class="language-none">location uri地址 &#123;    响应方式&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;#匹配所有请求            root   html;#指定网页目录            index  index.html index.htm;#指定首页名称        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location &#x2F;mp3 &#123;#指定当用户访问&#x2F;mp3的时候            root &#x2F;data;#指定默认网页目录            index index.html;#指定首页名称        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location &#x3D; &#x2F;game &#123;#优先级大于上边，必须等于&#x2F;game    #...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">location ~ \.html &#123;#只要访问的页面包含.html结尾的    #...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-虚拟主机配置"><a href="#3-虚拟主机配置" class="headerlink" title="3.虚拟主机配置"></a>3.虚拟主机配置</h3><ul><li>基于<code>名称</code>的虚拟主机 </li><li>基于<code>IP</code>的虚拟主机</li></ul><h4 id="A-基于名称的虚拟主机"><a href="#A-基于名称的虚拟主机" class="headerlink" title="A.基于名称的虚拟主机"></a>A.基于名称的虚拟主机</h4><blockquote><p><code>game.linux.com</code>域名<code>/game</code>网页目录<br><code>music.linux.com</code>域名<code>/music</code>网页目录</p></blockquote><h5 id="a-配置game网站"><a href="#a-配置game网站" class="headerlink" title="a.配置game网站"></a>a.配置<code>game</code>网站</h5><h6 id="创建子配置目录-可选的"><a href="#创建子配置目录-可选的" class="headerlink" title="创建子配置目录(可选的)"></a>创建子配置目录(可选的)</h6><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="配置子配置文件"><a href="#配置子配置文件" class="headerlink" title="配置子配置文件"></a>配置子配置文件</h6><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;game.confserver &#123;   listen 80;#指定监听端口   server_name game.linux.com  game;#绑定域名   access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;game_access.log main;#访问日志   error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;game_error.log error;#错误日志   location &#x2F; &#123;#配置访问规则       root &#x2F;game;#网页的根目录       index index.html;#默认首页   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="在主配置文件加载子配置文件"><a href="#在主配置文件加载子配置文件" class="headerlink" title="在主配置文件加载子配置文件"></a>在主配置文件加载子配置文件</h6><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confhttp &#123;    ..............#配置文件并不完整，请勿动其他地方    include &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;game.conf;#因我们在子配置文件定义了日志记录格式，务必把这条记录放在定义main日志的后面！&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h6><blockquote><p>修改<code>hosts</code>文件，自行测试</p></blockquote><h5 id="b-配置music网站"><a href="#b-配置music网站" class="headerlink" title="b.配置music网站"></a>b.配置music网站</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;music.confserver &#123;   listen 80;   server_name music.linux.com;   access_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;music_access.log main;   error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;music_error.log error;   location &#x2F; &#123;       root &#x2F;music;       index index.html;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="在主配置文件加载子配置文件-1"><a href="#在主配置文件加载子配置文件-1" class="headerlink" title="在主配置文件加载子配置文件"></a>在主配置文件加载子配置文件</h6><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confhttp &#123;    ..............#配置文件并不完整，请勿动其他地方    include &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;music.conf;#因我们在子配置文件定义了日志记录格式，务必把这条记录放在定义main日志的后面！&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="测试访问-1"><a href="#测试访问-1" class="headerlink" title="测试访问"></a>测试访问</h6><blockquote><p>修改<code>hosts</code>文件，自行测试</p></blockquote><h4 id="B-基于IP的虚拟主机"><a href="#B-基于IP的虚拟主机" class="headerlink" title="B.基于IP的虚拟主机"></a>B.基于IP的虚拟主机</h4><blockquote><p><code>shell.linux.com</code>域名<code>192.168.140.100</code>网卡IP<code>/shell</code>网页数据目录</p></blockquote><h5 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h5><blockquote><p>过程省略</p></blockquote><h5 id="编辑子配置文件"><a href="#编辑子配置文件" class="headerlink" title="编辑子配置文件"></a>编辑子配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;shell.confserver &#123;   listen 192.168.140.100:80;#指定网站监听的IP和端口   server_name shell.linux.com  shell;   access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;shell_access.log main;   error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;shell_error.log error;   location &#x2F; &#123;       root &#x2F;shell;       index index.html;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在主配置文件加载子配置文件-2"><a href="#在主配置文件加载子配置文件-2" class="headerlink" title="在主配置文件加载子配置文件"></a>在主配置文件加载子配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confhttp &#123;    ..............#配置文件并不完整，请勿动其他地方    include &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;shell.conf;#因我们在子配置文件定义了日志记录格式，务必把这条记录放在定义main日志的后面！&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试访问-2"><a href="#测试访问-2" class="headerlink" title="测试访问"></a>测试访问</h5><blockquote><p>修改<code>hosts</code>文件，自行测试</p></blockquote><h2 id="三、Nginx配置基于https的虚拟主机"><a href="#三、Nginx配置基于https的虚拟主机" class="headerlink" title="三、Nginx配置基于https的虚拟主机"></a>三、Nginx配置基于https的虚拟主机</h2><h3 id="1-公有CA配置"><a href="#1-公有CA配置" class="headerlink" title="1.公有CA配置"></a>1.公有CA配置</h3><blockquote><p>Apache配置https网页教程：<a href="https://www.wsjj.top/archives/71">https://www.wsjj.top/archives/71</a></p></blockquote><h4 id="A-域名注册"><a href="#A-域名注册" class="headerlink" title="A.域名注册"></a>A.域名注册</h4><p><strong>需要提前准备一个域名！！！</strong></p><p><strong>个人推荐的几个域名注册机构：<a href="https://wanwang.aliyun.com/">阿里云万网</a>、<a href="https://buy.cloud.tencent.com/domain">腾讯云</a>、<a href="https://www.cloudflare-cn.com/products/registrar/">cloudflare</a></strong></p><h4 id="B-申请SSL证书"><a href="#B-申请SSL证书" class="headerlink" title="B.申请SSL证书"></a>B.申请SSL证书</h4><p><strong>我这里拿腾讯云做演示</strong></p><p><a href="!%5Bhttps8%5D(/upload/2023/04/https8.png)https://console.cloud.tencent.com/ssl">腾讯云SSL证书控制台</a></p><p><strong>普通个人用户可以选择免费的证书</strong></p><p><strong>缺点：只支持主域名和www域名</strong></p><p><img src="https://www.wsjj.top/upload/2023/04/https2.png" alt="https2"></p><p><strong>或者选择购买证书</strong></p><p><strong>个人推荐购买泛域名证书</strong></p><p><img src="https://www.wsjj.top/upload/2023/04/https3.png" alt="https3"></p><p><strong>更或者使用Let’s Encrypt的免费证书</strong></p><p><strong>虽然只有3个月，但是支持自主续签</strong></p><p><img src="https://www.wsjj.top/upload/2023/04/https4.png" alt="https4"></p><h4 id="C-下载证书"><a href="#C-下载证书" class="headerlink" title="C.下载证书"></a>C.下载证书</h4><ul><li>目前学的是<code>Nginx</code>，所以我们选择<code>Nginx</code>证书</li><li>如果您使用的是其他类型服务器，比如<code>Apache</code>请选择下载相应的证书</li></ul><p><img src="https://www.wsjj.top/upload/2023/04/https8.png" alt="https8"></p><h4 id="D-编写子配置文件"><a href="#D-编写子配置文件" class="headerlink" title="D.编写子配置文件"></a>D.编写子配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;www.confserver &#123;    listen       443 ssl;#走443端口    server_name  www.linux.com;    ssl_certificate      &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;www.linux.com.crt;#指定证书文件    ssl_certificate_key  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;www.linux.com.key;#指定秘钥文件    ssl_session_cache    shared:SSL:1m;    ssl_session_timeout  5m;    ssl_ciphers  HIGH:!aNULL:!MD5;    ssl_prefer_server_ciphers  on;    location &#x2F; &#123;        root   &#x2F;www;        index  index.html index.htm;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload#重新加载配置文件[root@localhost ~]# [root@localhost ~]# netstat -antp | grep nginxtcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6489&#x2F;nginx: master  tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      6489&#x2F;nginx: master <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-浏览器测试访问"><a href="#E-浏览器测试访问" class="headerlink" title="E.浏览器测试访问"></a>E.浏览器测试访问</h4><p><img src="https://www.wsjj.top/upload/2023/04/https7.png" alt="https7"></p><blockquote><p>选择 <code>高级</code>-<code>继续访问</code><br>报错原因：浏览器会<code>自动</code>查找网上的<code>公有CA</code>验证，因为我们是<code>私有CA</code>，没有在公网<code>认证</code>所以会有这个<code>提示</code></p></blockquote><h5 id="通过公有CA认证后的效果"><a href="#通过公有CA认证后的效果" class="headerlink" title="通过公有CA认证后的效果"></a>通过公有CA认证后的效果</h5><blockquote><p>不会<code>提示</code>不安全</p></blockquote><p><img src="https://www.wsjj.top/upload/2023/04/https6.png" alt="https6"></p><h3 id="2-私有CA"><a href="#2-私有CA" class="headerlink" title="2.私有CA"></a>2.私有CA</h3><h4 id="A-创建CA服务器需要的库文件"><a href="#A-创建CA服务器需要的库文件" class="headerlink" title="A.创建CA服务器需要的库文件"></a>A.创建CA服务器需要的库文件</h4><p><strong>自行准备第二台虚拟机当做CA服务器</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# touch &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;index.txt[root@ca ~]# echo 01 &gt; &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;serial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-创建CA服务器需要的秘钥"><a href="#B-创建CA服务器需要的秘钥" class="headerlink" title="B.创建CA服务器需要的秘钥"></a>B.创建CA服务器需要的秘钥</h4><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# openssl genrsa -out &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;private&#x2F;cakey.pem 1024Generating RSA private key, 1024 bit long modulus..++++++.....++++++e is 65537 (0x10001)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-颁发自签证书"><a href="#C-颁发自签证书" class="headerlink" title="C.颁发自签证书"></a>C.颁发自签证书</h4><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# openssl req -new -x509 -key &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;private&#x2F;cakey.pem -out &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;cacert.pem -days 3650You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [XX]:chinastring is too long, it needs to be less than  2 bytes longCountry Name (2 letter code) [XX]:cnState or Province Name (full name) []:bjLocality Name (eg, city) [Default City]:bjOrganization Name (eg, company) [Default Company Ltd]:bjOrganizational Unit Name (eg, section) []:bjCommon Name (eg, your name or your server&#39;s hostname) []:ca.linux.comEmail Address []:bj@qq.com[root@ca ~]# ls &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;cacert.pem  certs  crl  index.txt  newcerts  private  serial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-在web服务器申请证书"><a href="#D-在web服务器申请证书" class="headerlink" title="D.在web服务器申请证书"></a>D.在web服务器申请证书</h4><p><strong>回到web服务器</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@web_server ~]# mkdir &#x2F;etc&#x2F;httpd&#x2F;ssl[root@web_server ~]# openssl genrsa -out &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.key 2048Generating RSA private key, 2048 bit long modulus......................+++.....................................................................+++e is 65537 (0x10001)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-创建证书申请"><a href="#E-创建证书申请" class="headerlink" title="E.创建证书申请"></a>E.创建证书申请</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# openssl req -new -key &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.key -out &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.csr You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [XX]:cn#注意这里的信息需要和CA服务器一致State or Province Name (full name) []:bj#注意这里的信息需要和CA服务器一致Locality Name (eg, city) [Default City]:bj#注意这里的信息需要和CA服务器一致Organization Name (eg, company) [Default Company Ltd]:bj#注意这里的信息需要和CA服务器一致Organizational Unit Name (eg, section) []:bj#注意这里的信息需要和CA服务器一致Common Name (eg, your name or your server&#39;s hostname) []:www.linux.com#这里填写自己的域名Email Address []:bj@qq.comPlease enter the following &#39;extra&#39; attributesto be sent with your certificate requestA challenge password []:An optional company name []:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-证书发送给CA服务器"><a href="#F-证书发送给CA服务器" class="headerlink" title="F.证书发送给CA服务器"></a>F.证书发送给CA服务器</h4><pre class="line-numbers language-none"><code class="language-none">[root@web_server ~]# rsync -av &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;www.linux.com.csr root@192.168.140.11:&#x2F;tmp&#x2F;#IP为CA服务器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-CA服务器签署证书"><a href="#G-CA服务器签署证书" class="headerlink" title="G.CA服务器签署证书"></a>G.CA服务器签署证书</h4><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# openssl ca -in &#x2F;tmp&#x2F;www.linux.com.csr -out &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;www.linux.com.crt -days 3650 #证书有效10年Using configuration from &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;openssl.cnfCheck that the request matches the signatureSignature okCertificate Details:        Serial Number: 1 (0x1)        Validity            Not Before: Jun 21 06:06:54 2021 GMT            Not After : Jun 19 06:06:54 2031 GMT        Subject:            countryName               &#x3D; cn            stateOrProvinceName       &#x3D; bj            organizationName          &#x3D; bj            organizationalUnitName    &#x3D; bj            commonName                &#x3D; www.linux.com            emailAddress              &#x3D; bj@qq.com        X509v3 extensions:            X509v3 Basic Constraints:                 CA:FALSE            Netscape Comment:                 OpenSSL Generated Certificate            X509v3 Subject Key Identifier:                 67:6D:B8:84:3A:5C:BE:99:81:4A:49:F4:CD:61:5E:8B:99:3B:EF:13            X509v3 Authority Key Identifier:                 keyid:C8:EF:D2:FB:E8:D5:2B:50:D8:7C:07:7A:27:72:B5:D6:33:09:D6:56Certificate is to be certified until Jun 19 06:06:54 2031 GMT (3650 days)Sign the certificate? [y&#x2F;n]:y1 out of 1 certificate requests certified, commit? [y&#x2F;n]yWrite out database with 1 new entriesData Base Updated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-查看刚刚颁发的证书文件"><a href="#H-查看刚刚颁发的证书文件" class="headerlink" title="H.查看刚刚颁发的证书文件"></a>H.查看刚刚颁发的证书文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# ls &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt  ca-bundle.trust.crt  make-dummy-cert  Makefile  renew-dummy-cert  www.linux.com.crt[root@ca ~]# [root@ca ~]# cat &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;serial#从01变成0202[root@ca ~]# cat &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;index.txtV310619060654Z01unknown&#x2F;C&#x3D;cn&#x2F;ST&#x3D;bj&#x2F;O&#x3D;bj&#x2F;OU&#x3D;bj&#x2F;CN&#x3D;www.linux.com&#x2F;emailAddress&#x3D;bj@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="I-将签好的证书送给web服务器"><a href="#I-将签好的证书送给web服务器" class="headerlink" title="I.将签好的证书送给web服务器"></a>I.将签好的证书送给web服务器</h4><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# rsync -av &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;www.linux.com.crt root@192.168.140.10:&#x2F;etc&#x2F;httpd&#x2F;ssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="J-编辑子配置文件"><a href="#J-编辑子配置文件" class="headerlink" title="J.编辑子配置文件"></a>J.编辑子配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf.d&#x2F;www.confserver &#123;    listen       443 ssl;#走443端口    server_name  www.linux.com;    ssl_certificate      &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;www.linux.com.crt;#指定证书文件    ssl_certificate_key  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;www.linux.com.key;#指定秘钥文件    ssl_session_cache    shared:SSL:1m;    ssl_session_timeout  5m;    ssl_ciphers  HIGH:!aNULL:!MD5;    ssl_prefer_server_ciphers  on;    location &#x2F; &#123;        root   &#x2F;www;        index  index.html index.htm;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload#重新加载配置文件[root@localhost ~]# [root@localhost ~]# netstat -antp | grep nginxtcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6489&#x2F;nginx: master  tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      6489&#x2F;nginx: master <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-浏览器测试访问"><a href="#H-浏览器测试访问" class="headerlink" title="H.浏览器测试访问"></a>H.浏览器测试访问</h4><p><img src="https://www.wsjj.top/upload/2023/04/https7.png" alt="https7"></p><blockquote><p>选择 <code>高级</code>-<code>继续访问</code><br>报错原因：浏览器会<code>自动</code>查找网上的<code>公有CA</code>验证，因为我们是<code>私有CA</code>，没有在公网<code>认证</code>所以会有这个<code>提示</code></p></blockquote><h2 id="四、虚拟主机认证配置"><a href="#四、虚拟主机认证配置" class="headerlink" title="四、虚拟主机认证配置"></a>四、虚拟主机认证配置</h2><ul><li>基于客户端进行认证</li><li>基于用户进行认证</li></ul><h3 id="1-基于客户端进行认证"><a href="#1-基于客户端进行认证" class="headerlink" title="1.基于客户端进行认证"></a>1.基于客户端进行认证</h3><ul><li>allow IP地址 | 网段 | 所有;#允许</li><li>deny IP地址 | 网段  | 所有;#禁止</li></ul><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;       root &#x2F;game;       index index.html;       allow 192.168.140.1;#仅允许这个IP访问       deny all;#其他IP全部拒绝访问   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-基于用户认证"><a href="#2-基于用户认证" class="headerlink" title="2.基于用户认证"></a>2.基于用户认证</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y httpd-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# htpasswd -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;.webuser martinNew password: Re-type new password: Adding password for user martin[root@localhost ~]# cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;.webuser #需要用户文件(必须)martin:$apr1$xzsVq5jH$cWhtMrHoYdmv8CvuiY3hM&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;       root &#x2F;game;       index index.html;       auth_basic &quot;Login:&quot;;       auth_basic_user_file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;.webuser;#指定用户文件   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、自动列出文件"><a href="#五、自动列出文件" class="headerlink" title="五、自动列出文件"></a>五、自动列出文件</h2><blockquote><p><code>Nginx</code>这一点跟<code>Apache</code>不同，<code>Apache</code>当没有<code>index</code>页面的时候，会<code>自动</code>列出网页目录下的<code>所有</code>文件，<code>Nginx</code>需要手动添加配置，才会<code>列出</code>文件，否则提示<code>403</code>错误。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">server &#123;   listen 80;   server_name music.linux.com;   access_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;music_access.log main;   error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;music_error.log error;   location &#x2F; &#123;       root &#x2F;music;       index index.html;       autoindex on;#自动列出文件   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、stub-status显示nginx工作状态"><a href="#六、stub-status显示nginx工作状态" class="headerlink" title="六、stub_status显示nginx工作状态"></a>六、stub_status显示nginx工作状态</h2><pre class="line-numbers language-none"><code class="language-none">location &#x2F;state &#123;#当用户访问域名&#x2F;status的时候   stub_status;#显示工作状态   allow 192.168.140.1;   deny all;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Active connections: 1 server accepts handled requests 94 94 254 Reading: 0 Writing: 1 Waiting: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Active connections<ul><li>当前<code>正在处理</code>的连接数</li></ul></li><li>accepts<ul><li><code>接收</code>的连接数</li></ul></li><li>handled<ul><li><code>处理</code>的连接数</li></ul></li><li>requests<ul><li>处理的<code>请求数</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 网络 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】Nginx的安装和介绍</title>
      <link href="/2023/04/18/83/"/>
      <url>/2023/04/18/83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】Nginx的安装和介绍"><a href="#【Linux基础服务教程】Nginx的安装和介绍" class="headerlink" title="【Linux基础服务教程】Nginx的安装和介绍"></a>【Linux基础服务教程】Nginx的安装和介绍</h1><blockquote><p>Nginx的官网：<a href="https://nginx.org/">https://nginx.org</a></p></blockquote><h2 id="一、Nginx的作用"><a href="#一、Nginx的作用" class="headerlink" title="一、Nginx的作用"></a>一、Nginx的作用</h2><ul><li>配置web服务<ul><li>高并发、高性能</li></ul></li><li>反向代理服务器</li></ul><h3 id="1-Nginx的特点"><a href="#1-Nginx的特点" class="headerlink" title="1.Nginx的特点"></a>1.Nginx的特点</h3><ul><li>开源、跨平台 </li><li>高度模块化</li><li>高并发、高性能 </li><li>支持虚拟主机</li><li>支持https</li><li>支持url重写</li></ul><h3 id="2-Nginx高效的原因"><a href="#2-Nginx高效的原因" class="headerlink" title="2.Nginx高效的原因"></a>2.Nginx高效的原因</h3><ul><li>基于<code>异步非阻塞</code>模型或者叫<code>异步IO</code>模型</li><li>异步和同步的介绍：<ul><li><code>异步</code>速度快</li><li><code>同步</code>速度慢，但是<code>可靠性</code>最高</li></ul></li><li>非阻塞和阻塞的介绍：<ul><li>阻塞<ul><li>进程必须等待<code>磁盘IO</code>完成</li></ul></li><li>非阻塞<ul><li>进程在等待<code>磁盘IO</code>的同时，可以<code>处理其他</code>事务</li></ul></li></ul></li><li>基于<code>epoll</code>事件驱动模型设计的<ul><li>select<ul><li>周期性询问, 限制最大文件数<code>1024</code></li></ul></li><li>poll<ul><li>周期性询问，<code>取消</code>最大文件数的限制</li></ul></li><li>epoll<ul><li><code>通知</code>机制</li></ul></li></ul></li></ul><h2 id="二、Nginx的安装部署"><a href="#二、Nginx的安装部署" class="headerlink" title="二、Nginx的安装部署"></a>二、Nginx的安装部署</h2><h3 id="1-下载Nginx安装包"><a href="#1-下载Nginx安装包" class="headerlink" title="1.下载Nginx安装包"></a>1.下载Nginx安装包</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.20.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装必要的依赖"><a href="#2-安装必要的依赖" class="headerlink" title="2.安装必要的依赖"></a>2.安装必要的依赖</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y gcc openssl-devel pcre-devel zlib-devel <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-创建Nginx临时文件目录-可选的"><a href="#3-创建Nginx临时文件目录-可选的" class="headerlink" title="3.创建Nginx临时文件目录(可选的)"></a>3.创建Nginx临时文件目录(可选的)</h3><blockquote><p>如果不<code>指定临时</code>文件存放目录，默认会和<code>安装</code>目录在一起</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir -p &#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;&#123;client,proxy,fastcgi,uwsgi,scgi&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-创建Nginx用户-可选的"><a href="#4-创建Nginx用户-可选的" class="headerlink" title="4.创建Nginx用户(可选的)"></a>4.创建Nginx用户(可选的)</h3><blockquote><p>默认使用<code>nobody</code>用户</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# useradd -s &#x2F;sbin&#x2F;nologin nginx <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-安装Nginx"><a href="#5-安装Nginx" class="headerlink" title="5.安装Nginx"></a>5.安装Nginx</h3><h4 id="A-解压安装包"><a href="#A-解压安装包" class="headerlink" title="A.解压安装包"></a>A.解压安装包</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar xf nginx-1.20.2.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-进入目录"><a href="#B-进入目录" class="headerlink" title="B.进入目录"></a>B.进入目录</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cd nginx-1.20.2&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-编译安装"><a href="#C-编译安装" class="headerlink" title="C.编译安装"></a>C.编译安装</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost nginx-1.20.2]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;[root@localhost nginx-1.20.2]# make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、Nginx相关文件"><a href="#三、Nginx相关文件" class="headerlink" title="三、Nginx相关文件"></a>三、Nginx相关文件</h2><ul><li>nginx安装目录&#x2F;conf<ul><li>配置文件<code>nginx.conf</code>主配置文件</li></ul></li><li>nginx安装目录&#x2F;logs<ul><li>存放<code>日志</code></li></ul></li><li>nginx安装目录&#x2F;html<ul><li>默认<code>网页</code>目录</li></ul></li><li>nginx安装目录&#x2F;sbin<ul><li><code>二进制</code>文件</li></ul></li></ul><h2 id="四、Nginx启动管理"><a href="#四、Nginx启动管理" class="headerlink" title="四、Nginx启动管理"></a>四、Nginx启动管理</h2><h3 id="1-启动Nginx"><a href="#1-启动Nginx" class="headerlink" title="1.启动Nginx"></a>1.启动Nginx</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx [root@localhost ~]# netstat -antp | grep nginxtcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      9726&#x2F;nginx: master  [root@localhost ~]# ps -elf | grep nginx 1 S root       9726      1  0  80   0 - 11499 sigsus 15:56 ?        00:00:00 nginx: master process &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx5 S nginx      9727   9726  0  80   0 - 11612 ep_pol 15:56 ?        00:00:00 nginx: worker process<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>master process</code>主进程 <ul><li>派生子进程、记录日志、重新加载配置文件</li></ul></li><li><code>worker process</code>工作进程<ul><li>接收、处理客户端访问请求</li></ul></li></ul><h3 id="2-设置Nginx开机自启动"><a href="#2-设置Nginx开机自启动" class="headerlink" title="2.设置Nginx开机自启动"></a>2.设置Nginx开机自启动</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -ri &#39;$a \&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&#39; &#x2F;etc&#x2F;rc.d&#x2F;rc.local[root@localhost ~]# chmod a+x &#x2F;etc&#x2F;rc.d&#x2F;rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-停止Nginx服务"><a href="#3-停止Nginx服务" class="headerlink" title="3.停止Nginx服务"></a>3.停止Nginx服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-重新加载Nginx配置文件"><a href="#4-重新加载Nginx配置文件" class="headerlink" title="4.重新加载Nginx配置文件"></a>4.重新加载Nginx配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-检测Nginx配置文件语法"><a href="#5-检测Nginx配置文件语法" class="headerlink" title="5.检测Nginx配置文件语法"></a>5.检测Nginx配置文件语法</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -tnginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is oknginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-查看Nginx版本"><a href="#6-查看Nginx版本" class="headerlink" title="6.查看Nginx版本"></a>6.查看Nginx版本</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -vnginx version: nginx&#x2F;1.20.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-查看Nginx配置参数"><a href="#7-查看Nginx配置参数" class="headerlink" title="7.查看Nginx配置参数"></a>7.查看Nginx配置参数</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -Vnginx version: nginx&#x2F;1.20.2built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) built with OpenSSL 1.0.2k-fips  26 Jan 2017TLS SNI support enabledconfigure arguments: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-file-aio --with-http_secure_link_module --with-threads --http-client-body-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;client&#x2F; --http-proxy-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;proxy&#x2F; --http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;fastcgi&#x2F; --http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;uwsgi&#x2F; --http-scgi-temp-path&#x3D;&#x2F;var&#x2F;tmp&#x2F;nginx&#x2F;scgi&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】awk工具</title>
      <link href="/2023/04/17/82/"/>
      <url>/2023/04/17/82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】awk工具"><a href="#【Linux系列教程】awk工具" class="headerlink" title="【Linux系列教程】awk工具"></a>【Linux系列教程】awk工具</h1><h2 id="一、关于awk工具"><a href="#一、关于awk工具" class="headerlink" title="一、关于awk工具"></a>一、关于awk工具</h2><ul><li>工作流程<ul><li>默认情况下，awk可以使用空白字符分割文本, awk内部可以分别$1, $2变量代表第一段内容</li><li>-F选项指定分割符</li><li>逐行处理</li></ul></li><li>作用</li><li>显示文本</li></ul><h2 id="二、awk基本命令格式"><a href="#二、awk基本命令格式" class="headerlink" title="二、awk基本命令格式"></a>二、awk基本命令格式</h2><pre class="line-numbers language-none"><code class="language-none"># awk [option] &#39;script&#39; 文件名称  文件名称 # awk [option] &#39;PATTERN&#123;action&#125;&#39;  文件名称  文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>常用<code>action</code> </p><ul><li>print </li><li>printf</li></ul></blockquote><h3 id="1-print操作"><a href="#1-print操作" class="headerlink" title="1.print操作"></a>1.print操作</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;1p&#39; &#x2F;etc&#x2F;passwd#显示第一行root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash[root@master ~]# sed -n &#39;1p&#39; &#x2F;etc&#x2F;passwd | awk -F: &#39;&#123;print $1&#125;&#39;#使用管道符处理上一个命令的结果，以&quot;:&quot;为分隔符，显示第一个字段root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;1p&#39; &#x2F;etc&#x2F;passwd | awk -F: &#39;&#123;print $1,$7&#125;&#39;#以&quot;:&quot;为分隔符，显示第一个字段和第七个字段root &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;1p&#39; &#x2F;etc&#x2F;passwd | awk -F: &#39;&#123;print $0&#125;&#39;#特殊$0查看一整字段root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>支持<code>自定义</code>输出</p></blockquote><pre class="line-numbers language-none"><code class="language-none">awk &#39;&#123;print &quot;自定义字段&quot;$显示的字段数&#125;&#39;[root@master ~]# sed -n &#39;1p&#39; &#x2F;etc&#x2F;passwd | awk -F: &#39;&#123;print &quot;用户名:&quot;$1,&quot;终端:&quot;$7&#125;&#39;用户名:root 终端:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-printf操作"><a href="#2-printf操作" class="headerlink" title="2.printf操作"></a>2.printf操作</h3><ul><li>格式化输出内容</li><li>使用格式<ul><li>printf “格式格式”,内容,内容</li><li>占位符<ul><li>%s字符串</li><li>%d整数</li><li>%f浮点数</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: &#39;&#123;print $1,$6&#125;&#39;#没有用printf格式化处理之前root &#x2F;rootbin &#x2F;bindaemon &#x2F;sbinadm &#x2F;var&#x2F;admlp &#x2F;var&#x2F;spool&#x2F;lpdsync &#x2F;sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: &#39;&#123;printf &quot;%-10s%s\n&quot;, $1,$6&#125;&#39;root      &#x2F;rootbin       &#x2F;bindaemon    &#x2F;sbinadm       &#x2F;var&#x2F;admlp        &#x2F;var&#x2F;spool&#x2F;lpdsync      &#x2F;sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>%s</code>代表字符串，中间数字<code>10</code>，设置字符宽度为<code>10</code>，<code>-</code>修改默认右对齐为左对齐，<code>\n</code>为换行符</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: &#39;&#123;printf &quot;%10s%s\n&quot;, $1,$6&#125;&#39;#如果不添加“-”就会默认右对齐      root&#x2F;root       bin&#x2F;bin    daemon&#x2F;sbin       adm&#x2F;var&#x2F;adm        lp&#x2F;var&#x2F;spool&#x2F;lpd      sync&#x2F;sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: &#39;&#123;printf &quot;%-10s%s&quot;, $1,$6&#125;&#39;root      &#x2F;rootbin       &#x2F;bindaemon    &#x2F;sbinadm       &#x2F;var&#x2F;admlp        &#x2F;var&#x2F;spool&#x2F;lpdsync      &#x2F;sbin[root@master ~]# #可以看到没有\n换行输出的结果，和命令提示符连在一起了，格式很乱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>因为我们<code>新增</code>了<code>自定义</code>字符，所以前面<code>%s</code>要多加<code>2个</code>用来控制那2个字符的格式</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: &#39;&#123;printf &quot;%s%-10s%s%s\n&quot;, &quot;用户名:&quot;,$1, &quot;默认终端:&quot;,$7&#125;&#39;用户名:root      默认终端:&#x2F;bin&#x2F;bash用户名:bin       默认终端:&#x2F;sbin&#x2F;nologin用户名:daemon    默认终端:&#x2F;sbin&#x2F;nologin用户名:adm       默认终端:&#x2F;sbin&#x2F;nologin用户名:lp        默认终端:&#x2F;sbin&#x2F;nologin用户名:sync      默认终端:&#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>同样可以控制我们<code>自定义</code>字符的<code>宽度</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: &#39;&#123;printf &quot;%-5s%-10s%-6s%s\n&quot;, &quot;用户名:&quot;,$1, &quot;默认终端:&quot;,$7&#125;&#39;用户名: root      默认终端: &#x2F;bin&#x2F;bash用户名: bin       默认终端: &#x2F;sbin&#x2F;nologin用户名: daemon    默认终端: &#x2F;sbin&#x2F;nologin用户名: adm       默认终端: &#x2F;sbin&#x2F;nologin用户名: lp        默认终端: &#x2F;sbin&#x2F;nologin用户名: sync      默认终端: &#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-awk常用内置变量"><a href="#3-awk常用内置变量" class="headerlink" title="3.awk常用内置变量"></a>3.awk常用内置变量</h3><h4 id="FS"><a href="#FS" class="headerlink" title="FS"></a>FS</h4><blockquote><p>相当于<code>-F</code>选项的作用<br>保存行<code>分割符</code>，默认<code>空白</code> </p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -v FS&#x3D;&quot;:&quot; &#39;&#123;print $1,$7&#125;&#39;root &#x2F;bin&#x2F;bashbin &#x2F;sbin&#x2F;nologindaemon &#x2F;sbin&#x2F;nologinadm &#x2F;sbin&#x2F;nologinlp &#x2F;sbin&#x2F;nologinsync &#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>和<code>-F</code>参数作用一样，都是已<code>:</code>为分隔符</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: &#39;&#123;print $1,$7&#125;&#39;root &#x2F;bin&#x2F;bashbin &#x2F;sbin&#x2F;nologindaemon &#x2F;sbin&#x2F;nologinadm &#x2F;sbin&#x2F;nologinlp &#x2F;sbin&#x2F;nologinsync &#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="OFS"><a href="#OFS" class="headerlink" title="OFS"></a>OFS</h4><blockquote><p>指定awk显示<code>多段</code>内容时，多段内容间的<code>分隔符</code>(自定义分隔符)<br>默认<code>空白</code>字符</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# sed -n &#39;p&#39; &#x2F;tmp&#x2F;passwd | awk -F: -v OFS&#x3D;&quot;----&gt;&quot; &#39;&#123;print $1,$7&#125;&#39;root----&gt;&#x2F;bin&#x2F;bashbin----&gt;&#x2F;sbin&#x2F;nologindaemon----&gt;&#x2F;sbin&#x2F;nologinadm----&gt;&#x2F;sbin&#x2F;nologinlp----&gt;&#x2F;sbin&#x2F;nologinsync----&gt;&#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NR"><a href="#NR" class="headerlink" title="NR"></a>NR</h4><blockquote><p>记录行号<br>处理<code>多个</code>文件时，所有文件的行号是<code>连续</code>记录的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk &#39;&#123;print NR&#125;&#39; &#x2F;etc&#x2F;hosts &#x2F;etc&#x2F;fstab123456789101112131415<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk &#39;NR&#x3D;&#x3D;3&#123;print $0&#125;&#39; &#x2F;etc&#x2F;passwddaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin#指定显示的行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="FNR"><a href="#FNR" class="headerlink" title="FNR"></a>FNR</h4><blockquote><p>记录行号<br>处理<code>多个</code>文件时，所有文件的行号是<code>独立</code>记录的</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk &#39;&#123;print FNR&#125;&#39; &#x2F;etc&#x2F;hosts &#x2F;etc&#x2F;fstab12341234567891011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NF"><a href="#NF" class="headerlink" title="NF"></a>NF</h4><blockquote><p>记录<code>awk</code>分割<code>行后</code>的段数</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -F: &#39;&#123;print $NF&#125;&#39; &#x2F;etc&#x2F;passwd&#x2F;bin&#x2F;bash&#x2F;sbin&#x2F;nologin&#x2F;sbin&#x2F;nologin&#x2F;sbin&#x2F;nologin&#x2F;sbin&#x2F;nologin&#x2F;bin&#x2F;sync&#x2F;sbin&#x2F;shutdown&#x2F;sbin&#x2F;halt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;tmp&#x2F;file01 centos redhatdebian ubuntu Kubuntu XubuntuWindowsXP Windows7 Windows8 Windows8.1 Windows10 Windows11MacOS[root@master ~]# awk &#39;&#123;print $NF&#125;&#39; &#x2F;tmp&#x2F;file01redhatXubuntuWindows11MacOS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FILENAME"><a href="#FILENAME" class="headerlink" title="FILENAME"></a>FILENAME</h4><blockquote><p>保存awk正在处理的文件名</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# awk &#39;&#123;print FILENAME&#125;&#39; &#x2F;tmp&#x2F;file01&#x2F;tmp&#x2F;file01&#x2F;tmp&#x2F;file01&#x2F;tmp&#x2F;file01&#x2F;tmp&#x2F;file01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>uniq</code>去重</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk &#39;&#123;print FILENAME&#125;&#39; &#x2F;tmp&#x2F;file01 | uniq&#x2F;tmp&#x2F;file01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-awk自定义变量"><a href="#4-awk自定义变量" class="headerlink" title="4.awk自定义变量"></a>4.awk自定义变量</h3><pre class="line-numbers language-none"><code class="language-none">awk -v 自定义变量名&#x3D;&quot;值&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -v name&#x3D;&quot;wsjj&quot; &#39;&#123;print &quot;hello&quot;, name&#125;&#39; &#x2F;etc&#x2F;fstabhello wsjjhello wsjjhello wsjjhello wsjjhello wsjjhello wsjjhello wsjjhello wsjjhello wsjjhello wsjjhello wsjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、awk常用文本处理模式"><a href="#三、awk常用文本处理模式" class="headerlink" title="三、awk常用文本处理模式"></a>三、awk常用文本处理模式</h2><h3 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1.表达式"></a>1.表达式</h3><ul><li>比较运算符<ul><li>&#x3D;&#x3D;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;</li><li>数据 ~ 正则表达式<ul><li>判断数据是否可以被正则表达式</li></ul></li><li>数据  !~ 正则表达式</li></ul></li><li>逻辑运算符 <ul><li>&amp;&amp;    并且 </li><li>||或者</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk &#39;&#123;print $0&#125;&#39; &#x2F;tmp&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologinsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync[root@master ~]# awk -F: &#39;$3&gt;&#x3D;1 &amp;&amp; $3&lt;&#x3D;999&#123;print $1&#125;&#39; &#x2F;tmp&#x2F;passwdbindaemonadmlpsync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-x2F-正则表达式-x2F"><a href="#2-x2F-正则表达式-x2F" class="headerlink" title="2.&#x2F;正则表达式&#x2F;"></a>2.&#x2F;正则表达式&#x2F;</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk &#39;&#x2F;^\&#x2F;dev&#x2F;&#123;print $0&#125;&#39; &#x2F;etc&#x2F;fstab#“\”为转译符&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk &#39;&#x2F;^root&#x2F;&#123;print $0&#125;&#39; &#x2F;tmp&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-x2F-正则表达式-x2F-x2F-正则表达式-x2F"><a href="#3-x2F-正则表达式-x2F-x2F-正则表达式-x2F" class="headerlink" title="3.&#x2F;正则表达式&#x2F;,&#x2F;正则表达式&#x2F;"></a>3.&#x2F;正则表达式&#x2F;,&#x2F;正则表达式&#x2F;</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# awk &#39;&#x2F;Sep 26 09:02:30&#x2F;,&#x2F;Sep 26 09:18:04&#x2F;&#123;print $0&#125;&#39; &#x2F;var&#x2F;log&#x2F;messages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>&#x2F;正则表达式匹配的字符或数字&#x2F;</p></blockquote><h3 id="4-BEGIN"><a href="#4-BEGIN" class="headerlink" title="4.BEGIN{}"></a>4.BEGIN{}</h3><blockquote><p>定义<code>awk</code>开始处理内容<code>前</code>执行的操作 </p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -F: &#39;BEGIN&#123;print &quot;----以下是用户和默认终端----&quot;&#125;&#123;print $1,$7&#125;&#39; &#x2F;tmp&#x2F;passwd----以下是用户和默认终端----root &#x2F;bin&#x2F;bashbin &#x2F;sbin&#x2F;nologindaemon &#x2F;sbin&#x2F;nologinadm &#x2F;sbin&#x2F;nologinlp &#x2F;sbin&#x2F;nologinsync &#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-END"><a href="#5-END" class="headerlink" title="5.END{}"></a>5.END{}</h3><blockquote><p>定义<code>awk</code>处理内容<code>后</code>要执行的操作</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -F: &#39;BEGIN&#123;print &quot;----以下是用户和默认终端----&quot;&#125;&#123;print $1,$7&#125;END&#123;print &quot;----结束----&quot;&#125;&#39; &#x2F;tmp&#x2F;passwd----以下是用户和默认终端----root &#x2F;bin&#x2F;bashbin &#x2F;sbin&#x2F;nologindaemon &#x2F;sbin&#x2F;nologinadm &#x2F;sbin&#x2F;nologinlp &#x2F;sbin&#x2F;nologinsync &#x2F;bin&#x2F;sync----结束----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -v number&#x3D;0 &#39;&#123;number++&#125;END&#123;print number&#125;&#39; &#x2F;tmp&#x2F;passwd6#可以看到文件有6行数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="四、awk条件判断"><a href="#四、awk条件判断" class="headerlink" title="四、awk条件判断"></a>四、awk条件判断</h2><h3 id="1-语法格式"><a href="#1-语法格式" class="headerlink" title="1.语法格式"></a>1.语法格式</h3><blockquote><p>if (条件) {操作}<br>if (条件) {操作} else {操作}<br>if (条件) {操作} else if (条件) {操作}</p></blockquote><h4 id="判断管理员与普通账户"><a href="#判断管理员与普通账户" class="headerlink" title="判断管理员与普通账户"></a>判断管理员与普通账户</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -F: &#39;&#123;if($3&#x3D;&#x3D;0) &#123;print $1 &quot;是管理员用户&quot;&#125; else &#123;print $1 &quot;是普通用 户&quot;&#125;&#39; &#x2F;tmp&#x2F;passwdroot是管理员用户bin是普通用户daemon是普通用户adm是普通用户lp是普通用户sync是普通用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计bash用户和nologin用户的数量"><a href="#统计bash用户和nologin用户的数量" class="headerlink" title="统计bash用户和nologin用户的数量"></a>统计bash用户和nologin用户的数量</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -F: -v bash_number&#x3D;0 -v nologin_numer&#x3D;0 &#39;&#123;if($7&#x3D;&#x3D;&quot;&#x2F;bin&#x2F;bash&quot;) &#123;bash_number++&#125; else if($7&#x3D;&#x3D;&quot;&#x2F;sbin&#x2F;nologin&quot;) &#123;nologin_number++&#125;&#125;END&#123;print &quot;bash用户数&quot;,bash_number, &quot;nologin用户数&quot;,nologin_number&#125;&#39; &#x2F;etc&#x2F;passwdbash用户数 4 nologin用户数 18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、循环"><a href="#五、循环" class="headerlink" title="五、循环"></a>五、循环</h2><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h3><pre class="line-numbers language-none"><code class="language-none">for(变量定义; 循环条件; 改变变量的值) &#123;操作&#125;for(i&#x3D;1; i&lt;&#x3D;10; i++)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# awk -F: &#39;&#123;for(i&#x3D;1;i&lt;&#x3D;7;i++)&#123;if(length($i)&gt;&#x3D;5) &#123;print $i&#125;&#125;&#125;&#39; &#x2F;tmp&#x2F;passwd&#x2F;root&#x2F;bin&#x2F;bash&#x2F;sbin&#x2F;nologindaemondaemon&#x2F;sbin&#x2F;sbin&#x2F;nologin&#x2F;var&#x2F;adm&#x2F;sbin&#x2F;nologin&#x2F;var&#x2F;spool&#x2F;lpd&#x2F;sbin&#x2F;nologin&#x2F;sbin&#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、数组"><a href="#六、数组" class="headerlink" title="六、数组"></a>六、数组</h2><h3 id="1-定义数组"><a href="#1-定义数组" class="headerlink" title="1.定义数组"></a>1.定义数组</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# awk &#39;BEGIN&#123;test[1]&#x3D;&quot;martin&quot;; test[2]&#x3D;&quot;robin&quot;; test[3]&#x3D;&quot;lz&quot;; print test[2]&#125;&#39;robin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-获取数组中所有数据"><a href="#2-获取数组中所有数据" class="headerlink" title="2.获取数组中所有数据"></a>2.获取数组中所有数据</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# awk &#39;BEGIN&#123;test[1]&#x3D;&quot;martin&quot;; test[2]&#x3D;&quot;robin&quot;; test[3]&#x3D;&quot;lz&quot;; for(i&#x3D;1; i&lt;&#x3D;3; i++) &#123;print test[i]&#125;&#125;&#39;martinrobinlz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数组支持任意数据作为下标"><a href="#3-数组支持任意数据作为下标" class="headerlink" title="3.数组支持任意数据作为下标"></a>3.数组支持任意数据作为下标</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# awk &#39;BEGIN&#123;test[&quot;martin&quot;]&#x3D;&quot;北京&quot;; test[&quot;robin&quot;]&#x3D;&quot;河北&quot;; test[&quot;lz&quot;]&#x3D;&quot;天津&quot;; print test[&quot;robin&quot;]&#125;&#39;河北<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# awk &#39;BEGIN&#123;test[&quot;martin&quot;]&#x3D;&quot;北京&quot;; test[&quot;robin&quot;]&#x3D;&quot;河北&quot;; test[&quot;lz&quot;]&#x3D;&quot;天津&quot;; for(i in test) &#123;print test[i]&#125;&#125;&#39;河北天津北京<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计httpd的UV和PV"><a href="#统计httpd的UV和PV" class="headerlink" title="统计httpd的UV和PV"></a>统计httpd的UV和PV</h4><blockquote><p>UV 用户访问量<br>PV 页面访问量</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;&#123;uv[$1]++&#125;END&#123;for(i in uv) &#123;print i, uv[i]&#125;&#125;&#39; access_log#  awk &#39;&#123;pv[$7]++&#125;END&#123;for(i in pv) &#123;print i, pv[i]&#125;&#125;&#39; access_log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="七、awk内置函数"><a href="#七、awk内置函数" class="headerlink" title="七、awk内置函数"></a>七、awk内置函数</h2><h3 id="1-split-字符串-数组-行分割符"><a href="#1-split-字符串-数组-行分割符" class="headerlink" title="1.split(字符串,数组,行分割符)"></a>1.split(字符串,数组,行分割符)</h3><blockquote><p>使用分割符分割<code>字符串</code>, 将分割后的字符串保存到<code>指定</code>数组</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;BEGIN&#123;split(&quot;a-b-c&quot;, data, &quot;-&quot;); print data[1]&#125;&#39;#  awk &#39;BEGIN&#123;split(&quot;a-b-c&quot;, data, &quot;-&quot;); print data[2]&#125;&#39;#  awk &#39;BEGIN&#123;split(&quot;a-b-c&quot;, data, &quot;-&quot;); print data[3]&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-length-string"><a href="#2-length-string" class="headerlink" title="2.length(string)"></a>2.length(string)</h3><blockquote><p>返回<code>string</code>字符串的字符个数</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;BEGIN&#123;print length(&quot;shell&quot;)&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-substr-string-start-length"><a href="#3-substr-string-start-length" class="headerlink" title="3.substr(string,start [,length])"></a>3.substr(string,start [,length])</h3><blockquote><p>取<code>string</code>字符串中的子串，从<code>start</code>开始，取<code>length</code>个；<code>start</code>从<code>1</code>开始计数</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;BEGIN&#123;data&#x3D;substr(&quot;hello&quot;,2, 3); print data&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-system-command"><a href="#4-system-command" class="headerlink" title="4.system(command)"></a>4.system(command)</h3><blockquote><p>支持在<code>awk</code>内部调用<code>shell</code>命令</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;BEGIN&#123;system(&quot;ifconfig enp2s0&quot;)&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-systime"><a href="#5-systime" class="headerlink" title="5.systime()"></a>5.systime()</h3><blockquote><p>返回系统<code>当前时间</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;BEGIN&#123;print systime()&#125;&#39;#  awk &#39;BEGIN&#123;now&#x3D;systime(); print strftime(&quot;%F_%T&quot;, now)&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-tolower-string"><a href="#6-tolower-string" class="headerlink" title="6.tolower(string)"></a>6.tolower(string)</h3><blockquote><p>将<code>string</code>中的所有<code>字母</code>转为<code>小写</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;BEGIN&#123;print tolower(&quot;aBcD&quot;)&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-toupper-string"><a href="#7-toupper-string" class="headerlink" title="7.toupper(string)"></a>7.toupper(string)</h3><blockquote><p>将<code>string</code>中所有<code>字母</code>转换为<code>大写</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#  awk &#39;BEGIN&#123;print toupper(&quot;aBcD&quot;)&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】sed工具</title>
      <link href="/2023/04/16/81/"/>
      <url>/2023/04/16/81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】sed工具"><a href="#【Linux系列教程】sed工具" class="headerlink" title="【Linux系列教程】sed工具"></a>【Linux系列教程】sed工具</h1><h2 id="一、sed工具介绍"><a href="#一、sed工具介绍" class="headerlink" title="一、sed工具介绍"></a>一、sed工具介绍</h2><ul><li>流编辑器</li><li>作用<ul><li>编辑文本文件</li></ul></li><li>工作原理 <ul><li>将文件逐行读入到模式空间(内存)，在内存中对文件进行修改，修改完毕后，默认会把模式空间所有内容显示到屏幕上</li></ul></li></ul><blockquote><p>默认情况下，不会修改<code>原文件</code><br>特点：<code>逐行</code>处理文件</p></blockquote><h2 id="二、sed工具的使用"><a href="#二、sed工具的使用" class="headerlink" title="二、sed工具的使用"></a>二、sed工具的使用</h2><pre class="line-numbers language-none"><code class="language-none"># sed [option] &#39;script&#39; 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># sed [option] &#39;lineCMD&#39; 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>line哪些行<br>line不写，表示对文件每一行进行操作<br>CMD操作</p></blockquote><h3 id="1-常用写法"><a href="#1-常用写法" class="headerlink" title="1.常用写法"></a>1.常用写法</h3><blockquote><p>行号10<br>起始行号,终止行号<br>5,10<br>5,+3<br>&#x2F;正则表达式&#x2F;&#x2F;^#&#x2F;<br>&#x2F;正则表达式&#x2F;,&#x2F;正则表达式&#x2F;</p></blockquote><h4 id="d-删除整行"><a href="#d-删除整行" class="headerlink" title="d 删除整行"></a>d 删除整行</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;&#x2F;^\&#x2F;&#x2F;d&#39; &#x2F;etc&#x2F;fstab [root@localhost ~]# netstat -antp | sed &#39;1,2d&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="p-显示整行"><a href="#p-显示整行" class="headerlink" title="p 显示整行"></a>p 显示整行</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -n &#39;&#x2F;^#&#x2F;p&#39; &#x2F;etc&#x2F;fstab <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-n 取消默认显示模式空间的内容</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT | sed -n &#39;&#x2F;^\&#x2F;dev&#x2F;p&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="a-追加的内容"><a href="#a-追加的内容" class="headerlink" title="a \追加的内容"></a>a \追加的内容</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;$a \10.1.1.1  node01.linux.com&#39; &#x2F;etc&#x2F;hosts[root@localhost ~]# sed &#39;$a \export JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdk&#39; &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="i-插入的内容"><a href="#i-插入的内容" class="headerlink" title="i \插入的内容"></a>i \插入的内容</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;i \172.16.10.1 www.linux.com&#39; &#x2F;etc&#x2F;hosts[root@localhost ~]# sed &#39;&#x2F;datadir&#x2F;i \server_id&#x3D;10\nlog_bin&#x3D;master&#39; &#x2F;etc&#x2F;my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="c-替换的内容整行替换"><a href="#c-替换的内容整行替换" class="headerlink" title="c \替换的内容整行替换"></a>c \替换的内容整行替换</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;&#x2F;#Port&#x2F;c \Port 55555&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="w-文件名-另存为"><a href="#w-文件名-另存为" class="headerlink" title="w 文件名 另存为"></a>w 文件名 另存为</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;&#x2F;^#&#x2F;w &#x2F;tmp&#x2F;test01&#39; &#x2F;etc&#x2F;fstab <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="r-文件名-合并文件"><a href="#r-文件名-合并文件" class="headerlink" title="r 文件名 合并文件"></a>r 文件名 合并文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;$r &#x2F;etc&#x2F;hosts&#39; &#x2F;etc&#x2F;redhat-release <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="x3D-显示行号-统计行数"><a href="#x3D-显示行号-统计行数" class="headerlink" title="&#x3D; 显示行号 统计行数"></a>&#x3D; 显示行号 统计行数</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -n &#39;$&#x3D;&#39; &#x2F;etc&#x2F;fstab <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="n-读取下一行"><a href="#n-读取下一行" class="headerlink" title="n 读取下一行"></a>n 读取下一行</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -n &#39;&#123;n;p&#125;&#39; &#x2F;tmp&#x2F;file01 [root@localhost ~]# sed -n &#39;&#123;p;n&#125;&#39; &#x2F;tmp&#x2F;file01 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="s-x2F-旧内容-x2F-新内容-x2F-修饰符-内容替换"><a href="#s-x2F-旧内容-x2F-新内容-x2F-修饰符-内容替换" class="headerlink" title="s&#x2F;旧内容&#x2F;新内容&#x2F;[修饰符]  内容替换"></a>s&#x2F;旧内容&#x2F;新内容&#x2F;[修饰符]  内容替换</h4><blockquote><p>文件查找替换<br>旧内容支持正则表达式</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;&#x2F;^UUID&#x3D;&#x2F;s&#x2F;UUID&#x2F;uuid&#x2F;&#39; &#x2F;etc&#x2F;fstab [root@localhost ~]# sed &#39;$s&#x2F;4&#x2F;8&#x2F;&#39; &#x2F;etc&#x2F;fstab [root@localhost ~]# sed &#39;$s&#x2F;[0-9]&#x2F;!&#x2F;g&#39; &#x2F;etc&#x2F;fstab [root@localhost ~]# sed &#39;s&#x2F;[0-9]&#x2F;!&#x2F;g&#39; &#x2F;etc&#x2F;fstab [root@localhost ~]# sed &#39;$s&#x2F;\&#x2F;&#x2F;?&#x2F;g&#39; &#x2F;etc&#x2F;fstab [root@localhost ~]# sed &#39;$s|&#x2F;|?|g&#39; &#x2F;etc&#x2F;fstab <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><blockquote><p>\1\2\3<br>依次表示引用正则表达式中第一个分组内容、第二个分组内容、依次类推</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;s|\(l..e\)|\1r|&#39; &#x2F;tmp&#x2F;file01 [root@localhost ~]# sed &#39;s|l\(..e\)|L\1|&#39; &#x2F;tmp&#x2F;file01 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="匹配所有旧内容"><a href="#匹配所有旧内容" class="headerlink" title="匹配所有旧内容"></a>匹配所有旧内容</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed &#39;s|l..e|&amp;r|&#39; &#x2F;tmp&#x2F;file01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-常用参数"><a href="#2-常用参数" class="headerlink" title="2.常用参数"></a>2.常用参数</h3><blockquote><p>-n<br>取消显示模式空间的内容<br>-i<br>修改原文件  </p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -i &#39;&#x2F;^$&#x2F;d&#39; &#x2F;etc&#x2F;fstab <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-e同时做多个修改 </p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -e &#39;&#x2F;^#&#x2F;d&#39; -e &#39;&#x2F;UUID&#x2F;d&#39; &#x2F;etc&#x2F;fstab <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-f  操作文件</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;tmp&#x2F;list&#x2F;^#&#x2F;d&#x2F;UUID&#x2F;d[root@localhost ~]# sed -f &#x2F;tmp&#x2F;list  &#x2F;etc&#x2F;fstab <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>-r 支持扩展正则表达式 </p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -r &#39;s|l(..e)|L\1|&#39; &#x2F;tmp&#x2F;file01 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>–follow-symlinks软链接文件<br>更改软连接文件的时候必须加上！！！</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sed -ri --follow-symlinks &#39;2d&#39; &#x2F;tmp&#x2F;file01 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】expect工具</title>
      <link href="/2023/04/14/80/"/>
      <url>/2023/04/14/80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】expect工具"><a href="#【Linux系列教程】expect工具" class="headerlink" title="【Linux系列教程】expect工具"></a>【Linux系列教程】expect工具</h1><ul><li>让脚本中的交互式命令自动执行</li></ul><h2 id="一、安装expect工具"><a href="#一、安装expect工具" class="headerlink" title="一、安装expect工具"></a>一、安装<code>expect</code>工具</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y expect <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、独立使用expect工具"><a href="#二、独立使用expect工具" class="headerlink" title="二、独立使用expect工具"></a>二、独立使用<code>expect</code>工具</h2><blockquote><p><code>set timeout 10</code> 设置超时时间, 单位秒<br><code>spawn</code> 指定交互式命令<br><code>expect</code> 指定捕获的提示信息<br><code>send</code> 发送指令<br><code>expect eof</code> 捕获结束</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;expect#set timeout 10spawn passwd martinexpect &quot;New password:&quot;send &quot;www.1.com\n&quot;expect &quot;Retype new password:&quot;send &quot;www.1.com\n&quot;expect eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配合Shell脚本使用"><a href="#三、配合Shell脚本使用" class="headerlink" title="三、配合Shell脚本使用"></a>三、配合<code>Shell</code>脚本使用</h2><h3 id="1-自动创建用户和设置用户密码"><a href="#1-自动创建用户和设置用户密码" class="headerlink" title="1.自动创建用户和设置用户密码"></a>1.自动<code>创建</code>用户和设置用户<code>密码</code></h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#useradd AAA&#x2F;usr&#x2F;bin&#x2F;expect &lt;&lt; eof#固定格式set timeout 10spawn passwd AAAexpect &quot;New password:&quot;send &quot;123\n&quot;expect &quot;Retype new password:&quot;send &quot;123\n&quot;expect eof#固定eof结尾eof#固定格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配合expect工具，配置ssh免密"><a href="#2-配合expect工具，配置ssh免密" class="headerlink" title="2.配合expect工具，配置ssh免密"></a>2.配合<code>expect</code>工具，配置<code>ssh</code>免密</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashif [ -e ~&#x2F;.ssh&#x2F;known_hosts ]; then    &gt; ~&#x2F;.ssh&#x2F;known_hosts#判断如果这个文件有内容，就清空文件内容fiif ls ~&#x2F;.ssh&#x2F;id_rsa* &amp;&gt; &#x2F;dev&#x2F;null ; then    rm -rf ~&#x2F;.ssh&#x2F;id_rsa*#判断如果有公钥文件和密钥文件，先清除fissh-keygen -t rsa -P &quot;&quot; -f ~&#x2F;.ssh&#x2F;id_rsa &amp;&gt; &#x2F;dev&#x2F;null#创建密钥for i in 129 130; do#使用for循环，指定需要拷贝密钥的机器主机地址&#x2F;usr&#x2F;bin&#x2F;expect &lt;&lt; eof#固定格式set timeout 2#设置超时时间spawn ssh-copy-id root@10.10.10.$i#上面变量$i分别是129和130expect &quot;(yes&#x2F;no)?&quot;#捕获send &quot;yes\n&quot;#选择yesexpect &quot;password:&quot;#捕获send &quot;centos\n&quot;#设置密码expect eof#结束expect工具eof#固定格式done#循环结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> expect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】Shell逻辑控制——循环</title>
      <link href="/2023/04/13/79/"/>
      <url>/2023/04/13/79/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】Shell逻辑控制——循环"><a href="#【Linux系列教程】Shell逻辑控制——循环" class="headerlink" title="【Linux系列教程】Shell逻辑控制——循环"></a>【Linux系列教程】Shell逻辑控制——循环</h1><h2 id="一、Shell循环的几个方式"><a href="#一、Shell循环的几个方式" class="headerlink" title="一、Shell循环的几个方式"></a>一、Shell循环的几个方式</h2><ul><li>for</li><li>while</li><li>until</li></ul><h2 id="二、for循环"><a href="#二、for循环" class="headerlink" title="二、for循环"></a>二、for循环</h2><h3 id="1-格式"><a href="#1-格式" class="headerlink" title="1.格式"></a>1.格式</h3><pre class="line-numbers language-none"><code class="language-none">for 变量 in 取值列表; do    执行的操作    执行的操作done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">for 变量 in 取值列表do    执行的操作    执行的操作done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-示例：在tmp目录创建20个随机数文件"><a href="#2-示例：在tmp目录创建20个随机数文件" class="headerlink" title="2.示例：在tmp目录创建20个随机数文件"></a>2.示例：在tmp目录创建20个随机数文件</h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#for i in $(seq 20); do#seq后面跟着数字代表这个命令输出多少次数    touch &#x2F;tmp&#x2F;$(openssl rand -hex 10)done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-示例：创建30个用户，并且判断用户是否存在，密码统一设置为redhat"><a href="#3-示例：创建30个用户，并且判断用户是否存在，密码统一设置为redhat" class="headerlink" title="3.示例：创建30个用户，并且判断用户是否存在，密码统一设置为redhat"></a>3.示例：创建30个用户，并且判断用户是否存在，密码统一设置为redhat</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bash# for i in $(seq 30); do#判断用户是否存在if id user$i &amp;&gt; &#x2F;dev&#x2F;null; then     echo &quot;用户user$i存在&quot;     else#如果不存在,创建用户并且设置密码     useradd user$i &amp;&gt; &#x2F;dev&#x2F;null     echo &quot;redhat&quot; | passwd --stdin user$i &amp;&gt; &#x2F;dev&#x2F;null     echo &quot;用户user$i创建成功,初始密码为redhat&quot;fidone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除刚刚创建30个用户"><a href="#4-删除刚刚创建30个用户" class="headerlink" title="4.删除刚刚创建30个用户"></a>4.删除刚刚创建30个用户</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bash# for i in $(seq 30); doif id user$i &amp;&gt; &#x2F;dev&#x2F;null; then     userdel -r user$i &amp;&gt; &#x2F;dev&#x2F;null     echo &quot;用户user$i删除完成&quot; else     echo &quot;用户user$i可能已经删除，或删除失败&quot; fi done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建文件里指定的用户"><a href="#5-创建文件里指定的用户" class="headerlink" title="5.创建文件里指定的用户"></a>5.创建文件里指定的用户</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat user_list wsjjstudentmartinwanggang#! &#x2F;bin&#x2F;bashfor i in $(cat &#x2F;root&#x2F;user_list);douseradd  $i &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -eq 0 ]; then    echo &quot;成功创建用户$i&quot;else    echo &quot;用户$i创建失败&quot;fidone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-示例：统计系统-bin-bash用户和-sbin-nologin用户有多少个"><a href="#6-示例：统计系统-bin-bash用户和-sbin-nologin用户有多少个" class="headerlink" title="6.示例：统计系统/bin/bash用户和/sbin/nologin用户有多少个"></a>6.示例：统计系统<code>/bin/bash</code>用户和<code>/sbin/nologin</code>用户有多少个</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# grep -i &quot;&#x2F;bin&#x2F;bash$&quot; &#x2F;etc&#x2F;passwd | wc -l5[root@master ~]# grep -i &quot;&#x2F;sbin&#x2F;nologin$&quot; &#x2F;etc&#x2F;passwd | wc -l16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashbin_bash&#x3D;0sbin_nologin&#x3D;0number&#x3D;$(wc -l &#x2F;etc&#x2F;passwd | awk &#39;&#123;print $1&#125;&#39;)#passwd文件所有用户数量for i in $(seq $number); do#    sh_name&#x3D;$(head -n $i &#x2F;etc&#x2F;passwd | tail -n1 | awk -F: &#39;&#123;print $7&#125;&#39;)    if [ $sh_name &#x3D;&#x3D; &quot;&#x2F;bin&#x2F;bash&quot; ]; then        let bin_bash++    elif [ $sh_name &#x3D;&#x3D; &quot;&#x2F;sbin&#x2F;nologin&quot; ]; then        let sbin_nologin++    fidoneecho &quot;bash:$bin_bash nologin:$sbin_nologin&quot;[root@master ~]# .&#x2F;passwd.sh bash:5 nologin:16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-shell字符串处理"><a href="#7-shell字符串处理" class="headerlink" title="7.shell字符串处理"></a>7.<code>shell</code>字符串处理</h3><h4 id="A-字符串替换"><a href="#A-字符串替换" class="headerlink" title="A.字符串替换"></a>A.字符串替换</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# data&#x3D;abc[root@localhost ~]# echo $&#123;data&#x2F;b&#x2F;K&#125;aKc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-截取字符串"><a href="#B-截取字符串" class="headerlink" title="B.截取字符串"></a>B.截取字符串</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# data&#x3D;&quot;linux&quot;[root@localhost ~]# [root@localhost ~]# echo $&#123;data:0:2&#125;li[root@localhost ~]# echo $&#123;data:2:2&#125;nu[root@localhost ~]# echo $&#123;data:1&#125;inux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-获取字符串长度"><a href="#C-获取字符串长度" class="headerlink" title="C.获取字符串长度"></a>C.获取字符串长度</h4><pre class="line-numbers language-none"><code class="language-none">root@localhost ~]# data&#x3D;&quot;linux&quot;[root@localhost ~]# echo $&#123;#data&#125;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、中断循环"><a href="#三、中断循环" class="headerlink" title="三、中断循环"></a>三、中断循环</h2><ul><li>break 中断整体循环</li><li>continue 中断本次循环，立即开始下一次循环</li></ul><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#for i in $(seq 5); do    echo &quot;第$i次循环开始&quot;    if [ $i -eq 3 ]; then       break    fi    echo &quot;--------------&quot;    echo &quot;第$i次循环结尾&quot;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#for i in $(seq 5); do    echo &quot;第$i次循环开始&quot;    if [ $i -eq 3 ]; then       continue    fi    echo &quot;--------------&quot;    echo &quot;第$i次循环结尾&quot;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-示例：查看本机路由表所有的IP-MAC地址"><a href="#1-示例：查看本机路由表所有的IP-MAC地址" class="headerlink" title="1.示例：查看本机路由表所有的IP+MAC地址"></a>1.示例：查看本机路由表所有的<code>IP+MAC</code>地址</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashhost_ip&#x3D;$(ifconfig | head -n 3 | grep &quot;inet&quot; | awk &#39;&#123;print $2&#125;&#39;)host_mac&#x3D;$(ifconfig | head -n 3 | grep &quot;ether&quot; | awk &#39;&#123;print $2&#125;&#39;)echo &quot;本机的IP地址:$host_ip 本机的Mac地址:$host_mac&quot;echo &#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;for i in $(seq 254);do&#123;#开启多线程if [ $i -eq 128 ]; then    continue#使用continue终止第128次循环，128是本机IPfinet&#x3D;10.10.10.mac&#x3D;&#96;arping -I ens33 -c 1 -w 1 $net$i | head -n 2 | tail -n 1 | awk &#39;&#123;print $5&#125;&#39;&#96;    if  ping -W 1 -c 1 $net$i &amp;&gt; &#x2F;dev&#x2F;null ; then    echo &quot;检测到IP:$net$i Mac:$mac&quot;    else    echo &quot;没有这个$net$i主机&quot; &amp;&gt; &#x2F;dev&#x2F;null    fi    &#125;&amp;#开启多线程donewait#等待多线程跑完再结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、while循环"><a href="#四、while循环" class="headerlink" title="四、while循环"></a>四、while循环</h2><h3 id="1-用法1-while-条件"><a href="#1-用法1-while-条件" class="headerlink" title="1.用法1 while 条件"></a>1.用法1 <code>while 条件</code></h3><pre class="line-numbers language-none"><code class="language-none">while 条件; do    执行的操作    执行的操作done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#i&#x3D;1while [ $i -le 10 ]; do    touch &#x2F;tmp&#x2F;$(openssl rand -hex 10)    let i++done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-用法2-while-true"><a href="#2-用法2-while-true" class="headerlink" title="2.用法2 while true"></a>2.用法2 <code>while true</code></h3><blockquote><p>死循环</p></blockquote><pre class="line-numbers language-none"><code class="language-none">while true; do    执行的操作    执行的操作done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>每隔2秒查看一次CPU状态</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#while true; do#一直循环下去    uptime#查看CPU负载状态    sleep 2#中断2秒done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="A-配置菜单界面，除非选择退出，否则永远不退出"><a href="#A-配置菜单界面，除非选择退出，否则永远不退出" class="headerlink" title="A.配置菜单界面，除非选择退出，否则永远不退出"></a>A.配置<code>菜单</code>界面，除非<code>选择</code>退出，否则<code>永远</code>不退出</h4><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashcat &lt;&lt; eof&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;虚拟机管理工具&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1.创建虚拟机2.销毁虚拟机3.网络配置4.退出&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;eofwhile true; do    echo     read -p &quot;请选择操作项: &quot; a    if [ $a -eq 1 ]; then        echo &quot;创建虚拟机&quot;    elif [ $a -eq 2 ]; then        echo &quot;销毁虚拟机&quot;    elif [ $a -eq 3 ]; then        echo &quot;网络配置&quot;    elif [ $a -eq 4 ]; then        exit 0    else        echo &quot;输入有误，请重新选择&quot;    fidone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# .&#x2F;caidan.sh &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;虚拟机管理工具&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1.创建虚拟机2.销毁虚拟机3.网络配置4.退出&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;请选择操作项: 1创建虚拟机请选择操作项: 2销毁虚拟机请选择操作项: 3网络配置请选择操作项: 3网络配置请选择操作项: 6输入有误，请重新选择请选择操作项: 4[root@master ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用法3-while-read-line"><a href="#用法3-while-read-line" class="headerlink" title="用法3 while read line"></a>用法3 <code>while read line</code></h3><ul><li>用于遍历文件， 处理文件每一行</li></ul><pre class="line-numbers language-none"><code class="language-none">while read line; do    执行的操作    执行的操作done &lt; 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>处理命令的每行结果</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#df -hT | while read line; do    echo &quot;---&gt; $line&quot;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计passwd文件中有多少系统用户"><a href="#统计passwd文件中有多少系统用户" class="headerlink" title="统计passwd文件中有多少系统用户"></a>统计<code>passwd</code>文件中有多少系统用户</h4><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashsystem_user&#x3D;0while read line; donumber&#x3D;$(echo $line | awk -F: &#39;&#123;print $3&#125;&#39;)    if [ $number -ge 1 -a $number -le 999 ]; then#排除root用户uid为0    let system_user++    fidone &lt; &#x2F;tmp&#x2F;passwd    echo &quot;当前系统存在$system_user个系统用户&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将passwd文件中的数据，批量插入到mysql数据库中"><a href="#将passwd文件中的数据，批量插入到mysql数据库中" class="headerlink" title="将passwd文件中的数据，批量插入到mysql数据库中"></a>将<code>passwd</code>文件中的数据，批量插入到<code>mysql</code>数据库中</h4><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashwhile read line; do    name&#x3D;$(echo $line | awk -F: &#39;&#123;print $1&#125;&#39;)    passwd&#x3D;$(echo $line | awk -F: &#39;&#123;print $2&#125;&#39;)    uid&#x3D;$(echo $line | awk -F: &#39;&#123;print $3&#125;&#39;)    gid&#x3D;$(echo $line | awk -F: &#39;&#123;print $4&#125;&#39;)    shuoming&#x3D;$(echo $line | awk -F: &#39;&#123;print $5&#125;&#39;)    home&#x3D;$(echo $line | awk -F: &#39;&#123;print $6&#125;&#39;)    shell&#x3D;$(echo $line | awk -F: &#39;&#123;print $7&#125;&#39;)mysql -uroot -e &quot;insert into passwd.passwd(name, passwd, uid, gid, shuoming, home, shell) values(&#39;$name&#39;, &#39;$passwd&#39;, $uid, $gid, &#39;$shuoming&#39;, &#39;$home&#39;, &#39;$shell&#39;);&quot;done &lt; &#x2F;tmp&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看刚刚使用<code>脚本</code>导入的数据</p></blockquote><pre class="line-numbers language-none"><code class="language-none">MariaDB [passwd]&gt; select * from passwd;+-----------------+--------+------+------+-----------------------------------------------------------------+--------------------+----------------+| name            | passwd | uid  | gid  | shuoming                                                           | home               | shell          |+-----------------+--------+------+------+-----------------------------------------------------------------+--------------------+----------------+| root            | x      |    0 |    0 | root                                                            | &#x2F;root              | &#x2F;bin&#x2F;bash      || bin             | x      |    1 |    1 | bin                                                             | &#x2F;bin               | &#x2F;sbin&#x2F;nologin  || daemon          | x      |    2 |    2 | daemon                                                          | &#x2F;sbin              | &#x2F;sbin&#x2F;nologin  || adm             | x      |    3 |    4 | adm                                                             | &#x2F;var&#x2F;adm           | &#x2F;sbin&#x2F;nologin  || lp              | x      |    4 |    7 | lp                                                              | &#x2F;var&#x2F;spool&#x2F;lpd     | &#x2F;sbin&#x2F;nologin  || sync            | x      |    5 |    0 | sync                                                            | &#x2F;sbin              | &#x2F;bin&#x2F;sync      || shutdown        | x      |    6 |    0 | shutdown                                                        | &#x2F;sbin              | &#x2F;sbin&#x2F;shutdown || halt            | x      |    7 |    0 | halt                                                            | &#x2F;sbin              | &#x2F;sbin&#x2F;halt     || mail            | x      |    8 |   12 | mail                                                            | &#x2F;var&#x2F;spool&#x2F;mail    | &#x2F;sbin&#x2F;nologin  || operator        | x      |   11 |    0 | operator                                                        | &#x2F;root              | &#x2F;sbin&#x2F;nologin  || games           | x      |   12 |  100 | games                                                           | &#x2F;usr&#x2F;games         | &#x2F;sbin&#x2F;nologin  || ftp             | x      |   14 |   50 | FTP User                                                        | &#x2F;var&#x2F;ftp           | &#x2F;sbin&#x2F;nologin  || mysql           | x      |   27 |   27 | MariaDB Server                                                  | &#x2F;var&#x2F;lib&#x2F;mysql     | &#x2F;sbin&#x2F;nologin  || tss             | x      |   59 |   59 | Account used by the trousers package to sandbox the tcsd daemon | &#x2F;dev&#x2F;null          | &#x2F;sbin&#x2F;nologin  || sshd            | x      |   74 |   74 | Privilege-separated SSH                                         | &#x2F;var&#x2F;empty&#x2F;sshd    | &#x2F;sbin&#x2F;nologin  || dbus            | x      |   81 |   81 | System message bus                                              | &#x2F;                  | &#x2F;sbin&#x2F;nologin  || postfix         | x      |   89 |   89 |                                                                 | &#x2F;var&#x2F;spool&#x2F;postfix | &#x2F;sbin&#x2F;nologin  || nobody          | x      |   99 |   99 | Nobody                                                          | &#x2F;                  | &#x2F;sbin&#x2F;nologin  || systemd-network | x      |  192 |  192 | systemd Network Management                                      | &#x2F;                  | &#x2F;sbin&#x2F;nologin  || polkitd         | x      |  999 |  998 | User for polkitd                                                | &#x2F;                  | &#x2F;sbin&#x2F;nologin  || wsjj            | x      | 1000 | 1000 |                                                                 | &#x2F;home&#x2F;wsjj         | &#x2F;bin&#x2F;bash      || student         | x      | 1001 | 1001 |                                                                 | &#x2F;home&#x2F;student      | &#x2F;bin&#x2F;bash      || martin          | x      | 1002 | 1002 |                                                                 | &#x2F;home&#x2F;martin       | &#x2F;bin&#x2F;bash      || wanggang        | x      | 1003 | 1003 |                                                                 | &#x2F;home&#x2F;wanggang     | &#x2F;bin&#x2F;bash      |+-----------------+--------+------+------+-----------------------------------------------------------------+--------------------+----------------+24 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> 数据库 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux基础 </tag>
            
            <tag> for </tag>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】Shell逻辑控制——条件判断</title>
      <link href="/2023/04/12/78/"/>
      <url>/2023/04/12/78/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】Shell逻辑控制——条件判断"><a href="#【Linux系列教程】Shell逻辑控制——条件判断" class="headerlink" title="【Linux系列教程】Shell逻辑控制——条件判断"></a>【Linux系列教程】Shell逻辑控制——条件判断</h1><h2 id="一、实现条件判断"><a href="#一、实现条件判断" class="headerlink" title="一、实现条件判断"></a>一、实现条件判断</h2><ul><li>if </li><li>case</li></ul><h2 id="二、简单的if语句"><a href="#二、简单的if语句" class="headerlink" title="二、简单的if语句"></a>二、简单的if语句</h2><pre class="line-numbers language-none"><code class="language-none">if  条件;  then    执行的操作    执行的操作fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">if  条件;  then    执行的操作else    执行的操作fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-条件的写法"><a href="#1-条件的写法" class="headerlink" title="1.条件的写法"></a>1.条件的写法</h3><ul><li>[表达式]<ul><li>数字表达式</li><li>字符表达式</li><li>文件目录表达式</li></ul></li></ul><h4 id="A-数字表达式"><a href="#A-数字表达式" class="headerlink" title="A.数字表达式"></a>A.数字表达式</h4><blockquote><p>[ 数字1  -eq 数字2 ]等于<br>[ 数字1 -ne 数字2 ]不等于<br>[ 数字1 -gt 数字2  ]大于<br>[ 数字1 -ge 数字2 ]大于等于<br>[ 数字1 -lt 数字2  ] 小于<br>[ 数字1 -le 数字2 ]小于等于 </p></blockquote><h4 id="B-字符表达式"><a href="#B-字符表达式" class="headerlink" title="B.字符表达式"></a>B.字符表达式</h4><blockquote><p>&#x3D;&#x3D; 等于<br>!&#x3D; 不等于<br>-z 字符 判断是否为空字符</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#read -p &quot;输入密码: &quot; pwd1read -p &quot;确认密码: &quot; pwd2 if [ &quot;$pwd1&quot; &#x3D;&#x3D; &quot;$pwd2&quot; ]; then   echo &quot;ok&quot;else   echo &quot;密码不一致&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#read -p &quot;用户名: &quot; nameread -p &quot;密码: &quot; passwordid $name &amp;&gt; &#x2F;dev&#x2F;null# 判断用户不存在 if [ $? -ne 0 ]; then#$?特殊变量，如果为0代表命令执行成功，如果不为0，代表命令执行失败   useradd $name   echo $password | passwd --stdin $name &amp;&gt; &#x2F;dev&#x2F;null   echo &quot;用户$name创建完成&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="C-文件目录表达式"><a href="#C-文件目录表达式" class="headerlink" title="C.文件目录表达式"></a>C.文件目录表达式</h4><blockquote><p>[ -e 文件目录名称 ]判断文件目录是否<code>存在</code><br>[ -f 文件名称 ]判断<code>文本</code>文件<br>[ -d 文件名称 ]判断是否为<code>目录</code><br>[ -b 文件名称 ]判断是否为<code>块设备</code>文件<br>[ -l 文件名称 ]判断是否为<code>链接</code>文件<br>[ -s 文件名称 ]判断是否<code>套接字</code>文件<br>[ -r 文件名称 ]判断文件是否有<code>读</code>权限<br>[ -w 文件名称 ]是否有<code>写</code>权限<br>[ -x 文件名称 ]是否有<code>执行</code>权限<br>![-参数 文件名称] <code>取反</code></p></blockquote><h5 id="拷贝文件，并且判定文件是否存在"><a href="#拷贝文件，并且判定文件是否存在" class="headerlink" title="拷贝文件，并且判定文件是否存在"></a><code>拷贝</code>文件，并且判定文件是否<code>存在</code></h5><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashread -p &quot;请输入文件:&quot; fileif [ -e $file ]; thenread -p &quot;请输入要拷贝的路径:&quot; dirif [ -e $dir ]; thencp $file $direcho &quot;您的文件$file,已经拷贝到了$dir&quot;elsemkdir -p $dircp $file $dir                echo &quot;您的文件$file,已经拷贝到了$dir&quot;fielseecho &quot;文件不存在,请检查&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、单分支if"><a href="#三、单分支if" class="headerlink" title="三、单分支if"></a>三、单分支if</h2><pre class="line-numbers language-none"><code class="language-none">if 条件; then    执行的操作    执行的操作else执行的操作执行的操作fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash#read -p &quot;用户名: &quot; name# 判断用户不存在 if ! id $name &amp;&gt; &#x2F;dev&#x2F;null; then   read -p &quot;密码: &quot; password   useradd $name   echo $password | passwd --stdin $name &amp;&gt; &#x2F;dev&#x2F;null   echo &quot;用户$name创建完成&quot;else   echo &quot;用户$name存在&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检查文件有无空行"><a href="#检查文件有无空行" class="headerlink" title="检查文件有无空行"></a>检查文件有无空行</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashread -p &#39;请输入文件名:&#39; ab&#x3D;$(grep &quot;^$&quot; $a | wc -l) &amp;&gt; &#x2F;dev&#x2F;nullif [ $b -eq 0 ] ; thenecho &quot;此文件没有空行&quot;elseecho &quot;此文件存在$b个空行&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检查磁盘容量，使用大于10-告警"><a href="#检查磁盘容量，使用大于10-告警" class="headerlink" title="检查磁盘容量，使用大于10%告警"></a>检查磁盘容量，使用大于10%告警</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashread -p &#39;请输入您要查看的磁盘:&#39; namea&#x3D;$(df -hT | grep &quot;$name&quot; | awk &#39;&#123;print $1&#125;&#39;)b&#x3D;$(df -hT | grep &quot;$name&quot; | awk &#39;&#123;print $5&#125;&#39;)c&#x3D;$(df -hT | grep &quot;$name&quot; | awk &#39;&#123;print $6&#125;&#39;)#$&#123;c%%%&#125;去除c变量的百分号if [ $&#123;c%%%&#125; -gt 10 ]; thenecho &quot;磁盘名:$a 剩余空间:$b 已使用:$c&quot;echo &#39;警告:您的磁盘使用率已经大于10%&#39;elseecho &quot;磁盘名:$a 剩余空间:$b 已使用:$c&quot;echo &quot;您的磁盘很健康&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络连通测试"><a href="#网络连通测试" class="headerlink" title="网络连通测试"></a>网络连通测试</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashecho &#39;&#x3D;&#x3D;&#x3D;&#x3D;欢迎使用网络测试工具&#x3D;&#x3D;&#x3D;&#x3D;&#39;read -p &#39;请输入IP或域名:&#39; ipping -c 2 $ip &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -eq 0 ]; then#$?特殊变量，当值不等于0时，代表命令执行失败echo &quot;恭喜你网络畅通!&quot;elseecho &quot;网络不可达,请检查后再试!&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、多分支if"><a href="#四、多分支if" class="headerlink" title="四、多分支if"></a>四、多分支if</h2><pre class="line-numbers language-none"><code class="language-none">if 条件1; then执行的操作执行的操作 elif 条件2; then 执行的操作执行的操作elif 条件3; then 执行的操作执行的操作else执行的操作执行的操作fi <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-多条件的使用方法"><a href="#1-多条件的使用方法" class="headerlink" title="1.多条件的使用方法"></a>1.多条件的使用方法</h3><ul><li>and   并且<ul><li>[ 条件1 -a 条件2 ]</li><li>[ 条件1 ] &amp;&amp; [ 条件2 ]</li></ul></li><li>or 或者<ul><li>[ 条件1 -o 条件2 ]</li><li>[ 条件1 ] || [ 条件2 ]</li></ul></li></ul><h4 id="A-判定系统版本"><a href="#A-判定系统版本" class="headerlink" title="A.判定系统版本"></a>A.判定系统版本</h4><blockquote><p><code>linux</code>显示<code>红帽</code><br><code>windows</code>显示<code>微软</code><br><code>macos</code>显示<code>苹果</code><br><code>其他</code>参数显示<code>其他</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashread -p &#39;请输入您当前的系统:&#39; sysif [ $sys &#x3D;&#x3D; &quot;linux&quot; -o $sys &#x3D;&#x3D; &quot;Linux&quot; ]; thenecho &quot;红帽&quot;elif [ $sys &#x3D;&#x3D; &quot;windows&quot; -o $sys &#x3D;&#x3D; &quot;Windows&quot; ]; thenecho &quot;微软&quot;elif [ $sys &#x3D;&#x3D; &quot;macos&quot; -o $sys &#x3D;&#x3D; &quot;MacOS&quot; ]; thenecho &quot;苹果&quot;elseecho &quot;其他&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、嵌套if"><a href="#五、嵌套if" class="headerlink" title="五、嵌套if"></a>五、嵌套if</h2><ul><li>适用于多层判断</li></ul><pre class="line-numbers language-none"><code class="language-none">if  条件; then      if  条件; then             执行的操作             执行的操作      else             执行的操作             执行的操作      fielse        执行的操作        执行的操作fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h3><blockquote><p>先判断用户是否存在，如果不存在，需要先创建用户。如果存在判断uid是否等于gid</p></blockquote><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashread -p &quot;请输入用户名:&quot; userif id $user &amp;&gt; &#x2F;dev&#x2F;null; thenu&#x3D;$(id -u $user)g&#x3D;$(id -g $user)if [ $u -eq $g ]; thenecho &quot;用户: $user UID: $u GID: $g is a good user!&quot;elseecho &quot;用户: $user UID: $u GID: $g is a bad user!&quot;fielseecho &quot;用户$user不存在&quot;read -p &quot;是否创建用户$user[y&#x2F;n]&quot; inputif [ $input &#x3D;&#x3D; &quot;y&quot; -o $input &#x3D;&#x3D; &quot;Y&quot; -o $input &#x3D;&#x3D; &quot;yes&quot; -o $input &#x3D;&#x3D; &quot;YES&quot; ]; then         useradd $user &amp;&gt; &#x2F;dev&#x2F;nullread -p &quot;给$user创建一个密码:&quot; passwdecho $passwd | passwd --stdin $user &amp;&gt; &#x2F;dev&#x2F;null        elif [ $input &#x3D;&#x3D; &quot;n&quot; -o $input &#x3D;&#x3D; &quot;N&quot; -o $input &#x3D;&#x3D; &quot;no&quot; -o $input &#x3D;&#x3D; &quot;NO&quot; ]; then             exit 0        fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、case条件判断"><a href="#六、case条件判断" class="headerlink" title="六、case条件判断"></a>六、case条件判断</h2><ul><li>适用于判断某个变量有多种固定的取值时</li></ul><pre class="line-numbers language-none"><code class="language-none">case  变量 in 值1)     执行的操作     执行的操作     ;; 值2)      执行的操作       执行的操作      ;; 值3）    执行的操作     执行的操作    ;; *)    执行的操作     执行的操作    ;; esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-判断操作系统版本"><a href="#1-判断操作系统版本" class="headerlink" title="1.判断操作系统版本"></a>1.判断操作系统版本</h3><blockquote><p>如果用户输入<code>linux</code>输出<code>红帽</code><br>输入<code>windows</code>输出<code>微软</code><br>输入<code>macos</code>输出<code>苹果</code><br>输入<code>其他</code>输出<code>其他</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashread -p &quot;请输入系统信息:&quot; systemcase $system in linux|Linux)echo &quot;红帽&quot;;;windows|Windows)echo &quot;微软&quot;;;macos|MacOS)echo &quot;苹果&quot;;;*)echo &quot;其他&quot;;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-位置变量"><a href="#2-位置变量" class="headerlink" title="2.位置变量"></a>2.位置变量</h3><blockquote><p>$0 命令本身<br>$1 $2 $3 $4 $5 $6 $…${10}命令的第x参数，x是$后面的数字，$后面是数字几，就是第几个参数<br>$# 参数的个数</p></blockquote><h3 id="3-编写nginx控制脚本"><a href="#3-编写nginx控制脚本" class="headerlink" title="3.编写nginx控制脚本"></a>3.编写nginx控制脚本</h3><blockquote><p>要求脚本可以控制<code>nginx</code>的<code>start启动</code>|<code>stop停止</code>|<code>restart重启</code>|<code>status查看状态</code>|<code>reload重新加载配置</code></p></blockquote><h4 id="A-安装nginx"><a href="#A-安装nginx" class="headerlink" title="A.安装nginx"></a>A.安装nginx</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y gcc openssl-devel zlib-devel pcre-devel [root@localhost ~]# tar xf nginx-1.18.0.tar.gz #自行下载nginx压缩包[root@localhost ~]# cd nginx-1.18.0&#x2F;[root@localhost nginx-1.18.0]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx &amp;&amp; make &amp;&amp; make install <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-脚本"><a href="#B-脚本" class="headerlink" title="B.脚本"></a>B.脚本</h4><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashnginx_cmd&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxnginx_pid&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid#判断是否携带参数if [ $# -eq 0 ]; then#如果参数为0，退出命令，并且提示帮助信息echo &quot;关于$0的帮助: start启动|stop停止|restart重启|status查看状态|reload重新加载配置&quot;exit 1#命令执行错误后，退出的状态码为1fi#判断Nginx服务器case $1 instart)$nginx_cmd &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -eq 0 ]; then#判断上一条命令是否执行成功echo &quot;Nginx服务成功启动&quot;netstat -tunlp | grep -i nginx#查看端口elseecho &quot;Nginx服务可能已经启动了,或启动失败&quot;netstat -tunlp | grep -i nginxfi;;stop)$nginx_cmd -s stop &amp;&gt; &#x2F;dev&#x2F;nullif [ $? -eq 0 ]; thenecho &quot;Nginx服务成功停止&quot;elseecho &quot;Nginx服务停止失败&quot;fi;;restart)$nginx_cmd -s restart &amp;&gt; &#x2F;dev&#x2F;nullif [ -e $nginx_pid ]; then#判断PID文件是否存在echo &quot;Nginx服务重启成功&quot;elseecho &quot;Nginx服务重启失败&quot;fi;;status)if [ -e $nginx_pid ]; thenecho &quot;Nginx服务正在运行&quot;elseecho &quot;Nginx服务未运行&quot;fi;;reload)kill -1 &#96;cat $nginx_pid&#96;#使用kill -1命令重新加载配置文件，不影响服务正常运行;;*)#如果输入了其他未设定的参数，同样错误状态退出，并且提示帮助信息echo &quot;关于$0的帮助: start启动|stop停止|restart重启|status查看状态|reload重新加载配置&quot;exit 1#命令执行错误后，退出的状态码为1;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】Shell脚本基础</title>
      <link href="/2023/04/11/77/"/>
      <url>/2023/04/11/77/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】Shell脚本基础"><a href="#【Linux系列教程】Shell脚本基础" class="headerlink" title="【Linux系列教程】Shell脚本基础"></a>【Linux系列教程】Shell脚本基础</h1><h2 id="一、Shell脚本的应用"><a href="#一、Shell脚本的应用" class="headerlink" title="一、Shell脚本的应用"></a>一、Shell脚本的应用</h2><ul><li>应用场景： <ul><li><code>重复</code>的工作、<code>自动</code>执行</li><li>本质上就是个<code>文本</code>文件</li></ul></li></ul><h2 id="二、echo-输出"><a href="#二、echo-输出" class="headerlink" title="二、echo 输出"></a>二、echo 输出</h2><h3 id="1-echo"><a href="#1-echo" class="headerlink" title="1.echo"></a>1.echo</h3><blockquote><p>Tips: <code>单引号</code>和<code>双引号</code>的区别：<br>单引号：<code>所有</code>字符会被作为<code>普通字符</code>显示<br>双引号：<code>特殊</code>字符会被<code>转义</code> </p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# echo &quot;kvm虚拟机管理工具&quot;kvm虚拟机管理工具[root@localhost ~]# echo &#39;kvm虚拟机管理工具&#39;kvm虚拟机管理工具<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-e解释转译字符"><a href="#2-e解释转译字符" class="headerlink" title="2.-e解释转译字符"></a>2.-e解释转译字符</h3><blockquote><p>\n 换行<br>\t 空格</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# echo -e &quot;SHELL\nPython\nGOlang&quot;SHELLPythonGOlang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# echo -e &quot;Linux\tWindows\tUNIX&quot;Linux WindowsUNIX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-here-document-显示多行内容"><a href="#3-here-document-显示多行内容" class="headerlink" title="3.here document 显示多行内容"></a>3.here document 显示多行内容</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &lt;&lt; eof#eof可替换其他字符&gt; 1. 创建虚拟机&gt; 2. 查看虚拟机&gt; 3. 销毁虚拟机&gt; 4. 查看系统资源&gt; eof#上一个字符写什么，这里就以什么结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、重定向符号"><a href="#三、重定向符号" class="headerlink" title="三、重定向符号"></a>三、重定向符号</h2><h3 id="1-重定向类型"><a href="#1-重定向类型" class="headerlink" title="1.重定向类型"></a>1.重定向类型</h3><blockquote><p><code>输出</code>重定向：<br>&gt;、&gt;&gt;、2&gt;、&amp;&gt;<br><code>输入</code>重定向<br>&lt;</p></blockquote><h3 id="2-三个基本设备文件"><a href="#2-三个基本设备文件" class="headerlink" title="2.三个基本设备文件"></a>2.三个基本设备文件</h3><blockquote><p>&#x2F;dev&#x2F;stdin标准<code>输入</code>设备 键盘、鼠标 0<br>&#x2F;dev&#x2F;stdout标准<code>输出</code>设备显示器1<br>&#x2F;dev&#x2F;stderr标准<code>错误输出</code>设备显示器2</p></blockquote><h3 id="3-输出重定向"><a href="#3-输出重定向" class="headerlink" title="3.输出重定向"></a>3.输出重定向</h3><h4 id="A-gt-标准重定向信息"><a href="#A-gt-标准重定向信息" class="headerlink" title="A.&gt; 标准重定向信息"></a>A.&gt; 标准重定向信息</h4><blockquote><p>仅能输出<code>正确</code>信息，自动<code>覆盖</code>文件内容</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;etc&#x2F;fstab &gt; &#x2F;tmp&#x2F;fstab.log[root@master ~]# cat &#x2F;tmp&#x2F;fstab.log## &#x2F;etc&#x2F;fstab# Created by anaconda on Fri Mar 17 16:57:52 2023## Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;# See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info#&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0UUID&#x3D;e8a04612-968e-46cf-94bc-4b144bed2806 &#x2F;boot                   xfs     defaults        0 0&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0&#x2F;dev&#x2F;sr0  &#x2F;mnt iso9660  defaults0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-2-gt-错误重定向信息"><a href="#B-2-gt-错误重定向信息" class="headerlink" title="B. 2&gt; 错误重定向信息"></a>B. 2&gt; 错误重定向信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;etc&#x2F;hgadhjfhja &gt; &#x2F;tmp&#x2F;logcat: &#x2F;etc&#x2F;hgadhjfhja: 没有那个文件或目录#可以看到使用标准重定向并不能记录错误的信息[root@master ~]# cat &#x2F;tmp&#x2F;log[root@master ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;etc&#x2F;hgadhjfhja 2&gt; &#x2F;tmp&#x2F;log[root@master ~]# cat &#x2F;tmp&#x2F;logcat: &#x2F;etc&#x2F;hgadhjfhja: 没有那个文件或目录#可以看到错误信息成功记录到了日志中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-amp-gt-重定向所有信息"><a href="#C-amp-gt-重定向所有信息" class="headerlink" title="C. &amp;&gt; 重定向所有信息"></a>C. &amp;&gt; 重定向所有信息</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;etc&#x2F;hgadhjfhja &amp;&gt; &#x2F;tmp&#x2F;log#成功记录[root@master ~]# cat &#x2F;etc&#x2F;fstab &amp;&gt; &#x2F;tmp&#x2F;log#成功记录[root@master ~]# cat &#x2F;tmp&#x2F;log #查看日志，发现只有上一条记录，这就是&gt;输出的时候，只能做覆盖操作## &#x2F;etc&#x2F;fstab# Created by anaconda on Fri Mar 17 16:57:52 2023## Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;# See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info#&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0UUID&#x3D;e8a04612-968e-46cf-94bc-4b144bed2806 &#x2F;boot                   xfs     defaults        0 0&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0&#x2F;dev&#x2F;sr0  &#x2F;mnt iso9660  defaults0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-gt-gt-追加"><a href="#D-gt-gt-追加" class="headerlink" title="D. &gt;&gt;追加"></a>D. &gt;&gt;追加</h4><blockquote><p>仅能输出<code>正确</code>信息，自动<code>追加</code>文件内容</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;etc&#x2F;shadow &gt;&gt; &#x2F;tmp&#x2F;log[root@master ~]# cat &#x2F;tmp&#x2F;log #不仅上次记录的内容在，这次新记录的内容，同样存在## &#x2F;etc&#x2F;fstab# Created by anaconda on Fri Mar 17 16:57:52 2023## Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;# See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info#&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0UUID&#x3D;e8a04612-968e-46cf-94bc-4b144bed2806 &#x2F;boot                   xfs     defaults        0 0&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0&#x2F;dev&#x2F;sr0  &#x2F;mnt iso9660  defaults0 0root:$6$Ywz9VrM4JS.Iwke7$kU268DkKfzfdHDnC&#x2F;RDQDViu5GTlkQvRG2Gb.BEEAI3TQ78vmCH5qwA6sVzCIj6JwQ8xaHIzRFCuTccjU5uxh&#x2F;::0:99999:7:::bin:*:18353:0:99999:7:::daemon:*:18353:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-amp-gt-gt-混合追加"><a href="#E-amp-gt-gt-混合追加" class="headerlink" title="E.&amp;&gt;&gt; 混合追加"></a>E.&amp;&gt;&gt; 混合追加</h4><blockquote><p>不管<code>正确</code>信息还是<code>错误</code>信息，都能<code>追加</code>到文件内容</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;etc&#x2F;fstab &amp;&gt;&gt; &#x2F;tmp&#x2F;log1[root@master ~]# ls &#x2F;ghjafhjfa &amp;&gt;&gt; &#x2F;tmp&#x2F;log1[root@master ~]# ls &#x2F;root&#x2F; &amp;&gt;&gt; &#x2F;tmp&#x2F;log1[root@master ~]# cat &#x2F;tmp&#x2F;log1## &#x2F;etc&#x2F;fstab# Created by anaconda on Fri Mar 17 16:57:52 2023## Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;# See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info#&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0UUID&#x3D;e8a04612-968e-46cf-94bc-4b144bed2806 &#x2F;boot                   xfs     defaults        0 0&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0&#x2F;dev&#x2F;sr0  &#x2F;mnt iso9660  defaults0 0ls: 无法访问&#x2F;ghjafhjfa: 没有那个文件或目录1.shaaaaaanaconda-ks.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-黑洞文件-x2F-dev-x2F-null"><a href="#F-黑洞文件-x2F-dev-x2F-null" class="headerlink" title="F.黑洞文件&#x2F;dev&#x2F;null"></a>F.黑洞文件&#x2F;dev&#x2F;null</h4><blockquote><p>当<code>输出</code>信息指到这个文件后，内容都<code>不会被保存</code>下来</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -ldh &#x2F;etc&#x2F; &gt; &#x2F;dev&#x2F;null <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-输入重定向"><a href="#4-输入重定向" class="headerlink" title="4.输入重定向"></a>4.输入重定向</h3><blockquote><p>使用文件的内容作为键盘输入使用</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;tmp&#x2F;file01abcde[root@localhost ~]# tr &#39;a-z&#39; &#39;A-Z&#39; &lt; &#x2F;tmp&#x2F;file01ABCDE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h2><h3 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1.变量类型"></a>1.变量类型</h3><ul><li>自定义变量</li><li>环境变量 </li><li>特殊变量</li></ul><h3 id="2-自定义变量"><a href="#2-自定义变量" class="headerlink" title="2.自定义变量"></a>2.自定义变量</h3><h4 id="A-自定义变量的注意"><a href="#A-自定义变量的注意" class="headerlink" title="A.自定义变量的注意"></a>A.自定义变量的注意</h4><pre class="line-numbers language-none"><code class="language-none">变量名称&#x3D;值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>只能</code>出现字母、数字、下划线<br><code>不能</code>与shell关键字冲突<br>见名知义</p></blockquote><h4 id="B-调用变量"><a href="#B-调用变量" class="headerlink" title="B.调用变量"></a>B.调用变量</h4><pre class="line-numbers language-none"><code class="language-none">$变量名称$&#123;变量名称&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-自定义变量的使用"><a href="#C-自定义变量的使用" class="headerlink" title="C.自定义变量的使用"></a>C.自定义变量的使用</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ip_address&#x3D;10.1.1.1[root@localhost ~]# echo &quot;MySQL server is $ip_address&quot;MySQL server is 10.1.1.1[root@localhost ~]# echo &quot;MySQL server is $&#123;ip_address&#125;&quot;MySQL server is 10.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="D-自定义变量的中括号使用"><a href="#D-自定义变量的中括号使用" class="headerlink" title="D.自定义变量的中括号使用"></a>D.自定义变量的中括号使用</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# data&#x3D;server[root@localhost ~]# echo &quot;There are some $datas&quot;There are some [root@localhost ~]# echo &quot;There are some $&#123;data&#125;s&quot;There are some servers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-交互式变量"><a href="#E-交互式变量" class="headerlink" title="E.交互式变量"></a>E.交互式变量</h4><pre class="line-numbers language-none"><code class="language-none"># read -p &quot;提示信息&quot; 变量名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# read -p &quot;用户名: &quot; name用户名: userA[root@localhost ~]# echo $nameuserA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-数学运算符"><a href="#3-数学运算符" class="headerlink" title="3.数学运算符"></a>3.数学运算符</h3><ul><li>+ 加法</li><li>- 减法</li><li>* 乘法</li><li>&#x2F; 除法</li><li>% 取余</li></ul><h4 id="A-Shell存储的变量都是字符"><a href="#A-Shell存储的变量都是字符" class="headerlink" title="A.Shell存储的变量都是字符"></a>A.Shell存储的变量都是字符</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# a&#x3D;10[root@localhost ~]# b&#x3D;20[root@localhost ~]# c&#x3D;a+b[root@localhost ~]# echo $ca+b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# c&#x3D;$a+$b[root@localhost ~]# echo $c10+20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-做数学运算-表达式"><a href="#B-做数学运算-表达式" class="headerlink" title="B.做数学运算$((表达式))"></a>B.做数学运算$((表达式))</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# a&#x3D;10[root@localhost ~]# b&#x3D;20[root@localhost ~]# c&#x3D;$((a+b))[root@localhost ~]# echo $c30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-命令引用"><a href="#4-命令引用" class="headerlink" title="4.命令引用"></a>4.命令引用</h3><ul><li>`命令`反引号 </li><li>$(命令)</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# result_02&#x3D;$(uptime)[root@localhost ~]# echo $result_0213:47:11 up 4:44, 1 user, load average: 0.00, 0.01, 0.05[root@localhost ~]# result_01&#x3D;&#96;free -m&#96;[root@localhost ~]# echo $result_01total used free shared buff&#x2F;cache available Mem: 972 94 727 7 151 715 Swap: 2047 0 2047<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、系统环境变量"><a href="#五、系统环境变量" class="headerlink" title="五、系统环境变量"></a>五、系统环境变量</h2><h3 id="1-查看当前系统环境变量"><a href="#1-查看当前系统环境变量" class="headerlink" title="1.查看当前系统环境变量"></a>1.查看当前系统环境变量</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-定义、修改环境变量"><a href="#2-定义、修改环境变量" class="headerlink" title="2.定义、修改环境变量"></a>2.定义、修改环境变量</h3><blockquote><p>针对系统<code>所有</code>用户，<code>永久</code>生效 &#x2F;etc&#x2F;profile<br>指针对某个<code>特定</code>用户，<code>永久</code>生效 &#x2F;用户家目录&#x2F;.bash_profile<br>环境变量名称必须大写 </p></blockquote><pre class="line-numbers language-none"><code class="language-none"># export 环境变量&#x3D;值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="A-定义历史命令执行时间"><a href="#A-定义历史命令执行时间" class="headerlink" title="A.定义历史命令执行时间"></a>A.定义历史命令执行时间</h4><pre class="line-numbers language-none"><code class="language-none">export HISTTIMEFORMAT&#x3D;&quot;%F_%T  &quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-定义最多记录历史命令个数-默认1000"><a href="#B-定义最多记录历史命令个数-默认1000" class="headerlink" title="B.定义最多记录历史命令个数(默认1000)"></a>B.定义最多记录历史命令个数(默认1000)</h4><pre class="line-numbers language-none"><code class="language-none">export HISTSIZE&#x3D;20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改系统语言"><a href="#C-修改系统语言" class="headerlink" title="C.修改系统语言"></a>C.修改系统语言</h4><pre class="line-numbers language-none"><code class="language-none">export LANG&#x3D;en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-特殊变量"><a href="#3-特殊变量" class="headerlink" title="3.特殊变量 $?"></a>3.特殊变量 $?</h3><ul><li>上一条命令的执行状态码 </li><li>取值范围: 0—255 <ul><li>0  成功    </li><li>非0  失败</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# ls -a &#x2F;root[root@master ~]# echo $?0[root@master ~]# ls -a &#x2F;123456ls: 无法访问&#x2F;123456: 没有那个文件或目录[root@master ~]# echo $?2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、awk命令"><a href="#六、awk命令" class="headerlink" title="六、awk命令"></a>六、awk命令</h2><blockquote><p>从<code>某行</code>中<code>截取</code>内容<br>awk默认使用<code>空白字符</code>分割每一行内容，分割出来的每一部分，分别使用$1, $2, $3…..代表<br>-F指定<code>分割符</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># head -n 3 &#x2F;etc&#x2F;passwd | tail -n 1 | awk -F: &#39;&#123;print $6&#125;&#39;&#x2F;sbin[root@master ~]# ifconfig | grep &quot;netmask&quot; | awk &#39;&#123;print $2&#125;&#39;10.10.10.128127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、几个简单的Shell脚本演示"><a href="#七、几个简单的Shell脚本演示" class="headerlink" title="七、几个简单的Shell脚本演示"></a>七、几个简单的Shell脚本演示</h2><blockquote><p>编写完脚本之后，要使用<code>chmod</code>命令赋予<code>执行</code>权限<br>使用<code>bash shell脚本存放目录</code>执行脚本</p></blockquote><h3 id="1-创建用户hadoop，并为其设置密码为redhat"><a href="#1-创建用户hadoop，并为其设置密码为redhat" class="headerlink" title="1.创建用户hadoop，并为其设置密码为redhat"></a>1.创建用户hadoop，并为其设置密码为redhat</h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashuseradd hadoopecho &quot;redhat&quot; | passwd --stdin hadoop &amp;&gt; &#x2F;dev&#x2F;nullecho &quot;用户hadoop创建完成&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-交互式创建用户"><a href="#2-交互式创建用户" class="headerlink" title="2.交互式创建用户"></a>2.交互式创建用户</h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashread -p &quot;用户名: &quot; nameread -p &quot;密码: &quot; password useradd $nameecho &quot;$password&quot; | passwd --stdin $name &amp;&gt; &#x2F;dev&#x2F;nullecho &quot;用户$name创建完成&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置本地Yum源"><a href="#3-配置本地Yum源" class="headerlink" title="3.配置本地Yum源"></a>3.配置本地Yum源</h3><pre class="line-numbers language-none"><code class="language-none">#! &#x2F;bin&#x2F;bashecho &quot;备份旧的Yum仓库&quot;mkdir -p &#x2F;yummv &#x2F;etc&#x2F;yum.repos.d&#x2F;* &#x2F;yumecho &quot;挂载本地光盘镜像&quot;echo &#39;&#x2F;dev&#x2F;sr0  &#x2F;mnt iso9660  defaults  0 0&#39; &gt;&gt; &#x2F;etc&#x2F;fstabmount -a &amp;&gt; &#x2F;dev&#x2F;nullecho &quot;创建本地Yum仓库&quot;cat &lt;&lt; yum &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;centos7.repo[Centos7]name&#x3D;centosbaseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mntenabled&#x3D;1gpgcheck&#x3D;0yumyum clean all &amp;&gt; &#x2F;dev&#x2F;nullyum repolistecho &quot;恭喜你,本地Yum仓库创建完成！&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TRSS-Yunzai搭建教程</title>
      <link href="/2023/04/09/yunzai/"/>
      <url>/2023/04/09/yunzai/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TRSS-Yunzai搭建教程"><a href="#TRSS-Yunzai搭建教程" class="headerlink" title="TRSS-Yunzai搭建教程"></a>TRSS-Yunzai搭建教程</h1><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>TRSS-Yunzai_by<a href="https://trss.me/">时雨◎星空</a> and <a href="https://rainkavik.com/archives/339/">Rain kavik’s Blog</a></p><p>在QQ群，QQ频道，微信群使用Miao-Yunzai。<br>此教程所有资源均来自互联网，请勿进行任何商业性行为，仅供交流学习使用，如有侵权请联系，会立即删除。</p><p>以下教程都是为 <code>windows</code>准备的。</p><p><code>go-cqhttp</code>和 <code>TRSS-Yunzai</code> 有liunx版本，你自己可以折磨。</p><p><code>ComWeChat Client</code> 协议端，即微信，只能在windows上运行。</p><p>因网路问题，项目地址除了QQ和微信的协议端，都是Gitee地址，因为两个协议端目前都没有Gitee仓库 <code>(我没发现)</code>。</p><p>教程的环境文件我都存储在以下的网盘里面，你可以直接打包下载。</p><p>如果教程有问题，可通过频道联系 <code>Zyy.小钰 </code><a href="https://pd.qq.com/s/6mkgksvwm">点击加入频道</a></p><p>文章最后我写了MC面板的托管，如果有需要，请查看。<br>同时在这里征集其他网盘的链接。</p><ul><li><a href="https://cloud.rainkavik.com/s/xRMHB">非非的个人网盘</a></li></ul><p>YunZai：</p><p><a href="https://gitee.com/TimeRainStarSky/Yunzai">TRSS-Yunzai</a>：gocq-Yunzai</p><p><a href="https://gitee.com/yoimiya-kokomi/miao-plugin">miao-plugin</a>：喵喵插件</p><p>QQ：</p><p><a href="https://docs.go-cqhttp.org/">go-cqhttp</a>：基于 <code>Mirai</code> 以及 <code>MiraiGo</code> 的 <code> OneBot Golang</code> 原生实现</p><p>微信：</p><p><a href="https://justundertaker.github.io/ComWeChatBotClient/">ComWeChat Client</a> ：<code>ComWeChatRobot</code>的客户端封装，支持 <code>onebot12</code>通信协议。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>如果你的电脑没有任何环境，请直接下载网盘的 <code>全部文件 初次使用下这个.zip</code></p><p><img src="https://gitee.com/Yuer-QAQ/drawing-bed/blob/master/TRSS-Yunzai/1.jpg"><img src="https://i.328888.xyz/2023/04/09/iRLbH5.png" alt="全部文件"></p><p>如果你有搭建过Yunzai，那你的服务器或者电脑应该有Node.js、Git、Redis，你就不需要下载全部文件了，根据需求下载即可，我会在后续教程中提到你要下载的东西。</p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h5 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 <code>Node.js</code></h5><p><a href="https://pd.qq.com/s/6mkgksvwm">Node.js官网下载</a></p><p>解压 <code>全部文件 初次使用下这个.zip</code><br>运行 <code>环境 - node-v16.19.1-x64_2.msi</code> 无脑下一步即可。</p><h5 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 <code>Git</code></h5><p><a href="https://git-scm.com/downloads">Git官网下载</a></p><p>运行 <code>环境 - Git-2.40.0-64-bit.exe</code> 无脑下一步即可。</p><h5 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 <code>Redis</code></h5><p><a href="https://redis.io/download/">Redis官网下载</a></p><p>创建一个文件夹，命名为 <code>TRSS-Yunzai</code></p><p>将 <code>环境 - Redis-x64-5.0.14.1_2.zip</code> 解压到文件夹内，如图。</p><p><img src="https://i.328888.xyz/2023/04/09/iRLLJL.png" alt="示例"></p><p>打开 <code>Redis-x64-5.0.14.1_2 </code>运行 <code>redis-server.exe </code>。</p><p><code>redis-server.exe</code> 运行成功如图，机器人运行期间请<code>不要关闭此窗口</code>。</p><p><img src="https://i.328888.xyz/2023/04/09/iRLszw.png" alt="Redis"></p><h3 id="安装TRSS-Yunzai"><a href="#安装TRSS-Yunzai" class="headerlink" title="安装TRSS-Yunzai"></a>安装TRSS-Yunzai</h3><p>打开 <code>TRSS-Yunzai</code>文件夹，在地址栏输出 <code>cmd</code>，回车确认。</p><p>或者<code>按住Shift+鼠标右键</code>选择在<code>Powershell</code>打开，Windows11用户可以直接在当前窗口<code>鼠标右键</code>选择<code>在终端中打开</code>即可。</p><p><img src="https://i.328888.xyz/2023/04/09/iRLu18.png" alt="打开cmd"></p><p>依次输入以下命令</p><h5 id="1-克隆项目并安装-miao-plugin"><a href="#1-克隆项目并安装-miao-plugin" class="headerlink" title="1.克隆项目并安装 miao-plugin"></a>1.克隆项目并安装 <code>miao-plugin</code></h5><pre class="line-numbers language-none"><code class="language-none">git clone --depth 1 https:&#x2F;&#x2F;gitee.com&#x2F;TimeRainStarSky&#x2F;Yunzai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cd Yunzai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git clone --depth 1 https:&#x2F;&#x2F;gitee.com&#x2F;yoimiya-kokomi&#x2F;miao-plugin plugins&#x2F;miao-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-安装pnpm，已安装的跳过"><a href="#2-安装pnpm，已安装的跳过" class="headerlink" title="2.安装pnpm，已安装的跳过"></a>2.安装<a href="https://gitee.com/link?target=https://pnpm.io/zh/installation">pnpm</a>，已安装的跳过</h5><pre class="line-numbers language-none"><code class="language-none">npm --registry&#x3D;https:&#x2F;&#x2F;registry.npmmirror.com install pnpm -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h5><pre class="line-numbers language-none"><code class="language-none">pnpm config set registry https:&#x2F;&#x2F;registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pnpm install -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-安装插件包-可选"><a href="#4-安装插件包-可选" class="headerlink" title="4.安装插件包 (可选)"></a>4.安装插件包 <code>(可选)</code></h5><p>我个人推荐先安装 <code>xiaoyao-cvs-plugin</code>，因为QQ频道和微信可以快捷使用 <code>#扫码登录</code>来获取ck。</p><p>以下所有插件包均在 <code>Yunzai</code>根目录安装，如果你按照教程来，安装依赖后可直接运行代码块内的指令。</p><p><a href="https://gitee.com/Ctrlcvs/xiaoyao-cvs-plugin">xiaoyao-cvs-plugin</a>：</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;gitee.com&#x2F;Ctrlcvs&#x2F;xiaoyao-cvs-plugin.git .&#x2F;plugins&#x2F;xiaoyao-cvs-plugin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://gitee.com/guoba-yunzai/guoba-plugin">Guoba-Plugin</a>：</p><p>安装锅巴插件可以进行修改一些默认配置。<br>使用方法：发送 <code>#锅巴登录</code>，具体看仓库地址</p><pre class="line-numbers language-none"><code class="language-none">git clone --depth&#x3D;1 https:&#x2F;&#x2F;gitee.com&#x2F;guoba-yunzai&#x2F;guoba-plugin.git .&#x2F;plugins&#x2F;Guoba-Plugin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pnpm install --filter&#x3D;guoba-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-启动-Yunzai-Bot"><a href="#5-启动-Yunzai-Bot" class="headerlink" title="5.启动 Yunzai-Bot"></a>5.启动 <code>Yunzai-Bot</code></h5><pre class="line-numbers language-none"><code class="language-none">node app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里先设置为你的QQ账号，频道id和微信号不一样，需要全部连接完成才可以获取你的频道id和微信号。</p><p><img src="https://i.328888.xyz/2023/04/09/iRMORV.png" alt="启动云崽"></p><h3 id="配置go-cqhttp-QQ协议框架"><a href="#配置go-cqhttp-QQ协议框架" class="headerlink" title="配置go-cqhttp (QQ协议框架)"></a>配置<a href="https://docs.go-cqhttp.org/">go-cqhttp</a> <code>(QQ协议框架)</code></h3><p>1.解压 <code>go-cqhttp</code></p><p>打开 <code>QQ - go-cqhttp_windows_amd64.zip</code></p><p>将其解压到 <code>TRSS-Yunzai</code>下</p><p><img src="https://i.328888.xyz/2023/04/09/iRMN6z.png" alt="解压go-cqhttp"></p><p>2.配置 <code>go-cqhttp</code></p><p>打开 <code>go-cqhttp_windows_amd64</code> 文件夹</p><p>运行 <code>go-cqhttp.exe</code>，点击三次确定！</p><p><img src="https://i.328888.xyz/2023/04/09/iRMRCa.png" alt="释放安全启动脚本"></p><p>随后看到目录多了一个 <code>go-cqhttp.bat</code></p><p><img src="https://i.328888.xyz/2023/04/09/iRM7Vv.png" alt="运行脚本"></p><p>运行他，输入 <code>3</code>！回车确定，然后关闭当前窗口。</p><p><img src="https://i.328888.xyz/2023/04/09/iRMFl8.png" alt="生成配置文件"></p><p>关闭后，根目录多了一个 <code>config.yml </code>用记事本打开他。</p><p>以下为必改项：</p><pre class="line-numbers language-none"><code class="language-none">uin: 1233456 # QQ账号password: &#39;&#39; # 密码为空时使用扫码登录post-format: stringuniversal: ws:&#x2F;&#x2F;your_websocket_universal.server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>扫码登录只能使用安卓手表协议，推荐使用密码登录。</p><p>修改成以下，QQ账号和密码自己修改为你的QQ机器人小号。</p><pre class="line-numbers language-none"><code class="language-none">post-format: arrayuniversal: ws:&#x2F;&#x2F;localhost:2536&#x2F;go-cqhttp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改完成记得保存。</p><p>随后再次运行 <code>go-cqhttp.bat</code></p><p>随后输入 <code>1</code>，选择 <code>自动提交</code></p><p>把链接复制到浏览器打开或者按 <code>Ctrl+鼠标单击链接</code>，完成滑块验证。</p><p><img src="https://i.328888.xyz/2023/04/09/iRPVYz.png" alt="请输入图片描述"></p><p>如果有设备锁，请自己通过验证，如不出意外，此时你应该看到。<br><img src="https://i.328888.xyz/2023/04/09/iRPkyU.png" alt="请输入图片描述"></p><p>你可以在频道和QQ群正常使用机器人了。</p><p>注：机器人如果需要在频道使用，需要把该子频道的消息免打扰关闭掉，否则机器人无法接收消息。关于在频道设置自己为主人，请看<a href="#%E5%85%B3%E4%BA%8E%E4%B8%BB%E4%BA%BA">#关于主人</a>。</p><h3 id="配置ComWeChat-Client-WeChat协议框架"><a href="#配置ComWeChat-Client-WeChat协议框架" class="headerlink" title="配置ComWeChat-Client (WeChat协议框架)"></a>配置<a href="https://justundertaker.github.io/ComWeChatBotClient/">ComWeChat-Client</a> <code>(WeChat协议框架)</code></h3><h5 id="1-安装-WeChat"><a href="#1-安装-WeChat" class="headerlink" title="1.安装 WeChat"></a>1.安装 <code>WeChat</code></h5><p>打开 <code>WeChat</code>文件夹，运行其中的 <code>WeChatSetup-3.7.0.30.exe</code> 必须此版本，不要用其他版本。</p><p>安装目录选择TRSS-Yunzai，安装完成不要打开。</p><h5 id="2-禁用自动升级"><a href="#2-禁用自动升级" class="headerlink" title="2.禁用自动升级"></a>2.禁用自动升级</h5><p>打开文件夹内的 <code>禁用pc微信自动升级补丁.exe</code></p><p><img src="https://i.328888.xyz/2023/04/09/iRPK4p.png"></p><p>点击 <code>一键禁用。</code>如果成功，则继续下一步。</p><p>如果失败，点击 <code>操作说明</code>进行手动禁用更新。</p><h5 id="3-配置ComWeChat-Client"><a href="#3-配置ComWeChat-Client" class="headerlink" title="3.配置ComWeChat-Client"></a>3.配置ComWeChat-Client</h5><p>解压 <code>ComWeChat-Client-v0.0.6.zip</code>到TRSS-Yunzai</p><p>以记事本打开 <code>.env</code> 修改以下配置。</p><p>修改前</p><pre class="line-numbers language-none"><code class="language-none">websocekt_type &#x3D; &quot;Backward&quot;websocket_url &#x3D; [&quot;ws:&#x2F;&#x2F;localhost:2536&#x2F;ComWeChat&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改后：</p><pre class="line-numbers language-none"><code class="language-none">websocekt_type &#x3D; &quot;Backward&quot;websocket_url &#x3D; [&quot;ws:&#x2F;&#x2F;localhost:2536&#x2F;ComWeChat&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改完成保存关闭。</p><h5 id="4-安装com组件"><a href="#4-安装com组件" class="headerlink" title="4.安装com组件"></a>4.安装com组件</h5><p>运行 <code>install.bat</code></p><pre class="line-numbers language-none"><code class="language-none">#看到以下提示即安装成功Active code page: 65001安装com组件成功!Press any key to continue . . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-运行ComWeChat-Client"><a href="#5-运行ComWeChat-Client" class="headerlink" title="5.运行ComWeChat-Client"></a>5.运行ComWeChat-Client</h5><p>运行 <code>ComWeChat-Client-v0.0.6.exe</code></p><p>此时会让你扫码登录微信，自行配置即可。</p><p>登录完成看到以下画面即可成功。</p><p><img src="https://i.328888.xyz/2023/04/09/iRPLNU.png" alt="成功示例"></p><h3 id="关于主人"><a href="#关于主人" class="headerlink" title="关于主人"></a>关于主人</h3><h5 id="QQ频道"><a href="#QQ频道" class="headerlink" title="QQ频道"></a>QQ频道</h5><p>处于同一子频道，发消息，查看 <code>go-cqhttp</code>窗口。</p><p><img src="https://i.328888.xyz/2023/04/09/iRP7mo.png" alt="频道id"></p><p><code>144115218791749100</code>就是我的频道id。</p><p>写入到 <code>Yunzai\config\config\other.yaml </code>即可。</p><p><img src="https://i.328888.xyz/2023/04/09/iRPz4V.png"></p><h5 id="WeChat"><a href="#WeChat" class="headerlink" title="WeChat"></a>WeChat</h5><p>需要当主人的QQ号给机器人小号发消息，然后查看 <code>ComWeChat-Client</code>窗口，得到微信号，如图。</p><p>最后的 <code>&#39;user_id&#39;: &#39;wxid_zwp8eg5vz5lj22&#39;</code>中的 <code>wxid_zwp8eg5vz5lj22</code> 就是你的微信号，写入到 <code>Yunzai\config\config\other.yaml </code>即可。参考上图。</p><p><img src="https://i.328888.xyz/2023/04/09/iRPLNU.png"></p><p>所有教程到此结束，剩下的你可以看可以不看。</p><h3 id="关于mcsmanager"><a href="#关于mcsmanager" class="headerlink" title="关于mcsmanager"></a>关于<a href="https://mcsmanager.com/">mcsmanager</a></h3><p>你可以用 <code>mcsmanager</code>来托管你的机器人，不需要链接服务器也可以操作机器人。</p><h5 id="1-下载-mcsmanager"><a href="#1-下载-mcsmanager" class="headerlink" title="1.下载 mcsmanager"></a>1.下载 <code>mcsmanager</code></h5><p>前往<a href="https://mcsmanager.com/">mcsmanager官网</a></p><p>点击立即下载 - 选择windows版本下载</p><p>下载完成解压，运行 <code>MCSManager-启动器.exe</code></p><p>随后点击 <code>启动后台程序</code></p><p>点击 <code>访问面板</code></p><p><img src="https://i.328888.xyz/2023/04/09/iRTZ9H.png" alt="启动面板"></p><h5 id="2-添加实例"><a href="#2-添加实例" class="headerlink" title="2.添加实例"></a>2.添加实例</h5><p>点击 <code>访问面板</code> 后会面板</p><p>初次打开面板会让你创建账户密码。</p><p>选择 <code>应用实例</code></p><p>点击 <code>新建实例</code></p><p><img src="https://i.328888.xyz/2023/04/09/iRTyhC.png"></p><p>选择 <code>其他游戏服务端</code></p><p>选择 <code>无需选择或已存在文件</code></p><p><img src="https://i.328888.xyz/2023/04/09/iRTlAN.png"></p><p><code>Redis</code>配置</p><p><img src="https://i.328888.xyz/2023/04/09/iRTOZb.png"></p><p><code>Miao-Yunzai</code>配置</p><p><img src="https://i.328888.xyz/2023/04/09/iRTbHq.png"></p><p><code>go-cqhttp</code>配置</p><p><img src="https://i.328888.xyz/2023/04/09/iRTmrp.png"></p><p><code>ComWeChatBotClient</code>配置</p><p><img src="https://i.328888.xyz/2023/04/09/iRTp5U.png"></p><p>配置完成后，我们需要去控制台配置事件任务并开启实例。</p><p><img src="https://i.328888.xyz/2023/04/09/iRTxzy.png"></p><p>把 <code>自动重启</code>和 <code>自动启动</code>打开。</p><p>你还可以自己设置计划任务，自行探索。</p><p>如果你需要在公网访问面板，请在服务器放行</p><p>TCP：23333</p><p>TCP：24444</p><p>随后输入 <code>公网IP:23333</code>即可登录面板，如需要修改端口，自行百度。</p><h3 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h3><p>如果你装插件包或者插件碰到缺少依赖 <code>oicq</code>。<br>在该插件或者插件包的根目录，打开所有JS文件，搜索其中的 <code>import &#123; segment &#125; from &quot;oicq&quot;</code>，全部删掉！</p><p>由于作者刚适配，可能会有许多bug，不过不影响使用。</p><p>如果教程有问题，可通过频道联系 <code>Zyy.小钰 </code><a href="https://pd.qq.com/s/6mkgksvwm">点击加入频道</a><br>事先声明，本人没有任何义务为任何人解答问题。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> yunzai </category>
          
          <category> 云崽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原神 </tag>
            
            <tag> 云崽 </tag>
            
            <tag> yunzai </tag>
            
            <tag> 群机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL主从复制</title>
      <link href="/2023/04/09/76/"/>
      <url>/2023/04/09/76/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL主从复制"><a href="#【数据库系列教程】MySQL主从复制" class="headerlink" title="【数据库系列教程】MySQL主从复制"></a>【数据库系列教程】MySQL主从复制</h1><h2 id="一、主从复制"><a href="#一、主从复制" class="headerlink" title="一、主从复制"></a>一、主从复制</h2><h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h3><blockquote><p><code>Master</code>服务器将写操作保存到二进制日志，通过网络将事件发送给<code>slave</code>服务器；<br><code>slave</code>服务器产生<code>I/O thread线程</code>接收二进制日志事件，并将该事件写入到本地的中继日志<code>relay log</code>，同时产生<code>SQL thread</code>线程从中继日志中读取操作执行操作，确保数据同步。</p></blockquote><p><img src="https://www.wsjj.top/upload/2023/04/slave1.png" alt="slave1"></p><h4 id="核心关注点"><a href="#核心关注点" class="headerlink" title="核心关注点:"></a>核心关注点:</h4><ul><li>数据同步</li><li>复制延迟时间</li></ul><h4 id="实现流程："><a href="#实现流程：" class="headerlink" title="实现流程："></a>实现流程：</h4><ul><li>配置<code>server_id</code></li><li><code>Master服务器</code>启用二进制日志</li><li><code>Master服务器</code>要存在允许从服务器远程 连接的用户</li></ul><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2.作用"></a>2.作用</h3><ul><li>避免数据库单点故障</li><li>便于冷备份</li><li>读写分离</li><li>实现方式：<ul><li>开发代码 </li><li>数据库中间件<ul><li><code>mysql-proxy</code></li><li><code>mycat</code></li></ul></li></ul></li></ul><h3 id="3-常见主从复制架构"><a href="#3-常见主从复制架构" class="headerlink" title="3.常见主从复制架构"></a>3.常见主从复制架构</h3><ul><li>一主一从</li><li>一主多从<ul><li>实现读操作的负载均衡</li></ul></li><li>双主复制</li></ul><h3 id="4-主从复制工作方式"><a href="#4-主从复制工作方式" class="headerlink" title="4.主从复制工作方式"></a>4.主从复制工作方式</h3><ul><li>异步<ul><li>默认</li></ul></li><li>同步</li><li>半同步<ul><li>借助插件<code>google</code>公司<code>semi</code></li></ul></li></ul><h2 id="二、案列：一主一从复制"><a href="#二、案列：一主一从复制" class="headerlink" title="二、案列：一主一从复制"></a>二、案列：一主一从复制</h2><h3 id="1-准备2台虚拟机"><a href="#1-准备2台虚拟机" class="headerlink" title="1.准备2台虚拟机"></a>1.准备2台虚拟机</h3><blockquote><p>10.10.10.128<code>Master</code>服务器<br>10.10.10.130<code>Slave</code>服务器 </p></blockquote><h3 id="2-关闭防火墙和SElinux、时间同步"><a href="#2-关闭防火墙和SElinux、时间同步" class="headerlink" title="2.关闭防火墙和SElinux、时间同步"></a>2.关闭防火墙和SElinux、时间同步</h3><h3 id="3-在Master服务器配置"><a href="#3-在Master服务器配置" class="headerlink" title="3.在Master服务器配置"></a>3.在<code>Master服务器</code>配置</h3><h4 id="A-安装MySQL-5-7"><a href="#A-安装MySQL-5-7" class="headerlink" title="A.安装MySQL 5.7"></a>A.安装MySQL 5.7</h4><p><a href="https://www.wangshengjj.work/archives/65">点我跳转</a><code>MySQL</code>安装教程</p><h4 id="B-修改配置文件"><a href="#B-修改配置文件" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><p><strong>tips：如果没有<code>vim命令</code>请使用<code>vi</code>或者安装<code>yum install -y vim</code></strong></p><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;10#指定serverIDlog_bin&#x3D;master#开启二进制日志文件gtid_mode&#x3D;on#开启事务IDenforce_gtid_consistency&#x3D;true#强制GTID的一致性仅演示添加地方，配置文件并不完整，请勿删改其他<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="GTID的介绍"><a href="#GTID的介绍" class="headerlink" title="GTID的介绍"></a>GTID的介绍</h5><ul><li>仅<code>MySQL 5.6版本</code>和之后版本支持此功能</li><li><code>GTID</code>全称<code>Global Transaction Identified</code></li><li>中文：全局事务ID</li><li>GTID构成: <ul><li>server_uuid + 事务ID</li></ul></li><li>记录在<code>二进制日志</code>文件内，每一条记录的命令都会有一个<code>单独的GTID</code></li></ul><h5 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# systemctl enable --now mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改Master节点的MySQL中root用户的密码"><a href="#C-修改Master节点的MySQL中root用户的密码" class="headerlink" title="C.修改Master节点的MySQL中root用户的密码"></a>C.修改<code>Master节点</code>的<code>MySQL</code>中<code>root用户</code>的密码</h4><h5 id="查看临时密码"><a href="#查看临时密码" class="headerlink" title="查看临时密码"></a>查看<code>临时</code>密码</h5><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep -i password2023-04-07T11:00:18.621832Z 1 [Note] A temporary password is generated for root@localhost: kdt&amp;12i_Bqgh2023-04-07T11:03:24.803276Z 4 [Note] Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# mysql -uroot -pEnter password: kdt&amp;12i_Bqgh#这里填写临时密码，每个人的都不一样！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set password for &#39;root&#39;@&#39;localhost&#39; &#x3D; PASSWORD(&quot;WWW.1.com&quot;);#指定密码为WWW.1.comQuery OK, 0 rows affected, 1 warning (0.00 sec)#修改密码成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-在Master节点创建用于主从复制的用户"><a href="#D-在Master节点创建用于主从复制的用户" class="headerlink" title="D.在Master节点创建用于主从复制的用户"></a>D.在<code>Master节点</code>创建用于主从复制的<code>用户</code></h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;10.10.10.130&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>replication slave</code>授予指定权限</li><li>IP指定为<code>slave服务器</code></li><li>密码：WWW.1.com</li></ul><h3 id="4-在Slave服务器配置"><a href="#4-在Slave服务器配置" class="headerlink" title="4.在Slave服务器配置"></a>4.在<code>Slave服务器</code>配置</h3><h4 id="A-安装MySQL-5-7-1"><a href="#A-安装MySQL-5-7-1" class="headerlink" title="A.安装MySQL 5.7"></a>A.安装MySQL 5.7</h4><p><strong><a href="https://www.wangshengjj.work/archives/65">点我跳转</a><code>MySQL</code>安装教程</strong></p><h4 id="B-修改配置文件-1"><a href="#B-修改配置文件-1" class="headerlink" title="B.修改配置文件"></a>B.修改配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;13#必须和主节点Master不一样log_bin&#x3D;master#开启二进制日志(可选，方便后续主从切换)gtid_mode&#x3D;on#开启事务ID(可选，方便后续主从切换)enforce_gtid_consistency&#x3D;true#强制GTID的一致性(可选，方便后续主从切换)仅演示添加地方，配置文件并不完整，请勿删改其他<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# systemctl enable --now mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-修改Slave节点的MySQL中root用户的密码"><a href="#C-修改Slave节点的MySQL中root用户的密码" class="headerlink" title="C.修改Slave节点的MySQL中root用户的密码"></a>C.修改<code>Slave节点</code>的<code>MySQL</code>中<code>root用户</code>的密码</h4><h5 id="查看临时密码-1"><a href="#查看临时密码-1" class="headerlink" title="查看临时密码"></a>查看<code>临时</code>密码</h5><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep -i password2023-04-09T05:58:01.597896Z 1 [Note] A temporary password is generated for root@localhost: 3&lt;Oi9&lt;(L0d&#x2F;+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# mysql -uroot -pEnter password: 3&lt;Oi9&lt;(L0d&#x2F;+#这里填写临时密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set password for &#39;root&#39;@&#39;localhost&#39; &#x3D; PASSWORD(&quot;WWW.1.com&quot;);#指定密码为WWW.1.comQuery OK, 0 rows affected, 1 warning (0.00 sec)#修改密码成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-创建Slave"><a href="#D-创建Slave" class="headerlink" title="D.创建Slave"></a>D.创建Slave</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; change master to    -&gt; master_host&#x3D;&quot;10.10.10.128&quot;,#Mater服务器IP    -&gt; master_user&#x3D;&quot;repluser&quot;,#我们刚刚在Master服务器创建的用户    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,#指定的密码    -&gt; master_auto_position&#x3D;1;#自动配置，注意Master服务器必须开启GTID服务Query OK, 0 rows affected, 2 warnings (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>如果您的<code>MySQL</code>版本低于<code>5.6</code>，或者您使用的是低版本的<code>MariaDB</code>，不支持<code>GTID</code>功能的，请尝试使用下面的操作！</strong></p></blockquote><h5 id="1-前往-x3D-x3D-主节点-x3D-x3D-查看Master端的二进制日志-上面的不报错，跳过此步骤"><a href="#1-前往-x3D-x3D-主节点-x3D-x3D-查看Master端的二进制日志-上面的不报错，跳过此步骤" class="headerlink" title="1.前往&#x3D;&#x3D;主节点&#x3D;&#x3D;查看Master端的二进制日志(上面的不报错，跳过此步骤)"></a>1.前往&#x3D;&#x3D;主节点&#x3D;&#x3D;查看<code>Master</code>端的二进制日志(上面的不报错，跳过此步骤)</h5><pre class="line-numbers language-none"><code class="language-none">MariaDB [(none)]&gt; show master status\G;*************************** 1. row ***************************            File: master.000002#记住这里的二进制日志文件，每个人的不一样        Position: 10404018#记住这里的position，每个人的不一样    Binlog_Do_DB: Binlog_Ignore_DB: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-回到-x3D-x3D-从节点-x3D-x3D-创建Slave-上面的不报错，跳过此步骤"><a href="#2-回到-x3D-x3D-从节点-x3D-x3D-创建Slave-上面的不报错，跳过此步骤" class="headerlink" title="2.回到&#x3D;&#x3D;从节点&#x3D;&#x3D;创建Slave(上面的不报错，跳过此步骤)"></a>2.回到&#x3D;&#x3D;从节点&#x3D;&#x3D;创建<code>Slave</code>(上面的不报错，跳过此步骤)</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; change master to    -&gt; master_host&#x3D;&quot;10.10.10.128&quot;,#Mater服务器IP    -&gt; master_user&#x3D;&quot;repluser&quot;,#我们刚刚在Master服务器创建的用户    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,#指定的密码    -&gt; master_log_file&#x3D;&quot;master.000002&quot;,#必须和Master端查看的一致,指定二进制日志文件    -&gt; master_log_pos&#x3D;10404018;#必须和Master端看到的pos一致Query OK, 0 rows affected, 2 warnings (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="E-启动Slave并查看状态"><a href="#E-启动Slave并查看状态" class="headerlink" title="E.启动Slave并查看状态"></a>E.启动<code>Slave</code>并查看状态</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State:                   Master_Host: 10.10.10.128                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File:           Read_Master_Log_Pos: 4               Relay_Log_File: slave-relay-bin.000001                Relay_Log_Pos: 4        Relay_Master_Log_File:              Slave_IO_Running: No#看到IO线程未启动            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 0              Relay_Log_Space: 154              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 1593                Last_IO_Error: The replication receiver thread cannot start because the master has GTID_MODE &#x3D; OFF and this server has GTID_MODE &#x3D; ON.#这里报错提示Master服务器未启动GTID服务               Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 0                  Master_UUID:              Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp: 230409 14:05:52     Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set: 7c541e74-d69b-11ed-bc23-000c29d2b7fd:1                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="F-检查Master服务器GTID服务"><a href="#F-检查Master服务器GTID服务" class="headerlink" title="F.检查Master服务器GTID服务"></a>F.检查<code>Master服务器</code>GTID服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# systemctl restart mysqld#我这里因为刚才修改配置文件后，未重启服务，导致GTID服务未启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-回到Slave服务器重启Slave服务"><a href="#G-回到Slave服务器重启Slave服务" class="headerlink" title="G.回到Slave服务器重启Slave服务"></a>G.回到<code>Slave服务器</code>重启Slave服务</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; stop slave;Query OK, 0 rows affected (0.00 sec)mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="H-查看Slave状态"><a href="#H-查看Slave状态" class="headerlink" title="H.查看Slave状态"></a>H.查看<code>Slave</code>状态</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 10.10.10.128                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000001          Read_Master_Log_Pos: 154               Relay_Log_File: slave-relay-bin.000002                Relay_Log_Pos: 361        Relay_Master_Log_File: master.000001             Slave_IO_Running: Yes#可以看到IO线程成功启动            Slave_SQL_Running: Yes#SQL线程没有问题              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 568              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 10                  Master_UUID: 62379680-d533-11ed-bd42-000c298e07d7             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set: 7c541e74-d69b-11ed-bc23-000c29d2b7fd:1                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-测试主从"><a href="#5-测试主从" class="headerlink" title="5.测试主从"></a>5.测试主从</h3><h4 id="A-在Master主服务器创建库"><a href="#A-在Master主服务器创建库" class="headerlink" title="A.在Master主服务器创建库"></a>A.在<code>Master主服务器</code>创建库</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database A;Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-在Slave从服务器查看是否同步"><a href="#B-在Slave从服务器查看是否同步" class="headerlink" title="B.在Slave从服务器查看是否同步"></a>B.在<code>Slave从服务器</code>查看是否同步</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || A                  || mysql              || performance_schema || sys                |+--------------------+5 rows in set (0.00 sec)#可以看到成功同步过来了！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-配置只读属性"><a href="#6-配置只读属性" class="headerlink" title="6.配置只读属性"></a>6.配置只读属性</h3><p><strong>因为<code>主从关系</code>，我们不能在<code>Slave从服务器</code>进行<code>写改</code>操作，这样做会破坏<code>主从线程</code>(包括IO和SQL)的正常运行。</strong></p><h4 id="A-在Slave从服务器配置只读属性"><a href="#A-在Slave从服务器配置只读属性" class="headerlink" title="A.在Slave从服务器配置只读属性"></a>A.在<code>Slave从服务器</code>配置只读属性</h4><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;13read_only&#x3D;1#启用只读属性log_bin&#x3D;mastergtid_mode&#x3D;onenforce_gtid_consistency&#x3D;true仅演示添加地方，配置文件并不完整，请勿删改其他<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-重启MySQL服务"><a href="#B-重启MySQL服务" class="headerlink" title="B.重启MySQL服务"></a>B.重启MySQL服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、主从切换"><a href="#三、主从切换" class="headerlink" title="三、主从切换"></a>三、主从切换</h2><h3 id="1-适用场景"><a href="#1-适用场景" class="headerlink" title="1.适用场景"></a>1.适用场景</h3><p><strong>当<code>Master主节点</code>挂掉以后，可以使用<code>Slave从节点</code>，把<code>Slave从节点</code>变成<code>新的Master主节点</code>，<code>旧的Master主节点</code>变成<code>新的Slave从节点</code>。</strong></p><h3 id="2-模拟旧Master主节点挂掉"><a href="#2-模拟旧Master主节点挂掉" class="headerlink" title="2.模拟旧Master主节点挂掉"></a>2.模拟<code>旧Master主节点</code>挂掉</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# systemctl stop mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-删除旧Slave从节点的配置"><a href="#3-删除旧Slave从节点的配置" class="headerlink" title="3.删除旧Slave从节点的配置"></a>3.删除<code>旧Slave从节点</code>的配置</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; stop slave; #先停止服务mysql&gt; reset slave all; #删除旧的连接关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-修改旧Slave从节点改配置文件"><a href="#4-修改旧Slave从节点改配置文件" class="headerlink" title="4.修改旧Slave从节点改配置文件"></a>4.修改<code>旧Slave从节点</code>改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[mysqld]server_id&#x3D;13log_bin&#x3D;master#开启二进制日志gtid_mode&#x3D;on#开启事务IDenforce_gtid_consistency&#x3D;true#强制GTID的一致性仅演示添加地方，配置文件并不完整，请勿删改其他<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-在旧Slave从节点创建用户"><a href="#5-在旧Slave从节点创建用户" class="headerlink" title="5.在旧Slave从节点创建用户"></a>5.在<code>旧Slave从节点</code>创建用户</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;10.10.10.128&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Tips：创建一个授权<code>旧Master主节点</code>(新Slave从节点)登录的用户，IP地址为<code>旧Master主节点</code>。</strong></p><h3 id="6-恢复新Slave从节点-旧Master主节点-服务"><a href="#6-恢复新Slave从节点-旧Master主节点-服务" class="headerlink" title="6.恢复新Slave从节点(旧Master主节点)服务"></a>6.恢复<code>新Slave从节点</code>(旧Master主节点)服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-在新Slave从节点-旧Master主节点-添加Slave关系"><a href="#7-在新Slave从节点-旧Master主节点-添加Slave关系" class="headerlink" title="7.在新Slave从节点(旧Master主节点)添加Slave关系"></a>7.在<code>新Slave从节点</code>(旧Master主节点)添加Slave关系</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; change master to    -&gt; master_host&#x3D;&quot;10.10.10.130&quot;,#新Master主节点(旧Slave从节点)的IP    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1;Query OK, 0 rows affected, 2 warnings (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 10.10.10.130                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000004          Read_Master_Log_Pos: 194               Relay_Log_File: master-relay-bin.000005                Relay_Log_Pos: 401        Relay_Master_Log_File: master.000004             Slave_IO_Running: Yes#成功启动            Slave_SQL_Running: Yes#成功启动              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 194              Relay_Log_Space: 856              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 13                  Master_UUID: 7c541e74-d69b-11ed-bc23-000c29d2b7fd             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 7c541e74-d69b-11ed-bc23-000c29d2b7fd:1            Executed_Gtid_Set: 62379680-d533-11ed-bd42-000c298e07d7:1-2,7c541e74-d69b-11ed-bc23-000c29d2b7fd:1                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、双主复制-重要"><a href="#四、双主复制-重要" class="headerlink" title="四、双主复制(重要)"></a>四、双主复制(重要)</h2><ul><li>2台服务器<code>互为主从</code></li></ul><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1.配置"></a>1.配置</h3><ul><li><code>2台服务器</code>都要开启<code>二进制日志</code>和<code>GTID</code>，需要<code>关闭</code>只读属性</li></ul><h3 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2.创建用户"></a>2.创建用户</h3><ul><li><code>2台服务器</code>都要拥有<code>slave用户</code>用于互相登录对方数据库，都需要授权<code>replication slave</code>权限，授权<code>登录IP</code>为<code>对方IP</code>。</li><li><del>如果基于<code>单主单从</code>服务器修改</del>，需要在<code>Master主服务器</code>上创建用户，利用Slave线程<code>自动同步</code>到<code>Slave从服务器</code>上。</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;10.10.10.128&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Tips：这条数据会<code>自动同步</code>到上一个实验的<code>Slave从服务器</code>上，这就相当于我们的<code>Slave从服务器</code>已经<code>授权</code>了我们<code>Master主服务器</code>远程登录。</strong></p><h3 id="3-互相创建slave服务即可"><a href="#3-互相创建slave服务即可" class="headerlink" title="3.互相创建slave服务即可"></a>3.互相创建<code>slave服务</code>即可</h3><ul><li>双方<code>IO线程</code>和<code>SQL线程</code>都为<code>yes状态</code>就是成功</li><li>效果：<code>任意</code>一台数据库上，<code>创建</code>任意数据库或者<code>增删改数据</code>，<code>对方</code>服务器都能成功<code>同步</code>操作</li></ul><h4 id="在Master主服务器创建Slave"><a href="#在Master主服务器创建Slave" class="headerlink" title="在Master主服务器创建Slave"></a>在<code>Master主服务器</code>创建Slave</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; change master to    -&gt; master_host&#x3D;&quot;10.10.10.130&quot;,#Slave从服务器的IP    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1;Query OK, 0 rows affected, 2 warnings (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 10.10.10.130                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000004          Read_Master_Log_Pos: 194               Relay_Log_File: master-relay-bin.000005                Relay_Log_Pos: 401        Relay_Master_Log_File: master.000004             Slave_IO_Running: Yes#成功启动            Slave_SQL_Running: Yes#成功启动              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 194              Relay_Log_Space: 856              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 13                  Master_UUID: 7c541e74-d69b-11ed-bc23-000c29d2b7fd             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 7c541e74-d69b-11ed-bc23-000c29d2b7fd:1            Executed_Gtid_Set: 62379680-d533-11ed-bd42-000c298e07d7:1-2,7c541e74-d69b-11ed-bc23-000c29d2b7fd:1                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、多主单从-多源复制"><a href="#五、多主单从-多源复制" class="headerlink" title="五、多主单从(多源复制)"></a>五、多主单从(多源复制)</h2><h3 id="1-关于多源复制的介绍"><a href="#1-关于多源复制的介绍" class="headerlink" title="1.关于多源复制的介绍"></a>1.关于多源复制的介绍</h3><ul><li><code>MySQL 5.7版本</code>开始支持 </li><li>支持<code>多个主服务器</code>向<code>同一个从服务器</code>上复制数据 </li><li>通过<code>channel隧道</code>来区分不同的主服务器</li><li>master.info, relay-log.info文件中存储的信息要记录到<code>表</code>中</li></ul><p><img src="https://www.wsjj.top/upload/2023/04/slave2.png" alt="slave2"></p><p><strong>Tips：<code>多主单从</code>情况下，<code>从服务器</code>会存储<code>所有主服务器</code>的数据，<code>主服务器</code>之间的数据，不会<code>互相</code>影响</strong></p><h3 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h3><ul><li>三台虚拟机<ul><li>10.10.10.128Master1主节点</li><li>10.10.10.129Slave从节点</li><li>10.10.10.130Master2主节点</li></ul></li></ul><h3 id="3-配置2台主Master服务器"><a href="#3-配置2台主Master服务器" class="headerlink" title="3.配置2台主Master服务器"></a>3.配置2台<code>主Master服务器</code></h3><blockquote><p>如果刚才已经配置了<code>互主互从</code>关系，可以使用<code>stop slave;</code>停止服务，然后使用<code>reset slave all;</code>清除连接关系，并且执行<code>flush logs;</code>刷新一下<code>二进制日志</code>。</p></blockquote><h4 id="A-修改配置文件"><a href="#A-修改配置文件" class="headerlink" title="A.修改配置文件"></a>A.修改配置文件</h4><h5 id="Master1"><a href="#Master1" class="headerlink" title="Master1"></a>Master1</h5><pre class="line-numbers language-none"><code class="language-none">[root@master1 ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;10#这里的ID是唯一的log_bin&#x3D;master#开启二进制日志gtid_mode&#x3D;on#开启GTIDenforce_gtid_consistency&#x3D;true仅演示添加地方，配置文件并不完整，请勿删改其他<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Master2"><a href="#Master2" class="headerlink" title="Master2"></a>Master2</h5><pre class="line-numbers language-none"><code class="language-none">[root@master2 ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;13#ID是唯一的log_bin&#x3D;master#开启二进制日志gtid_mode&#x3D;on#开启GTIDenforce_gtid_consistency&#x3D;true仅演示添加地方，配置文件并不完整，请勿删改其他<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-创建Slave用户"><a href="#B-创建Slave用户" class="headerlink" title="B.创建Slave用户"></a>B.创建Slave用户</h4><h5 id="Master1-1"><a href="#Master1-1" class="headerlink" title="Master1"></a>Master1</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;10.10.10.129&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>IP地址为<code>Slave从节点</code></p></blockquote><h5 id="Master2-1"><a href="#Master2-1" class="headerlink" title="Master2"></a>Master2</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant replication slave on *.* to &#39;repluser&#39;@&#39;10.10.10.129&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>IP地址为<code>Slave从节点</code></p></blockquote><h3 id="4-配置Slave从节点"><a href="#4-配置Slave从节点" class="headerlink" title="4.配置Slave从节点"></a>4.配置Slave从节点</h3><h4 id="A-修改Slave从节点配置文件"><a href="#A-修改Slave从节点配置文件" class="headerlink" title="A.修改Slave从节点配置文件"></a>A.修改<code>Slave从节点</code>配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@slave ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]server_id&#x3D;11#ID唯一log_bin&#x3D;master#开启二进制日志(可选)gtid_mode&#x3D;on#开启GTIDenforce_gtid_consistency&#x3D;truemaster_info_repository&#x3D;TABLE#必须开启(将连接记录存到表中)relay_log_info_repository&#x3D;TABLE#必须开启(将连接记录存到表中)仅演示添加地方，配置文件并不完整，请勿删改其他<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-重启Slave从节点的服务"><a href="#B-重启Slave从节点的服务" class="headerlink" title="B.重启Slave从节点的服务"></a>B.重启<code>Slave从节点</code>的服务</h4><pre class="line-numbers language-none"><code class="language-none">[root@salve ~]# systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-在Slave从服务器上添加2个Master主服务器"><a href="#C-在Slave从服务器上添加2个Master主服务器" class="headerlink" title="C.在Slave从服务器上添加2个Master主服务器"></a>C.在<code>Slave从服务器</code>上添加2个<code>Master主服务器</code></h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; change master to    -&gt; master_host&#x3D;&quot;10.10.10.128&quot;,#Master1的IP    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1 for channel &quot;to_master01&quot;;#这里创建第一个隧道名为to_master01，这句话必须写在最后！Query OK, 0 rows affected, 2 warnings (0.00 sec)mysql&gt; change master to    -&gt; master_host&#x3D;&quot;10.10.10.130&quot;,#Master2的IP    -&gt; master_user&#x3D;&quot;repluser&quot;,    -&gt; master_password&#x3D;&quot;WWW.1.com&quot;,    -&gt; master_auto_position&#x3D;1 for channel &quot;to_master02&quot;;#这里创建第二个隧道名为to_master02，这句话必须写在最后！Query OK, 0 rows affected, 2 warnings (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><h4 id="A-启动所有隧道"><a href="#A-启动所有隧道" class="headerlink" title="A.启动所有隧道"></a>A.启动所有隧道</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-查看所有隧道状态"><a href="#B-查看所有隧道状态" class="headerlink" title="B.查看所有隧道状态"></a>B.查看所有隧道状态</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 10.10.10.128                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000002          Read_Master_Log_Pos: 736               Relay_Log_File: node1-relay-bin-to_master01.000002                Relay_Log_Pos: 361        Relay_Master_Log_File: master.000001             Slave_IO_Running: Yes            Slave_SQL_Running: No#发现SQL进程未启动              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 1062                   Last_Error: Could not execute Write_rows event on table mysql.plugin; Duplicate entry &#39;validate_password&#39; for key &#39;PRIMARY&#39;, Error_code: 1062; handler error HA_ERR_FOUND_DUPP_KEY; the event&#39;s master log master.000001, end_log_pos 421                 Skip_Counter: 0          Exec_Master_Log_Pos: 154              Relay_Log_Space: 1886              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: NULLMaster_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 1062               Last_SQL_Error: Could not execute Write_rows event on table mysql.plugin; Duplicate entry &#39;validate_password&#39; for key &#39;PRIMARY&#39;, Error_code: 1062; handler error HA_ERR_FOUND_DUPP_KEY; the event&#39;s master log master.000001, end_log_pos 421#报错主键冲突  Replicate_Ignore_Server_Ids:              Master_Server_Id: 10                  Master_UUID: 75cecbf1-d6b3-11ed-a170-000c298e07d7             Master_Info_File: mysql.slave_master_info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State:            Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp: 230409 16:55:12               Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 75cecbf1-d6b3-11ed-a170-000c298e07d7:1-3            Executed_Gtid_Set: 0b8ae544-d534-11ed-8391-000c290f55d2:1-2,6473a5bb-d6b3-11ed-862c-000c29d2b7fd:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name: to_master01           Master_TLS_Version: *************************** 2. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 10.10.10.130                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000002          Read_Master_Log_Pos: 696               Relay_Log_File: node1-relay-bin-to_master02.000002                Relay_Log_Pos: 903        Relay_Master_Log_File: master.000002             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 696              Relay_Log_Space: 1122              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 13                  Master_UUID: 6473a5bb-d6b3-11ed-862c-000c29d2b7fd             Master_Info_File: mysql.slave_master_info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 6473a5bb-d6b3-11ed-862c-000c29d2b7fd:1-2            Executed_Gtid_Set: 0b8ae544-d534-11ed-8391-000c290f55d2:1-2,6473a5bb-d6b3-11ed-862c-000c29d2b7fd:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name: to_master02           Master_TLS_Version: 2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-解决to-master01隧道报错"><a href="#6-解决to-master01隧道报错" class="headerlink" title="6.解决to_master01隧道报错"></a>6.解决<code>to_master01</code>隧道报错</h3><blockquote><p>报错原因：<code>主键</code>冲突。<br>解决方法：找到冲突的<code>GTID</code>，然后跳过即可</p></blockquote><h4 id="A-先停止Salve"><a href="#A-先停止Salve" class="headerlink" title="A.先停止Salve"></a>A.先停止Salve</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt;stop slave;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="B-查找GTID点"><a href="#B-查找GTID点" class="headerlink" title="B.查找GTID点"></a>B.查找GTID点</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from performance_schema.replication_applier_status_by_worker where LAST_ERROR_NUMBER&#x3D;1062\G;*************************** 1. row ***************************         CHANNEL_NAME: to_master01            WORKER_ID: 0            THREAD_ID: NULL        SERVICE_STATE: OFFLAST_SEEN_TRANSACTION: 75cecbf1-d6b3-11ed-a170-000c298e07d7:1#得到我们GTID跳报错地址    LAST_ERROR_NUMBER: 1062   LAST_ERROR_MESSAGE: Could not execute Write_rows event on table mysql.plugin; Duplicate entry &#39;validate_password&#39; for key &#39;PRIMARY&#39;, Error_code: 1062; handler error HA_ERR_FOUND_DUPP_KEY; the event&#39;s master log master.000001, end_log_pos 421 LAST_ERROR_TIMESTAMP: 2023-04-09 17:30:431 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>LAST_ERROR_NUMBER&#x3D;1062，<code>1062</code>为上一句执行<code>show slave status\G;</code>中<code>Last_SQL_Errno: 1062</code>的值(每个人都不一样)</p></blockquote><h4 id="C-跳过报错GTID点"><a href="#C-跳过报错GTID点" class="headerlink" title="C.跳过报错GTID点"></a>C.跳过报错GTID点</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set @@session.gtid_next&#x3D;&#39;75cecbf1-d6b3-11ed-a170-000c298e07d7:1&#39;;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; begin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; commit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set @@session.gtid_next&#x3D;automatic; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-启动Slave"><a href="#D-启动Slave" class="headerlink" title="D.启动Slave"></a>D.启动<code>Slave</code></h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; start slave;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-检查报错是否解决"><a href="#E-检查报错是否解决" class="headerlink" title="E.检查报错是否解决"></a>E.检查报错是否解决</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status\G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 10.10.10.128                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000002          Read_Master_Log_Pos: 889               Relay_Log_File: node1-relay-bin-to_master01.000005                Relay_Log_Pos: 445        Relay_Master_Log_File: master.000002             Slave_IO_Running: Yes#正常运行            Slave_SQL_Running: Yes#正常运行              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 889              Relay_Log_Space: 955              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 10                  Master_UUID: 75cecbf1-d6b3-11ed-a170-000c298e07d7             Master_Info_File: mysql.slave_master_info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 75cecbf1-d6b3-11ed-a170-000c298e07d7:1-4            Executed_Gtid_Set: 6473a5bb-d6b3-11ed-862c-000c29d2b7fd:1-3,75cecbf1-d6b3-11ed-a170-000c298e07d7:1-4,e3eb4ef0-d6b7-11ed-b7ad-000c290f55d2:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name: to_master01           Master_TLS_Version: *************************** 2. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 10.10.10.130                  Master_User: repluser                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: master.000002          Read_Master_Log_Pos: 846               Relay_Log_File: node1-relay-bin-to_master02.000004                Relay_Log_Pos: 445        Relay_Master_Log_File: master.000002             Slave_IO_Running: Yes#正常运行            Slave_SQL_Running: Yes#正常运行              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 846              Relay_Log_Space: 955              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 13                  Master_UUID: 6473a5bb-d6b3-11ed-862c-000c29d2b7fd             Master_Info_File: mysql.slave_master_info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set: 6473a5bb-d6b3-11ed-862c-000c29d2b7fd:1-3            Executed_Gtid_Set: 6473a5bb-d6b3-11ed-862c-000c29d2b7fd:1-3,75cecbf1-d6b3-11ed-a170-000c298e07d7:1-4,e3eb4ef0-d6b7-11ed-b7ad-000c290f55d2:1-2                Auto_Position: 1         Replicate_Rewrite_DB:                  Channel_Name: to_master02           Master_TLS_Version: 2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> mysql基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL备份与恢复</title>
      <link href="/2023/04/05/75/"/>
      <url>/2023/04/05/75/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL备份与恢复"><a href="#【数据库系列教程】MySQL备份与恢复" class="headerlink" title="【数据库系列教程】MySQL备份与恢复"></a>【数据库系列教程】MySQL备份与恢复</h1><h2 id="一、备份类型和工具"><a href="#一、备份类型和工具" class="headerlink" title="一、备份类型和工具"></a>一、备份类型和工具</h2><h3 id="1-根据服务是否在线"><a href="#1-根据服务是否在线" class="headerlink" title="1.根据服务是否在线"></a>1.根据服务是否在线</h3><ul><li>热备份<ul><li>在备份的过程，可以继续执行数据的读写操作 </li><li>服务持续运行的状态</li></ul></li><li>温备份<ul><li>在备份的过程，只允许读操作、不允许写操作</li><li>锁表</li></ul></li><li>冷备份<ul><li>停止数据库服务、备份数据</li><li>影响业务运行</li></ul></li></ul><h3 id="2-根据备份的数据量大小"><a href="#2-根据备份的数据量大小" class="headerlink" title="2.根据备份的数据量大小"></a>2.根据备份的数据量大小</h3><ul><li>完全备份<ul><li>每次备份，备份所有数据</li></ul></li><li>增量备份<ul><li>仅备份上一次完全备份后变化的数据</li><li>仅备份上一次增量备份后变化的数据</li></ul></li><li>差异备份 <ul><li>仅备份上一次完全备份后变化的数据</li></ul></li></ul><h4 id="常用的备份策略"><a href="#常用的备份策略" class="headerlink" title="常用的备份策略"></a>常用的备份策略</h4><blockquote><p>完全 + 增量<br>完全 + 差异 </p></blockquote><h3 id="3-根据备份的结果"><a href="#3-根据备份的结果" class="headerlink" title="3.根据备份的结果"></a>3.根据备份的结果</h3><ul><li>逻辑备份<ul><li>将数据库执行的写操作转换成SQL语句，保存到文件中</li><li>.sql</li><li>备份工具<ul><li>mysqldump</li></ul></li></ul></li><li>物理备份<ul><li>直接拷贝数据文件</li><li>开源备份工具<ul><li>xtrabackup</li></ul></li><li>官网：<a href="https://www.percona.com/">https://www.percona.com/</a></li></ul></li></ul><h3 id="4-需要备份的文件"><a href="#4-需要备份的文件" class="headerlink" title="4.需要备份的文件"></a>4.需要备份的文件</h3><ul><li>数据</li><li>二进制日志</li><li>配置文件</li></ul><h2 id="二、mysqldump工具-完全备份-逻辑备份"><a href="#二、mysqldump工具-完全备份-逻辑备份" class="headerlink" title="二、mysqldump工具(完全备份) 逻辑备份"></a>二、mysqldump工具(完全备份) 逻辑备份</h2><h3 id="1-常用选项"><a href="#1-常用选项" class="headerlink" title="1.常用选项"></a>1.常用选项</h3><ul><li>-u#用户名</li><li>-p#密码 </li><li>–all-databases#备份所有数据库</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqldump -uroot -predhat --all-databases &gt; &#x2F;tmp&#x2F;a.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="–databases-lt-数据库名称-gt-lt-数据库名称-gt-备份指定数据库"><a href="#–databases-lt-数据库名称-gt-lt-数据库名称-gt-备份指定数据库" class="headerlink" title="–databases &lt;数据库名称&gt; &lt;数据库名称&gt; #备份指定数据库"></a>–databases &lt;数据库名称&gt; &lt;数据库名称&gt; #备份指定数据库</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqldump -uroot -predhat --databases jiaowu &gt; &#x2F;tmp&#x2F;b.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="库名-表名-表名-备份单个表"><a href="#库名-表名-表名-备份单个表" class="headerlink" title="库名 表名 表名#备份单个表"></a>库名 表名 表名#备份单个表</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqldump -uroot -predhat jiaowu tutors &gt; &#x2F;tmp&#x2F;c.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h4><pre class="line-numbers language-none"><code class="language-none">root@localhost ~]# mysqldump -uroot -predhat --lock-all-tables --master-data&#x3D;2 --all-databases &gt; &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>–lock-all-tables锁表</li><li>–flush-logs执行二进制日志滚动 </li><li>–master-data&#x3D;{1|2}<ul><li>以CHANGE MASTER TO记录当前正在使用的二进制日志、最后一个事件的Position</li></ul></li></ul><h3 id="2-模拟4天操作-完全备份-增量备份"><a href="#2-模拟4天操作-完全备份-增量备份" class="headerlink" title="2.模拟4天操作 完全备份+增量备份"></a>2.模拟4天操作 完全备份+增量备份</h3><h4 id="A-备份二进制日志命令"><a href="#A-备份二进制日志命令" class="headerlink" title="A.备份二进制日志命令"></a>A.备份二进制日志命令</h4><pre class="line-numbers language-none"><code class="language-none">mysqlbinlog --start-position&#x3D;起始位置 二进制日志文件路径 &gt; 导出的文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-准备备份文件的存储点"><a href="#B-准备备份文件的存储点" class="headerlink" title="B.准备备份文件的存储点"></a>B.准备备份文件的存储点</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT | grep backup&#x2F;dev&#x2F;sdd                ext4       20G   45M   19G   1% &#x2F;mysql&#x2F;backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="C-第一天-完全备份"><a href="#C-第一天-完全备份" class="headerlink" title="C.第一天 完全备份"></a>C.第一天 完全备份</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqldump -uroot -predhat --lock-all-tables --master-data&#x3D;2 --all-databases &gt; &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="D-第二天-模拟写操作-增量备份"><a href="#D-第二天-模拟写操作-增量备份" class="headerlink" title="D.第二天 模拟写操作 增量备份"></a>D.第二天 模拟写操作 增量备份</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; delete from jiaowu.tutors where age &gt; 60;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看第一天完整备份记录的最后一个Position-ID"><a href="#查看第一天完整备份记录的最后一个Position-ID" class="headerlink" title="查看第一天完整备份记录的最后一个Position ID"></a>查看第一天完整备份记录的最后一个Position ID</h5><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql | head -n 30-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;master.000003&#39;, MASTER_LOG_POS&#x3D;12644;#注意后面这个ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="开始第二天的增量备份"><a href="#开始第二天的增量备份" class="headerlink" title="开始第二天的增量备份"></a>开始第二天的增量备份</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqlbinlog --start-position&#x3D;12644  &#x2F;mysql&#x2F;log&#x2F;master.000003 &gt; &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="E-模拟第三天的写操作-增量备份"><a href="#E-模拟第三天的写操作-增量备份" class="headerlink" title="E.模拟第三天的写操作 增量备份"></a>E.模拟第三天的写操作 增量备份</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; insert into jiaowu.tutors(Tname) values(&quot;user01&quot;),(&quot;user02&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看第二天的备份，最后一个Position-ID"><a href="#查看第二天的备份，最后一个Position-ID" class="headerlink" title="查看第二天的备份，最后一个Position ID"></a>查看第二天的备份，最后一个Position ID</h5><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql#查看第二天备份的时间#230404 20:16:49 server id 10  end_log_pos 12998 CRC32 0xeb32c267 Xid &#x3D; 575#注意end_log_pos后面的ID，就是我们第三天开始备份的IDCOMMIT&#x2F;*!*&#x2F;;SET @@SESSION.GTID_NEXT&#x3D; &#39;AUTOMATIC&#39; &#x2F;* added by mysqlbinlog *&#x2F; &#x2F;*!*&#x2F;;DELIMITER ;# End of log file&#x2F;*!50003 SET COMPLETION_TYPE&#x3D;@OLD_COMPLETION_TYPE*&#x2F;;&#x2F;*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;0*&#x2F;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="开始备份第三天的增量备份"><a href="#开始备份第三天的增量备份" class="headerlink" title="开始备份第三天的增量备份"></a>开始备份第三天的增量备份</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqlbinlog --start-position&#x3D;12998 &#x2F;mysql&#x2F;log&#x2F;master.000003 &gt; &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="F-模拟第四天的写操作"><a href="#F-模拟第四天的写操作" class="headerlink" title="F.模拟第四天的写操作"></a>F.模拟第四天的写操作</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; insert into jiaowu.tutors(Tname) values(&quot;user03&quot;),(&quot;user04&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="G-突发事件"><a href="#G-突发事件" class="headerlink" title="G.突发事件"></a>G.突发事件</h4><p><strong>第四天在我们没有备份之前，数据库坏掉了！！！</strong></p><h5 id="模拟数据库坏掉并且数据全部丢失"><a href="#模拟数据库坏掉并且数据全部丢失" class="headerlink" title="模拟数据库坏掉并且数据全部丢失"></a>模拟数据库坏掉并且数据全部丢失</h5><pre class="line-numbers language-none"><code class="language-none"># systemctl stop mysqld# rm -rf &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;* <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="H-恢复数据"><a href="#H-恢复数据" class="headerlink" title="H.恢复数据"></a>H.恢复数据</h4><h5 id="a-恢复数据库运行"><a href="#a-恢复数据库运行" class="headerlink" title="a.恢复数据库运行"></a>a.恢复数据库运行</h5><pre class="line-numbers language-none"><code class="language-none"># systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="b-修改root密码"><a href="#b-修改root密码" class="headerlink" title="b.修改root密码"></a>b.修改root密码</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep -i password &#x2F;var&#x2F;log&#x2F;mysqld.log#获取临时密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysql -uroot -p临时密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="c-临时关闭二进制日志-重要"><a href="#c-临时关闭二进制日志-重要" class="headerlink" title="c.临时关闭二进制日志(重要)"></a>c.临时关闭二进制日志(重要)</h5><p><strong>我们接下来恢复数据的命令(不关闭会导致重复操作)和修改root密码的操作，防止被二进制日志记录下来</strong></p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set sql_log_bin&#x3D;0;mysql&gt; select @@sql_log_bin;+---------------+| @@sql_log_bin |+---------------+|             0 |+---------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h6><pre class="line-numbers language-none"><code class="language-none">mysql&gt;set password for &#39;root&#39;@&#39;localhost&#39; &#x3D; PASSWORD(&quot;WWW.1.com&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="d-恢复第一天的完全备份"><a href="#d-恢复第一天的完全备份" class="headerlink" title="d.恢复第一天的完全备份"></a>d.恢复第一天的完全备份</h5><h6 id="第一种命令格式"><a href="#第一种命令格式" class="headerlink" title="第一种命令格式"></a>第一种命令格式</h6><pre class="line-numbers language-none"><code class="language-none">mysql&gt; source 备份文件名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="第二种命令格式"><a href="#第二种命令格式" class="headerlink" title="第二种命令格式"></a>第二种命令格式</h6><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p &lt; 备份文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="第一种演示-任选其一即可"><a href="#第一种演示-任选其一即可" class="headerlink" title="第一种演示(任选其一即可)"></a>第一种演示(任选其一即可)</h6><pre class="line-numbers language-none"><code class="language-none">mysql&gt; source &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql#注意日期格式每个人都不一样<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="第二种演示-任选其一即可"><a href="#第二种演示-任选其一即可" class="headerlink" title="第二种演示(任选其一即可)"></a>第二种演示(任选其一即可)</h6><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p &lt; &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="e-恢复第二天的增量备份"><a href="#e-恢复第二天的增量备份" class="headerlink" title="e.恢复第二天的增量备份"></a>e.恢复第二天的增量备份</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; source &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql#注意日期格式每个人都不一样<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="f-恢复第三天的增量备份"><a href="#f-恢复第三天的增量备份" class="headerlink" title="f.恢复第三天的增量备份"></a>f.恢复第三天的增量备份</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; source &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql#注意日期格式每个人都不一样<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; exit#退出后自动重新启用二进制日志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="g-恢复第四天的数据"><a href="#g-恢复第四天的数据" class="headerlink" title="g.恢复第四天的数据"></a>g.恢复第四天的数据</h5><p><strong>由于我们并没有备份第四天的数据，所以我们需要借助二进制日志恢复第四天数据</strong></p><h6 id="查看第三天的end-log-pos的ID"><a href="#查看第三天的end-log-pos的ID" class="headerlink" title="查看第三天的end_log_pos的ID"></a>查看第三天的end_log_pos的ID</h6><p><strong>需要查看我们第三天备份文件，最后记录的ID</strong></p><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql#查看第三天备份的时间#230404 20:16:49 server id 10  end_log_pos 13277 CRC32 0xeb32c267 Xid &#x3D; 575#注意end_log_pos后面的IDCOMMIT&#x2F;*!*&#x2F;;SET @@SESSION.GTID_NEXT&#x3D; &#39;AUTOMATIC&#39; &#x2F;* added by mysqlbinlog *&#x2F; &#x2F;*!*&#x2F;;DELIMITER ;# End of log file&#x2F;*!50003 SET COMPLETION_TYPE&#x3D;@OLD_COMPLETION_TYPE*&#x2F;;&#x2F;*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE&#x3D;0*&#x2F;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="通过二进制日志恢复第四天的数据"><a href="#通过二进制日志恢复第四天的数据" class="headerlink" title="通过二进制日志恢复第四天的数据"></a>通过二进制日志恢复第四天的数据</h6><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqlbinlog --start-position&#x3D;13277 &#x2F;mysql&#x2F;log&#x2F;master.000003 | mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>输入密码后，即可完成第四天的数据恢复</strong></p><h3 id="3-完全备份-差异备份"><a href="#3-完全备份-差异备份" class="headerlink" title="3.完全备份+差异备份"></a>3.完全备份+差异备份</h3><h4 id="完全备份步骤同上"><a href="#完全备份步骤同上" class="headerlink" title="完全备份步骤同上"></a>完全备份步骤同上</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqldump -uroot -predhat --lock-all-tables --master-data&#x3D;2 --all-databases &gt; &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看完全备份的Position-ID"><a href="#查看完全备份的Position-ID" class="headerlink" title="查看完全备份的Position ID"></a>查看完全备份的Position ID</h5><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql | head -n 30-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;master.000003&#39;, MASTER_LOG_POS&#x3D;12644;#注意后面这个ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="差异备份，每次的Position-ID永远都是第一次完全备份的最后一个Position-ID"><a href="#差异备份，每次的Position-ID永远都是第一次完全备份的最后一个Position-ID" class="headerlink" title="差异备份，每次的Position ID永远都是第一次完全备份的最后一个Position ID"></a>差异备份，每次的Position ID永远都是第一次完全备份的最后一个Position ID</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqlbinlog --start-position&#x3D;12644  &#x2F;mysql&#x2F;log&#x2F;master.000003 &gt; &#x2F;mysql&#x2F;backup&#x2F;data_$(date +%F_%T).sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="最后恢复，只需要恢复第一天的完全备份和最后一天的差异备份即可！"><a href="#最后恢复，只需要恢复第一天的完全备份和最后一天的差异备份即可！" class="headerlink" title="最后恢复，只需要恢复第一天的完全备份和最后一天的差异备份即可！"></a>最后恢复，只需要恢复第一天的完全备份和最后一天的差异备份即可！</h4>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> mysql基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL日志管理</title>
      <link href="/2023/04/05/74/"/>
      <url>/2023/04/05/74/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL日志管理"><a href="#【数据库系列教程】MySQL日志管理" class="headerlink" title="【数据库系列教程】MySQL日志管理"></a>【数据库系列教程】MySQL日志管理</h1><h2 id="一、日志类型"><a href="#一、日志类型" class="headerlink" title="一、日志类型"></a>一、日志类型</h2><ul><li>错误日志<ul><li>&#x2F;var&#x2F;log&#x2F;mysqld.log</li></ul></li><li>慢查询日志 </li><li>二进制日志 </li><li>重做日志</li><li>回滚日志</li></ul><h2 id="二、慢日志-slow-query-log"><a href="#二、慢日志-slow-query-log" class="headerlink" title="二、慢日志 slow query log"></a>二、慢日志 slow query log</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><blockquote><p>记录慢查询</p></blockquote><h3 id="2-如何定义慢查询"><a href="#2-如何定义慢查询" class="headerlink" title="2.如何定义慢查询"></a>2.如何定义慢查询</h3><blockquote><p>执行时长超过long_query_time指定的值的查询<br>默认值10s</p></blockquote><h3 id="3-启用慢查询"><a href="#3-启用慢查询" class="headerlink" title="3.启用慢查询"></a>3.启用慢查询</h3><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[mysqld]long_query_time&#x3D;10slow_query_log&#x3D;ONslow_query_log_file&#x3D;slow.log# 默认存放到数据目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-验证慢查询"><a href="#4-验证慢查询" class="headerlink" title="4.验证慢查询"></a>4.验证慢查询</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select sleep(15);+-----------+| sleep(15) |+-----------+|         0 |+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost data]# cat slow.log &#x2F;usr&#x2F;sbin&#x2F;mysqld, Version: 5.7.17-log (MySQL Community Server (GPL)). started with:Tcp port: 0  Unix socket: &#x2F;data&#x2F;mysql.sockTime                 Id Command    Argument# Time: 2021-06-02T05:50:44.216487Z# User@Host: root[root] @ localhost []  Id:     4# Query_time: 15.000596  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0SET timestamp&#x3D;1622613044;select sleep(15);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、二进制日志-binary-log-重要"><a href="#三、二进制日志-binary-log-重要" class="headerlink" title="三、二进制日志 binary log(重要)"></a>三、二进制日志 binary log(重要)</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1.作用"></a>1.作用</h3><ul><li>存储MySQL服务器产生所有写操作 </li><li>实际应用:<ul><li>即时点还原</li><li>主从复制</li></ul></li></ul><h3 id="2-启用二进制日志"><a href="#2-启用二进制日志" class="headerlink" title="2.启用二进制日志"></a>2.启用二进制日志</h3><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[mysqld]server_id&#x3D;10#ID不是唯一的，多个服务器下ID不允许重复log_bin&#x3D;master#这里的名字是什么，以后的二进制文件就是什么名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>server_id：为MySQL服务器分配唯一的ID，取值范围1–2^32<br>log_bin：启用二进制日志, 默认存放到数据目录 </p></blockquote><h3 id="3-二进制文件详细"><a href="#3-二进制文件详细" class="headerlink" title="3.二进制文件详细"></a>3.二进制文件详细</h3><h4 id="二进制文件的命名格式"><a href="#二进制文件的命名格式" class="headerlink" title="二进制文件的命名格式"></a>二进制文件的命名格式</h4><ul><li>master.xxxxxx#前面的master是我们配置文件里写的自定义名称</li><li>master.index#文本文件，记录当前服务器都有哪些二进制日志文件</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;data&#x2F;master.index .&#x2F;master.000001.&#x2F;master.000002.&#x2F;master.000003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# file &#x2F;data&#x2F;master.000001 &#x2F;data&#x2F;master.000001: MySQL replication log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-二进制日志文件格式"><a href="#4-二进制日志文件格式" class="headerlink" title="4.二进制日志文件格式"></a>4.二进制日志文件格式</h3><ul><li>起始时间</li><li>事件</li><li>终止时间</li><li>起始位置position</li><li>终止位置position<ul><li>下一个事件的起始位置，就是上一个事件的结束位置</li></ul></li></ul><h3 id="5-查看二进制文件"><a href="#5-查看二进制文件" class="headerlink" title="5.查看二进制文件"></a>5.查看二进制文件</h3><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><pre class="line-numbers language-none"><code class="language-none">mysqlbinlog 二进制文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看所有"><a href="#查看所有" class="headerlink" title="查看所有"></a>查看所有</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqlbinlog &#x2F;test&#x2F;master.000002 #每个人的都不一样<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="按照时间查看"><a href="#按照时间查看" class="headerlink" title="按照时间查看"></a>按照时间查看</h4><ul><li>–start-datetime&#x3D;#起始日期</li><li>–stop-datetime&#x3D;#截止日期</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqlbinlog --start-datetime&#x3D;&quot;2021-01-20 11:01:22&quot;  --stop-datetime&#x3D;&quot;2021-01-20 11:12:18&quot; &#x2F;test&#x2F;master.000002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="按照位置查看"><a href="#按照位置查看" class="headerlink" title="按照位置查看"></a>按照位置查看</h4><ul><li>–start-position&#x3D;#起始位置</li><li>–stop-position&#x3D;#截止位置</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysqlbinlog --start-position&#x3D;219 --stop-position&#x3D;313 &#x2F;test&#x2F;master.000002 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-查看当前正在使用的二进制文件"><a href="#6-查看当前正在使用的二进制文件" class="headerlink" title="6.查看当前正在使用的二进制文件"></a>6.查看当前正在使用的二进制文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysql -uroot -p -e &quot;show master status;&quot;+---------------+----------+--------------+------------------+-------------------+| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+---------------+----------+--------------+------------------+-------------------+| master.000004 |     6458 |              |                  |                   |+---------------+----------+--------------+------------------+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-查看日志文件大小"><a href="#7-查看日志文件大小" class="headerlink" title="7.查看日志文件大小"></a>7.查看日志文件大小</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysql -uroot -p -e &quot;show binary logs;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-查看二进制文件中的事件"><a href="#8-查看二进制文件中的事件" class="headerlink" title="8.查看二进制文件中的事件"></a>8.查看二进制文件中的事件</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show binlog events in &quot;master.000003&quot;;+---------------+-----+----------------+-----------+-------------+---------------------------------------+| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                                  |+---------------+-----+----------------+-----------+-------------+---------------------------------------+| master.000003 |   4 | Format_desc    |        10 |         123 | Server ver: 5.7.17-log, Binlog ver: 4 || master.000003 | 123 | Previous_gtids |        10 |         154 |                                       || master.000003 | 154 | Anonymous_Gtid |        10 |         219 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;  || master.000003 | 219 | Query          |        10 |         307 | create database AA                    || master.000003 | 307 | Anonymous_Gtid |        10 |         372 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;  || master.000003 | 372 | Query          |        10 |         460 | create database BB                    || master.000003 | 460 | Stop           |        10 |         483 |                                       |+---------------+-----+----------------+-----------+-------------+---------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、二进制文件滚动"><a href="#四、二进制文件滚动" class="headerlink" title="四、二进制文件滚动"></a>四、二进制文件滚动</h2><ul><li>重启mysql服务</li><li>人为操作<ul><li>mysql&gt; flush logs;</li></ul></li><li>单个文件的大小超过1GB</li></ul><h2 id="五、重做日志-redolog"><a href="#五、重做日志-redolog" class="headerlink" title="五、重做日志 redolog"></a>五、重做日志 redolog</h2><blockquote><p>redolog是<code>InnoDB</code>存储引擎独有的，它让<code>MySQL</code>拥有了崩溃恢复能力。比如<code>MySQL</code> 实例挂了或宕机了，重启时，<code>InnoDB</code>存储引擎会使用<code>redo log</code>恢复数据，保证数据的持久性与完整性。</p></blockquote><h2 id="六、回滚日志-undolog"><a href="#六、回滚日志-undolog" class="headerlink" title="六、回滚日志 undolog"></a>六、回滚日志 undolog</h2><blockquote><p>所有事务进行的修改都会先记录到这个回滚日志中，然后再执行相关的操作。如果执行过程中遇到异常的话，我们直接利用回滚日志中的信息将数据回滚到修改之前的样子即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> mysql基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL用户管理和用户权限</title>
      <link href="/2023/04/03/73/"/>
      <url>/2023/04/03/73/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL用户管理和用户权限"><a href="#【数据库系列教程】MySQL用户管理和用户权限" class="headerlink" title="【数据库系列教程】MySQL用户管理和用户权限"></a>【数据库系列教程】MySQL用户管理和用户权限</h1><h2 id="一、用户管理"><a href="#一、用户管理" class="headerlink" title="一、用户管理"></a>一、用户管理</h2><h3 id="1-用户名格式"><a href="#1-用户名格式" class="headerlink" title="1.用户名格式"></a>1.用户名格式</h3><ul><li>用户名@客户端地址</li><li>客户端地址：<ul><li>IP地址<a href="mailto:&#x61;&#x64;&#x6d;&#105;&#110;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#x31;&#46;&#x31;">&#x61;&#x64;&#x6d;&#105;&#110;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#x31;&#46;&#x31;</a> </li><li>主机名<a href="mailto:&#97;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#110;&#x6f;&#x64;&#101;&#x30;&#49;&#46;&#108;&#x69;&#110;&#117;&#x78;&#x2e;&#99;&#x6f;&#109;">&#97;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#110;&#x6f;&#x64;&#101;&#x30;&#49;&#46;&#108;&#x69;&#110;&#117;&#x78;&#x2e;&#99;&#x6f;&#109;</a></li><li>网段<a href="mailto:&#x61;&#x64;&#x6d;&#105;&#110;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#x2e;&#x31;">&#x61;&#x64;&#x6d;&#105;&#110;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#x2e;&#x31;</a>.%</li><li>所有主机admin@%</li><li>本机admin@localhost</li></ul></li></ul><h3 id="2-存储用户的表-mysql-user"><a href="#2-存储用户的表-mysql-user" class="headerlink" title="2.存储用户的表 mysql.user"></a>2.存储用户的表 mysql.user</h3><ul><li>user 用户名</li><li>host 登录地址</li><li>(5.7版本以后)authentication_string 密码</li><li>(5.6版本之前)password 密码</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select user, host, authentication_string from mysql.user;+-----------+-----------+-------------------------------------------+| user      | host      | authentication_string                     |+-----------+-----------+-------------------------------------------+| root      | localhost | *F00AFD2CA41EF081905BE7FC7051A0D3D53B49AD || mysql.sys | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |+-----------+-----------+-------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建用户-只能登录MySQL"><a href="#3-创建用户-只能登录MySQL" class="headerlink" title="3.创建用户(只能登录MySQL)"></a>3.创建用户(只能登录MySQL)</h3><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><pre class="line-numbers language-none"><code class="language-none">create user 用户名@客户端地址 identified by &#39;密码&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建只允许本机登录的MySQL用户admin"><a href="#创建只允许本机登录的MySQL用户admin" class="headerlink" title="创建只允许本机登录的MySQL用户admin"></a>创建只允许本机登录的MySQL用户admin</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create user &#39;admin&#39;@&quot;localhost&quot; identified by &quot;WWW.1.com&quot;;Query OK, 0 rows affected (0.01 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; select user,host from mysql.user;+-----------+-----------+| user      | host      |+-----------+-----------+| admin     | localhost || mysql.sys | localhost || root      | localhost |+-----------+-----------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建远程连接用户admin"><a href="#创建远程连接用户admin" class="headerlink" title="创建远程连接用户admin"></a>创建远程连接用户admin</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create user &#39;admin&#39;@&#39;192.168.140.11&#39; identified by &#39;WWW.1.com&#39;;Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;#刷新用户表信息Query OK, 0 rows affected (0.00 sec)mysql&gt; exitBye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="远程用户验证"><a href="#远程用户验证" class="headerlink" title="远程用户验证"></a>远程用户验证</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysql -uadmin -pWWW.1.com -h &lt;数据库服务器地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在数据库服务器查看都有哪些用户连接"><a href="#在数据库服务器查看都有哪些用户连接" class="headerlink" title="在数据库服务器查看都有哪些用户连接"></a>在数据库服务器查看都有哪些用户连接</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show processlist;   +--------+--------+----------------------+------+---------+------+----------+------------------+| Id     | User   | Host                 | db   | Command | Time | State    | Info             |+--------+--------+----------------------+------+---------+------+----------+------------------+| 509975 | root   | localhost            | NULL | Query   |    0 | starting | show processlist || 509976 | martin | 192.168.140.11:33616 | NULL | Sleep   |   54 |          | NULL             |+--------+--------+----------------------+------+---------+------+----------+------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建所有地址都可连接的admin用户"><a href="#创建所有地址都可连接的admin用户" class="headerlink" title="创建所有地址都可连接的admin用户"></a>创建所有地址都可连接的admin用户</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create user &#39;admin&#39;@&#39;%&#39; identified by &#39;WWW.1.com&#39;;#%为通配符Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-删除用户"><a href="#4-删除用户" class="headerlink" title="4.删除用户"></a>4.删除用户</h3><h4 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h4><pre class="line-numbers language-none"><code class="language-none">drop user 用户名@客户端地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop user &#39;admin&#39;@&#39;localhost&#39;;Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-修改用户密码"><a href="#5-修改用户密码" class="headerlink" title="5.修改用户密码"></a>5.修改用户密码</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><pre class="line-numbers language-none"><code class="language-none">set password for 用户@地址 &#x3D; PASSWORD(&quot;密码&quot;);#PASSWORD()是MySQL自带的函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set password for &#39;admin&#39;@&#39;192.168.140.11&#39; &#x3D; PASSWORD(&quot;WWW.2.com&quot;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><pre class="line-numbers language-none"><code class="language-none">update 库.表 set authentication_string&#x3D;PASSWORD(&quot;密码&quot;) where 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; update mysql.user set authentication_string&#x3D;PASSWORD(&quot;WWW.3.com&quot;) where user&#x3D;&quot;admin&quot; and host&#x3D;&quot;192.168.140.11&quot;;Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 1mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法3-一般用于重置root密码"><a href="#方法3-一般用于重置root密码" class="headerlink" title="方法3(一般用于重置root密码)"></a>方法3(一般用于重置root密码)</h4><h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;my.cnf[mysqld]#添加以下内容skip-grant-tables&#x3D;1#跳过授权表# systemctl restart mysqld <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="回到Mysql使用update更新密码"><a href="#回到Mysql使用update更新密码" class="headerlink" title="回到Mysql使用update更新密码"></a>回到Mysql使用update更新密码</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; update mysql.user set authentication_string&#x3D;PASSWORD(&quot;WWW.1.com&quot;) where user&#x3D;&quot;root&quot; and host&#x3D;&quot;localhost&quot;;Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 1mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除刚刚配置文件添加的字段"><a href="#删除刚刚配置文件添加的字段" class="headerlink" title="删除刚刚配置文件添加的字段"></a>删除刚刚配置文件添加的字段</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="重启MySQl服务"><a href="#重启MySQl服务" class="headerlink" title="重启MySQl服务"></a>重启MySQl服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、用户权限管理"><a href="#二、用户权限管理" class="headerlink" title="二、用户权限管理"></a>二、用户权限管理</h2><h3 id="1-查看用户权限"><a href="#1-查看用户权限" class="headerlink" title="1.查看用户权限"></a>1.查看用户权限</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show grants for &#39;admin&#39;@&#39;192.168.140.11&#39;;+------------------------------------------------+| Grants for admin@192.168.140.11                |+------------------------------------------------+| GRANT USAGE ON *.* TO &#39;admin&#39;@&#39;192.168.140.11&#39; |+------------------------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>USAGE：默认最小的权限 </p></blockquote><h3 id="2-用户授权"><a href="#2-用户授权" class="headerlink" title="2.用户授权"></a>2.用户授权</h3><ul><li>几个基本权限：<ul><li>create 创建</li><li>drop 删除</li><li>select 查询</li><li>update 更新</li><li>delete 删除</li><li>insert 插入</li></ul></li><li>all 所有权限</li></ul><h4 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h4><pre class="line-numbers language-none"><code class="language-none">grant 权限,权限,权限 on 库名.表名 to 用户名 [identified by &quot;密码&quot;]#[]内容为可写可不写#在MySQL5.x版本可以使用上述格式命令直接创建用户，并且授权权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; grant select on jiaowu.tutors to &#39;admin&#39;@&#39;192.168.140.11&#39;;mysql&gt; flush privileges;mysql&gt; show grants for &#39;admin&#39;@&#39;192.168.140.11&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-撤销权限-回收权限"><a href="#3-撤销权限-回收权限" class="headerlink" title="3.撤销权限(回收权限)"></a>3.撤销权限(回收权限)</h3><h4 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h4><pre class="line-numbers language-none"><code class="language-none">revoke delete on 库.表 from 用户@地址;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; revoke delete on jiaowu.students from &#39;admin&#39;@&quot;192.168.140.1&quot;;Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; show grants for &#39;admin&#39;@&quot;192.168.140.1&quot;;+----------------------------------------------------------------------+| Grants for admin@192.168.140.1                                       |+----------------------------------------------------------------------+| GRANT USAGE ON *.* TO &#39;admin&#39;@&#39;192.168.140.1&#39;                        || GRANT SELECT, DELETE ON &#96;jiaowu&#96;.&#96;tutors&#96; TO &#39;admin&#39;@&#39;192.168.140.1&#39; || GRANT SELECT ON &#96;jiaowu&#96;.&#96;students&#96; TO &#39;admin&#39;@&#39;192.168.140.1&#39;       |+----------------------------------------------------------------------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> mysql基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL视图、事务、索引</title>
      <link href="/2023/04/03/72/"/>
      <url>/2023/04/03/72/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL视图、事务、索引"><a href="#【数据库系列教程】MySQL视图、事务、索引" class="headerlink" title="【数据库系列教程】MySQL视图、事务、索引"></a>【数据库系列教程】MySQL视图、事务、索引</h1><p>本期教程为<a href="https://www.wangshengjj.work/archives/67">Mysql数据管理操作</a>后期教程</p><h2 id="一、视图-View"><a href="#一、视图-View" class="headerlink" title="一、视图 (View)"></a>一、视图 (View)</h2><ul><li>临时表、虚表 </li><li>针对多表查询</li><li>作用<ul><li>通过视图可以将经常用到的多表查询结果进行保存，下次再使用数据时，直接从视图中查询数据即可</li><li>“对于频繁更新的数据，不适合创建视图”</li></ul></li></ul><h3 id="1-创建视图"><a href="#1-创建视图" class="headerlink" title="1.创建视图"></a>1.创建视图</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-none"><code class="language-none">create view 视图名称 as 查询语句;CREATE VIEW view_name AS SELECT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; CREATE VIEW stu_teacher    -&gt; AS    -&gt; SELECT students.Name, students.Age, tutors.Tname FROM students, tutors WHERE students.TID &#x3D; tutors.TID;Query OK, 0 rows affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SHOW TABLES;+------------------+| Tables_in_jiaowu |+------------------+| courses          || scores           || stu_teacher      || students         || tutors           |+------------------+mysql&gt; SELECT * FROM stu_teacher;+-----------+------+--------------+| Name      | Age  | Tname        |+-----------+------+--------------+| GuoJing   |   42 | Miejueshitai || YangGuo   |   17 | HongQigong   || DingDian  |   25 | Jinlunfawang || HuFei     |   31 | YiDeng       || HuangRong |   16 | NingZhongze  |+-----------+------+--------------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-删除视图"><a href="#2-删除视图" class="headerlink" title="2.删除视图"></a>2.删除视图</h3><pre class="line-numbers language-none"><code class="language-none">drop view 视图名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; DROP VIEW stu_teacher;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、事务-Transaction-重要"><a href="#二、事务-Transaction-重要" class="headerlink" title="二、事务 Transaction(重要)"></a>二、事务 Transaction(重要)</h2><ul><li>针对修改操作</li><li>保证修改操作要么同时成功执行、回滚</li></ul><h3 id="1-启动事务"><a href="#1-启动事务" class="headerlink" title="1.启动事务"></a>1.启动事务</h3><pre class="line-numbers language-none"><code class="language-none">&gt; start transaction;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="可以在事务模式下，进行创建删除修改等操作"><a href="#可以在事务模式下，进行创建删除修改等操作" class="headerlink" title="可以在事务模式下，进行创建删除修改等操作"></a>可以在事务模式下，进行创建删除修改等操作</h4><h3 id="2-提交事务"><a href="#2-提交事务" class="headerlink" title="2.提交事务"></a>2.提交事务</h3><ul><li>提交事务以后会自动保存，并且自动退出事务</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt; commit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-回滚事务"><a href="#3-回滚事务" class="headerlink" title="3.回滚事务"></a>3.回滚事务</h3><ul><li>提交回滚以后，不会对原数据进行修改，但会自动退出事务</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt; rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、索引-Index"><a href="#三、索引-Index" class="headerlink" title="三、索引 Index"></a>三、索引 Index</h2><h3 id="1-什么是索引"><a href="#1-什么是索引" class="headerlink" title="1.什么是索引"></a>1.什么是索引</h3><ul><li>建立合适的索引，优化、提高查询速度</li><li>针对数据表</li><li>不推荐使用经常变化的数据字段建立索引</li><li>特点：默认会使用主键字段生成索引</li></ul><h3 id="2-查看索引"><a href="#2-查看索引" class="headerlink" title="2.查看索引"></a>2.查看索引</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show index from Account;+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| Table   | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| Account |          0 | PRIMARY  |            1 | id          | A         |           5 |     NULL | NULL   |      | BTREE      |         |               |+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建索引"><a href="#3-创建索引" class="headerlink" title="3.创建索引"></a>3.创建索引</h3><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><pre class="line-numbers language-none"><code class="language-none">create index 自定义索引名 on 表名(字段, 字段);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; CREATE INDEX username_key ON Account(username);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-删除索引"><a href="#4-删除索引" class="headerlink" title="4.删除索引"></a>4.删除索引</h3><h4 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h4><pre class="line-numbers language-none"><code class="language-none">drop index 索引名 on 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; DROP INDEX username_key ON Account;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-查询分析器-explain"><a href="#5-查询分析器-explain" class="headerlink" title="5.查询分析器 explain"></a>5.查询分析器 explain</h3><h4 id="无索引情况"><a href="#无索引情况" class="headerlink" title="无索引情况"></a>无索引情况</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; EXPLAIN SELECT * FROM sp WHERE price&#x3D;4000;+----+-------------+-------+------------+------+---------------+------+---------+------+-------------------------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows                    | filtered | Extra       |+----+-------------+-------+------------+------+---------------+------+---------+------+-------------------------+----------+-------------+|  1 | SIMPLE      | sp    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 490028 #这里查询了49万次|    10.00 | Using where |+----+-------------+-------+------------+------+---------------+------+---------+------+-------------------------+----------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有索引情况"><a href="#有索引情况" class="headerlink" title="有索引情况"></a>有索引情况</h4><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><pre class="line-numbers language-none"><code class="language-none">mysql&gt; CREATE INDEX price_key ON sp(price);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; EXPLAIN SELECT * FROM sp WHERE price&#x3D;4000;+----+-------------+-------+------------+------+---------------+----------------------+---------+-------+-------------------+----------+-------+| id | select_type | table | partitions | type | possible_keys | key                  | key_len | ref   | rows              | filtered | Extra |+----+-------------+-------+------------+------+---------------+----------------------+---------+-------+-------------------+----------+-------+|  1 | SIMPLE      | sp    | NULL       | ref  | price_key     | price_key #使用了索引| 5       | const |   40 #只查询了40次|   100.00 | NULL  |+----+-------------+-------+------------+------+---------------+----------------------+---------+-------+-------------------+----------+-------+1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux基础服务 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】httpd(Apache)配置https访问</title>
      <link href="/2023/04/02/71/"/>
      <url>/2023/04/02/71/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】httpd-Apache-配置https访问"><a href="#【Linux基础服务教程】httpd-Apache-配置https访问" class="headerlink" title="【Linux基础服务教程】httpd(Apache)配置https访问"></a>【Linux基础服务教程】httpd(Apache)配置https访问</h1><h2 id="一、网站传输协议"><a href="#一、网站传输协议" class="headerlink" title="一、网站传输协议"></a>一、网站传输协议</h2><ul><li>http<ul><li>80&#x2F;tcp</li><li>数据以明文的方式传输</li></ul></li><li>https<ul><li>443&#x2F;tcp</li><li>数据以密文的方式传输</li></ul></li></ul><h3 id="1-私有CA和公有CA"><a href="#1-私有CA和公有CA" class="headerlink" title="1.私有CA和公有CA"></a>1.私有CA和公有CA</h3><ul><li>CA是一个证书颁发机构，私有CA代表本地自己搭建的CA服务器，而公有CA属于互联网公认的CA认证机构</li></ul><h3 id="2-CA申请SSL证书流程"><a href="#2-CA申请SSL证书流程" class="headerlink" title="2.CA申请SSL证书流程"></a>2.CA申请SSL证书流程</h3><ol><li>电商服务器生成证书申请【.csr文件】， 同时将电商服务器的公钥放入证书申请；将证书申请发送给CA</li><li>CA审批信息, 通过后CA会使用自己的私钥进行签名；相当于签署证书【.crt】</li><li>客户端访问电商服务器时，服务器会将证书信息发送给客户端 </li><li>客户端通过CA的公钥验证证书，验证通过后可获取电商服务器的公钥</li><li>客户端选取对称算法、密钥，使用公钥加密，发送给服务器、服务器解密 </li><li>进行真实数据交互</li></ol><p><img src="https://www.wangshengjj.work/upload/2023/04/https1.png" alt="https1"></p><h2 id="二、配置公有CA颁发的SSL证书"><a href="#二、配置公有CA颁发的SSL证书" class="headerlink" title="二、配置公有CA颁发的SSL证书"></a>二、配置公有CA颁发的SSL证书</h2><h3 id="1-域名注册"><a href="#1-域名注册" class="headerlink" title="1.域名注册"></a>1.域名注册</h3><p><strong>需要提前准备一个域名！！！</strong></p><p><strong>个人推荐的几个域名注册机构：<a href="https://wanwang.aliyun.com/">阿里云万网</a>、<a href="https://buy.cloud.tencent.com/domain">腾讯云</a>、<a href="https://www.cloudflare-cn.com/products/registrar/">cloudflare</a></strong></p><h3 id="2-申请SSL证书"><a href="#2-申请SSL证书" class="headerlink" title="2.申请SSL证书"></a>2.申请SSL证书</h3><p><strong>我这里拿腾讯云做演示</strong></p><p><a href="https://console.cloud.tencent.com/ssl">腾讯云SSL证书控制台</a></p><p><strong>普通个人用户可以选择免费的证书</strong></p><p><strong>缺点：只支持主域名和www域名</strong></p><p><img src="https://www.wangshengjj.work/upload/2023/04/https2.png" alt="https2"></p><p><strong>或者选择购买证书</strong></p><p><strong>个人推荐购买泛域名证书</strong></p><p><img src="https://www.wangshengjj.work/upload/2023/04/https3.png" alt="https3"></p><p><strong>更或者使用Let’s Encrypt的免费证书</strong></p><p><strong>虽然只有3个月，但是支持自主续签</strong></p><p><img src="https://www.wangshengjj.work/upload/2023/04/https4.png" alt="https4"></p><h3 id="3-下载证书"><a href="#3-下载证书" class="headerlink" title="3.下载证书"></a>3.下载证书</h3><ul><li>目前学的是Apache，所以我们选择Apache证书</li><li>如果您使用的是其他类型服务器，比如Nginx请选择下载相应的证书</li></ul><p><img src="https://www.wangshengjj.work/upload/2023/04/https5.png" alt="https5"></p><h3 id="4-配置https访问"><a href="#4-配置https访问" class="headerlink" title="4.配置https访问"></a>4.配置https访问</h3><p><strong>上一期教程<a href="https://www.wangshengjj.work/archives/70">虚拟主机</a></strong></p><h4 id="A-安装mod-ssl模块"><a href="#A-安装mod-ssl模块" class="headerlink" title="A.安装mod_ssl模块"></a>A.安装mod_ssl模块</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y mod_ssl <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-配置基于https的虚拟主机"><a href="#B-配置基于https的虚拟主机" class="headerlink" title="B.配置基于https的虚拟主机"></a>B.配置基于https的虚拟主机</h4><h5 id="a-创建网页目录"><a href="#a-创建网页目录" class="headerlink" title="a.创建网页目录"></a>a.创建网页目录</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir -p &#x2F;www&#x2F;wwwroot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="b-创建测试文件"><a href="#b-创建测试文件" class="headerlink" title="b.创建测试文件"></a>b.创建测试文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;www&#x2F;wwwroot&#x2F;index.html&lt;h1&gt;vivo50.wangshengjj.work&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="c-创建证书文件存放文件夹"><a href="#c-创建证书文件存放文件夹" class="headerlink" title="c.创建证书文件存放文件夹"></a>c.创建证书文件存放文件夹</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;www&#x2F;ssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="d-上传证书文件"><a href="#d-上传证书文件" class="headerlink" title="d.上传证书文件"></a>d.上传证书文件</h5><p><strong>上传过程省略</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls &#x2F;www&#x2F;sslrui.crt  rui.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="e-编辑配置文件"><a href="#e-编辑配置文件" class="headerlink" title="e.编辑配置文件"></a>e.编辑配置文件</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl.conf ....................上面的省略，不代表配置文件只有以下这些内容&lt;VirtualHost _default_:443&gt;# General setup for the virtual host, inherited from global configurationDocumentRoot &quot;&#x2F;www&#x2F;wwwroot&quot;#网页目录ServerName vivo50.wangshengjj.work:443#域名SSLCertificateFile &#x2F;www&#x2F;ssl&#x2F;rui.crt#需要指定证书位置SSLCertificateKeyFile &#x2F;www&#x2F;ssl&#x2F;rui.key#需要指定秘钥文件位置&lt;Directory &quot;&#x2F;www&#x2F;wwwroot&quot;&gt;    Require all granted#给网页目录权限&lt;&#x2F;Directory&gt;&lt;&#x2F;VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-重启httpd-Apache-服务"><a href="#f-重启httpd-Apache-服务" class="headerlink" title="f.重启httpd(Apache)服务"></a>f.重启httpd(Apache)服务</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="C-测试"><a href="#C-测试" class="headerlink" title="C.测试"></a>C.测试</h4><p><img src="https://www.wangshengjj.work/upload/2023/04/https6.png" alt="https6"></p><h2 id="三、配置https自动跳转"><a href="#三、配置https自动跳转" class="headerlink" title="三、配置https自动跳转"></a>三、配置https自动跳转</h2><p><strong>自行把下面内容加入到http配置文件即可</strong></p><pre class="line-numbers language-none"><code class="language-none">RewriteEngine OnRewriteCond %&#123;HTTP_HOST&#125; www.linux.com [NC]RewriteRule ^&#x2F;   https:&#x2F;&#x2F;www.linux.com [L]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>%{HTTP_HOST}<ul><li>调用客户端所访问的网站主机名</li></ul></li><li>[NC]<ul><li>忽略大小写</li></ul></li><li>[L]<ul><li>立即响应</li></ul></li></ul><h2 id="四、单服务器多https网页"><a href="#四、单服务器多https网页" class="headerlink" title="四、单服务器多https网页"></a>四、单服务器多https网页</h2><ul><li>复制ssl.conf文件改名即可</li><li>注意：需要删除&lt;VirtualHost _default_:443&gt;之前的所有内容</li><li>原因：只需一个配置文件拥有配置即可</li></ul><h2 id="五、配置私有CA颁发的SSL证书"><a href="#五、配置私有CA颁发的SSL证书" class="headerlink" title="五、配置私有CA颁发的SSL证书"></a>五、配置私有CA颁发的SSL证书</h2><h3 id="1-创建CA服务器需要的库文件"><a href="#1-创建CA服务器需要的库文件" class="headerlink" title="1.创建CA服务器需要的库文件"></a>1.创建CA服务器需要的库文件</h3><p><strong>自行准备第二台虚拟机当做CA服务器</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# touch &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;index.txt[root@ca ~]# echo 01 &gt; &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;serial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建CA服务器需要的秘钥"><a href="#2-创建CA服务器需要的秘钥" class="headerlink" title="2.创建CA服务器需要的秘钥"></a>2.创建CA服务器需要的秘钥</h3><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# openssl genrsa -out &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;private&#x2F;cakey.pem 1024Generating RSA private key, 1024 bit long modulus..++++++.....++++++e is 65537 (0x10001)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-颁发自签证书"><a href="#3-颁发自签证书" class="headerlink" title="3.颁发自签证书"></a>3.颁发自签证书</h3><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# openssl req -new -x509 -key &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;private&#x2F;cakey.pem -out &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;cacert.pem -days 3650You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [XX]:chinastring is too long, it needs to be less than  2 bytes longCountry Name (2 letter code) [XX]:cnState or Province Name (full name) []:bjLocality Name (eg, city) [Default City]:bjOrganization Name (eg, company) [Default Company Ltd]:bjOrganizational Unit Name (eg, section) []:bjCommon Name (eg, your name or your server&#39;s hostname) []:ca.linux.comEmail Address []:bj@qq.com[root@ca ~]# ls &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;cacert.pem  certs  crl  index.txt  newcerts  private  serial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-在web服务器申请证书"><a href="#4-在web服务器申请证书" class="headerlink" title="4.在web服务器申请证书"></a>4.在web服务器申请证书</h3><p><strong>回到web服务器</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@web_server ~]# mkdir &#x2F;etc&#x2F;httpd&#x2F;ssl[root@web_server ~]# openssl genrsa -out &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.key 2048Generating RSA private key, 2048 bit long modulus......................+++.....................................................................+++e is 65537 (0x10001)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建证书申请"><a href="#5-创建证书申请" class="headerlink" title="5.创建证书申请"></a>5.创建证书申请</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# openssl req -new -key &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.key -out &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.csr You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [XX]:cn#注意这里的信息需要和CA服务器一致State or Province Name (full name) []:bj#注意这里的信息需要和CA服务器一致Locality Name (eg, city) [Default City]:bj#注意这里的信息需要和CA服务器一致Organization Name (eg, company) [Default Company Ltd]:bj#注意这里的信息需要和CA服务器一致Organizational Unit Name (eg, section) []:bj#注意这里的信息需要和CA服务器一致Common Name (eg, your name or your server&#39;s hostname) []:www.linux.com#这里填写自己的域名Email Address []:bj@qq.comPlease enter the following &#39;extra&#39; attributesto be sent with your certificate requestA challenge password []:An optional company name []:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-证书发送给CA服务器"><a href="#6-证书发送给CA服务器" class="headerlink" title="6.证书发送给CA服务器"></a>6.证书发送给CA服务器</h3><pre class="line-numbers language-none"><code class="language-none">[root@web_server ~]# rsync -av &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;ssl&#x2F;www.linux.com.csr root@192.168.140.11:&#x2F;tmp&#x2F;#IP为CA服务器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-CA服务器签署证书"><a href="#7-CA服务器签署证书" class="headerlink" title="7.CA服务器签署证书"></a>7.CA服务器签署证书</h3><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# openssl ca -in &#x2F;tmp&#x2F;www.linux.com.csr -out &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;www.linux.com.crt -days 3650 #证书有效10年Using configuration from &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;openssl.cnfCheck that the request matches the signatureSignature okCertificate Details:        Serial Number: 1 (0x1)        Validity            Not Before: Jun 21 06:06:54 2021 GMT            Not After : Jun 19 06:06:54 2031 GMT        Subject:            countryName               &#x3D; cn            stateOrProvinceName       &#x3D; bj            organizationName          &#x3D; bj            organizationalUnitName    &#x3D; bj            commonName                &#x3D; www.linux.com            emailAddress              &#x3D; bj@qq.com        X509v3 extensions:            X509v3 Basic Constraints:                 CA:FALSE            Netscape Comment:                 OpenSSL Generated Certificate            X509v3 Subject Key Identifier:                 67:6D:B8:84:3A:5C:BE:99:81:4A:49:F4:CD:61:5E:8B:99:3B:EF:13            X509v3 Authority Key Identifier:                 keyid:C8:EF:D2:FB:E8:D5:2B:50:D8:7C:07:7A:27:72:B5:D6:33:09:D6:56Certificate is to be certified until Jun 19 06:06:54 2031 GMT (3650 days)Sign the certificate? [y&#x2F;n]:y1 out of 1 certificate requests certified, commit? [y&#x2F;n]yWrite out database with 1 new entriesData Base Updated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-查看刚刚颁发的证书文件"><a href="#8-查看刚刚颁发的证书文件" class="headerlink" title="8.查看刚刚颁发的证书文件"></a>8.查看刚刚颁发的证书文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# ls &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;ca-bundle.crt  ca-bundle.trust.crt  make-dummy-cert  Makefile  renew-dummy-cert  www.linux.com.crt[root@ca ~]# [root@ca ~]# cat &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;serial#从01变成0202[root@ca ~]# cat &#x2F;etc&#x2F;pki&#x2F;CA&#x2F;index.txtV310619060654Z01unknown&#x2F;C&#x3D;cn&#x2F;ST&#x3D;bj&#x2F;O&#x3D;bj&#x2F;OU&#x3D;bj&#x2F;CN&#x3D;www.linux.com&#x2F;emailAddress&#x3D;bj@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-将签好的证书送给web服务器"><a href="#9-将签好的证书送给web服务器" class="headerlink" title="9.将签好的证书送给web服务器"></a>9.将签好的证书送给web服务器</h3><pre class="line-numbers language-none"><code class="language-none">[root@ca ~]# rsync -av &#x2F;etc&#x2F;pki&#x2F;tls&#x2F;certs&#x2F;www.linux.com.crt root@192.168.140.10:&#x2F;etc&#x2F;httpd&#x2F;ssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-配置SSL证书"><a href="#10-配置SSL证书" class="headerlink" title="10.配置SSL证书"></a>10.配置SSL证书</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;ssl.conf ....................&lt;VirtualHost _default_:443&gt;# General setup for the virtual host, inherited from global configurationDocumentRoot &quot;&#x2F;linux&quot;ServerName www.linux.com:443SSLCertificateFile &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.crt#我们的证书文件都在这个目录下SSLCertificateKeyFile &#x2F;etc&#x2F;httpd&#x2F;ssl&#x2F;www.linux.com.key&lt;Directory &quot;&#x2F;linux&quot;&gt;    Require all granted&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-检查配置文件是否OK"><a href="#11-检查配置文件是否OK" class="headerlink" title="11.检查配置文件是否OK"></a>11.检查配置文件是否OK</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# httpd -tSyntax OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12-重启服务"><a href="#12-重启服务" class="headerlink" title="12.重启服务"></a>12.重启服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13-查看端口"><a href="#13-查看端口" class="headerlink" title="13.查看端口"></a>13.查看端口</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# netstat -antp | grep httptcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      7144&#x2F;httpd          tcp6       0      0 :::443                  :::*                    LISTEN      7144&#x2F;httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>https基于443&#x2F;TCP</li></ul><h3 id="14-浏览器测试访问"><a href="#14-浏览器测试访问" class="headerlink" title="14.浏览器测试访问"></a>14.浏览器测试访问</h3><p><img src="https://www.wangshengjj.work/upload/2023/04/https7.png" alt="https7"></p><ul><li>选择 高级-继续访问</li><li>报错原因：浏览器会自动查找网上的公有CA验证，因为我们是私有CA，没有在公网认证所以会有这个提示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> httpd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】httpd(Apache)虚拟主机功能[单服务器配置多网站]</title>
      <link href="/2023/04/01/70/"/>
      <url>/2023/04/01/70/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】httpd-Apache-虚拟主机功能-单服务器配置多网站"><a href="#【Linux基础服务教程】httpd-Apache-虚拟主机功能-单服务器配置多网站" class="headerlink" title="【Linux基础服务教程】httpd(Apache)虚拟主机功能[单服务器配置多网站]"></a>【Linux基础服务教程】httpd(Apache)虚拟主机功能[单服务器配置多网站]</h1><p><strong>本教程为第一期教程续集<a href="https://www.wangshengjj.work/archives/69">点我查看第一期教程</a></strong></p><h2 id="一、虚拟主机介绍Virtual-Host"><a href="#一、虚拟主机介绍Virtual-Host" class="headerlink" title="一、虚拟主机介绍Virtual Host"></a>一、虚拟主机介绍Virtual Host</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><ul><li>在一台服务器可以部署多套网站</li><li>注意：虚拟主机配置后，主配置文件中部署的网站会失效！！！</li></ul><h3 id="2-类型"><a href="#2-类型" class="headerlink" title="2.类型"></a>2.类型</h3><ul><li>基于名称的虚拟主机(最常用)<ul><li>不同的网站指定不同的ServerName、DocumentRoot</li></ul></li><li>基于IP地址的虚拟主机<ul><li>不同的网站监听在不同的IP地址上</li></ul></li></ul><h3 id="3-配置文件格式"><a href="#3-配置文件格式" class="headerlink" title="3.配置文件格式"></a>3.配置文件格式</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;VirtualHost IP:port&gt;#或者*:端口    DocumentRoot xxxxx    ServerName xxxxx    ErrorLog xxxxxxxxxxxx    CustomLog xxxxxxxxxxxxxxxx&lt;&#x2F;VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、基于名称的虚拟主机"><a href="#二、基于名称的虚拟主机" class="headerlink" title="二、基于名称的虚拟主机"></a>二、基于名称的虚拟主机</h2><h3 id="1-创建网页目录、首页"><a href="#1-创建网页目录、首页" class="headerlink" title="1.创建网页目录、首页"></a>1.创建网页目录、首页</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;var&#x2F;www&#x2F;html&#x2F;vedio[root@localhost ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;vedio&#x2F;index.html&lt;h1&gt; vedio &lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;vedio.conf&lt;VirtualHost 192.168.140.10:80&gt;#这里可以填写&quot;*:80&quot;代表运行在所有IP80端口上    ServerName vedio.linux.com#指定域名    DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;vedio#指定网页目录    ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;vedio_error.log#指定访问日志    CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;vedio_access.log combined#指定错误日志和记录模式&lt;&#x2F;VirtualHost&gt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;&quot;&gt;    Require all granted#配置网页目录权限，不然报错403权限拒绝&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-测试配置文件是否OK"><a href="#2-测试配置文件是否OK" class="headerlink" title="2.测试配置文件是否OK"></a>2.测试配置文件是否OK</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# httpd -t Syntax OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="如果提示AH00558不是报错"><a href="#如果提示AH00558不是报错" class="headerlink" title="如果提示AH00558不是报错"></a>如果提示AH00558不是报错</h4><pre class="line-numbers language-none"><code class="language-none">AH00558: httpd: Could not reliably determine the server&#39;s fully qualified domain name, using fe80::20c:29ff:fe0f:55d2. Set the &#39;ServerName&#39; directive globally to suppress this message<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解决方法：编辑主配置文件"><a href="#解决方法：编辑主配置文件" class="headerlink" title="解决方法：编辑主配置文件"></a>解决方法：编辑主配置文件</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf#ServerName www.example.com:80#把这里的注释去掉，修改www.example.com为Localhost即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、基于IP的虚拟主机"><a href="#三、基于IP的虚拟主机" class="headerlink" title="三、基于IP的虚拟主机"></a>三、基于IP的虚拟主机</h2><ul><li>网站: python.linux.com网页目录: &#x2F;python192.168.140.100</li><li>网站: shell.linux.com网页目录: &#x2F;shell192.168.140.200</li></ul><h3 id="1-添加多块网卡"><a href="#1-添加多块网卡" class="headerlink" title="1.添加多块网卡"></a>1.添加多块网卡</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost network-scripts]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1&#x2F;128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link&#x2F;ether 00:0c:29:8f:c3:68 brd ff:ff:ff:ff:ff:ff    inet 192.168.140.10&#x2F;24 brd 192.168.140.255 scope global noprefixroute ens33       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe8f:c368&#x2F;64 scope link        valid_lft forever preferred_lft forever3: ens37: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link&#x2F;ether 00:0c:29:8f:c3:72 brd ff:ff:ff:ff:ff:ff    inet 192.168.140.100&#x2F;24 brd 192.168.140.255 scope global noprefixroute ens37       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe8f:c372&#x2F;64 scope link        valid_lft forever preferred_lft forever4: ens38: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link&#x2F;ether 00:0c:29:8f:c3:7c brd ff:ff:ff:ff:ff:ff    inet 192.168.140.200&#x2F;24 brd 192.168.140.255 scope global noprefixroute ens38       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe8f:c37c&#x2F;64 scope link tentative        valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置Python网站"><a href="#2-配置Python网站" class="headerlink" title="2.配置Python网站"></a>2.配置Python网站</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;python.conf&lt;VirtualHost 192.168.140.100:80&gt;    ServerName python.linux.com    DocumentRoot &#x2F;python    ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;python_error.log    CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;python_access.log combined&lt;&#x2F;VirtualHost&gt;&lt;Directory &quot;&#x2F;python&quot;&gt;   Require all granted&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置shell网站"><a href="#3-配置shell网站" class="headerlink" title="3.配置shell网站"></a>3.配置shell网站</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;shell.conf &lt;VirtualHost 192.168.140.200:80&gt;    ServerName shell.linux.com    DocumentRoot &#x2F;shell    ErrorLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;shell_error.log    CustomLog &#x2F;var&#x2F;log&#x2F;httpd&#x2F;shell_access.log combined&lt;&#x2F;VirtualHost&gt;&lt;Directory &quot;&#x2F;shell&quot;&gt;   Require all granted&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-浏览器访问测试"><a href="#4-浏览器访问测试" class="headerlink" title="4.浏览器访问测试"></a>4.浏览器访问测试</h3><p><strong>过程省略</strong></p><ul><li>Linux端可以配置自定义DNS服务器或者修改hosts文件</li><li>vim &#x2F;etc&#x2F;hosts<ul><li>192.168.140.100 python.linux.com</li><li>192.168.140.200 shell.linux.com</li></ul></li><li>Windows端可以配置自定义DNS服务器或者修改hosts文件</li><li>“C:\Windows\System32\drivers\etc\hosts”<ul><li>192.168.140.100 python.linux.com</li><li>192.168.140.200 shell.linux.com</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> httpd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】httpd(Apache)安装和配置</title>
      <link href="/2023/04/01/69/"/>
      <url>/2023/04/01/69/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】httpd-Apache-安装和配置"><a href="#【Linux基础服务教程】httpd-Apache-安装和配置" class="headerlink" title="【Linux基础服务教程】httpd(Apache)安装和配置"></a>【Linux基础服务教程】httpd(Apache)安装和配置</h1><p><strong><a href="https://www.wangshengjj.work/archives/70">点我查看第二期教程</a>单服务器配置多网站</strong></p><h2 id="一、httpd服务软件介绍"><a href="#一、httpd服务软件介绍" class="headerlink" title="一、httpd服务软件介绍"></a>一、httpd服务软件介绍</h2><h3 id="1-部署web服务器常用软件"><a href="#1-部署web服务器常用软件" class="headerlink" title="1.部署web服务器常用软件"></a>1.部署web服务器常用软件</h3><ul><li>Linux：<ul><li>httpd、nginx、tomcat</li></ul></li><li>Windows：<ul><li>IIS</li></ul></li></ul><h3 id="2-httpd-Apache-介绍"><a href="#2-httpd-Apache-介绍" class="headerlink" title="2.httpd(Apache)介绍"></a>2.httpd(Apache)介绍</h3><ul><li>构建web服务器<ul><li>只能处理静态页面</li></ul></li><li>官网：<a href="https://httpd.apache.org/">https://httpd.apache.org/</a></li></ul><h3 id="3-httpd-Apache-软件特性"><a href="#3-httpd-Apache-软件特性" class="headerlink" title="3.httpd(Apache)软件特性"></a>3.httpd(Apache)软件特性</h3><ul><li>开源、跨平台的</li><li>模块化软件</li><li>支持虚拟主机功能</li><li>支持https虚拟主机</li><li>支持url重写</li><li>支持缓存</li></ul><h2 id="二、安装并启动httpd-Apache"><a href="#二、安装并启动httpd-Apache" class="headerlink" title="二、安装并启动httpd(Apache)"></a>二、安装并启动httpd(Apache)</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y httpd <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-设置开机自启动"><a href="#2-设置开机自启动" class="headerlink" title="2.设置开机自启动"></a>2.设置开机自启动</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl enable --now httpdCreated symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;httpd.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;httpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-默认服务端口"><a href="#3-默认服务端口" class="headerlink" title="3.默认服务端口"></a>3.默认服务端口</h3><ul><li>80&#x2F;TCP</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# netstat -antp | grep httptcp6       0      0 :::80                   :::*                    LISTEN      6860&#x2F;httpd <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><ul><li>父进程<ul><li>管理子进程、记录日志、读取配置文件</li></ul></li><li>子进程<ul><li>用于接收、处理客户端请求</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ps -elf | grep http4 S root       6860      1  0  80   0 - 56017 poll_s 13:53 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     6861   6860  0  80   0 - 56017 inet_c 13:53 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     6862   6860  0  80   0 - 56017 inet_c 13:53 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     6863   6860  0  80   0 - 56017 inet_c 13:53 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     6864   6860  0  80   0 - 56017 inet_c 13:53 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     6865   6860  0  80   0 - 56017 inet_c 13:53 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试访问web服务器"><a href="#4-测试访问web服务器" class="headerlink" title="4.测试访问web服务器"></a>4.测试访问web服务器</h3><pre class="line-numbers language-none"><code class="language-none">浏览器端访问：https:&#x2F;&#x2F;服务器IP#例：服务器IP为127.0.0.1 浏览器访问http:&#x2F;&#x2F;127.0.0.1即可Linux端访问：curl 服务器IP##例：服务器IP为127.0.0.1 命令访问curl 127.0.0.1即可如果提示没有curl命令，请使用yum安装yum install -y curl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除默认的页面"><a href="#5-删除默认的页面" class="headerlink" title="5.删除默认的页面"></a>5.删除默认的页面</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rm -rf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf [root@localhost ~]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-新建一个自己的测试页面"><a href="#6-新建一个自己的测试页面" class="headerlink" title="6.新建一个自己的测试页面"></a>6.新建一个自己的测试页面</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html&lt;h1&gt;index.html&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、httpd-Apache-相关配置文件"><a href="#三、httpd-Apache-相关配置文件" class="headerlink" title="三、httpd(Apache)相关配置文件"></a>三、httpd(Apache)相关配置文件</h2><h3 id="1-主配置文件"><a href="#1-主配置文件" class="headerlink" title="1.主配置文件"></a>1.主配置文件</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-子配置文件"><a href="#2-子配置文件" class="headerlink" title="2.子配置文件"></a>2.子配置文件</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;*.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-模块路径和模块配置文件"><a href="#3-模块路径和模块配置文件" class="headerlink" title="3.模块路径和模块配置文件"></a>3.模块路径和模块配置文件</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;httpd&#x2F;modules&#x2F;etc&#x2F;httpd&#x2F;conf.modules.d&#x2F;*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-PID文件"><a href="#4-PID文件" class="headerlink" title="4.PID文件"></a>4.PID文件</h3><ul><li>每次重启服务后PID文件都会重置</li><li>当服务停止后PID文件自动消失</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;httpd&#x2F;run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-日志文件"><a href="#5-日志文件" class="headerlink" title="5.日志文件"></a>5.日志文件</h3><ul><li>access_log 访问日志</li><li>error_log 错误日志</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;log&#x2F;httpd access_logerror_log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-网站默认数据目录"><a href="#6-网站默认数据目录" class="headerlink" title="6.网站默认数据目录"></a>6.网站默认数据目录</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;www&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、主配置文件内容解释-x2F-etc-x2F-httpd-x2F-conf-x2F-httpd-conf"><a href="#四、主配置文件内容解释-x2F-etc-x2F-httpd-x2F-conf-x2F-httpd-conf" class="headerlink" title="四、主配置文件内容解释&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf"></a>四、主配置文件内容解释&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</h2><h3 id="1-指定httpd-Apache-工作目录"><a href="#1-指定httpd-Apache-工作目录" class="headerlink" title="1.指定httpd(Apache)工作目录"></a>1.指定httpd(Apache)工作目录</h3><pre class="line-numbers language-none"><code class="language-none">ServerRoot &quot;&#x2F;etc&#x2F;httpd&quot;#非必要情况不要修改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-指定监听端口"><a href="#2-指定监听端口" class="headerlink" title="2.指定监听端口"></a>2.指定监听端口</h3><pre class="line-numbers language-none"><code class="language-none">Listen 192.168.140.10:80#监听某个IP的80端口Listen *:80#监听所有IP上的80端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-加载子配置文件"><a href="#3-加载子配置文件" class="headerlink" title="3.加载子配置文件"></a>3.加载子配置文件</h3><pre class="line-numbers language-none"><code class="language-none">Include conf.modules.d&#x2F;*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-指定启动进程的用户和组"><a href="#4-指定启动进程的用户和组" class="headerlink" title="4.指定启动进程的用户和组"></a>4.指定启动进程的用户和组</h3><pre class="line-numbers language-none"><code class="language-none">User wwwGroup www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-指定管理员邮箱-需要提前配置SMTP服务"><a href="#5-指定管理员邮箱-需要提前配置SMTP服务" class="headerlink" title="5.指定管理员邮箱(需要提前配置SMTP服务)"></a>5.指定管理员邮箱(需要提前配置SMTP服务)</h3><pre class="line-numbers language-none"><code class="language-none">ServerAdmin root@localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-指定网站主机名-域名"><a href="#6-指定网站主机名-域名" class="headerlink" title="6.指定网站主机名(域名)"></a>6.指定网站主机名(域名)</h3><pre class="line-numbers language-none"><code class="language-none">ServerName test1.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-指定网页目录"><a href="#7-指定网页目录" class="headerlink" title="7.指定网页目录"></a>7.指定网页目录</h3><pre class="line-numbers language-none"><code class="language-none">DocumentRoot &quot;&#x2F;var&#x2F;www&#x2F;html&quot;#一般关联权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-指定默认网站文件名"><a href="#8-指定默认网站文件名" class="headerlink" title="8.指定默认网站文件名"></a>8.指定默认网站文件名</h3><pre class="line-numbers language-none"><code class="language-none">&lt;IfModule dir_module&gt;    DirectoryIndex index.html#默认为index.html可以更改成其他名字，将来访问域名或者IP会直接调用自定义的文件名&lt;&#x2F;IfModule&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-错误日志文件、级别"><a href="#9-错误日志文件、级别" class="headerlink" title="9.错误日志文件、级别"></a>9.错误日志文件、级别</h3><pre class="line-numbers language-none"><code class="language-none">ErrorLog &quot;logs&#x2F;error_log&quot;# Possible values include: debug, info, notice, warn, error, crit, alert, emerg.LogLevel error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-访问日志名称、记录格式"><a href="#10-访问日志名称、记录格式" class="headerlink" title="10.访问日志名称、记录格式"></a>10.访问日志名称、记录格式</h3><pre class="line-numbers language-none"><code class="language-none">CustomLog &quot;logs&#x2F;access_log&quot; combined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="web访问量衡量标准"><a href="#web访问量衡量标准" class="headerlink" title="web访问量衡量标准"></a>web访问量衡量标准</h4><ul><li>PVPage View 页面访问量</li><li>UVUser View 用户访问量</li></ul><h3 id="11-自定义访问日志的记录格式"><a href="#11-自定义访问日志的记录格式" class="headerlink" title="11.自定义访问日志的记录格式"></a>11.自定义访问日志的记录格式</h3><pre class="line-numbers language-none"><code class="language-none">LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>%h 客户端地址</li><li>%lweb认证用户</li><li>%uwindows用户</li><li>%t访问时间</li><li>%r请求方法  文件名称  HTTP协议版本</li><li>%s状态码</li><li>%b响应数据的大小 </li><li>%{Referer}i超链接地址</li><li>%{User-Agent}i   浏览器类型</li></ul><h3 id="12-长链接配置-客户端与服务端通信"><a href="#12-长链接配置-客户端与服务端通信" class="headerlink" title="12.长链接配置(客户端与服务端通信)"></a>12.长链接配置(客户端与服务端通信)</h3><pre class="line-numbers language-none"><code class="language-none">KeepAliveTimeout 5MaxKeepAliveRequests 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="13-目录权限与授权"><a href="#13-目录权限与授权" class="headerlink" title="13.目录权限与授权"></a>13.目录权限与授权</h3><pre class="line-numbers language-none"><code class="language-none">&lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&quot;&gt;    Options Indexes FollowSymLinks    AllowOverride None    Require all granted&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>options<ul><li>客户端访问对应目录下的文件时受什么影响 </li><li>Indexes<ul><li>无index.html首页时，列出所有文件</li></ul></li><li>FollowSymLinks<ul><li>允许网页目录下的软链接文件被正常访问</li></ul></li></ul></li><li>require 客户端访问认证<ul><li>all granted允许所有用户访问</li><li>ip 10.1.1.1 仅允许某个IP访问</li><li>not ip 10.1.1.1屏蔽某个IP访问</li><li>valid-user输入用户名密码访问</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;RequireAll&gt;    Require all granted    Require not ip 10.252.46.165#允许所有用户访问除了这个IP(黑名单机制)&lt;&#x2F;RequireAll&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于用户名和密码访问"><a href="#基于用户名和密码访问" class="headerlink" title="基于用户名和密码访问"></a>基于用户名和密码访问</h4><h5 id="创建认证用户"><a href="#创建认证用户" class="headerlink" title="创建认证用户"></a>创建认证用户</h5><pre class="line-numbers language-none"><code class="language-none">htpasswd -c 秘钥文件存放位置 用户<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# htpasswd -c &#x2F;etc&#x2F;httpd&#x2F;.webuser martinNew password: #输入密码(不会显示)Re-type new password: #确认密码Adding password for user martin[root@localhost ~]# cat &#x2F;etc&#x2F;httpd&#x2F;.webuser #这个认证文件及其重要martin:$apr1$6KV5I5w.$6iQ5ip.1bF3la2pHq9lX4&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改某个页面访问权限"><a href="#修改某个页面访问权限" class="headerlink" title="修改某个页面访问权限"></a>修改某个页面访问权限</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf &lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&quot;&gt;    ........................    AuthType Basic    AuthName &quot;Need to login: &quot;#自定义提示语句    AuthUserFile &quot;&#x2F;etc&#x2F;httpd&#x2F;.webuser&quot;#指定秘钥文件位置    Require valid-user&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="重启服务生效"><a href="#重启服务生效" class="headerlink" title="重启服务生效"></a>重启服务生效</h5><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> httpd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】http服务的基本认识</title>
      <link href="/2023/04/01/68/"/>
      <url>/2023/04/01/68/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】http服务的基本认识"><a href="#【Linux基础服务教程】http服务的基本认识" class="headerlink" title="【Linux基础服务教程】http服务的基本认识"></a>【Linux基础服务教程】http服务的基本认识</h1><h2 id="一、http协议"><a href="#一、http协议" class="headerlink" title="一、http协议"></a>一、http协议</h2><ul><li>应用层协议 </li><li>作用：<ul><li>在客户端、web服务器传递数据</li></ul></li><li>Hyper Text Transfer Protocol超文本传输协议  <ul><li>客户端访问web服务器时，传递代码，由浏览器解析代码进行展示</li></ul></li></ul><h2 id="二、web服务"><a href="#二、web服务" class="headerlink" title="二、web服务"></a>二、web服务</h2><h3 id="1-类型"><a href="#1-类型" class="headerlink" title="1.类型"></a>1.类型</h3><ul><li>静态网站<ul><li>网页上所有资源都是固定的</li><li>html语言， js、jquery</li><li>*.html</li></ul></li><li>动态网站<ul><li>一段程序代码，根据传递的参数不同展示不同的结果 </li><li>PHP语言*.php文件 </li><li>Java语言*.jsp文件</li></ul></li></ul><h3 id="2-cookie、session"><a href="#2-cookie、session" class="headerlink" title="2.cookie、session"></a>2.cookie、session</h3><ul><li>作用：<ul><li>识别客户端登录身份</li></ul></li></ul><p><img src="https://www.wangshengjj.work/upload/2023/04/http1.png" alt="http1"></p><p><img src="https://www.wangshengjj.work/upload/2023/04/http2.png" alt="http2"></p><h2 id="三、历代http版本特性"><a href="#三、历代http版本特性" class="headerlink" title="三、历代http版本特性"></a>三、历代http版本特性</h2><h3 id="1-http-x2F-0-9"><a href="#1-http-x2F-0-9" class="headerlink" title="1.http&#x2F;0.9"></a>1.http&#x2F;0.9</h3><ul><li>只支持传输纯文本数据</li></ul><h3 id="2-http-x2F-1-0"><a href="#2-http-x2F-1-0" class="headerlink" title="2.http&#x2F;1.0"></a>2.http&#x2F;1.0</h3><ul><li>引用MIME机制<ul><li>传输非文本数据(图片、视频、音频、动画)</li></ul></li><li>缓存机制，加速网站的访问<ul><li>服务器缓存</li><li>客户端缓存</li></ul></li></ul><h3 id="3-http-x2F-1-1"><a href="#3-http-x2F-1-1" class="headerlink" title="3.http&#x2F;1.1"></a>3.http&#x2F;1.1</h3><ul><li>长连接机制  keepalive<ul><li>允许在一条连接上发送多次请求<ul><li>限制长连接的超时时间  </li><li>限制每个长连接的最大请求数     5000</li></ul></li></ul></li><li>管道机制<ul><li>允许一次性发送多个请求，并行</li></ul></li><li>加强了缓存的管理 <ul><li>缓存静态数据</li><li>缓存过期时间</li></ul></li></ul><h3 id="4-http-x2F-2-0"><a href="#4-http-x2F-2-0" class="headerlink" title="4.http&#x2F;2.0"></a>4.http&#x2F;2.0</h3><ul><li>以并行的方式发送请求、响应</li></ul><h3 id="5-http-x2F-3-0"><a href="#5-http-x2F-3-0" class="headerlink" title="5.http&#x2F;3.0"></a>5.http&#x2F;3.0</h3><ul><li>基于UDP协议</li><li>在QUIC层实现了无序、并发字节流的传输</li><li>重新定义了TLS协议加密QUIC头部的方式</li><li>将Packet、QUIC Frame、HTTP3 Frame分离，实现了连接迁移功能</li></ul><h2 id="四、HTTP状态码"><a href="#四、HTTP状态码" class="headerlink" title="四、HTTP状态码"></a>四、HTTP状态码</h2><ul><li>200 成功响应</li><li>301 永久重定向</li><li>302 临时重定向</li><li>304 本地缓存，和服务连接未更改本地缓存，也是成功响应</li><li>4xx 错误响应</li><li>403权限拒绝</li><li>404文件找不到</li><li>5xx 错误响应<ul><li>服务端配置有问题</li></ul></li></ul><h2 id="五、客户端请求方法"><a href="#五、客户端请求方法" class="headerlink" title="五、客户端请求方法"></a>五、客户端请求方法</h2><ul><li>GET<ul><li>用于获取内容、数据</li></ul></li><li>POST<ul><li>上传数据</li></ul></li></ul><h2 id="六、默认端口"><a href="#六、默认端口" class="headerlink" title="六、默认端口"></a>六、默认端口</h2><ul><li>http 80&#x2F;TCP</li><li>https 443&#x2F;TCP</li><li>www代理Tomcat 8080&#x2F;TCP</li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> httpd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL数据管理操作</title>
      <link href="/2023/04/01/67/"/>
      <url>/2023/04/01/67/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL数据管理操作"><a href="#【数据库系列教程】MySQL数据管理操作" class="headerlink" title="【数据库系列教程】MySQL数据管理操作"></a>【数据库系列教程】MySQL数据管理操作</h1><p>上一期教程：<a href="https://www.wangshengjj.work/archives/66">MySQL基本语句</a></p><h2 id="一、添加数据"><a href="#一、添加数据" class="headerlink" title="一、添加数据"></a>一、添加数据</h2><h3 id="1-命令格式"><a href="#1-命令格式" class="headerlink" title="1.命令格式"></a>1.命令格式</h3><pre class="line-numbers language-none"><code class="language-none">insert into 表名(字段名称,字段名称) values(数据,数据,.....)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; insert into account(name, password, level) values(&quot;martin&quot;, &quot;redhat&quot;, 10);Query OK, 1 row affected (0.00 sec)mysql&gt; insert into account(name, password) values(&quot;robin&quot;, &quot;123&quot;);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from account;+----+--------+----------+-------+| id | name   | password | level |+----+--------+----------+-------+|  1 | martin | redhat   |    10 ||  2 | robin  | 123      |     1 |+----+--------+----------+-------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、删除数据"><a href="#二、删除数据" class="headerlink" title="二、删除数据"></a>二、删除数据</h2><h3 id="1-命令格式-1"><a href="#1-命令格式-1" class="headerlink" title="1.命令格式"></a>1.命令格式</h3><pre class="line-numbers language-none"><code class="language-none">delete from 表名 where 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; delete from account where level &lt; 15;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、更新数据"><a href="#三、更新数据" class="headerlink" title="三、更新数据"></a>三、更新数据</h2><h3 id="1-命令格式-2"><a href="#1-命令格式-2" class="headerlink" title="1.命令格式"></a>1.命令格式</h3><pre class="line-numbers language-none"><code class="language-none">update 表名 set 字段名称&#x3D;新值 where 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; update account set password&#x3D;&quot;123&quot; where name&#x3D;&quot;lz&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、数据查询"><a href="#四、数据查询" class="headerlink" title="四、数据查询"></a>四、数据查询</h2><h3 id="1-查询类型"><a href="#1-查询类型" class="headerlink" title="1.查询类型"></a>1.查询类型</h3><ul><li>单表查询</li><li>多表查询&#x2F;连接查询</li><li>嵌套查询&#x2F;子查询</li></ul><h3 id="2-单表查询"><a href="#2-单表查询" class="headerlink" title="2.单表查询"></a>2.单表查询</h3><h4 id="A-导入外部数据库文件到本地"><a href="#A-导入外部数据库文件到本地" class="headerlink" title="A.导入外部数据库文件到本地"></a>A.导入外部数据库文件到本地</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mysql -uroot -pWWW.1.com &lt; jiaowu.sql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="B-命令格式"><a href="#B-命令格式" class="headerlink" title="B.命令格式"></a>B.命令格式</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select 字段名称,字段名称 from 表名 [查询子句]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from tutors;mysql&gt; select Tname, Age from tutors;mysql&gt; select Tname as 教师姓名, Age as 年龄 from tutors;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-按照条件查询"><a href="#C-按照条件查询" class="headerlink" title="C.按照条件查询"></a>C.按照条件查询</h4><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select 字段名称,字段名称 from 表名 [查询子句] where 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="a-数学运算符"><a href="#a-数学运算符" class="headerlink" title="a.数学运算符"></a>a.数学运算符</h5><ul><li>&#x3D; 等于</li><li>!&#x3D; 不等于</li><li>&gt; 大于</li><li>&gt;&#x3D; 大于等于</li><li>&lt; 小于</li><li>&lt;&#x3D; 小于等于</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select Tname, Age from tutors where Age &gt; 80;mysql&gt; select Tname, Age from tutors where Tname &#x3D; &quot;HuYiDao&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="b-逻辑运算符"><a href="#b-逻辑运算符" class="headerlink" title="b.逻辑运算符"></a>b.逻辑运算符</h5><ul><li>and 并且</li><li>or 或者</li><li>not 否定</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select Tname, Age from tutors where Age between 70 and 80;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from tutors where Tname &#x3D; &quot;Huyidao&quot; or Tname &#x3D; &quot;YiDeng&quot; ;IN(&quot;数据&quot;,&quot;数据&quot;, &quot;数据&quot;)#另外一种用法mysql&gt; select * from tutors where Tname in(&quot;Huyidao&quot;,&quot;YiDeng&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-模糊查询"><a href="#c-模糊查询" class="headerlink" title="c.模糊查询"></a>c.模糊查询</h5><ul><li>LIKE “通配符”</li><li>通配符<ul><li>% 任意字符</li><li>_ 任意单个字符</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select Tname, Age from tutors where Tname like &quot;%ang%&quot;;mysql&gt; select Tname, Age from tutors where Tname like &quot;%ai&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>RLIKE “正则表达式”</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select Tname from tutors where Tname RLIKE &quot;^[HN]&quot;;#以HN开头mysql&gt; select Tname from tutors where Tname RLIKE &quot;ai$&quot;;#ai结尾mysql&gt; select Tname from tutors where Tname RLIKE &quot;ang&quot;;#包含ang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="d-空值和非空"><a href="#d-空值和非空" class="headerlink" title="d.空值和非空"></a>d.空值和非空</h5><ul><li>IS NULL</li><li>IS NOT NULL</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from students where CID2 is NULL;mysql&gt; select * from students where CID2 is not NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="D-排序查询"><a href="#D-排序查询" class="headerlink" title="D.排序查询"></a>D.排序查询</h4><ul><li>order by 字段名称 [ASC|DESC]<ul><li>ASC：升序</li><li>DESC：降序</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from tutors order by Age ;mysql&gt; select * from tutors order by Age DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="E-限制查询结果行数"><a href="#E-限制查询结果行数" class="headerlink" title="E.限制查询结果行数"></a>E.限制查询结果行数</h4><ul><li>limit n[,m]<ul><li>limit 2</li><li>limit 2,4</li><li>忽略前n行数，显示后续的连续m行</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from tutors limit 2;mysql&gt; select * from tutors limit 2,4;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="F-聚合函数"><a href="#F-聚合函数" class="headerlink" title="F.聚合函数"></a>F.聚合函数</h4><ul><li>sum( )求和</li><li>avg( )平均值 </li><li>max( )最大值</li><li>min( )最小值 </li><li>count( ) 计数</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select avg(Age) as 平均年龄 from tutors;+--------------+| 平均年龄     |+--------------+|      67.5556 |+--------------+mysql&gt; select count(*) from tutors;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-数据分组"><a href="#G-数据分组" class="headerlink" title="G.数据分组"></a>G.数据分组</h4><ul><li>group by 字段名称  [having  条件]</li><li>执行顺序：先分组 —&gt; 对每组数据进行聚合运算 —&gt; having 条件对聚合结果过滤</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select count(*) as 人数, gender as 性别 from tutors group by Gender;mysql&gt; select avg(Age) as 平均年龄, gender as 性别 from tutors group by Gender;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select avg(age) as 平均年龄 from tutors group by gender having 平均年龄 &gt; 65;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="H-去重"><a href="#H-去重" class="headerlink" title="H.去重"></a>H.去重</h4><ul><li>distinct 字段名称</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select distinct Tname from tutors;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-嵌套查询-x2F-子查询"><a href="#3-嵌套查询-x2F-子查询" class="headerlink" title="3.嵌套查询&#x2F;子查询"></a>3.嵌套查询&#x2F;子查询</h3><ul><li>将一个查询的结果作为另一个查询的条件使用</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select Tname, Age from tutors where Age &gt; (select avg(Age) from tutors);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from tutors where Age not in((select max(Age) from tutors),(select min(Age) from tutors));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-日期时间查询"><a href="#4-日期时间查询" class="headerlink" title="4.日期时间查询"></a>4.日期时间查询</h3><p>year() 年<br>month() 月<br>day() 天<br>date() 日期<br>time() 时间<br>hour() 小时<br>minute() 分钟</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select day(Age) as 天 from tutors;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-多表查询-x2F-连接查询"><a href="#5-多表查询-x2F-连接查询" class="headerlink" title="5.多表查询&#x2F;连接查询"></a>5.多表查询&#x2F;连接查询</h3><ul><li>连接查询类型<ul><li>内连接</li><li>外连接<ul><li>左外连接</li><li>右外连接</li></ul></li></ul></li><li>前提: 多张表间要存在相关联的字段</li></ul><h4 id="A-内连接"><a href="#A-内连接" class="headerlink" title="A.内连接"></a>A.内连接</h4><ul><li>特征:：相关联字段存在相同的值时，才会显示结果  </li><li>语法:：select 表名.字段名称,表名.字段名称,表名.字段名称 from 表名 inner join 表名 on 相关联字段</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select students.Name, students.Age, tutors.Tname    -&gt; from students inner join tutors    -&gt; on students.TID &#x3D; tutors.TID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select students.Name, students.Age, tutors.Tname        from students, tutors       where students.TID&#x3D;tutors.TID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select students.Name , students.Age, courses.Cname     -&gt; from students inner join courses    -&gt; on students.CID1 &#x3D; courses.CID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多条数据内连接</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select students.Name, students.Age, courses.Cname, tutors.Tname     -&gt; from students inner join courses inner join tutors    -&gt; on students.CID1 &#x3D; courses.CID and courses.TID &#x3D; tutors.TID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="B-左外连接"><a href="#B-左外连接" class="headerlink" title="B.左外连接"></a>B.左外连接</h4><ul><li>特征：以左表为主，显示左表中所有数据；相关联存在相同值时，显示对应数据，没有相同的值时显示为NULL</li><li>语法：select 表名.字段名称,表名.字段名称,表名.字段名称 from 表名 left join 表名 on 相关联字段</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select students.Name, students.Age, tutors.Tname     -&gt; from students left join tutors     -&gt; on students.TID &#x3D; tutors.TID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select students.Name, students.Age, courses.Cname     -&gt; from students left join courses    -&gt; on students.CID1 &#x3D; courses.CID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="C-右外连接"><a href="#C-右外连接" class="headerlink" title="C.右外连接"></a>C.右外连接</h4><ul><li>特征：以右表为主，显示右表中所有数据；相关联存在相同值时，显示对应数据，没有相同的值时显示为NULL</li><li>语法：select 表名.字段名称,表名.字段名称,表名.字段名称 from 表名 right join 表名 on 相关联字段</li></ul><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select students.Name, students.Age, courses.Cname     -&gt; from students right join courses    -&gt; on students.CID1 &#x3D; courses.CID;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> mysql基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL基本语句</title>
      <link href="/2023/03/30/66/"/>
      <url>/2023/03/30/66/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL基本语句"><a href="#【数据库系列教程】MySQL基本语句" class="headerlink" title="【数据库系列教程】MySQL基本语句"></a>【数据库系列教程】MySQL基本语句</h1><h2 id="一、SQL类型—-结构化查询语言"><a href="#一、SQL类型—-结构化查询语言" class="headerlink" title="一、SQL类型—-结构化查询语言"></a>一、SQL类型—-结构化查询语言</h2><ul><li><p>DDL数据定义语言</p><ul><li>对库、表、用户定义的管理</li><li>create, drop, alter</li></ul></li><li><p>DML数据管理&#x2F;操作语言</p><ul><li>对表中的数据进行操作</li><li>insert, delete、update、select</li></ul></li><li><p>DCL数据控制语言</p><ul><li>对数据库用户、权限进行管理</li><li>grant, revoke</li></ul></li></ul><h2 id="二、数据库管理操作"><a href="#二、数据库管理操作" class="headerlink" title="二、数据库管理操作"></a>二、数据库管理操作</h2><h3 id="1-查看数据库"><a href="#1-查看数据库" class="headerlink" title="1.查看数据库"></a>1.查看数据库</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                |+--------------------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-几个默认的数据库说明"><a href="#2-几个默认的数据库说明" class="headerlink" title="2.几个默认的数据库说明"></a>2.几个默认的数据库说明</h3><h4 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h4><ul><li>保存数据库服务器上元数据信息(数据库名称、数据表名、字段名称、数据类型)</li></ul><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><ul><li>保存用户名、密码、权限</li></ul><h4 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h4><ul><li>保存数据服务器性能相关的数据，例如连接数、进程、线程</li></ul><h4 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h4><ul><li>对information_schema数据库的简化，方便数据库管理员查看</li></ul><h3 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3.创建数据库"></a>3.创建数据库</h3><pre class="line-numbers language-none"><code class="language-none">&gt; create databse &lt;数据库名称&gt;;mysql&gt; create database caiwu;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || caiwu              || mysql              || performance_schema || sys                |+--------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看数据库创建信息"><a href="#4-查看数据库创建信息" class="headerlink" title="4.查看数据库创建信息"></a>4.查看数据库创建信息</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database testdb charset utf8;#创建一个名为testdb的库，指定utf8编码格式Query OK, 1 row affected (0.00 sec)mysql&gt; show create database testdb;+----------+-----------------------------------------------------------------+| Database | Create Database                                                 |+----------+-----------------------------------------------------------------+| testdb   | CREATE DATABASE &#96;testdb&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8 *&#x2F; |+----------+-----------------------------------------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除数据库"><a href="#5-删除数据库" class="headerlink" title="5.删除数据库"></a>5.删除数据库</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop database caiwu;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-使用数据库"><a href="#6-使用数据库" class="headerlink" title="6.使用数据库"></a>6.使用数据库</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; use game;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-切换数据库"><a href="#7-切换数据库" class="headerlink" title="7.切换数据库"></a>7.切换数据库</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select database();+------------+| database() |+------------+| game       |+------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、数据表操作"><a href="#三、数据表操作" class="headerlink" title="三、数据表操作"></a>三、数据表操作</h2><h3 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h3><pre class="line-numbers language-none"><code class="language-none">&gt; create table 表名(字段名称 数据类型 [属性], 字段名称 数据类型 [属性], .........)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-数据表类型"><a href="#2-数据表类型" class="headerlink" title="2.数据表类型"></a>2.数据表类型</h3><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><ul><li>int、smallint、tinyint、bigint、mediumint    整型</li><li>int unsigned无符号整型</li><li>float(5,3)单精度浮点数   4.178</li><li>double(5,3)双精度浮点数</li><li>decimal(5,3)财务</li></ul><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><ul><li>char(10)定长字符</li><li>varchar(20)变长字符</li><li>text字符</li><li>enum(“男”, “女”)枚举      ENUM(“yes”, “no”)</li></ul><h4 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h4><ul><li>dateYYYY-MM-DD</li><li>datetimeYYYY-MM-DD HH:MM:SS</li><li>timestampYYYY-MM-DD HH:MM:SS</li><li>在数据变化时，时间会自动更新</li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>primary key主键</li><li>unique key惟一键</li><li>not null不允许为空</li><li>auto_increment自动增长, 配合primary key使用</li><li>default “数据”设置字段的默认值</li></ul><h3 id="3-查看表"><a href="#3-查看表" class="headerlink" title="3.查看表"></a>3.查看表</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show tables;+----------------+| Tables_in_game |+----------------+| account        || tb01           |+----------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看表结构"><a href="#4-查看表结构" class="headerlink" title="4.查看表结构"></a>4.查看表结构</h3><pre class="line-numbers language-none"><code class="language-none">dexc 表命mysql&gt; desc account;+----------+------------------+------+-----+---------+----------------+| Field    | Type             | Null | Key | Default | Extra          |+----------+------------------+------+-----+---------+----------------+| id       | int(11)          | NO   | PRI | NULL    | auto_increment || name     | char(20)         | NO   |     | NULL    |                || password | char(30)         | NO   |     | NULL    |                || level    | int(10) unsigned | YES  |     | 1       |                |+----------+------------------+------+-----+---------+----------------+4 rows in set (0.03 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除表"><a href="#5-删除表" class="headerlink" title="5.删除表"></a>5.删除表</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop table tb01;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、MySQL存储引擎storage-engine"><a href="#四、MySQL存储引擎storage-engine" class="headerlink" title="四、MySQL存储引擎storage engine"></a>四、MySQL存储引擎storage engine</h2><h3 id="1-查看表的创建信息"><a href="#1-查看表的创建信息" class="headerlink" title="1.查看表的创建信息"></a>1.查看表的创建信息</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show create table account\G;*************************** 1. row ***************************       Table: accountCreate Table: CREATE TABLE &#96;account&#96; (  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,  &#96;name&#96; char(20) NOT NULL,  &#96;password&#96; char(30) NOT NULL,  &#96;level&#96; int(10) unsigned DEFAULT &#39;1&#39;,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;latin11 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看支持的存储引擎"><a href="#2-查看支持的存储引擎" class="headerlink" title="2.查看支持的存储引擎"></a>2.查看支持的存储引擎</h3><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show engines;+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        || MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         || MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         || BLACKHOLE          | YES     | &#x2F;dev&#x2F;null storage engine (anything you write to it disappears) | NO           | NO   | NO         || MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         || CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         || ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         || PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         || FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+9 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-存储引擎的介绍"><a href="#3-存储引擎的介绍" class="headerlink" title="3.存储引擎的介绍"></a>3.存储引擎的介绍</h3><ul><li><p>不同存储引擎影响数据库性能、功能</p></li><li><p>InnoDB(新版本默认引擎)</p><ul><li>支持事务 Transaction、外键</li><li>支持行级锁row level lock</li></ul></li><li><p>MYISAM(旧版本默认引擎)</p><ul><li>支持表级锁</li><li>不支持事务</li><li>查询性能较高</li></ul></li><li><p>MRG_MYISAM</p><ul><li>支持将多个MYISAM的表进行合并</li></ul></li><li><p>MEMORY</p><ul><li>使用内存来进行存储数据</li></ul></li><li><p>BLACKHOLE</p><ul><li>黑洞#存一个删除一个</li></ul></li></ul><h3 id="4-修改MySQL的默认存储引擎"><a href="#4-修改MySQL的默认存储引擎" class="headerlink" title="4.修改MySQL的默认存储引擎"></a>4.修改MySQL的默认存储引擎</h3><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;my.cnf[mysqld]default-storage-engine&#x3D;InnoDB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 笔记 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> mysql基本命令 </tag>
            
            <tag> sql语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据库系列教程】MySQL基本认识和安装</title>
      <link href="/2023/03/30/65/"/>
      <url>/2023/03/30/65/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【数据库系列教程】MySQL基本认识和安装"><a href="#【数据库系列教程】MySQL基本认识和安装" class="headerlink" title="【数据库系列教程】MySQL基本认识和安装"></a>【数据库系列教程】MySQL基本认识和安装</h1><p><strong>环境介绍</strong></p><ul><li>系统版本：Centos7</li><li>MySQL版本：5.7</li></ul><h2 id="一、关系型数据库管理系统"><a href="#一、关系型数据库管理系统" class="headerlink" title="一、关系型数据库管理系统"></a>一、关系型数据库管理系统</h2><ul><li>Relation DataBase Manage System 简称RDBMS</li></ul><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><ul><li>数据库</li><li>表<ul><li>字段 column</li><li>记录 record</li></ul></li></ul><h2 id="二、约束-constraint"><a href="#二、约束-constraint" class="headerlink" title="二、约束 constraint"></a>二、约束 constraint</h2><h3 id="1、域约束"><a href="#1、域约束" class="headerlink" title="1、域约束"></a>1、域约束</h3><ul><li>在字段进行数据类型限制</li><li>作用: 确保表中的某个字段的数据格式统一</li></ul><h3 id="2、检查性约束"><a href="#2、检查性约束" class="headerlink" title="2、检查性约束"></a>2、检查性约束</h3><ul><li>作用: 确保数据的合理性</li></ul><h3 id="3、主键约束-primary-key"><a href="#3、主键约束-primary-key" class="headerlink" title="3、主键约束   primary key"></a>3、主键约束   primary key</h3><ul><li>不允许出现重复数据</li><li>不允许为空</li><li>注意: 一张表只能有一个主键</li></ul><p>  </p><h3 id="4、惟一键约束-unique-key"><a href="#4、惟一键约束-unique-key" class="headerlink" title="4、惟一键约束   unique key"></a>4、惟一键约束   unique key</h3><ul><li>不允许重复、允许为空</li><li>一张表中可以存在多个惟一键</li></ul><p>  </p><h3 id="5、外键约束-Foreign-Key"><a href="#5、外键约束-Foreign-Key" class="headerlink" title="5、外键约束 Foreign Key"></a>5、外键约束 Foreign Key</h3><p>作用: 确保数据的完整性</p><h2 id="三、事务-Transaction"><a href="#三、事务-Transaction" class="headerlink" title="三、事务 Transaction"></a>三、事务 Transaction</h2><ul><li>作用: 确保多个修改操作要么全成功、全失败</li></ul><h2 id="四、安装Mysql"><a href="#四、安装Mysql" class="headerlink" title="四、安装Mysql"></a>四、安装Mysql</h2><ul><li>Mysql官网 <a href="https://www.mysql.com/">https://www.mysql.com</a></li><li>使用Mysql5.7版本</li><li>使用Centos7环境</li></ul><h3 id="1-创建本地仓库文件夹"><a href="#1-创建本地仓库文件夹" class="headerlink" title="1.创建本地仓库文件夹"></a>1.创建本地仓库文件夹</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mkdir &#x2F;mysql57<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-下载Mysql软件包"><a href="#2-下载Mysql软件包" class="headerlink" title="2.下载Mysql软件包"></a>2.下载Mysql软件包</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# wget https:&#x2F;&#x2F;cdn.mysql.com&#x2F;&#x2F;Downloads&#x2F;MySQL-5.7&#x2F;mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示没有wget命令请使用yum安装</p><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-解压软件包"><a href="#2-解压软件包" class="headerlink" title="2.解压软件包"></a>2.解压软件包</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# tar xf mysql-5.7.41-1.el7.x86_64.rpm-bundle.tar -C &#x2F;mysql57<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看解压的软件包"><a href="#3-查看解压的软件包" class="headerlink" title="3.查看解压的软件包"></a>3.查看解压的软件包</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# ls &#x2F;mysql57mysql-community-client-5.7.41-1.el7.x86_64.rpmmysql-community-common-5.7.41-1.el7.x86_64.rpmmysql-community-devel-5.7.41-1.el7.x86_64.rpmmysql-community-embedded-5.7.41-1.el7.x86_64.rpmmysql-community-embedded-compat-5.7.41-1.el7.x86_64.rpmmysql-community-embedded-devel-5.7.41-1.el7.x86_64.rpmmysql-community-libs-5.7.41-1.el7.x86_64.rpmmysql-community-libs-compat-5.7.41-1.el7.x86_64.rpmmysql-community-server-5.7.41-1.el7.x86_64.rpmmysql-community-test-5.7.41-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建yum仓库"><a href="#4-创建yum仓库" class="headerlink" title="4.创建yum仓库"></a>4.创建yum仓库</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y createrepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# createrepo &#x2F;mysql57Spawning worker 0 with 10 pkgsWorkers FinishedSaving Primary metadataSaving file lists metadataSaving other metadataGenerating sqlite DBsSqlite DBs complete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建yum源</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;mysql.repo[mysql5.7]name&#x3D;mysql5.7baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mysql57enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果提示没有vim命令可以使用vi或者安装vim</p><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# yum install -y vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-安装MySQL"><a href="#5-安装MySQL" class="headerlink" title="5.安装MySQL"></a>5.安装MySQL</h3><pre class="line-numbers language-none"><code class="language-none">root@node1 ~]# yum install -y mysql-comm*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6设置MySQL开机自启动"><a href="#6设置MySQL开机自启动" class="headerlink" title="6设置MySQL开机自启动"></a>6设置MySQL开机自启动</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# systemctl enable --now mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、修改MySQL用户密码"><a href="#五、修改MySQL用户密码" class="headerlink" title="五、修改MySQL用户密码"></a>五、修改MySQL用户密码</h2><ul><li>mysql默认管理员账号：root</li><li>mysql默认管理员密码是个随机数(每个人不一样)</li></ul><h3 id="1-查看日志获取旧密码"><a href="#1-查看日志获取旧密码" class="headerlink" title="1.查看日志获取旧密码"></a>1.查看日志获取旧密码</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# grep -i &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log 2023-03-30T07:32:52.766585Z 1 [Note] A temporary password is generated for root@localhost: h,!twK!1_)iQ#后面的12位默认随机密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-修改密码"><a href="#2-修改密码" class="headerlink" title="2.修改密码"></a>2.修改密码</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mysqladmin -u root -p password &quot;WWW.1.com&quot;#这里我要设置的新密码为WWW.1.comEnter password: #输入旧密码的时候不会显示  旧密码：“h,!twK!1_)iQ”mysqladmin: [Warning] Using a password on the command line interface can be insecure.Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-登录测试"><a href="#3-登录测试" class="headerlink" title="3.登录测试"></a>3.登录测试</h3><pre class="line-numbers language-none"><code class="language-none">[root@node1 ~]# mysql -uroot -pWWW.1.com#用户为root，密码是WWW.1.commysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 3Server version: 5.7.41 MySQL Community Server (GPL)Copyright (c) 2000, 2023, Oracle and&#x2F;or its affiliates.Oracle is a registered trademark of Oracle Corporation and&#x2F;or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、Mysql相关文件"><a href="#六、Mysql相关文件" class="headerlink" title="六、Mysql相关文件"></a>六、Mysql相关文件</h2><h3 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1.错误日志"></a>1.错误日志</h3><ul><li>&#x2F;var&#x2F;log&#x2F;mysqld.log</li></ul><h3 id="2-默认数据目录"><a href="#2-默认数据目录" class="headerlink" title="2.默认数据目录"></a>2.默认数据目录</h3><ul><li>&#x2F;var&#x2F;lib&#x2F;mysql</li></ul><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><ul><li>&#x2F;etc&#x2F;my.cnf</li></ul><pre class="line-numbers language-none"><code class="language-none">datadir&#x3D;数据目录socket&#x3D;套接字文件socket保存mysql监听的IP和端口用于接收客户端连接请求log-error&#x3D;错误日志pid-file&#x3D;pid文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、MySQL默认服务端口"><a href="#七、MySQL默认服务端口" class="headerlink" title="七、MySQL默认服务端口"></a>七、MySQL默认服务端口</h2><ul><li>TCP协议3306端口</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@master ~]# netstat -tunlp | grep mysqldtcp6       0      0 :::3306                 :::*                    LISTEN      971&#x2F;mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> linux </tag>
            
            <tag> 数据库 </tag>
            
            <tag> mysql安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】DNS域名解析服务</title>
      <link href="/2023/03/23/64/"/>
      <url>/2023/03/23/64/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】DNS域名解析服务"><a href="#【Linux基础服务教程】DNS域名解析服务" class="headerlink" title="【Linux基础服务教程】DNS域名解析服务"></a>【Linux基础服务教程】DNS域名解析服务</h1><h2 id="一、DNS服务介绍"><a href="#一、DNS服务介绍" class="headerlink" title="一、DNS服务介绍"></a>一、DNS服务介绍</h2><ul><li>DNS应用层协议  </li><li>全称：Domain Name System 域名系统</li><li>作用<ul><li>正向解析<ul><li>根据主机名查询对应 的IP</li></ul></li><li>反向解析<ul><li>根据IP查询对应的主机名</li></ul></li></ul></li></ul><h3 id="1-zone区域"><a href="#1-zone区域" class="headerlink" title="1.zone区域"></a>1.zone区域</h3><ul><li><p>正向区域</p><ul><li>一般就是二级域名<ul><li>jd.com</li><li>baidu.com</li><li>wangshengjj.com 等等</li></ul></li></ul></li><li><p>反向区域</p><ul><li>x.x.x.in-addr.arpa<ul><li>1.168.192.in-addr.arpa </li><li>1.1.10.in-addr.arpa</li></ul></li></ul></li></ul><h3 id="2-Record-记录"><a href="#2-Record-记录" class="headerlink" title="2.Record 记录"></a>2.Record 记录</h3><p>以下是常用记录</p><ol><li>A记录</li></ol><ul><li>记录主机名与IP地址的对应关系 </li><li>三级域名  A记录  IPV4地址</li><li><a href="http://www.baidu.com/">www.baidu.com</a>A3.3.3.3</li></ul><ol start="2"><li>AAAA记录</li></ol><ul><li>记录主机名与IP地址的对应关系 </li><li>三级域名  A记录  IPV6地址</li><li><a href="http://www.baidu.com/">www.baidu.com</a>A::1</li></ul><ol start="3"><li>PTR记录</li></ol><ul><li>反向指针记录</li><li>记录IP地址、主机名的对应关系 </li><li>10.168.192.in-addr.arpa</li><li>8PTRtest1.linux.com.#此域名对应IP为192.168.10.8</li><li>12PTRtest2.linux.com.#此域名对应IP为192.168.10.12</li></ul><ol start="4"><li>CNAME记录</li></ol><ul><li>别名记录、一个域名指向另一个域名</li><li><a href="http://www.baidu.com/">www.baidu.com</a>CNAME<a href="http://www.a.shifen.com/">www.a.shifen.com</a></li></ul><ol start="5"><li>MX记录</li></ol><ul><li><p>标识邮件服务器</p></li><li><p>必须配合A记录同时使用</p></li><li><p>MX5mail01.linux.com.</p></li><li><p>mail01.linux.comA5.5.5.5</p></li><li><p>MX  10mail02.linux.com</p></li><li><p>mail02.linux.comA7.7.7.7</p></li><li><p>数字5: 邮件服务器的优先级，数字越小，优先级越高</p></li></ul><ol start="6"><li>NS记录</li></ol><ul><li>标识DNS服务器</li><li>必须配合A记录同时使用</li><li>NSns01.linux.com.</li><li>ns01.linux.comA6.6.6.6</li></ul><h3 id="3-DNS服务用到的软件包和配置文件"><a href="#3-DNS服务用到的软件包和配置文件" class="headerlink" title="3.DNS服务用到的软件包和配置文件"></a>3.DNS服务用到的软件包和配置文件</h3><ul><li><p>软件</p><ul><li>bind</li><li>bind-chroot<ul><li>增强DNS服务安全性</li></ul></li></ul></li><li><p>配置文件  </p><ul><li>主配置文件 <ul><li>&#x2F;var&#x2F;named&#x2F;chroot&#x2F;etc&#x2F;named.conf</li></ul><p></p></li><li>数据文件&#x2F;记录文件 <ul><li>&#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;*</li></ul></li></ul></li></ul><h2 id="二、配置DNS实现正向解析"><a href="#二、配置DNS实现正向解析" class="headerlink" title="二、配置DNS实现正向解析"></a>二、配置DNS实现正向解析</h2><h3 id="二级域名：linux-com"><a href="#二级域名：linux-com" class="headerlink" title="二级域名：linux.com"></a>二级域名：linux.com</h3><table><thead><tr><th>服务器</th><th>地址</th><th>三级域名</th></tr></thead><tbody><tr><td>DNS服务器</td><td>192.168.140.10</td><td>ns01.linux.com</td></tr><tr><td>FTP服务器</td><td>10.1.1.1</td><td>ftpserver.linux.com</td></tr><tr><td>web服务器</td><td>10.1.1.2</td><td>web.linux.com</td></tr><tr><td>Mail服务器</td><td>10.1.1.3</td><td>mail01.linux.com</td></tr></tbody></table><h3 id="1-关闭防火墙和SElinux"><a href="#1-关闭防火墙和SElinux" class="headerlink" title="1.关闭防火墙和SElinux"></a>1.关闭防火墙和SElinux</h3><p><strong>过程省略</strong></p><h3 id="2-安装DNS软件包"><a href="#2-安装DNS软件包" class="headerlink" title="2.安装DNS软件包"></a>2.安装DNS软件包</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# yum install bind bind-chroot <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-在主配置文件创建域"><a href="#3-在主配置文件创建域" class="headerlink" title="3.在主配置文件创建域"></a>3.在主配置文件创建域</h3><p><strong>域：linux.com</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;etc&#x2F;named.confoptions &#123;    directory &quot;&#x2F;var&#x2F;named&quot;;      #指定记录文件的存放位置 &#125;;zone &quot;linux.com&quot; &#123;             #指定区域名    type master;               #指定区域类型为主区域    file &quot;linux.com.zone&quot;;     #指定linux.com区域对应的记录文件名称&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建记录文件、添加记录"><a href="#4-创建记录文件、添加记录" class="headerlink" title="4.创建记录文件、添加记录"></a>4.创建记录文件、添加记录</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;bind-9.11.4&#x2F;sample&#x2F;var&#x2F;named&#x2F;named.localhost  &#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;linux.com.zone#复制官方文档教程文件并改名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;linux.com.zone$TTL 1D@IN SOAlinux.com. xxxx.qq.com. (0; serial1D; refresh1H; retry1W; expire3H ); minimumNSns01.linux.com.ns01A192.168.140.10ftpserverA10.1.1.1webA10.1.1.2MX  5mail01.linux.com.mail01A10.1.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-启动DNS服务、并设置开机自启"><a href="#5-启动DNS服务、并设置开机自启" class="headerlink" title="5.启动DNS服务、并设置开机自启"></a>5.启动DNS服务、并设置开机自启</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# systemctl enable --now named named-chroot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-验证DNS服务器是否启动"><a href="#6-验证DNS服务器是否启动" class="headerlink" title="6.验证DNS服务器是否启动"></a>6.验证DNS服务器是否启动</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# ps -elf | grep name5 S named      7290      1  0  80   0 - 97735 sigsus 11:05 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;named -u named -c &#x2F;etc&#x2F;named.conf5 S named      7329      1  0  80   0 - 63898 sigsus 11:05 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;named -u named -c &#x2F;etc&#x2F;named.conf -t &#x2F;var&#x2F;named&#x2F;chroot0 S root       7356   6942  0  80   0 - 28177 pipe_w 11:06 pts&#x2F;0    00:00:00 grep --color&#x3D;auto name[root@dns_server ~]# netstat -tunlp | grep nameProto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    tcp        0      0 192.168.140.10:53       0.0.0.0:*               LISTEN      7329&#x2F;named          tcp        0      0 127.0.0.1:53            0.0.0.0:*               LISTEN      7290&#x2F;named          tcp        0      0 127.0.0.1:953           0.0.0.0:*               LISTEN      7290&#x2F;named          tcp6       0      0 ::1:53                  :::*                    LISTEN      7290&#x2F;named          tcp6       0      0 ::1:953                 :::*                    LISTEN      7290&#x2F;named          udp        0      0 192.168.140.10:53       0.0.0.0:*                           7329&#x2F;named          udp        0      0 127.0.0.1:53            0.0.0.0:*                           7329&#x2F;named          udp        0      0 127.0.0.1:53            0.0.0.0:*                           7290&#x2F;named          udp6       0      0 ::1:53                  :::*                                7290&#x2F;named  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DNS默认服务端口53&#x2F;tcp&#x2F;udp</li></ul><h3 id="7-验证DNS"><a href="#7-验证DNS" class="headerlink" title="7.验证DNS"></a>7.验证DNS</h3><h4 id="windows工具nslookup"><a href="#windows工具nslookup" class="headerlink" title="windows工具nslookup"></a>windows工具nslookup</h4><pre class="line-numbers language-none"><code class="language-none">C:\&gt;nslookup默认服务器:  gjjline.bta.net.cnAddress:  202.106.0.20&gt; server 192.168.140.10默认服务器:  [192.168.140.10]Address:  192.168.140.10&gt; ftpserver.linux.com服务器:  [192.168.140.10]Address:  192.168.140.10名称:    ftpserver.linux.comAddress:  10.1.1.1&gt; web.linux.com服务器:  [192.168.140.10]Address:  192.168.140.10名称:    web.linux.comAddress:  10.1.1.2&gt; mail01.linux.com服务器:  [192.168.140.10]Address:  192.168.140.10名称:    mail01.linux.comAddress:  10.1.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置DNS实现反向解析"><a href="#三、配置DNS实现反向解析" class="headerlink" title="三、配置DNS实现反向解析"></a>三、配置DNS实现反向解析</h2><h3 id="1-添加反向域"><a href="#1-添加反向域" class="headerlink" title="1.添加反向域"></a>1.添加反向域</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server named]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;etc&#x2F;named.confoptions &#123;    directory &quot;&#x2F;var&#x2F;named&quot;;&#125;;zone &quot;linux.com&quot; &#123;    type master;    file &quot;linux.com.zone&quot;; &#125;;zone &quot;1.1.10.in-addr.arpa&quot; &#123;    type master;    file &quot;10.1.1.zone&quot;;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加记录文件"><a href="#2-添加记录文件" class="headerlink" title="2.添加记录文件"></a>2.添加记录文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;10.1.1.zone[root@dns_server named]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;10.1.1.zone$TTL 1D@IN SOAlinux.com. xxxx.qq.com. (0; serial1D; refresh1H; retry1W; expire3H ); minimumNSns01.linux.com.ns01A192.168.140.101PTRftpserver.linux.com.2PTRweb.linux.com.3PTRmail01.linux.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重启服务"><a href="#3-重启服务" class="headerlink" title="3.重启服务"></a>3.重启服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server named]# systemctl restart named named-chroot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-验证反向解析"><a href="#4-验证反向解析" class="headerlink" title="4.验证反向解析"></a>4.验证反向解析</h3><pre class="line-numbers language-none"><code class="language-none">C:\Users\admin&gt;nslookup默认服务器:  gjjline.bta.net.cnAddress:  202.106.0.20&gt; server 192.168.140.10默认服务器:  [192.168.140.10]Address:  192.168.140.10&gt;&gt; 10.1.1.1服务器:  [192.168.140.10]Address:  192.168.140.10名称:    ftpserver.linux.comAddress:  10.1.1.1&gt; 10.1.1.2服务器:  [192.168.140.10]Address:  192.168.140.10名称:    web.linux.comAddress:  10.1.1.2&gt; 10.1.1.3服务器:  [192.168.140.10]Address:  192.168.140.10名称:    mail01.linux.comAddress:  10.1.1.3&gt; exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-linux测试工具dig"><a href="#5-linux测试工具dig" class="headerlink" title="5.linux测试工具dig"></a>5.linux测试工具dig</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# dig -t A mail01.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、配置DNS主从"><a href="#四、配置DNS主从" class="headerlink" title="四、配置DNS主从"></a>四、配置DNS主从</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><ul><li>192.168.140.10主DNS</li><li>192.168.140.11备DNS</li></ul><h3 id="2-关闭防火墙和SElinux"><a href="#2-关闭防火墙和SElinux" class="headerlink" title="2.关闭防火墙和SElinux"></a>2.关闭防火墙和SElinux</h3><p><strong>过程省略</strong></p><h3 id="3-修改主DNS配置文件，添加从服务器地址"><a href="#3-修改主DNS配置文件，添加从服务器地址" class="headerlink" title="3.修改主DNS配置文件，添加从服务器地址"></a>3.修改主DNS配置文件，添加从服务器地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;etc&#x2F;named.conf options &#123;    directory &quot;&#x2F;var&#x2F;named&quot;; &#125;;zone &quot;linux.com&quot; &#123;    type master;      file &quot;linux.com.zone&quot;;    allow-transfer &#123; 192.168.140.11; &#125;;    #指定从服务器地址&#125;;zone &quot;1.1.10.in-addr.arpa&quot; &#123;    type master;    file &quot;10.1.1.zone&quot;;    allow-transfer &#123; 192.168.140.11; &#125;; #指定从服务器地址&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-修改主DNS配置文件"><a href="#4-修改主DNS配置文件" class="headerlink" title="4.修改主DNS配置文件"></a>4.修改主DNS配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;linux.com.zone#修改正向解析配置文件$TTL 1D@IN SOAlinux.com. xxxx.qq.com. (0; serial1D; refresh1H; retry1W; expire3H ); minimumNSns01.linux.com.        NS      ns02.linux.com.#添加第二个DNS记录ns01A192.168.140.10ns02    A       192.168.140.11#添加从DNS的IPftpserverA10.1.1.1webA10.1.1.2MX  5mail01.linux.com.mail01A10.1.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@dns_server named]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;10.1.1.zone#修改反向解析配置文件$TTL 1D@IN SOAlinux.com. xxxx.qq.com. (0; serial1D; refresh1H; retry1W; expire3H ); minimumNSns01.linux.com.        NS      ns02.linux.com.#添加第二个DNS记录ns01A192.168.140.10ns02    A       192.168.140.11#添加从DNS的IP1PTRftpserver.linux.com.2PTRweb.linux.com.3PTRmail01.linux.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-重启主DNS服务"><a href="#5-重启主DNS服务" class="headerlink" title="5.重启主DNS服务"></a>5.重启主DNS服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@dns_server ~]# systemctl restart named named-chroot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-在从服务器安装DNS软件包"><a href="#6-在从服务器安装DNS软件包" class="headerlink" title="6.在从服务器安装DNS软件包"></a>6.在从服务器安装DNS软件包</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install bind bind-chroot <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-在从服务器创建相同域"><a href="#7-在从服务器创建相同域" class="headerlink" title="7.在从服务器创建相同域"></a>7.在从服务器创建相同域</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;var&#x2F;named&#x2F;chroot&#x2F;etc&#x2F;named.confoptions &#123;   directory &quot;&#x2F;var&#x2F;named&quot;;&#125;;zone &quot;linux.com&quot; &#123;    type slave;         #指定区域类型为从，代表要从主服务器上复制记录文件    file &quot;slaves&#x2F;linux.com.zone&quot;;     #记录文件的存放位置     masters &#123; 192.168.140.10; &#125;;     #指定主服务器地址&#125;;zone &quot;1.1.10.in-addr.arpa&quot; &#123;    type slave;    file &quot;slaves&#x2F;10.1.1.zone&quot;;    masters &#123; 192.168.140.10; &#125;; #指定主服务器地址&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-从DNS设置开机自启并启动服务"><a href="#8-从DNS设置开机自启并启动服务" class="headerlink" title="8.从DNS设置开机自启并启动服务"></a>8.从DNS设置开机自启并启动服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl enable --now named named-chroot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-验证主从是否完成同步"><a href="#9-验证主从是否完成同步" class="headerlink" title="9.验证主从是否完成同步"></a>9.验证主从是否完成同步</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls &#x2F;var&#x2F;named&#x2F;chroot&#x2F;var&#x2F;named&#x2F;slaves&#x2F;linux.com.zone10.1.1.zone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10-测试从服务器"><a href="#10-测试从服务器" class="headerlink" title="10.测试从服务器"></a>10.测试从服务器</h3><pre class="line-numbers language-none"><code class="language-none">C:\Users\admin&gt;nslookup默认服务器:  gjjline.bta.net.cnAddress:  202.106.0.20&gt;&gt; server 192.168.140.11默认服务器:  [192.168.140.11]Address:  192.168.140.11&gt;&gt; ftpserver.linux.com服务器:  [192.168.140.11]Address:  192.168.140.11名称:    ftpserver.linux.comAddress:  10.1.1.1&gt; web.linux.com服务器:  [192.168.140.11]Address:  192.168.140.11名称:    web.linux.comAddresses:  10.1.1.2          10.1.1.10&gt; mail01.linux.com服务器:  [192.168.140.11]Address:  192.168.140.11名称:    mail01.linux.comAddress:  10.1.1.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、本地hosts文件"><a href="#五、本地hosts文件" class="headerlink" title="五、本地hosts文件"></a>五、本地hosts文件</h2><ul><li>作用：记录主机名、IP地址的对应关系 </li><li>格式<ul><li>IP地址主机名</li></ul></li><li>文件目录：&#x2F;etc&#x2F;hosts</li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> DNS </tag>
            
            <tag> 域名解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近流行AI项目整合推荐</title>
      <link href="/2023/03/22/63/"/>
      <url>/2023/03/22/63/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最近流行AI项目整合推荐"><a href="#最近流行AI项目整合推荐" class="headerlink" title="最近流行AI项目整合推荐"></a>最近流行AI项目整合推荐</h1><h2 id="一、ChatGPT"><a href="#一、ChatGPT" class="headerlink" title="一、ChatGPT"></a>一、ChatGPT</h2><h3 id="1-ChatGPT搬到本地"><a href="#1-ChatGPT搬到本地" class="headerlink" title="1.ChatGPT搬到本地"></a>1.ChatGPT搬到本地</h3><p><strong><a href="https://github.com/acheong08/ChatGPT">https://github.com/acheong08/ChatGPT</a></strong></p><h3 id="2-ChatGPT接入微信"><a href="#2-ChatGPT接入微信" class="headerlink" title="2.ChatGPT接入微信"></a>2.ChatGPT接入微信</h3><p><strong><a href="https://github.com/AutumnWhj/ChatGPT-wechat-bot">https://github.com/AutumnWhj/ChatGPT-wechat-bot</a></strong></p><h3 id="3-ChatGPT接入QQ频道"><a href="#3-ChatGPT接入QQ频道" class="headerlink" title="3.ChatGPT接入QQ频道"></a>3.ChatGPT接入QQ频道</h3><p><strong><a href="https://github.com/Soulter/QQChannelChatGPT">https://github.com/Soulter/QQChannelChatGPT</a></strong></p><h3 id="4-ChatGPT接入YunZai-Bot"><a href="#4-ChatGPT接入YunZai-Bot" class="headerlink" title="4.ChatGPT接入YunZai-Bot"></a>4.ChatGPT接入YunZai-Bot</h3><p>miao-YunZai-Bot开源<a href="https://github.com/yoimiya-kokomi/Miao-Yunzai">地址</a></p><p><strong><a href="https://github.com/ikechan8370/chatgpt-plugin">https://github.com/ikechan8370/chatgpt-plugin</a></strong></p><h3 id="5-Bing-GPT接入本地"><a href="#5-Bing-GPT接入本地" class="headerlink" title="5.Bing GPT接入本地"></a>5.Bing GPT接入本地</h3><p><strong><a href="https://github.com/acheong08/EdgeGPT">https://github.com/acheong08/EdgeGPT</a></strong></p><h3 id="6-Alpaca-Lora-羊驼-Lora-轻量级-ChatGPT"><a href="#6-Alpaca-Lora-羊驼-Lora-轻量级-ChatGPT" class="headerlink" title="6.Alpaca-Lora (羊驼-Lora): 轻量级 ChatGPT"></a>6.Alpaca-Lora (羊驼-Lora): 轻量级 ChatGPT</h3><p><strong><a href="https://github.com/tloen/alpaca-lora">https://github.com/tloen/alpaca-lora</a></strong></p><h2 id="二、ChatGLM"><a href="#二、ChatGLM" class="headerlink" title="二、ChatGLM"></a>二、ChatGLM</h2><h3 id="1-清华开源，类似ChatGPT-只需消费级显卡即可运行"><a href="#1-清华开源，类似ChatGPT-只需消费级显卡即可运行" class="headerlink" title="1.清华开源，类似ChatGPT,只需消费级显卡即可运行"></a>1.清华开源，类似ChatGPT,只需消费级显卡即可运行</h3><p><strong><a href="https://github.com/THUDM/ChatGLM-6B">https://github.com/THUDM/ChatGLM-6B</a></strong></p><h2 id="三、Vits-AI翻唱"><a href="#三、Vits-AI翻唱" class="headerlink" title="三、Vits AI翻唱"></a>三、Vits AI翻唱</h2><h3 id="1-AI翻唱，AI语音"><a href="#1-AI翻唱，AI语音" class="headerlink" title="1.AI翻唱，AI语音"></a>1.AI翻唱，AI语音</h3><p><strong><a href="https://github.com/svc-develop-team/so-vits-svc">https://github.com/svc-develop-team/so-vits-svc</a></strong></p><h2 id="四、NovelAI-画图"><a href="#四、NovelAI-画图" class="headerlink" title="四、NovelAI 画图"></a>四、NovelAI 画图</h2><h3 id="1-最流行的AI画图开源项目"><a href="#1-最流行的AI画图开源项目" class="headerlink" title="1.最流行的AI画图开源项目"></a>1.最流行的AI画图开源项目</h3><p><strong><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">https://github.com/AUTOMATIC1111/stable-diffusion-webui</a></strong></p><h3 id="2-Naifu适合0基础新手"><a href="#2-Naifu适合0基础新手" class="headerlink" title="2.Naifu适合0基础新手"></a>2.Naifu适合0基础新手</h3><p><strong><a href="https://github.com/Mikubill/naifu-diffusion">https://github.com/Mikubill/naifu-diffusion</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> ChatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> Novelai </tag>
            
            <tag> 开源 </tag>
            
            <tag> 开源项目推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】NFS网络文件共享</title>
      <link href="/2023/03/20/62/"/>
      <url>/2023/03/20/62/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】NFS网络文件共享"><a href="#【Linux基础服务教程】NFS网络文件共享" class="headerlink" title="【Linux基础服务教程】NFS网络文件共享"></a>【Linux基础服务教程】NFS网络文件共享</h1><h2 id="一、关于NFS"><a href="#一、关于NFS" class="headerlink" title="一、关于NFS"></a>一、关于NFS</h2><ul><li>NFS   网络文件系统  </li><li>Network File System </li><li>NFS提供数据存储能力，同时借助RPC机制实现数据共享传输</li><li>作用<ul><li>中小型业务的共享存储 </li><li>适用于Linux系统间</li></ul></li></ul><p><img src="https://www.wangshengjj.work/upload/2023/03/nfs.png" alt="nfs"></p><h3 id="1-软件包和配置文件"><a href="#1-软件包和配置文件" class="headerlink" title="1.软件包和配置文件"></a>1.软件包和配置文件</h3><ul><li>软件<ul><li>nfs-utils, rpcbind</li></ul></li><li>配置文件 <ul><li>&#x2F;etc&#x2F;exports</li></ul></li></ul><h3 id="2-配置文件格式"><a href="#2-配置文件格式" class="headerlink" title="2.配置文件格式"></a>2.配置文件格式</h3><pre class="line-numbers language-none"><code class="language-none">目录名称客户端地址(权限,权限)     客户端地址(权限,权限)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="客户端地址"><a href="#客户端地址" class="headerlink" title="客户端地址"></a>客户端地址</h4><ul><li>单个地址192.168.1.1</li><li>网段192.168.1.0&#x2F;24</li><li>所有*</li><li>主机名node01.linux.com</li></ul><h4 id="常用权限"><a href="#常用权限" class="headerlink" title="常用权限"></a>常用权限</h4><ul><li>ro只读</li><li>rw读写</li><li>sync同步<ul><li>数据安全性高</li></ul></li><li>async异步<ul><li>数据处理速度快</li></ul></li><li>no_root_squash保留root用户权限</li></ul><h2 id="二、配置只读共享"><a href="#二、配置只读共享" class="headerlink" title="二、配置只读共享"></a>二、配置只读共享</h2><h3 id="1-关闭防火墙和SElinux"><a href="#1-关闭防火墙和SElinux" class="headerlink" title="1.关闭防火墙和SElinux"></a>1.关闭防火墙和SElinux</h3><p><strong>步骤省略</strong></p><h3 id="2-创建测试文件"><a href="#2-创建测试文件" class="headerlink" title="2.创建测试文件"></a>2.创建测试文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# mkdir &#x2F;webdata[root@nfsserver ~]# touch &#x2F;webdata&#x2F;&#123;1..10&#125;.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-安装软件包"><a href="#3-安装软件包" class="headerlink" title="3.安装软件包"></a>3.安装软件包</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# yum install nfs-utils rpcbind <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# vim &#x2F;etc&#x2F;exports&#x2F;webdata192.168.140.11(ro)  192.168.140.12(ro)#目标机的IP和只读权限，可以直接填写网段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-启动NFS服务"><a href="#5-启动NFS服务" class="headerlink" title="5.启动NFS服务"></a>5.启动NFS服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# systemctl start nfs-server[root@nfsserver ~]# systemctl enable nfs-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-查看共享目录"><a href="#6-查看共享目录" class="headerlink" title="6.查看共享目录"></a>6.查看共享目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# showmount -e localhost Export list for localhost:&#x2F;webdata 192.168.140.12,192.168.140.11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、客户端连接NFS服务器"><a href="#三、客户端连接NFS服务器" class="headerlink" title="三、客户端连接NFS服务器"></a>三、客户端连接NFS服务器</h2><p><strong>自行准备第二台虚拟机</strong></p><h3 id="1-安装NFS服务"><a href="#1-安装NFS服务" class="headerlink" title="1.安装NFS服务"></a>1.安装NFS服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install nfs-utils <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-挂载NFS服务器"><a href="#2-挂载NFS服务器" class="headerlink" title="2.挂载NFS服务器"></a>2.挂载NFS服务器</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;fstab 192.168.140.10:&#x2F;webdata &#x2F;webnfsdefaults0 0[root@localhost ~]# mount -a[root@localhost ~]# df -hT | grep &quot;web&quot;192.168.140.10:&#x2F;webdata nfs4       18G  1.3G   17G   7% &#x2F;web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、配置读写共享"><a href="#四、配置读写共享" class="headerlink" title="四、配置读写共享"></a>四、配置读写共享</h2><p><strong>回到NFS服务器</strong></p><h3 id="1-创建测试文件"><a href="#1-创建测试文件" class="headerlink" title="1.创建测试文件"></a>1.创建测试文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# mkdir &#x2F;dbdata[root@nfsserver ~]# touch &#x2F;dbdata&#x2F;&#123;1..10&#125;.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# cat &#x2F;etc&#x2F;exports&#x2F;dbdata192.168.140.11(rw,async,no_root_squash)    192.168.140.12(rw,async,no_root_squash)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>rw 读写权限</li><li>async 同步</li><li>no_root_squash 保留root用户权限#默认属主和属组是nfsnobody</li></ul><h3 id="3-添加权限-重要"><a href="#3-添加权限-重要" class="headerlink" title="3.添加权限(重要)"></a>3.添加权限(重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# chmod o+w &#x2F;dbdata&#x2F;#其他用户添加w权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-重读配置文件"><a href="#4-重读配置文件" class="headerlink" title="4.重读配置文件"></a>4.重读配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@nfsserver ~]# exportfs -rav  exporting 192.168.140.11:&#x2F;dbdataexporting 192.168.140.12:&#x2F;dbdataexporting 192.168.140.11:&#x2F;webdataexporting 192.168.140.12:&#x2F;webdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-客户端挂载"><a href="#5-客户端挂载" class="headerlink" title="5.客户端挂载"></a>5.客户端挂载</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;fstab 192.168.140.10:&#x2F;dbdata &#x2F;dbnfsdefaults0 0[root@localhost ~]# mount -a[root@localhost ~]# df -hT | grep &quot;db&quot;192.168.140.10:&#x2F;dbdata  nfs4       18G  1.3G   17G   7% &#x2F;db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】FTP文件共享服务</title>
      <link href="/2023/03/20/61/"/>
      <url>/2023/03/20/61/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】FTP文件共享服务"><a href="#【Linux基础服务教程】FTP文件共享服务" class="headerlink" title="【Linux基础服务教程】FTP文件共享服务"></a>【Linux基础服务教程】FTP文件共享服务</h1><h2 id="一、关于FTP"><a href="#一、关于FTP" class="headerlink" title="一、关于FTP"></a>一、关于FTP</h2><ul><li>FTP属于应用层协议 </li><li>文件传输协议 </li><li>作用<ul><li>共享文件</li><li>适用于员工间文件共享</li></ul></li></ul><h3 id="1-FTP服务端"><a href="#1-FTP服务端" class="headerlink" title="1.FTP服务端"></a>1.FTP服务端</h3><ul><li>软件<ul><li>vsftpd</li></ul></li><li>配置文件<ul><li>&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</li></ul></li></ul><h3 id="2-FTP数据存放目录"><a href="#2-FTP数据存放目录" class="headerlink" title="2.FTP数据存放目录"></a>2.FTP数据存放目录</h3><ul><li>存放共享文件的位置 </li><li>位置可自定义 </li><li>默认位置: <ul><li>&#x2F;var&#x2F;ftp</li></ul></li></ul><h2 id="二、安装FTP服务"><a href="#二、安装FTP服务" class="headerlink" title="二、安装FTP服务"></a>二、安装FTP服务</h2><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# yum install vsftpd [root@node01 ~]# systemctl start vsftpd#启动服务[root@node01 ~]# systemctl enable vsftpd#设置开机自启动[root@node01 ~]# netstat -tunlp | grep vsftpd#默认使用21端口TCP协议tcp6       0      0 :::21                   :::*                    LISTEN      7010&#x2F;vsftpd         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-FTP认证模式"><a href="#1-FTP认证模式" class="headerlink" title="1.FTP认证模式"></a>1.FTP认证模式</h3><ul><li>匿名认证</li><li>本地用户认证</li></ul><h2 id="三、匿名用户认证配置"><a href="#三、匿名用户认证配置" class="headerlink" title="三、匿名用户认证配置"></a>三、匿名用户认证配置</h2><h3 id="1-默认配置文件"><a href="#1-默认配置文件" class="headerlink" title="1.默认配置文件"></a>1.默认配置文件</h3><ul><li>&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</li></ul><h3 id="2-启用匿名认证"><a href="#2-启用匿名认证" class="headerlink" title="2.启用匿名认证"></a>2.启用匿名认证</h3><pre class="line-numbers language-none"><code class="language-none">anonymous_enable&#x3D;YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-允许匿名用户上传文件"><a href="#3-允许匿名用户上传文件" class="headerlink" title="3.允许匿名用户上传文件"></a>3.允许匿名用户上传文件</h3><pre class="line-numbers language-none"><code class="language-none">anon_upload_enable&#x3D;YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不允许直接在数据目录下上传文件，需要事先规划子目录</li><li>确认服务器本地匿名用户(ftp用户)对目录拥有读写权限</li></ul><h3 id="4-允许匿名用户上传目录"><a href="#4-允许匿名用户上传目录" class="headerlink" title="4.允许匿名用户上传目录"></a>4.允许匿名用户上传目录</h3><pre class="line-numbers language-none"><code class="language-none">anon_mkdir_write_enable&#x3D;YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-允许匿名用户进行修改或删除等其他操作"><a href="#5-允许匿名用户进行修改或删除等其他操作" class="headerlink" title="5.允许匿名用户进行修改或删除等其他操作"></a>5.允许匿名用户进行修改或删除等其他操作</h3><pre class="line-numbers language-none"><code class="language-none">anon_other_write_enable&#x3D;YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-允许匿名用户可正常下载自己上传的文件或目录"><a href="#6-允许匿名用户可正常下载自己上传的文件或目录" class="headerlink" title="6.允许匿名用户可正常下载自己上传的文件或目录"></a>6.允许匿名用户可正常下载自己上传的文件或目录</h3><pre class="line-numbers language-none"><code class="language-none">anon_umask&#x3D;022<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-修改匿名用户的数据目录"><a href="#7-修改匿名用户的数据目录" class="headerlink" title="7.修改匿名用户的数据目录"></a>7.修改匿名用户的数据目录</h3><pre class="line-numbers language-none"><code class="language-none">anon_root&#x3D;&#x2F;data <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、本地用户认证配置"><a href="#四、本地用户认证配置" class="headerlink" title="四、本地用户认证配置"></a>四、本地用户认证配置</h2><h3 id="1-默认配置文件-1"><a href="#1-默认配置文件-1" class="headerlink" title="1.默认配置文件"></a>1.默认配置文件</h3><ul><li>&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</li></ul><h3 id="2-本地用户默认数据目录"><a href="#2-本地用户默认数据目录" class="headerlink" title="2.本地用户默认数据目录"></a>2.本地用户默认数据目录</h3><ul><li>对应用户的家目录</li></ul><h3 id="3-启用本地用户认证"><a href="#3-启用本地用户认证" class="headerlink" title="3.启用本地用户认证"></a>3.启用本地用户认证</h3><pre class="line-numbers language-none"><code class="language-none">local_enable&#x3D;YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-修改本地用户数据目录"><a href="#4-修改本地用户数据目录" class="headerlink" title="4.修改本地用户数据目录"></a>4.修改本地用户数据目录</h3><pre class="line-numbers language-none"><code class="language-none">local_root&#x3D;数据目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> FTP </tag>
            
            <tag> FTP服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】双网卡绑定</title>
      <link href="/2023/03/19/60/"/>
      <url>/2023/03/19/60/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】双网卡绑定"><a href="#【Linux系列教程】双网卡绑定" class="headerlink" title="【Linux系列教程】双网卡绑定"></a>【Linux系列教程】双网卡绑定</h1><h2 id="一、网卡绑定模式"><a href="#一、网卡绑定模式" class="headerlink" title="一、网卡绑定模式"></a>一、网卡绑定模式</h2><ul><li>loadbalance<ul><li>负载均衡模式</li></ul></li><li>activebackup<ul><li>主备模式</li></ul></li></ul><h2 id="二、双网卡绑定"><a href="#二、双网卡绑定" class="headerlink" title="二、双网卡绑定"></a>二、双网卡绑定</h2><h3 id="1-虚拟机添加第二块网卡"><a href="#1-虚拟机添加第二块网卡" class="headerlink" title="1.虚拟机添加第二块网卡"></a>1.虚拟机添加第二块网卡</h3><p>添加过程省略</p><h3 id="2-删除2块网卡原有配置"><a href="#2-删除2块网卡原有配置" class="headerlink" title="2.删除2块网卡原有配置"></a>2.删除2块网卡原有配置</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection delete ens33 #虚拟机默认网卡1的名字[root@localhost ~]# nmcli connection delete ens36#注意不同环境网卡名字可能不一样#可使用UUID代替网卡名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-创建虚拟网卡team1"><a href="#3-创建虚拟网卡team1" class="headerlink" title="3.创建虚拟网卡team1"></a>3.创建虚拟网卡team1</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection add type team ifname team1 con-name team1 config &#39;&#123;&quot;runner&quot;:&#123;&quot;name&quot;:&quot;loadbalance&quot;&#125;&#125;&#39;#这里拿负载均衡模式做演示，team为网卡名，team1是配置文件名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-添加物理网卡到team1网卡上"><a href="#4-添加物理网卡到team1网卡上" class="headerlink" title="4.添加物理网卡到team1网卡上"></a>4.添加物理网卡到team1网卡上</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection add type team-slave ifname ens33 con-name team1-ens33 master team1连接 &quot;team1-ens33&quot; (1b4e9aab-e162-483d-9ca0-e7958b492de9) 已成功添加。[root@localhost ~]# nmcli connection add type team-slave ifname ens36 con-name team1-ens36 master team1连接 &quot;team1-ens36&quot; (46f55d0b-7ae6-4de0-81c4-8c7c00b62cd8) 已成功添加。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-配置静态地址"><a href="#5-配置静态地址" class="headerlink" title="5.配置静态地址"></a>5.配置静态地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection modify team1 ipv4.addresses &quot;192.168.140.200&#x2F;24&quot;[root@localhost ~]# nmcli connection modify team1 ipv4.gateway &quot;192.168.140.2&quot;[root@localhost ~]# nmcli connection modify team1 ipv4.dns &quot;223.5.5.5&quot;[root@localhost ~]# nmcli connection modify team1 +ipv4.dns &quot;223.6.6.6&quot;[root@localhost ~]# nmcli connection modify team1 ipv4.method manual #修改默认dhcp模式为none模式[root@localhost ~]# nmcli connection reload [root@localhost ~]# nmcli connection up team1#开启team1网卡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> linux网络 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 双网卡绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】DHCP服务</title>
      <link href="/2023/03/17/59/"/>
      <url>/2023/03/17/59/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】DHCP服务"><a href="#【Linux基础服务教程】DHCP服务" class="headerlink" title="【Linux基础服务教程】DHCP服务"></a>【Linux基础服务教程】DHCP服务</h1><h2 id="一、关于DHCP"><a href="#一、关于DHCP" class="headerlink" title="一、关于DHCP"></a>一、关于DHCP</h2><ul><li>DHCP应用层协议 </li><li>动态主机配置协议 </li><li>作用<ul><li>为网络中的主机自动分配IP信息</li></ul></li></ul><h3 id="1-DHCP服务"><a href="#1-DHCP服务" class="headerlink" title="1.DHCP服务"></a>1.DHCP服务</h3><h4 id="依赖DHCP软件包"><a href="#依赖DHCP软件包" class="headerlink" title="依赖DHCP软件包"></a>依赖DHCP软件包</h4><pre class="line-numbers language-none"><code class="language-none"># yum install -y dhcp# rpm -q dhcpdhcp-4.2.5-83.el7.centos.1.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>&#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</li></ul><h2 id="二、配置DHCP服务"><a href="#二、配置DHCP服务" class="headerlink" title="二、配置DHCP服务"></a>二、配置DHCP服务</h2><h3 id="1-关闭SELinux、防火墙、时间同步"><a href="#1-关闭SELinux、防火墙、时间同步" class="headerlink" title="1.关闭SELinux、防火墙、时间同步"></a>1.关闭SELinux、防火墙、时间同步</h3><pre class="line-numbers language-none"><code class="language-none"># systemctl stop firewalld.service# systemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># vi &#x2F;etc&#x2F;selinux&#x2F;configSELINUX&#x3D;disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-复制DHCP配置文件"><a href="#2-复制DHCP配置文件" class="headerlink" title="2.复制DHCP配置文件"></a>2.复制DHCP配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp-4.2.5&#x2F;dhcpd.conf.example &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf cp: overwrite ‘&#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf’? yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# vim &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf subnet 192.168.140.0 netmask 255.255.255.0 &#123;  range 192.168.140.100 192.168.140.188;  option routers 192.168.140.2;  option domain-name-servers 114.114.114.114, 223.5.5.5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-设置服务开启自启"><a href="#4-设置服务开启自启" class="headerlink" title="4.设置服务开启自启"></a>4.设置服务开启自启</h3><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# systemctl start dhcpd#启动服务[root@node01 ~]# systemctl enable dhcpd#设置开启自启Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;dhcpd.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;dhcpd.service.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# netstat -tunlp | grep dhcpudp        0      0 0.0.0.0:67              0.0.0.0:*                           17620&#x2F;dhcpd#默认使用udp&#x2F;67号端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-验证DHCP服务"><a href="#5-验证DHCP服务" class="headerlink" title="5.验证DHCP服务"></a>5.验证DHCP服务</h3><h4 id="关闭虚拟机默认DHCP服务"><a href="#关闭虚拟机默认DHCP服务" class="headerlink" title="关闭虚拟机默认DHCP服务"></a>关闭虚拟机默认DHCP服务</h4><p><img src="https://www.wangshengjj.work/upload/2023/03/dhcp.png" alt="dhcp"></p><h4 id="第二台虚拟机设置网卡工作模式为DHCP"><a href="#第二台虚拟机设置网卡工作模式为DHCP" class="headerlink" title="第二台虚拟机设置网卡工作模式为DHCP"></a>第二台虚拟机设置网卡工作模式为DHCP</h4><p><img src="https://www.wangshengjj.work/upload/2023/03/dhcp1.png" alt="dhcp1"></p><h2 id="三、DHCP工作原理"><a href="#三、DHCP工作原理" class="headerlink" title="三、DHCP工作原理"></a>三、DHCP工作原理</h2><h3 id="1-DHCP-Discovery-发现"><a href="#1-DHCP-Discovery-发现" class="headerlink" title="1.DHCP Discovery 发现"></a>1.DHCP Discovery 发现</h3><ul><li>检测网络中的dhcp服务器</li></ul><h3 id="2-DHCP-Offer提供"><a href="#2-DHCP-Offer提供" class="headerlink" title="2.DHCP Offer提供"></a>2.DHCP Offer提供</h3><ul><li>包含dhcp服务器准备分配IP信息</li></ul><h3 id="3-DHCP-Request请求"><a href="#3-DHCP-Request请求" class="headerlink" title="3.DHCP Request请求"></a>3.DHCP Request请求</h3><ul><li>询问是否可配置IP</li></ul><h3 id="4-DHCP-ACK-同意"><a href="#4-DHCP-ACK-同意" class="headerlink" title="4.DHCP ACK 同意"></a>4.DHCP ACK 同意</h3><p><img src="https://www.wangshengjj.work/upload/2023/03/dhcp2.png" alt="dhcp2"></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> DHCP </tag>
            
            <tag> DHCP服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux基础服务教程】SSH服务</title>
      <link href="/2023/03/17/58/"/>
      <url>/2023/03/17/58/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux基础服务教程】SSH服务"><a href="#【Linux基础服务教程】SSH服务" class="headerlink" title="【Linux基础服务教程】SSH服务"></a>【Linux基础服务教程】SSH服务</h1><h2 id="一、关于SSH"><a href="#一、关于SSH" class="headerlink" title="一、关于SSH"></a>一、关于SSH</h2><ol><li><p>SSH 应用层协议 </p><ul><li>实现Linux主机加密、远程连接 </li><li>适用于Linux服务器远程管理</li></ul></li><li><p>telnet</p><ul><li>远程连接，不加密</li><li>适用于局域网网络设备的远程连接</li></ul></li></ol><h2 id="二、SSH的使用"><a href="#二、SSH的使用" class="headerlink" title="二、SSH的使用"></a>二、SSH的使用</h2><h3 id="1-确保sshd服务正常开启"><a href="#1-确保sshd服务正常开启" class="headerlink" title="1.确保sshd服务正常开启"></a>1.确保sshd服务正常开启</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ps -elf | grep ssh4 S root       6541      1  0  80   0 - 28189 poll_s 09:55 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;sshd -D4 S root       6806   6541  0  80   0 - 39288 poll_s 09:56 ?        00:00:00 sshd: root@pts&#x2F;00 S root       6851   6808  0  80   0 - 28177 pipe_w 10:20 pts&#x2F;0    00:00:00 grep --color&#x3D;auto ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# netstat -tunlp | grep &quot;sshd&quot;tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      6541&#x2F;sshd           tcp6       0      0 :::22                   :::*                    LISTEN      6541&#x2F;sshd  #ssh默认使用22号端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>ssh服务端口:   22&#x2F;tcp</li></ul><h3 id="2-ssh对应的软件包"><a href="#2-ssh对应的软件包" class="headerlink" title="2.ssh对应的软件包"></a>2.ssh对应的软件包</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rpm -qf &#x2F;usr&#x2F;sbin&#x2F;sshd openssh-server-7.4p1-16.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-ssh命令"><a href="#3-ssh命令" class="headerlink" title="3.ssh命令"></a>3.ssh命令</h3><pre class="line-numbers language-none"><code class="language-none"># ssh 用户命@主机地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ssh root@192.168.140.10 uptime root@192.168.140.10&#39;s password:  10:33:44 up 38 min,  1 user,  load average: 0.00, 0.01, 0.02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、远程拷贝文件"><a href="#三、远程拷贝文件" class="headerlink" title="三、远程拷贝文件"></a>三、远程拷贝文件</h2><ol><li>scp<ul><li>全量拷贝工具</li></ul></li><li>rsync<ul><li>增量拷贝工具</li></ul></li></ol><h3 id="1-scp命令"><a href="#1-scp命令" class="headerlink" title="1.scp命令"></a>1.scp命令</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>依靠SSH协议</li><li>多文件的时候直接拷贝全部文件</li></ul><pre class="line-numbers language-none"><code class="language-none"># scp 源文件  用户名@服务器地址:目录 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-r 拷贝目录</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# scp &#x2F;opt&#x2F;file01.txt root@192.168.140.11:&#x2F;tmp #拷贝本机文件到对方主机[root@node01 ~]# scp root@192.168.140.11:&#x2F;etc&#x2F;passwd &#x2F;tmp&#x2F;#拷贝对方主机文件到本机[root@node01 ~]# scp -r &#x2F;opt&#x2F;linux&#x2F; root@192.168.140.11:&#x2F;tmp&#x2F;#拷贝本机目录到对方主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-rsync命令"><a href="#2-rsync命令" class="headerlink" title="2.rsync命令"></a>2.rsync命令</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>依靠SSH协议</li><li>多文件的时候只会拷贝近期修改过的文件</li><li>重复文件和未修改文件不会拷贝</li></ul><pre class="line-numbers language-none"><code class="language-none"># rsync -av 源文件 用户名@主机地址:目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、配置免密登录"><a href="#四、配置免密登录" class="headerlink" title="四、配置免密登录"></a>四、配置免密登录</h2><h3 id="1-生成秘钥文件"><a href="#1-生成秘钥文件" class="headerlink" title="1.生成秘钥文件"></a>1.生成秘钥文件</h3><pre class="line-numbers language-none"><code class="language-none"># ssh-keygen -t 加密类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# ssh-keygen -t rsa #使用RSA算法生成秘钥文件Generating public&#x2F;private rsa key pair.Enter file in which to save the key (&#x2F;root&#x2F;.ssh&#x2F;id_rsa):           #默认目录即可 Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub.The key fingerprint is:SHA256:SWcLrku9sR+q5j5KgGP6vyhJeS&#x2F;3LwZxzSs9hbKOecw root@node01.linux.comThe key&#39;s randomart image is:+---[RSA 2048]----+|                 ||                 ||        &#x3D; +      || .   . &#x3D; O o     ||o.o   o S +      ||o+ o . &#x3D; +       ||o.. o X + o      ||o. + *oE &#x3D; .     || .o.**O+*o.      |+----[SHA256]-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# ls &#x2F;root&#x2F;.ssh&#x2F;id_rsa  id_rsa.pub  known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>id_rsa 私钥文件</li><li>id_rsa.pub 公钥文件</li></ul><h3 id="2-拷贝公钥到目标服务器"><a href="#2-拷贝公钥到目标服务器" class="headerlink" title="2.拷贝公钥到目标服务器"></a>2.拷贝公钥到目标服务器</h3><pre class="line-numbers language-none"><code class="language-none"># ssh-copy-id 用户@主机地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# ssh-copy-id root@192.168.140.11 &#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: Source of key(s) to be installed: &quot;&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub&quot;&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed&#x2F;usr&#x2F;bin&#x2F;ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysroot@192.168.140.11&#39;s password: Number of key(s) added: 1Now try logging into the machine, with:   &quot;ssh &#39;root@192.168.140.11&#39;&quot;and check to make sure that only the key(s) you wanted were added.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自动将公钥拷贝到对方服务器用户家目录</li><li>&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>免密SSH基于用户</li><li>免密SSH是单向的</li></ul><h2 id="五、ssh服务配置文件"><a href="#五、ssh服务配置文件" class="headerlink" title="五、ssh服务配置文件"></a>五、ssh服务配置文件</h2><h3 id="1-配置文件目录"><a href="#1-配置文件目录" class="headerlink" title="1.配置文件目录"></a>1.配置文件目录</h3><ul><li>&#x2F;etc&#x2F;ssh&#x2F;sshd_config</li></ul><h3 id="2-常用修改配置项"><a href="#2-常用修改配置项" class="headerlink" title="2.常用修改配置项"></a>2.常用修改配置项</h3><h4 id="修改服务默认端口"><a href="#修改服务默认端口" class="headerlink" title="修改服务默认端口"></a>修改服务默认端口</h4><pre class="line-numbers language-none"><code class="language-none">Port 54321#默认端口是22[root@localhost ~]# systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="禁用密码认证"><a href="#禁用密码认证" class="headerlink" title="禁用密码认证"></a>禁用密码认证</h4><ul><li>请提前配置好免密！！！</li></ul><pre class="line-numbers language-none"><code class="language-none">PasswordAuthentication no#默认是yes参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="禁止root用户远程登录"><a href="#禁止root用户远程登录" class="headerlink" title="禁止root用户远程登录"></a>禁止root用户远程登录</h4><pre class="line-numbers language-none"><code class="language-none">PermitRootLogin no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="禁用DNS反解，加快SSH登录速度"><a href="#禁用DNS反解，加快SSH登录速度" class="headerlink" title="禁用DNS反解，加快SSH登录速度"></a>禁用DNS反解，加快SSH登录速度</h4><pre class="line-numbers language-none"><code class="language-none">UseDNS no <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
          <category> linux基础服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础服务 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> ssh </tag>
            
            <tag> 远程登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】计划任务</title>
      <link href="/2023/03/16/57/"/>
      <url>/2023/03/16/57/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】计划任务"><a href="#【Linux系列教程】计划任务" class="headerlink" title="【Linux系列教程】计划任务"></a>【Linux系列教程】计划任务</h1><h2 id="一、一次性任务"><a href="#一、一次性任务" class="headerlink" title="一、一次性任务"></a>一、一次性任务</h2><h3 id="1-前提条件：依赖atd服务"><a href="#1-前提条件：依赖atd服务" class="headerlink" title="1.前提条件：依赖atd服务"></a>1.前提条件：依赖atd服务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl status atd● atd.service - Job spooling tools   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;atd.service; enabled; vendor preset: enabled)   Active: active (running) since Mon 2022-07-25 10:38:47 CST; 1s ago Main PID: 7722 (atd)   CGroup: &#x2F;system.slice&#x2F;atd.service           └─7722 &#x2F;usr&#x2F;sbin&#x2F;atd -fJul 25 10:38:47 localhost systemd[1]: Started Job spooling tools.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置一次性任务"><a href="#2-设置一次性任务" class="headerlink" title="2.设置一次性任务"></a>2.设置一次性任务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# at 10:41#10:41执行任务at&gt; mkdir &#x2F;tmp&#x2F;abcat&gt; &lt;EOT&gt;job 2 at Mon Jul 25 10:41:00 2022<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ctrl + d提交任务</li></ul><h2 id="二、周期性任务"><a href="#二、周期性任务" class="headerlink" title="二、周期性任务"></a>二、周期性任务</h2><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1.用法"></a>1.用法</h3><pre class="line-numbers language-none"><code class="language-none"># crontab -e <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">分  时  日  月  周     命令 每天晚上十点半                          30 22 * * *每周三上午九点                          0 9 * * 3 每天上午八点半、九点半、十点半          30 8-10 * * * 每周一到周四的晚上八点                  0 20 * * 1-4 每周一，三，五晚上十一点半              30 23 * * 1,3,5每隔半个小时                            *&#x2F;30 * * * *上午八点到下午4点，每隔2个小时          0 8-16&#x2F;2 * * * <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">操作注意事项:   1、所有命令以绝对路径的方式写    2、%需要转义    \% <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看周期性任务"><a href="#2-查看周期性任务" class="headerlink" title="2.查看周期性任务"></a>2.查看周期性任务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# crontab -l*&#x2F;1 * * * *   &#x2F;usr&#x2F;bin&#x2F;touch &#x2F;tmp&#x2F;$(&#x2F;usr&#x2F;bin&#x2F;openssl rand -hex 10)*&#x2F;1 * * * *  &#x2F;usr&#x2F;bin&#x2F;mkdir &#x2F;tmp&#x2F;$(&#x2F;usr&#x2F;bin&#x2F;date +\%F_\%T)* *&#x2F;2 * * * &#x2F;usr&#x2F;sbin&#x2F;ntpdate 120.25.115.20 &amp;&gt; &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除任务"><a href="#3-删除任务" class="headerlink" title="3.删除任务"></a>3.删除任务</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# crontab -r#一次性删除所有任务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> linux任务 </tag>
            
            <tag> linux周期任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【linux系列教程】进程调度和控制</title>
      <link href="/2023/03/16/56/"/>
      <url>/2023/03/16/56/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【linux系列教程】进程调度和控制"><a href="#【linux系列教程】进程调度和控制" class="headerlink" title="【linux系列教程】进程调度和控制"></a>【linux系列教程】进程调度和控制</h1><ul><li>终端命令默认在前台运行</li></ul><h2 id="一、nohup命令"><a href="#一、nohup命令" class="headerlink" title="一、nohup命令"></a>一、nohup命令</h2><h3 id="1-将命令放到后台运行"><a href="#1-将命令放到后台运行" class="headerlink" title="1.将命令放到后台运行"></a>1.将命令放到后台运行</h3><pre class="line-numbers language-none"><code class="language-none"># nohup 命令 &amp; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># nohup sleep 100 &amp; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-查看后台运行的任务"><a href="#2-查看后台运行的任务" class="headerlink" title="2.查看后台运行的任务"></a>2.查看后台运行的任务</h3><pre class="line-numbers language-none"><code class="language-none"># jobs -l [1]+  5200 Running                 nohup sleep 100 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-讲任务调回前台"><a href="#3-讲任务调回前台" class="headerlink" title="3.讲任务调回前台"></a>3.讲任务调回前台</h3><pre class="line-numbers language-none"><code class="language-none"># fg 任务编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# fg 1nohup sleep 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-讲正在运行的任务调入后台，并且暂停运行"><a href="#4-讲正在运行的任务调入后台，并且暂停运行" class="headerlink" title="4.讲正在运行的任务调入后台，并且暂停运行"></a>4.讲正在运行的任务调入后台，并且暂停运行</h3><ul><li>ctrl + z</li></ul><h2 id="二、向进程发送信号"><a href="#二、向进程发送信号" class="headerlink" title="二、向进程发送信号"></a>二、向进程发送信号</h2><h3 id="1-kill命令"><a href="#1-kill命令" class="headerlink" title="1.kill命令"></a>1.kill命令</h3><pre class="line-numbers language-none"><code class="language-none"># kill  [-信号编号&#x2F;名称]   PID# killall [-信号编号&#x2F;名称]   进程名称 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看信号"><a href="#2-查看信号" class="headerlink" title="2.查看信号"></a>2.查看信号</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR111) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+338) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+843) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+1348) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-1253) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-758) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-263) SIGRTMAX-164) SIGRTMAX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-常用信号"><a href="#3-常用信号" class="headerlink" title="3.常用信号"></a>3.常用信号</h3><h4 id="15-SIGTERM"><a href="#15-SIGTERM" class="headerlink" title="15 SIGTERM"></a>15 SIGTERM</h4><ul><li>正常结束进程</li><li>默认</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# kill -15 6879[root@localhost ~]# kill 6887 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="9-SIGKILL"><a href="#9-SIGKILL" class="headerlink" title="9 SIGKILL"></a>9 SIGKILL</h4><ul><li>结束进程(异常)</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# kill -9 6893 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-SIGHUP"><a href="#1-SIGHUP" class="headerlink" title="1 SIGHUP"></a>1 SIGHUP</h4><ul><li>让进程重新读取配置文件</li></ul><pre class="line-numbers language-none"><code class="language-none"># kill -HUP 父进程ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rpm -q httpd#安装阿帕奇服务器测试httpd-2.4.6-97.el7.centos.5.x86_64[root@localhost ~]# [root@localhost ~]# systemctl start httpd[root@localhost ~]# [root@localhost ~]# ps -elf | grep http4 S root       7194      1  2  80   0 - 77604 poll_s 09:43 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     7195   7194  0  80   0 - 77604 inet_c 09:43 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     7196   7194  0  80   0 - 77604 inet_c 09:43 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     7197   7194  0  80   0 - 77604 inet_c 09:43 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     7198   7194  0  80   0 - 77604 inet_c 09:43 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND5 S apache     7199   7194  0  80   0 - 77604 inet_c 09:43 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND0 S root       7201   6829  0  80   0 - 28203 pipe_w 09:43 pts&#x2F;0    00:00:00 grep --color&#x3D;auto http[root@localhost ~]# [root@localhost ~]# netstat -tunlp | grep http#阿帕奇默认端口是80tcp6       0      0 :::80                   :::*                    LISTEN      7194&#x2F;httpd          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf           Listen 7777#修改监听端口为7777[root@localhost ~]# kill -HUP 7194[root@localhost ~]# netstat -tunlp | grep httptcp6       0      0 :::7777                 :::*                    LISTEN      7194&#x2F;httpd#修改成功，并且进程号没有变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 进程调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】查看进程</title>
      <link href="/2023/03/16/55/"/>
      <url>/2023/03/16/55/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】查看进程"><a href="#【Linux系列教程】查看进程" class="headerlink" title="【Linux系列教程】查看进程"></a>【Linux系列教程】查看进程</h1><h2 id="一、PS"><a href="#一、PS" class="headerlink" title="一、PS"></a>一、PS</h2><h3 id="1-查看当前终端运行的进程"><a href="#1-查看当前终端运行的进程" class="headerlink" title="1.查看当前终端运行的进程"></a>1.查看当前终端运行的进程</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ps   PID TTY          TIME CMD  6762 pts&#x2F;0    00:00:00 bash  6787 pts&#x2F;0    00:00:00 ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CMD进程名称</li><li>PID进程的ID</li></ul><h3 id="2-查看所有进程"><a href="#2-查看所有进程" class="headerlink" title="2.查看所有进程"></a>2.查看所有进程</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ps aux USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot          1  0.0  0.3 190828  3760 ?        Ss   09:06   0:00 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd --switched-root --system --deserialize 22root          2  0.0  0.0      0     0 ?        S    09:06   0:00 [kthreadd]root          3  0.0  0.0      0     0 ?        S    09:06   0:00 [ksoftirqd&#x2F;0]root          5  0.0  0.0      0     0 ?        S&lt;   09:06   0:00 [kworker&#x2F;0:0H]root          7  0.0  0.0      0     0 ?        S    09:06   0:00 [migration&#x2F;0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>VSZ虚拟内存集 </p><ul><li>物理内存、共享内存、swap虚拟内存</li><li>共享内存的作用<ul><li>进程间通信(IPC)</li></ul></li></ul></li><li><p>RSS物理内存集 </p><ul><li>进程所消耗实际的物理内存大小</li></ul></li><li><p>STAT 状态 </p><ul><li>R运行状态  </li><li>D不可中断的睡眠</li><li>S可中断的睡眠</li><li>T停止状态 </li><li>Z僵尸状态</li><li>s工作时会产生子进程</li><li>l工作时会产生线程</li><li>&lt;高优先级的进程 </li><li>N低优先级的进程</li><li>+前台进程</li></ul></li></ul><h3 id="3-查看进程树"><a href="#3-查看进程树" class="headerlink" title="3.查看进程树"></a>3.查看进程树</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# pstree systemd─┬─NetworkManager───2*[&#123;NetworkManager&#125;]        ├─VGAuthService        ├─agetty        ├─auditd───&#123;auditd&#125;        ├─crond        ├─dbus-daemon        ├─httpd───5*[httpd]        ├─irqbalance        ├─lvmetad        ├─master─┬─pickup        │        └─qmgr        ├─polkitd───6*[&#123;polkitd&#125;]        ├─rsyslogd───2*[&#123;rsyslogd&#125;]        ├─sshd─┬─sshd───bash───pstree        │      └─2*[sshd───bash───vim]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看进程-第二种"><a href="#4-查看进程-第二种" class="headerlink" title="4.查看进程(第二种)"></a>4.查看进程(第二种)</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ps -elf F S UID         PID   PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD4 S root          1      0  0  80   0 - 47743 ep_pol 09:06 ?        00:00:01 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd --switched-root --system --deser1 S root          2      0  0  80   0 -     0 kthrea 09:06 ?        00:00:00 [kthreadd]1 S root          3      2  0  80   0 -     0 smpboo 09:06 ?        00:00:00 [ksoftirqd&#x2F;0]1 S root          5      2  0  60 -20 -     0 worker 09:06 ?        00:00:00 [kworker&#x2F;0:0H]1 S root          7      2  0 -40   - -     0 smpboo 09:06 ?        00:00:00 [migration&#x2F;0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-查看进程id"><a href="#5-查看进程id" class="headerlink" title="5.查看进程id"></a>5.查看进程id</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# pidof ping7982<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、top动态查看"><a href="#二、top动态查看" class="headerlink" title="二、top动态查看"></a>二、top动态查看</h2><pre class="line-numbers language-none"><code class="language-none"># top <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>M按内存的占用比显示进程</li><li>P按CPU的占用比显示进程</li><li>q退出</li></ul><h3 id="1-查看CPU负载"><a href="#1-查看CPU负载" class="headerlink" title="1.查看CPU负载"></a>1.查看CPU负载</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# uptime  13:58:08 up  4:52,  2 users,  load average: 0.00, 0.02, 0.05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>load average<ul><li>最近1分钟、5分钟、15分钟的平均负载 </li><li>该值不长期超过CPU的个数，说明负载正常</li></ul></li></ul><h3 id="2-查看CPU负载"><a href="#2-查看CPU负载" class="headerlink" title="2.查看CPU负载"></a>2.查看CPU负载</h3><pre class="line-numbers language-none"><code class="language-none">%Cpu(s):  1.4 us,  0.0 sy,  0.0 ni, 98.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>us用户进程占用的CPU百分比</li><li>sy系统进程占用的CPU百分比</li><li>idCPU的空闲</li><li>wa等待IO完成的进程所占用的CPU百分比</li></ul><h2 id="三、CPU"><a href="#三、CPU" class="headerlink" title="三、CPU"></a>三、CPU</h2><h3 id="1-查看CPU型号"><a href="#1-查看CPU型号" class="headerlink" title="1.查看CPU型号"></a>1.查看CPU型号</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lscpuArchitecture:          x86_64CPU op-mode(s):        32-bit, 64-bitByte Order:            Little EndianCPU(s):                1On-line CPU(s) list:   0Thread(s) per core:    1Core(s) per socket:    1Socket(s):             1NUMA node(s):          1Vendor ID:             GenuineIntelCPU family:            6Model:                 165Model name:            Intel(R) Core(TM) i7-10875H CPU @ 2.30GHzStepping:              2CPU MHz:               2304.006BogoMIPS:              4608.01Hypervisor vendor:     VMwareVirtualization type:   fullL1d cache:             32KL1i cache:             32KL2 cache:              256KL3 cache:              16384K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看CPU负载-1"><a href="#2-查看CPU负载-1" class="headerlink" title="2.查看CPU负载"></a>2.查看CPU负载</h3><pre class="line-numbers language-none"><code class="language-none"># top # uptime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-查看CPU使用率"><a href="#3-查看CPU使用率" class="headerlink" title="3.查看CPU使用率"></a>3.查看CPU使用率</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mpstat 2 5Linux 3.10.0-1160.el7.x86_64 (localhost.localdomain) 03&#x2F;16&#x2F;2023 _x86_64_(1 CPU)05:38:17 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle05:38:19 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.0005:38:21 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.0005:38:23 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.0005:38:25 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.0005:38:27 PM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00Average:     all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、内存"><a href="#四、内存" class="headerlink" title="四、内存"></a>四、内存</h2><h3 id="1-查看内存容量"><a href="#1-查看内存容量" class="headerlink" title="1.查看内存容量"></a>1.查看内存容量</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# free -m              total        used        free      shared  buff&#x2F;cache   availableMem:           1819         255         687           9         876        1401Swap:          2047           0        2047<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-动态查看内存使用情况"><a href="#2-动态查看内存使用情况" class="headerlink" title="2.动态查看内存使用情况"></a>2.动态查看内存使用情况</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vmstat 2 5procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 2  0      0 704344   4804 892304    0    0   179   650  203  374  0  1 99  0  0 0  0      0 704220   4804 892336    0    0     0     0   84  150  0  0 100  0  0 0  0      0 704220   4804 892336    0    0     0     0   89  162  0  0 100  0  0 0  0      0 704220   4804 892336    0    0     0     0   85  150  0  0 100  0  0 0  0      0 704220   4804 892336    0    0     0     0   84  147  0  1 100  0  0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、硬盘"><a href="#五、硬盘" class="headerlink" title="五、硬盘"></a>五、硬盘</h2><h3 id="1-查看硬盘容量"><a href="#1-查看硬盘容量" class="headerlink" title="1.查看硬盘容量"></a>1.查看硬盘容量</h3><pre class="line-numbers language-none"><code class="language-none">Filesystem              Type      Size  Used Avail Use% Mounted ondevtmpfs                devtmpfs  898M     0  898M   0% &#x2F;devtmpfs                   tmpfs     910M     0  910M   0% &#x2F;dev&#x2F;shmtmpfs                   tmpfs     910M  9.6M  901M   2% &#x2F;runtmpfs                   tmpfs     910M     0  910M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;dev&#x2F;mapper&#x2F;centos-root xfs        18G  2.0G   16G  12% &#x2F;&#x2F;dev&#x2F;sda1               xfs       497M  144M  354M  29% &#x2F;boottmpfs                   tmpfs     182M     0  182M   0% &#x2F;run&#x2F;user&#x2F;0&#x2F;dev&#x2F;sdb1               ext4      7.8G   37M  7.3G   1% &#x2F;htop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看硬盘inode"><a href="#2-查看硬盘inode" class="headerlink" title="2.查看硬盘inode"></a>2.查看硬盘inode</h3><p>关于inode<a href="https://www.wangshengjj.work/archives/44">点我跳转查看</a></p><pre class="line-numbers language-none"><code class="language-none"># df -i <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看磁盘IO"><a href="#3-查看磁盘IO" class="headerlink" title="3.查看磁盘IO"></a>3.查看磁盘IO</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# iostat 1 3Linux 3.10.0-957.el7.x86_64 (localhost.localdomain) 07&#x2F;22&#x2F;2022 _x86_64_(4 CPU)avg-cpu:  %user   %nice %system %iowait  %steal   %idle           0.02    0.00    0.03    0.00    0.00   99.95Device:            tps    kB_read&#x2F;s    kB_wrtn&#x2F;s    kB_read    kB_wrtnsda               0.40        10.97         1.13     258438      26525scd0              0.00         0.04         0.00       1028          0dm-0              0.31        10.45         1.04     245990      24457dm-1              0.00         0.10         0.00       2460          0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、网卡"><a href="#六、网卡" class="headerlink" title="六、网卡"></a>六、网卡</h2><h3 id="1-查看网卡IO流量"><a href="#1-查看网卡IO流量" class="headerlink" title="1.查看网卡IO流量"></a>1.查看网卡IO流量</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sar -n DEV 203:47:39 PM     IFACE   rxpck&#x2F;s   txpck&#x2F;s    rxkB&#x2F;s    txkB&#x2F;s   rxcmp&#x2F;s   txcmp&#x2F;s  rxmcst&#x2F;s03:47:40 PM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.0003:47:40 PM     ens33      7.89     10.53      0.58      1.79      0.00      0.00      0.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 进程 </tag>
            
            <tag> pid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】yum工具管理rpm软件</title>
      <link href="/2023/03/15/54/"/>
      <url>/2023/03/15/54/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】yum工具管理rpm软件"><a href="#【Linux系列教程】yum工具管理rpm软件" class="headerlink" title="【Linux系列教程】yum工具管理rpm软件"></a>【Linux系列教程】yum工具管理rpm软件</h1><h2 id="一、yum工具介绍"><a href="#一、yum工具介绍" class="headerlink" title="一、yum工具介绍"></a>一、yum工具介绍</h2><ol><li><p>优势</p><ul><li>自动解决软件的依赖关系</li></ul></li><li><p>yum源配置文件</p><ul><li>事先存在合适的yum源配置文件  </li><li>说明RPM软件安装的存放位置</li></ul></li><li><p>yum源类型 </p><ul><li>本地源</li><li>FTP源</li><li>HTTP源</li></ul></li><li><p>yum源配置文件存放位置 </p><ul><li>&#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo</li></ul></li></ol><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repoCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install httpd替换centos的base源（华为、阿里、网易) [root@localhost ~]# wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置本地源安装软件"><a href="#二、配置本地源安装软件" class="headerlink" title="二、配置本地源安装软件"></a>二、配置本地源安装软件</h2><h3 id="1、备份自带的HTTP源"><a href="#1、备份自带的HTTP源" class="headerlink" title="1、备份自带的HTTP源"></a>1、备份自带的HTTP源</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;etc&#x2F;yum.repos.d&#x2F;bak[root@localhost ~]# mv &#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;bak[root@localhost ~]# ls &#x2F;etc&#x2F;yum.repos.d&#x2F;bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、编写本地源"><a href="#2、编写本地源" class="headerlink" title="2、编写本地源"></a>2、编写本地源</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;centos7.repo [centos7]name&#x3D;centos7baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;opt&#x2F;softwareenabled&#x3D;1gpgcheck&#x3D;0[root@localhost ~]# mkdir &#x2F;opt&#x2F;software[root@localhost ~]# mount &#x2F;dev&#x2F;sr0 &#x2F;opt&#x2F;softwaremount: &#x2F;dev&#x2F;sr0 is write-protected, mounting read-only<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、清除旧的yum缓存"><a href="#3、清除旧的yum缓存" class="headerlink" title="3、清除旧的yum缓存"></a>3、清除旧的yum缓存</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum clean allLoaded plugins: fastestmirrorCleaning repos: centos7Cleaning up list of fastest mirrorsOther repos take up 145 M of disk space (use --verbose for details)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、查看可用yum源"><a href="#4、查看可用yum源" class="headerlink" title="4、查看可用yum源"></a>4、查看可用yum源</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum repolist     Loaded plugins: fastestmirrorDetermining fastest mirrorscentos7                                                                                                        | 3.6 kB  00:00:00     (1&#x2F;2): centos7&#x2F;group_gz                                                                                        | 166 kB  00:00:00     (2&#x2F;2): centos7&#x2F;primary_db                                                                                      | 6.0 MB  00:00:00     repo id                                                         repo name                                                       statuscentos7                                                         centos7                                                         10,019repolist: 10,019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、测试安装软件"><a href="#5、测试安装软件" class="headerlink" title="5、测试安装软件"></a>5、测试安装软件</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install lrzsz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rpm -q lrzszlrzsz-0.12.20-36.el7.x86_64[root@localhost ~]# yum install php vsftpd <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置FTP源安装ceph-deploy软件"><a href="#三、配置FTP源安装ceph-deploy软件" class="headerlink" title="三、配置FTP源安装ceph-deploy软件"></a>三、配置FTP源安装ceph-deploy软件</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;etc&#x2F;yum.repos.d&#x2F;ceph.repo[ceph]name&#x3D;cephbaseurl&#x3D;ftp:&#x2F;&#x2F;10.11.0.254&#x2F;software&#x2F;ceph-mimic&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum clean allLoaded plugins: fastestmirrorCleaning repos: centos7 cephCleaning up list of fastest mirrorsOther repos take up 145 M of disk space (use --verbose for details)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum repolistLoaded plugins: fastestmirrorDetermining fastest mirrorscentos7                                                                                                        | 3.6 kB  00:00:00     ceph                                                                                                           | 2.9 kB  00:00:00     (1&#x2F;3): centos7&#x2F;group_gz                                                                                        | 166 kB  00:00:00     (2&#x2F;3): centos7&#x2F;primary_db                                                                                      | 6.0 MB  00:00:00     (3&#x2F;3): ceph&#x2F;primary_db                                                                                         | 755 kB  00:00:00     repo id                                                         repo name                                                       statuscentos7                                                         centos7                                                         10,019ceph                                                            ceph                                                               266repolist: 10,285[root@localhost ~]# yum install ceph-deploy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、配置HTTP源安装openstack-keystone软件"><a href="#四、配置HTTP源安装openstack-keystone软件" class="headerlink" title="四、配置HTTP源安装openstack-keystone软件"></a>四、配置HTTP源安装openstack-keystone软件</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;etc&#x2F;yum.repos.d&#x2F;openstack.repo [openstack]name&#x3D;openstackbaseurl&#x3D;http:&#x2F;&#x2F;mirrors.163.com&#x2F;centos&#x2F;7.9.2009&#x2F;cloud&#x2F;x86_64&#x2F;openstack-queens&#x2F;enabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum repolistLoaded plugins: fastestmirrorDetermining fastest mirrorscentos7                                                                                                        | 3.6 kB  00:00:00     ceph                                                                                                           | 2.9 kB  00:00:00     openstack                                                                                                      | 3.0 kB  00:00:00     (1&#x2F;4): centos7&#x2F;group_gz                                                                                        | 166 kB  00:00:00     (2&#x2F;4): centos7&#x2F;primary_db                                                                                      | 6.0 MB  00:00:00     (3&#x2F;4): ceph&#x2F;primary_db                                                                                         | 755 kB  00:00:00     (4&#x2F;4): openstack&#x2F;primary_db                                                                                    | 1.2 MB  00:00:31     repo id                                                         repo name                                                       statuscentos7                                                         centos7                                                         10,019ceph                                                            ceph                                                               266openstack                                                       openstack                                                        3,116repolist: 13,401[root@localhost ~]# yum install openstack-keystone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、yum缓存、制作yum仓库"><a href="#五、yum缓存、制作yum仓库" class="headerlink" title="五、yum缓存、制作yum仓库"></a>五、yum缓存、制作yum仓库</h2><h3 id="1、yum缓存功能"><a href="#1、yum缓存功能" class="headerlink" title="1、yum缓存功能"></a>1、yum缓存功能</h3><ul><li>缓存软件的安装包</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;yum.conf [main]cachedir&#x3D;&#x2F;var&#x2F;cache&#x2F;yum&#x2F;$basearch&#x2F;$releaseverkeepcache&#x3D;1[root@localhost ~]# find &#x2F;var&#x2F;cache&#x2F;yum&#x2F; -name &quot;*.rpm&quot; -exec cp &#123;&#125; &#x2F;openstack&#x2F; \;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、制作yum仓库"><a href="#2、制作yum仓库" class="headerlink" title="2、制作yum仓库"></a>2、制作yum仓库</h3><pre class="line-numbers language-none"><code class="language-none"># createrepo 目录名称 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、yum常用功能"><a href="#六、yum常用功能" class="headerlink" title="六、yum常用功能"></a>六、yum常用功能</h2><h3 id="1、安装软件"><a href="#1、安装软件" class="headerlink" title="1、安装软件"></a>1、安装软件</h3><pre class="line-numbers language-none"><code class="language-none"># yum install 软件名称  软件名称 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、卸载软件"><a href="#2、卸载软件" class="headerlink" title="2、卸载软件"></a>2、卸载软件</h3><pre class="line-numbers language-none"><code class="language-none"># yum remove 软件名称 软件名称 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、更新软件"><a href="#3、更新软件" class="headerlink" title="3、更新软件"></a>3、更新软件</h3><pre class="line-numbers language-none"><code class="language-none"># yum update 软件名称 软件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、清除yum缓存"><a href="#4、清除yum缓存" class="headerlink" title="4、清除yum缓存"></a>4、清除yum缓存</h3><pre class="line-numbers language-none"><code class="language-none"># yum clean all <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、查看可用的yum源"><a href="#5、查看可用的yum源" class="headerlink" title="5、查看可用的yum源"></a>5、查看可用的yum源</h3><pre class="line-numbers language-none"><code class="language-none"># yum repolist <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、查询文件对应的软件"><a href="#6、查询文件对应的软件" class="headerlink" title="6、查询文件对应的软件"></a>6、查询文件对应的软件</h3><pre class="line-numbers language-none"><code class="language-none"># yum provides 文件名称 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> yum源 </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】RPM安装管理器</title>
      <link href="/2023/03/15/53/"/>
      <url>/2023/03/15/53/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】RPM安装管理器"><a href="#【Linux系列教程】RPM安装管理器" class="headerlink" title="【Linux系列教程】RPM安装管理器"></a>【Linux系列教程】RPM安装管理器</h1><h2 id="一、软件包类型"><a href="#一、软件包类型" class="headerlink" title="一、软件包类型"></a>一、软件包类型</h2><ul><li>.rpm<ul><li>安装简单</li><li>源码软件</li></ul></li><li>.tar.gz, .tar.bz2<ul><li>安装复杂</li><li>灵活性高</li></ul></li></ul><h2 id="二、RPM软件安装包的组成"><a href="#二、RPM软件安装包的组成" class="headerlink" title="二、RPM软件安装包的组成"></a>二、RPM软件安装包的组成</h2><pre class="line-numbers language-none"><code class="language-none">zlib-1.2.7-18.el7.x86_64.rpm软件名-版本号.软件支持的系统.软件支持的平台.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、RPM命令"><a href="#三、RPM命令" class="headerlink" title="三、RPM命令"></a>三、RPM命令</h2><pre class="line-numbers language-none"><code class="language-none"># rpm -ivh 软件包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>i        安装</li><li>v显示安装过程 </li><li>h以#的方式显示软件的安装进度</li></ul><h3 id="1-安装dhcp软件"><a href="#1-安装dhcp软件" class="headerlink" title="1.安装dhcp软件"></a>1.安装dhcp软件</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rpm -ivh &#x2F;mnt&#x2F;Packages&#x2F;dhcp-4.2.5-82.el7.centos.x86_64.rpm 警告：&#x2F;mnt&#x2F;Packages&#x2F;dhcp-4.2.5-82.el7.centos.x86_64.rpm: 头V3 RSA&#x2F;SHA256 Signature, 密钥 ID f4a80eb5: NOKEY准备中...                          ################################# [100%]正在升级&#x2F;安装...   1:dhcp-12:4.2.5-82.el7.centos      ################################# [100%]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看软件是否安装"><a href="#2-查看软件是否安装" class="headerlink" title="2.查看软件是否安装"></a>2.查看软件是否安装</h3><ul><li>-q查看是否安装</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rpm -q dhcpdhcp-4.2.5-82.el7.centos.x86_64[root@localhost ~]# rpm -q samba 未安装软件包 samba <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查找文件对应的软件"><a href="#3-查找文件对应的软件" class="headerlink" title="3.查找文件对应的软件"></a>3.查找文件对应的软件</h3><ul><li>-f</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# which vim&#x2F;usr&#x2F;bin&#x2F;vim[root@localhost ~]# rpm -qf &#x2F;usr&#x2F;bin&#x2F;vimvim-enhanced-7.4.629-7.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查找软件生成的文件"><a href="#4-查找软件生成的文件" class="headerlink" title="4.查找软件生成的文件"></a>4.查找软件生成的文件</h3><ul><li>-a</li></ul><pre class="line-numbers language-none"><code class="language-none"># rpm -ql coreutils# rpm -qa dhcp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-卸载软件"><a href="#5-卸载软件" class="headerlink" title="5.卸载软件"></a>5.卸载软件</h3><ul><li>-e</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rpm -q dhcpdhcp-4.2.5-82.el7.centos.x86_64[root@localhost ~]# [root@localhost ~]# rpm -e dhcp[root@localhost ~]# rpm -q dhcp未安装软件包 dhcp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> yum </tag>
            
            <tag> rpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络笔记】TCP连接三次握手</title>
      <link href="/2023/03/14/52/"/>
      <url>/2023/03/14/52/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【网络笔记】TCP连接三次握手"><a href="#【网络笔记】TCP连接三次握手" class="headerlink" title="【网络笔记】TCP连接三次握手"></a>【网络笔记】TCP连接三次握手</h1><h2 id="TCP连接三次握手"><a href="#TCP连接三次握手" class="headerlink" title="TCP连接三次握手"></a>TCP连接三次握手</h2><p><img src="https://www.wangshengjj.work/upload/2023/03/tcp.png" alt="tcp"></p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 网络 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux网络 </tag>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】配置静态路由</title>
      <link href="/2023/03/13/51/"/>
      <url>/2023/03/13/51/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】配置静态路由"><a href="#【Linux系列教程】配置静态路由" class="headerlink" title="【Linux系列教程】配置静态路由"></a>【Linux系列教程】配置静态路由</h1><h2 id="一、配置虚拟机"><a href="#一、配置虚拟机" class="headerlink" title="一、配置虚拟机"></a>一、配置虚拟机</h2><h3 id="1-实验需要的环境："><a href="#1-实验需要的环境：" class="headerlink" title="1.实验需要的环境："></a>1.实验需要的环境：</h3><h4 id="实现PC1和PC2之间互通"><a href="#实现PC1和PC2之间互通" class="headerlink" title="实现PC1和PC2之间互通"></a>实现PC1和PC2之间互通</h4><ul><li>4台虚拟机，分别命名为PC1、PC2、R1、R2</li><li>划分网段：<ul><li>192.168.1.0</li><li>192.168.2.0</li><li>192.168.3.0</li></ul></li></ul><p><img src="https://www.wangshengjj.work/upload/2023/03/route3.png" alt="route3"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/route2.png" alt="route2"></p><h3 id="2-配置网卡"><a href="#2-配置网卡" class="headerlink" title="2.配置网卡"></a>2.配置网卡</h3><ul><li>PC1和PC2各一块网卡，并且分别配置绑定VMnet1和VMnet3</li><li>R1需要二块网卡，并且分配VMnet1和VMnet2</li><li>R2需要二块网卡，并且分配VMnet2和VMnet3</li></ul><p><img src="https://www.wangshengjj.work/upload/2023/03/route4.png" alt="route4"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/route5.png" alt="route5"></p><h2 id="二、配置静态路由"><a href="#二、配置静态路由" class="headerlink" title="二、配置静态路由"></a>二、配置静态路由</h2><ul><li>路由表<ul><li>网段、接口的对应关系</li></ul></li><li>根据数据的目的IP查找路由表</li></ul><p><img src="https://www.wangshengjj.work/upload/2023/03/route1.png" alt="route1"></p><h3 id="1-PC1配置网络"><a href="#1-PC1配置网络" class="headerlink" title="1.PC1配置网络"></a>1.PC1配置网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@pc-1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;26942ae5-6953-424d-ae50-8e879e92e62e&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.1.10NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.1.11#这里网关是我们将来要配置的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@pc-1 ~]# systemctl restart network#重启网络服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-为R1配置"><a href="#2-为R1配置" class="headerlink" title="2.为R1配置"></a>2.为R1配置</h3><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;13611e23-300f-43c5-a0c6-044ee84f9c43&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;IPADDR&#x3D;192.168.1.11#1网口地址NETMASK&#x3D;255.255.255.0#路由器不用配置网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens36#每个人的网卡名字不一样注意TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens36&quot;UUID&#x3D;&quot;13611e23-300f-43c5-a0c6-044ee84f9c43&quot;DEVICE&#x3D;&quot;ens36&quot;ONBOOT&#x3D;&quot;yes&quot;IPADDR&#x3D;192.168.2.10#2网口地址NETMASK&#x3D;255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加路由表-临时"><a href="#添加路由表-临时" class="headerlink" title="添加路由表(临时)"></a>添加路由表(临时)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# route add -net 192.168.3.0 gw 192.168.2.11# route add -net 网段地址 gw 下一跳地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>如果您是最小化安装，提示无route命令请手动配置本地YUM源<a href="https://www.wangshengjj.work/archives/29">点我跳转配置本地YUM教程</a>然后执行下面的命令</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# yum install -y net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加路由表-永久"><a href="#添加路由表-永久" class="headerlink" title="添加路由表(永久)"></a>添加路由表(永久)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;route-ens36192.168.3.0&#x2F;24 via 192.168.2.11 dev ens36# 网段&#x2F;子网掩码 via 下一跳地址 dev 出口网卡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# nmcli connection reload[root@router-1 ~]# nmcli connection up ens36[root@router-1 ~]# nmcli connection up ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="开启路由转发功能-临时"><a href="#开启路由转发功能-临时" class="headerlink" title="开启路由转发功能(临时)"></a>开启路由转发功能(临时)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="开启路由转发功能-永久"><a href="#开启路由转发功能-永久" class="headerlink" title="开启路由转发功能(永久)"></a>开启路由转发功能(永久)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-1 ~]# vi &#x2F;etc&#x2F;sysctl.confnet.ipv4.ip_forward &#x3D; 1[root@router-1 ~]# sysctl -p#重新加载配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-为R2配置"><a href="#3-为R2配置" class="headerlink" title="3.为R2配置"></a>3.为R2配置</h3><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;6470d1e5-3e5e-43c7-ad2e-91a3f2e92bb9&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.2.11NETMASK&#x3D;255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens36TYPE&#x3D;&quot;Ethernet&quot;BROWSER_ONLY&#x3D;&quot;no&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens36&quot;UUID&#x3D;&quot;6470d1e5-3e5e-43c7-ad2e-91a3f2e92bb9&quot;DEVICE&#x3D;&quot;ens36&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.3.10NETMASK&#x3D;255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加路由表-临时-1"><a href="#添加路由表-临时-1" class="headerlink" title="添加路由表(临时)"></a>添加路由表(临时)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# route add -net 192.168.1.0&#x2F;24 gw 192.168.2.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加路由表-永久-1"><a href="#添加路由表-永久-1" class="headerlink" title="添加路由表(永久)"></a>添加路由表(永久)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;route-ens33192.168.1.0&#x2F;24 via 192.168.2.10 dev ens33# 网段&#x2F;子网掩码 via 下一跳地址 dev 出口网卡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# nmcli connection reload[root@router-2 ~]# nmcli connection up ens33[root@router-2 ~]# nmcli connection up ens36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="开启路由转发功能-临时-1"><a href="#开启路由转发功能-临时-1" class="headerlink" title="开启路由转发功能(临时)"></a>开启路由转发功能(临时)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果您是最小化安装，提示无route命令请手动配置本地YUM源<a href="https://www.wangshengjj.work/archives/29">点我跳转配置本地YUM教程</a>然后执行下面的命令</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# yum install -y net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="开启路由转发功能-永久-1"><a href="#开启路由转发功能-永久-1" class="headerlink" title="开启路由转发功能(永久)"></a>开启路由转发功能(永久)</h4><pre class="line-numbers language-none"><code class="language-none">[root@router-2 ~]# vi &#x2F;etc&#x2F;sysctl.confnet.ipv4.ip_forward &#x3D; 1[root@router-2 ~]# sysctl -p#重新加载配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-PC2配置网络"><a href="#4-PC2配置网络" class="headerlink" title="4.PC2配置网络"></a>4.PC2配置网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@pc-2 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;BOOTPROTO&#x3D;&quot;none&quot;DEFROUTE&#x3D;&quot;yes&quot;NAME&#x3D;&quot;ens33&quot;UUID&#x3D;&quot;6653ff53-1fc2-4556-b9b5-627d780e80cd&quot;DEVICE&#x3D;&quot;ens33&quot;ONBOOT&#x3D;&quot;yes&quot;ETHTOOL_OPTS&#x3D;&quot;autoneg on&quot;IPADDR&#x3D;192.168.3.11NETMASK&#x3D;255.255.255.0GATEWAY&#x3D;192.168.3.10#网关接口需要配置R2上连接PC2端的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@pc-2 ~]# systemctl restart network#重启网络服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><pre class="line-numbers language-none"><code class="language-none">[root@pc-1 ~]# ping 192.168.3.11#测试PC2能否和PC1互通PING 192.168.3.11 (192.168.3.11) 56(84) bytes of data.64 bytes from 192.168.3.11: icmp_seq&#x3D;1 ttl&#x3D;62 time&#x3D;0.553 ms64 bytes from 192.168.3.11: icmp_seq&#x3D;2 ttl&#x3D;62 time&#x3D;0.446 ms64 bytes from 192.168.3.11: icmp_seq&#x3D;3 ttl&#x3D;62 time&#x3D;0.514 ms64 bytes from 192.168.3.11: icmp_seq&#x3D;4 ttl&#x3D;62 time&#x3D;0.438 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h3><pre class="line-numbers language-none"><code class="language-none">[root@route-1 ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ens33192.168.2.0     0.0.0.0         255.255.255.0   U     0      0        0 ens36192.168.3.0     192.168.2.11    255.255.255.0   UG    0      0        0 ens36[root@route-2 ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface192.168.1.0     192.168.2.10    255.255.255.0   UG    0      0        0 ens33192.168.2.0     0.0.0.0         255.255.255.0   U     100    0        0 ens33192.168.3.0     0.0.0.0         255.255.255.0   U     101    0        0 ens36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux基础 </tag>
            
            <tag> linux网络 </tag>
            
            <tag> 静态路由 </tag>
            
            <tag> 子网划分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】配置网络参数</title>
      <link href="/2023/03/09/50/"/>
      <url>/2023/03/09/50/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】配置网络参数"><a href="#【Linux系列教程】配置网络参数" class="headerlink" title="【Linux系列教程】配置网络参数"></a>【Linux系列教程】配置网络参数</h1><h2 id="一、网络参数"><a href="#一、网络参数" class="headerlink" title="一、网络参数"></a>一、网络参数</h2><ul><li>主机名、IP地址、子网掩码、默认网关、DNS服务器</li></ul><h3 id="1-主机名"><a href="#1-主机名" class="headerlink" title="1.主机名"></a>1.主机名</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# hostname #查看主机名localhost.localdomain[root@localhost ~]# hostname node01.linux.com#配置临时主机名[root@localhost ~]# hostnamectl set-hostname node01.linux.com#配置永久主机名[root@localhost ~]# hostnamenode01.linux.com[root@node01 ~]# cat &#x2F;etc&#x2F;hostname node01.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看网卡IP地址"><a href="#2-查看网卡IP地址" class="headerlink" title="2.查看网卡IP地址"></a>2.查看网卡IP地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# ifconfig[root@node01 ~]# ifconfig ens33 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>IP地址、子网掩码、广播地址、MAC地址、网卡状态</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# ip addr show[root@node01 ~]# ip a#上一条命令缩写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-查看网关"><a href="#3-查看网关" class="headerlink" title="3.查看网关"></a>3.查看网关</h3><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# route -n Kernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         192.168.140.2   0.0.0.0         UG    100    0        0 ens33192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0192.168.140.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33[root@node01 ~]# ip route default via 192.168.140.2 dev ens33 proto dhcp metric 100 192.168.122.0&#x2F;24 dev virbr0 proto kernel scope link src 192.168.122.1 192.168.140.0&#x2F;24 dev ens33 proto kernel scope link src 192.168.140.166 metric 100 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看DNS服务器"><a href="#4-查看DNS服务器" class="headerlink" title="4.查看DNS服务器"></a>4.查看DNS服务器</h3><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# cat &#x2F;etc&#x2F;resolv.conf # Generated by NetworkManagersearch localdomain linux.comnameserver 192.168.140.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置网卡"><a href="#二、配置网卡" class="headerlink" title="二、配置网卡"></a>二、配置网卡</h2><h3 id="1-直接修改配置文件-仅适用于Centos7-x"><a href="#1-直接修改配置文件-仅适用于Centos7-x" class="headerlink" title="1.直接修改配置文件(仅适用于Centos7.x)"></a>1.直接修改配置文件(仅适用于Centos7.x)</h3><ul><li>&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-网卡名称</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@node01 ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33TYPE&#x3D;&quot;Ethernet&quot;             &#x2F;&#x2F;网卡类型为以太网BOOTPROTO&#x3D;none              &#x2F;&#x2F;手动配置IPIPADDR&#x3D;192.168.1.1&#x2F;&#x2F;你要设置的IP地址PREFIX&#x3D;24&#x2F;&#x2F;子网掩码，或者使用NETMASK&#x3D;255.255.255.0同理GATEWAY&#x3D;192.168.1.254&#x2F;&#x2F;网关地址(重要)DNS1&#x3D;223.5.5.5&#x2F;&#x2F;DNS地址，可以选择其他DNS2&#x3D;223.6.6.6&#x2F;&#x2F;备用DNS地址NAME&#x3D;ens33                  &#x2F;&#x2F;网卡的配置名称DEVICE&#x3D;&quot;ens33&quot;             &#x2F;&#x2F;网卡名称ONBOOT&#x3D;yes                 &#x2F;&#x2F;开机自动激活网卡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重启网卡"><a href="#重启网卡" class="headerlink" title="重启网卡"></a>重启网卡</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection reload#重新加载网卡[root@localhost ~]# nmcli connection up ens33 #启动网卡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl restart network#看个人习惯，我比较喜欢用这个[root@localhost ~]# systemctl start network#启动网络服务[root@localhost ~]# systemctl stop network#停止网络服务[root@localhost ~]# systemctl status network#查询网络服务状态● network.service - LSB: Bring up&#x2F;down networking   Loaded: loaded (&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;network; bad; vendor preset: disabled)   Active: active (exited) since 四 2023-03-09 20:48:11 CST; 1min 24s ago     Docs: man:systemd-sysv-generator(8)  Process: 879 ExecStart&#x3D;&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;network start (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)    Tasks: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动网卡"><a href="#启动网卡" class="headerlink" title="启动网卡"></a>启动网卡</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ifup ens33#可以启动网卡，后面接你要启动网卡的名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-nmcli命令"><a href="#2-nmcli命令" class="headerlink" title="2.nmcli命令"></a>2.nmcli命令</h3><ul><li>依赖于NetworkManager服务</li></ul><h4 id="查看NetworkManager服务运行状态"><a href="#查看NetworkManager服务运行状态" class="headerlink" title="查看NetworkManager服务运行状态"></a>查看NetworkManager服务运行状态</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl status NetworkManager ● NetworkManager.service - Network Manager   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;NetworkManager.service; enabled; vendor preset: enabled)   Active: active (running) since 二 2022-07-19 09:02:52 CST; 57min ago#此行信息代表服务正在运行     Docs: man:NetworkManager(8) Main PID: 856 (NetworkManager)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看网卡配置"><a href="#3-查看网卡配置" class="headerlink" title="3.查看网卡配置"></a>3.查看网卡配置</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection show NAME    UUID                                  TYPE      DEVICE ens33   c96bc909-188e-ec64-3a96-6a90982b08ad  ethernet  ens33  virbr0  b7f9a42b-edf5-47b0-a22f-8fad7c0cde78  bridge    virbr0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除网卡配置"><a href="#4-删除网卡配置" class="headerlink" title="4.删除网卡配置"></a>4.删除网卡配置</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection delete ens33 #可以填写网卡名字，或者UUID成功删除连接 &quot;ens33&quot; (c96bc909-188e-ec64-3a96-6a90982b08ad)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-nmcli配置网卡"><a href="#5-nmcli配置网卡" class="headerlink" title="5.nmcli配置网卡"></a>5.nmcli配置网卡</h3><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection add ifname ens33 con-name ens33 type ethernet #配置网卡名字和配置名字，设置网卡类型为ethernet连接 &quot;ens33&quot; (539b8651-561f-444d-8119-0a11e223cf25) 已成功添加。[root@localhost ~]# [root@localhost ~]# nmcli connection show #查看网卡NAME    UUID                                  TYPE      DEVICE ens33   539b8651-561f-444d-8119-0a11e223cf25  ethernet  ens33  virbr0  b7f9a42b-edf5-47b0-a22f-8fad7c0cde78  bridge    virbr0 [root@localhost ~]# [root@localhost ~]# ls &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;#创建完网卡后会自动在目录下生成配置文件ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置网络参数"><a href="#配置网络参数" class="headerlink" title="配置网络参数"></a>配置网络参数</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection modify ens33 ipv4.addresses &quot;10.10.10.10&#x2F;24&quot;#添加IP地址和子网掩码[root@localhost ~]# nmcli connection modify ens33 ipv4.gateway &quot;10.10.10.254&quot;#添加网关[root@localhost ~]# nmcli connection modify ens33 ipv4.dns &quot;114.114.114.114&quot;#添加DNS地址[root@localhost ~]# nmcli connection modify ens33 +ipv4.dns &quot;8.8.8.8&quot;#添加第二个DNS地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection modify ens33 ipv4.method manual #修改网卡DHCP模式为none模式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# nmcli connection reload[root@localhost ~]# nmcli connection up ens33 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 网络 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】链接文件</title>
      <link href="/2023/03/09/49/"/>
      <url>/2023/03/09/49/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】链接文件"><a href="#【Linux系列教程】链接文件" class="headerlink" title="【Linux系列教程】链接文件"></a>【Linux系列教程】链接文件</h1><h2 id="一、硬链接"><a href="#一、硬链接" class="headerlink" title="一、硬链接"></a>一、硬链接</h2><ul><li>硬链接<ul><li>本质上就是指向源文件所在的inode的另外一个指针</li><li>并不是一个单独的文件</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none"># ln 源文件  目的文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -l &#x2F;opt&#x2F;file01 -rw-r--r--. 2 root root 29 7月  18 15:24 &#x2F;opt&#x2F;file01[root@localhost ~]# ls -l &#x2F;tmp&#x2F;AA -rw-r--r--. 2 root root 29 7月  18 15:24 &#x2F;tmp&#x2F;AA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看文件inode"><a href="#查看文件inode" class="headerlink" title="查看文件inode"></a>查看文件inode</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -i &#x2F;opt&#x2F;file01 #发现inode一样，所以属于同一个文件192421 &#x2F;opt&#x2F;file01[root@localhost ~]# ls -i &#x2F;tmp&#x2F;AA 192421 &#x2F;tmp&#x2F;AA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、软链接-x2F-符号链接"><a href="#二、软链接-x2F-符号链接" class="headerlink" title="二、软链接&#x2F;符号链接"></a>二、软链接&#x2F;符号链接</h2><ul><li>相对于源文件来说，软链接文件是个独立的文件</li><li>但软链接中并不保存真实的数据，仅保存原文件名的一个指向</li></ul><pre class="line-numbers language-none"><code class="language-none"># ln -s 源文件  目的文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ln -s &#x2F;opt&#x2F;file02 &#x2F;tmp&#x2F;BB [root@localhost ~]# ls -l &#x2F;opt&#x2F;file02 -rw-r--r--. 1 root root 9 7月  18 15:26 &#x2F;opt&#x2F;file02[root@localhost ~]# ls -l &#x2F;tmp&#x2F;BB lrwxrwxrwx. 1 root root 11 7月  18 15:26 &#x2F;tmp&#x2F;BB -&gt; &#x2F;opt&#x2F;file02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -i &#x2F;opt&#x2F;file02 192464 &#x2F;opt&#x2F;file02[root@localhost ~]# ls -i &#x2F;tmp&#x2F;BB 16786690 &#x2F;tmp&#x2F;BB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、硬链接、软链接的区别"><a href="#三、硬链接、软链接的区别" class="headerlink" title="三、硬链接、软链接的区别"></a>三、硬链接、软链接的区别</h2><h3 id="1-软链接"><a href="#1-软链接" class="headerlink" title="1.软链接"></a>1.软链接</h3><ul><li>原文件损坏，链接文件失效</li><li>支持可以对文件、目录创建软链接</li><li>支持跨分区</li></ul><h3 id="2-硬链接"><a href="#2-硬链接" class="headerlink" title="2.硬链接"></a>2.硬链接</h3><ul><li>原文件损坏，链接文件可继续访问 </li><li>只支持对文件创建</li><li>不支持跨分区</li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 硬链接 </tag>
            
            <tag> 软链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】RAID磁盘阵列</title>
      <link href="/2023/03/09/48/"/>
      <url>/2023/03/09/48/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】RAID磁盘阵列"><a href="#【Linux系列教程】RAID磁盘阵列" class="headerlink" title="【Linux系列教程】RAID磁盘阵列"></a>【Linux系列教程】RAID磁盘阵列</h1><h2 id="一、RAID的介绍"><a href="#一、RAID的介绍" class="headerlink" title="一、RAID的介绍"></a>一、RAID的介绍</h2><ol><li>组织、使用硬盘的一种方式  </li><li>将多块物理硬盘组织成一个逻辑硬盘</li><li>优势<ul><li>提升数据的读写速度 </li><li>提升数据的可靠性</li></ul></li></ol><h2 id="二、RAID的类型"><a href="#二、RAID的类型" class="headerlink" title="二、RAID的类型"></a>二、RAID的类型</h2><h3 id="1-RAID0-条带卷"><a href="#1-RAID0-条带卷" class="headerlink" title="1.RAID0 条带卷"></a>1.RAID0 条带卷</h3><ul><li>至少需要2块硬盘</li><li>优势<ul><li>提升数据的读写速度</li><li>容量是所有硬盘之和</li></ul></li><li>劣势<ul><li>数据可靠性低</li></ul></li></ul><h3 id="2-RAID1-镜像卷"><a href="#2-RAID1-镜像卷" class="headerlink" title="2.RAID1 镜像卷"></a>2.RAID1 镜像卷</h3><ul><li>至少需要2块硬盘</li><li>优势<ul><li>提升数据的可靠性</li></ul></li><li>劣势<ul><li>损失1&#x2F;2的容量 </li><li>写速度相对低</li></ul></li></ul><h3 id="3-RAID5-奇偶校验卷"><a href="#3-RAID5-奇偶校验卷" class="headerlink" title="3.RAID5 奇偶校验卷"></a>3.RAID5 奇偶校验卷</h3><ul><li>至少3块硬盘 </li><li>优势<ul><li>提升数据读写速度、可靠性(校验码)</li><li>最多只支持坏1块盘</li></ul></li><li>实际的存储空间<ul><li>少1块硬盘的容量，用于存储校验码</li></ul></li></ul><p><img src="https://www.wangshengjj.work/upload/2023/03/raid1.png" alt="raid1"></p><h3 id="4-RAID6"><a href="#4-RAID6" class="headerlink" title="4.RAID6"></a>4.RAID6</h3><ul><li>与RAID 5工作方式类似 </li><li>最多支持同时损坏2块盘</li></ul><h3 id="5-RAID10"><a href="#5-RAID10" class="headerlink" title="5.RAID10"></a>5.RAID10</h3><ul><li>至少4块盘</li><li>优势<ul><li>提升速度，可靠性</li><li>容量损失1&#x2F;2</li></ul></li></ul><p><img src="https://www.wangshengjj.work/upload/2023/03/raid2.png" alt="raid2"></p><h2 id="三、RAID实现方式"><a href="#三、RAID实现方式" class="headerlink" title="三、RAID实现方式"></a>三、RAID实现方式</h2><h3 id="1-软RAID"><a href="#1-软RAID" class="headerlink" title="1.软RAID"></a>1.软RAID</h3><ul><li>mdadm命令</li></ul><h3 id="2-硬RAID"><a href="#2-硬RAID" class="headerlink" title="2.硬RAID"></a>2.硬RAID</h3><ul><li>RAID卡  </li><li>同品牌、同型号、同厂商的硬盘 </li><li>硬盘必须是裸设备</li></ul><h2 id="四、模拟RAID5"><a href="#四、模拟RAID5" class="headerlink" title="四、模拟RAID5"></a>四、模拟RAID5</h2><h3 id="1-创建RAID5"><a href="#1-创建RAID5" class="headerlink" title="1.创建RAID5"></a>1.创建RAID5</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mdadm -C &#x2F;dev&#x2F;md1 -n 3 -l 5 &#x2F;dev&#x2F;sdc &#x2F;dev&#x2F;sdd &#x2F;dev&#x2F;sde   mdadm: Defaulting to version 1.2 metadatamdadm: array &#x2F;dev&#x2F;md1 started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>-C创建</li><li>-l指定RAID的级别</li><li>-n指定磁盘的个数</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;proc&#x2F;mdstat Personalities : [raid6] [raid5] [raid4] md1 : active raid5 sde[3] sdd[1] sdc[0]      41908224 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3&#x2F;2] [UU_]      [&#x3D;&#x3D;&#x3D;&gt;.................]  recovery &#x3D; 18.4% (3867648&#x2F;20954112) finish&#x3D;1.3min speed&#x3D;203560K&#x2F;sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用RAID"><a href="#2-使用RAID" class="headerlink" title="2.使用RAID"></a>2.使用RAID</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkfs -t ext4 &#x2F;dev&#x2F;md1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;test4[root@localhost ~]# mount &#x2F;dev&#x2F;md1 &#x2F;test4[root@localhost ~]# touch &#x2F;test4&#x2F;&#123;1..100&#125;.mp3[root@localhost ~]# ls &#x2F;test4&#x2F;100.mp3  16.mp3  22.mp3  29.mp3  35.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT | grep &quot;md1&quot;&#x2F;dev&#x2F;md1                ext4       40G   49M   38G    1% &#x2F;test4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-热备盘"><a href="#3-热备盘" class="headerlink" title="3.热备盘"></a>3.热备盘</h3><ul><li>减少故障的修复时间</li></ul><h4 id="添加热备盘"><a href="#添加热备盘" class="headerlink" title="添加热备盘"></a>添加热备盘</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mdadm -a &#x2F;dev&#x2F;md1 &#x2F;dev&#x2F;sdfmdadm: added &#x2F;dev&#x2F;sdf[root@localhost ~]# cat &#x2F;proc&#x2F;mdstat Personalities : [raid6] [raid5] [raid4] md1 : active raid5 sdf[4](S) sde[3] sdd[1] sdc[0]      41908224 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3&#x2F;3] [UUU]      unused devices: &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟硬盘故障"><a href="#模拟硬盘故障" class="headerlink" title="模拟硬盘故障"></a>模拟硬盘故障</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mdadm -f &#x2F;dev&#x2F;md1 &#x2F;dev&#x2F;sdd mdadm: set &#x2F;dev&#x2F;sdd faulty in &#x2F;dev&#x2F;md1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看RAID5自动修复"><a href="#查看RAID5自动修复" class="headerlink" title="查看RAID5自动修复"></a>查看RAID5自动修复</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;proc&#x2F;mdstat Personalities : [raid6] [raid5] [raid4] md1 : active raid5 sdf[4] sde[3] sdd[1](F) sdc[0]      41908224 blocks super 1.2 level 5, 512k chunk, algorithm 2 [3&#x2F;2] [U_U]      [&#x3D;&gt;...................]  recovery &#x3D;  7.6% (1600128&#x2F;20954112) finish&#x3D;1.4min speed&#x3D;228589K&#x2F;sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> linux磁盘管理 </tag>
            
            <tag> RAID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】逻辑卷扩容</title>
      <link href="/2023/03/08/47/"/>
      <url>/2023/03/08/47/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】逻辑卷扩容"><a href="#【Linux系列教程】逻辑卷扩容" class="headerlink" title="【Linux系列教程】逻辑卷扩容"></a>【Linux系列教程】逻辑卷扩容</h1><p><strong>本期教程为逻辑卷第二期教程<a href="https://www.wangshengjj.work/archives/46">点我跳转</a>到第一期教程</strong></p><p><strong>具体要求如下：<br>上一题的mysql逻辑卷从30G扩容到40G</strong></p><h2 id="一、逻辑卷扩容"><a href="#一、逻辑卷扩容" class="headerlink" title="一、逻辑卷扩容"></a>一、逻辑卷扩容</h2><h3 id="1-检查卷组是否还有10G容量"><a href="#1-检查卷组是否还有10G容量" class="headerlink" title="1.检查卷组是否还有10G容量"></a>1.检查卷组是否还有10G容量</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vgdisplay db | grep -i &quot;free&quot;  Free  PE &#x2F; Size       2358 &#x2F; 9.21 GiB#发现剩余空间不到10G，无法直接扩容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-扩容卷组"><a href="#2-扩容卷组" class="headerlink" title="2.扩容卷组"></a>2.扩容卷组</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  476M  0 part &#x2F;boot└─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sdb               8:16   0   20G  0 disk └─db-mysql      253:2    0   30G  0 lvm  &#x2F;mysqlsdc               8:32   0   20G  0 disk ├─db-mysql      253:2    0   30G  0 lvm  &#x2F;mysql└─db-redis      253:3    0  800M  0 lvm  &#x2F;redissdd               8:48   0   20G  0 disk#手动再添加一块硬盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# pvcreate &#x2F;dev&#x2F;sdd#给sdd硬盘创建PV  Physical volume &quot;&#x2F;dev&#x2F;sdd&quot; successfully created.  [root@localhost ~]# vgextend db &#x2F;dev&#x2F;sdd #把sdd添加到db卷组中  Volume group &quot;db&quot; successfully extended  [root@localhost ~]# vgdisplay db | grep -i &quot;free&quot;#查看卷组剩余大小  Free  PE &#x2F; Size       7477 &#x2F; &lt;29.21 GiB#可以看到成功扩容了20G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-扩容逻辑卷"><a href="#3-扩容逻辑卷" class="headerlink" title="3.扩容逻辑卷"></a>3.扩容逻辑卷</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lvextend -L +10G &#x2F;dev&#x2F;db&#x2F;mysql#扩展10G空间  Size of logical volume db&#x2F;mysql changed from 30.00 GiB (7680 extents) to 40.00 GiB (10240 extents).  Logical volume db&#x2F;mysql successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-扩展文件系统ext4"><a href="#4-扩展文件系统ext4" class="headerlink" title="4.扩展文件系统ext4"></a>4.扩展文件系统ext4</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# resize2fs &#x2F;dev&#x2F;db&#x2F;mysqlresize2fs 1.42.9 (28-Dec-2013)Filesystem at &#x2F;dev&#x2F;db&#x2F;mysql is mounted on &#x2F;mysql; on-line resizing requiredold_desc_blocks &#x3D; 4, new_desc_blocks &#x3D; 5The filesystem on &#x2F;dev&#x2F;db&#x2F;mysql is now 10485760 blocks long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-检查是否成功扩容"><a href="#5-检查是否成功扩容" class="headerlink" title="5.检查是否成功扩容"></a>5.检查是否成功扩容</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT | grep &quot;mysql&quot;&#x2F;dev&#x2F;mapper&#x2F;db-mysql    ext4       40G   48M   38G    1% &#x2F;mysql#发现成功扩容到40G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、xfs文件系统扩容"><a href="#二、xfs文件系统扩容" class="headerlink" title="二、xfs文件系统扩容"></a>二、xfs文件系统扩容</h2><h3 id="要求如下："><a href="#要求如下：" class="headerlink" title="要求如下："></a>要求如下：</h3><p><strong>扩容上一题的redis分区，从800M再扩容5G</strong></p><h3 id="1-检查卷组是否还有剩余容量"><a href="#1-检查卷组是否还有剩余容量" class="headerlink" title="1.检查卷组是否还有剩余容量"></a>1.检查卷组是否还有剩余容量</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vgdisplay db | grep &quot;Free&quot;  Free  PE &#x2F; Size       4917 &#x2F; &lt;19.21 GiB#剩余19G多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-扩容redis逻辑卷"><a href="#2-扩容redis逻辑卷" class="headerlink" title="2.扩容redis逻辑卷"></a>2.扩容redis逻辑卷</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lvextend -L +5G &#x2F;dev&#x2F;db&#x2F;redis   Size of logical volume db&#x2F;redis changed from 800.00 MiB (200 extents) to 5.78 GiB (1480 extents).  Logical volume db&#x2F;redis successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-扩容xfs文件系统"><a href="#3-扩容xfs文件系统" class="headerlink" title="3.扩容xfs文件系统"></a>3.扩容xfs文件系统</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# xfs_growfs &#x2F;dev&#x2F;db&#x2F;redismeta-data&#x3D;&#x2F;dev&#x2F;mapper&#x2F;db-redis   isize&#x3D;512    agcount&#x3D;4, agsize&#x3D;51200 blks         &#x3D;                       sectsz&#x3D;512   attr&#x3D;2, projid32bit&#x3D;1         &#x3D;                       crc&#x3D;1        finobt&#x3D;0 spinodes&#x3D;0data     &#x3D;                       bsize&#x3D;4096   blocks&#x3D;204800, imaxpct&#x3D;25         &#x3D;                       sunit&#x3D;0      swidth&#x3D;0 blksnaming   &#x3D;version 2              bsize&#x3D;4096   ascii-ci&#x3D;0 ftype&#x3D;1log      &#x3D;internal               bsize&#x3D;4096   blocks&#x3D;855, version&#x3D;2         &#x3D;                       sectsz&#x3D;512   sunit&#x3D;0 blks, lazy-count&#x3D;1realtime &#x3D;none                   extsz&#x3D;4096   blocks&#x3D;0, rtextents&#x3D;0data blocks changed from 204800 to 1515520<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-检查是否成功扩容"><a href="#4-检查是否成功扩容" class="headerlink" title="4.检查是否成功扩容"></a>4.检查是否成功扩容</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT | grep &quot;redis&quot;&#x2F;dev&#x2F;mapper&#x2F;db-redis    xfs       5.8G   34M  5.8G    1% &#x2F;redis[root@localhost ~]# lvscan  ACTIVE            &#39;&#x2F;dev&#x2F;db&#x2F;mysql&#39; [40.00 GiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;db&#x2F;redis&#39; [5.78 GiB] inherit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、缩减逻辑卷"><a href="#三、缩减逻辑卷" class="headerlink" title="三、缩减逻辑卷"></a>三、缩减逻辑卷</h2><h3 id="1-将逻辑卷-x2F-dev-x2F-db-x2F-mysql缩减到10G"><a href="#1-将逻辑卷-x2F-dev-x2F-db-x2F-mysql缩减到10G" class="headerlink" title="1.将逻辑卷&#x2F;dev&#x2F;db&#x2F;mysql缩减到10G"></a>1.将逻辑卷&#x2F;dev&#x2F;db&#x2F;mysql缩减到10G</h3><h4 id="备份文件-重要"><a href="#备份文件-重要" class="headerlink" title="备份文件(重要)"></a>备份文件(重要)</h4><p><strong>使用cp或者tar命令备份要缩减逻辑卷里的数据</strong></p><h4 id="卸载逻辑卷"><a href="#卸载逻辑卷" class="headerlink" title="卸载逻辑卷"></a>卸载逻辑卷</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# umount &#x2F;dev&#x2F;db&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检查文件是否有损坏-重要"><a href="#检查文件是否有损坏-重要" class="headerlink" title="检查文件是否有损坏(重要)"></a>检查文件是否有损坏(重要)</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# e2fsck -f &#x2F;dev&#x2F;db&#x2F;mysql e2fsck 1.42.9 (28-Dec-2013)第一步: 检查inode,块,和大小第二步: 检查目录结构第3步: 检查目录连接性Pass 4: Checking reference counts第5步: 检查簇概要信息&#x2F;dev&#x2F;db&#x2F;mysql: 21&#x2F;2949120 files (0.0% non-contiguous), 231191&#x2F;11796480 blocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="先缩减文件系统大小"><a href="#先缩减文件系统大小" class="headerlink" title="先缩减文件系统大小"></a>先缩减文件系统大小</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# resize2fs &#x2F;dev&#x2F;db&#x2F;mysql 10G resize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on &#x2F;dev&#x2F;db&#x2F;mysql to 2621440 (4k) blocks.The filesystem on &#x2F;dev&#x2F;db&#x2F;mysql is now 2621440 blocks long.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="再缩减逻辑卷物理大小"><a href="#再缩减逻辑卷物理大小" class="headerlink" title="再缩减逻辑卷物理大小"></a>再缩减逻辑卷物理大小</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lvreduce -L 10G &#x2F;dev&#x2F;db&#x2F;mysql   WARNING: Reducing active logical volume to 10.00 GiB.  THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce db&#x2F;mysql? [y&#x2F;n]: y  Size of logical volume db&#x2F;mysql changed from 45.00 GiB (11520 extents) to 10.00 GiB (2560 extents).  Logical volume db&#x2F;mysql successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重新挂载逻辑卷，验证数据"><a href="#重新挂载逻辑卷，验证数据" class="headerlink" title="重新挂载逻辑卷，验证数据"></a>重新挂载逻辑卷，验证数据</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mount &#x2F;dev&#x2F;db&#x2F;mysql &#x2F;mysql&#x2F;[root@localhost ~]# ls &#x2F;mysql&#x2F;10.sql  1.sql  2.sql  3.sql  4.sql  5.sql  6.sql  7.sql  8.sql  9.sql  lost+found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、删除逻辑卷"><a href="#四、删除逻辑卷" class="headerlink" title="四、删除逻辑卷"></a>四、删除逻辑卷</h2><h3 id="1-删除逻辑卷"><a href="#1-删除逻辑卷" class="headerlink" title="1.删除逻辑卷"></a>1.删除逻辑卷</h3><pre class="line-numbers language-none"><code class="language-none"># lvremove &lt;逻辑卷名称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-删除卷组"><a href="#2-删除卷组" class="headerlink" title="2.删除卷组"></a>2.删除卷组</h3><pre class="line-numbers language-none"><code class="language-none"># vgremove &lt;卷组名称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-删除物理卷"><a href="#3-删除物理卷" class="headerlink" title="3.删除物理卷"></a>3.删除物理卷</h3><pre class="line-numbers language-none"><code class="language-none"># pvremove &lt;pv名称&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 逻辑卷 </tag>
            
            <tag> linux扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】创建逻辑卷</title>
      <link href="/2023/03/08/46/"/>
      <url>/2023/03/08/46/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】创建逻辑卷"><a href="#【Linux系列教程】创建逻辑卷" class="headerlink" title="【Linux系列教程】创建逻辑卷"></a>【Linux系列教程】创建逻辑卷</h1><h2 id="一、添加2块硬盘"><a href="#一、添加2块硬盘" class="headerlink" title="一、添加2块硬盘"></a>一、添加2块硬盘</h2><p><img src="https://www.wangshengjj.work/upload/2023/03/lv1.png" alt="lv1"></p><h2 id="二、基本命令"><a href="#二、基本命令" class="headerlink" title="二、基本命令"></a>二、基本命令</h2><h3 id="1-PV物理卷"><a href="#1-PV物理卷" class="headerlink" title="1.PV物理卷"></a>1.PV物理卷</h3><h4 id="创建物理卷"><a href="#创建物理卷" class="headerlink" title="创建物理卷"></a>创建物理卷</h4><pre class="line-numbers language-none"><code class="language-none"># pvcreate 磁盘或者分区<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看物理卷"><a href="#查看物理卷" class="headerlink" title="查看物理卷"></a>查看物理卷</h4><pre class="line-numbers language-none"><code class="language-none"># pvscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-VG卷组"><a href="#2-VG卷组" class="headerlink" title="2.VG卷组"></a>2.VG卷组</h3><h4 id="创建卷组"><a href="#创建卷组" class="headerlink" title="创建卷组"></a>创建卷组</h4><pre class="line-numbers language-none"><code class="language-none"># vgcreate 卷组名 绑定硬盘或者分区<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看卷组"><a href="#查看卷组" class="headerlink" title="查看卷组"></a>查看卷组</h4><pre class="line-numbers language-none"><code class="language-none"># vgscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># vgdisplay 卷组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-LV逻辑卷"><a href="#3-LV逻辑卷" class="headerlink" title="3.LV逻辑卷"></a>3.LV逻辑卷</h3><h4 id="创建逻辑卷"><a href="#创建逻辑卷" class="headerlink" title="创建逻辑卷"></a>创建逻辑卷</h4><pre class="line-numbers language-none"><code class="language-none"># lvcreate -L 容量 -n 逻辑卷名 卷组名列：# lvcreate -L +20G -n mysql db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看逻辑卷"><a href="#查看逻辑卷" class="headerlink" title="查看逻辑卷"></a>查看逻辑卷</h4><pre class="line-numbers language-none"><code class="language-none"># lvscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、案列"><a href="#三、案列" class="headerlink" title="三、案列"></a>三、案列</h2><h3 id="x2F-dev-x2F-db-x2F-mysql30Gext4-x2F-mysql"><a href="#x2F-dev-x2F-db-x2F-mysql30Gext4-x2F-mysql" class="headerlink" title="&#x2F;dev&#x2F;db&#x2F;mysql30Gext4&#x2F;mysql"></a>&#x2F;dev&#x2F;db&#x2F;mysql30Gext4&#x2F;mysql</h3><p><strong>创建卷组db，创建逻辑卷mysql，分配30G的空间，格式化成ext4文件系统，并且把这个逻辑卷绑定到&#x2F;mysql</strong></p><h3 id="1-添加2块硬盘省略-跳转第一步"><a href="#1-添加2块硬盘省略-跳转第一步" class="headerlink" title="1.添加2块硬盘省略(跳转第一步)"></a>1.添加2块硬盘省略(跳转第一步)</h3><h3 id="2-创建一个PV物理卷"><a href="#2-创建一个PV物理卷" class="headerlink" title="2.创建一个PV物理卷"></a>2.创建一个PV物理卷</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblk#查看系统硬盘情况NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda           8:0    0   20G  0 disk ├─sda1        8:1    0  476M  0 part &#x2F;boot└─sda2        8:2    0 19.5G  0 part   ├─centos-root            253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap            253:1    0    2G  0 lvm  [SWAP]sdb           8:16   0   20G  0 disk #发现我们刚刚添加的2块硬盘sdc           8:32   0   20G  0 disk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# pvcreate &#x2F;dev&#x2F;sdb &#x2F;dev&#x2F;sdc#先把sdb和sdc创建一个PV物理卷  Physical volume &quot;&#x2F;dev&#x2F;sdb&quot; successfully created.  Physical volume &quot;&#x2F;dev&#x2F;sdc&quot; successfully created.  [root@localhost ~]# pvscan#查看物理卷  PV &#x2F;dev&#x2F;sda2   VG centos          lvm2 [19.53 GiB &#x2F; 0    free]  PV &#x2F;dev&#x2F;sdb                       lvm2 [20.00 GiB]  PV &#x2F;dev&#x2F;sdc                       lvm2 [20.00 GiB]  Total: 3 [59.53 GiB] &#x2F; in use: 1 [19.53 GiB] &#x2F; in no VG: 2 [40.00 GiB]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建一个VG卷组"><a href="#3-创建一个VG卷组" class="headerlink" title="3.创建一个VG卷组"></a>3.创建一个VG卷组</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vgcreate db &#x2F;dev&#x2F;sdb &#x2F;dev&#x2F;sdc  Volume group &quot;db&quot; successfully created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vgdisplay db#查看db卷组  --- Volume group ---  VG Name               db  System ID               Format                lvm2  Metadata Areas        2  Metadata Sequence No  1  VG Access             read&#x2F;write  VG Status             resizable  MAX LV                0  Cur LV                0  Open LV               0  Max PV                0  Cur PV                2  Act PV                2  VG Size               39.99 GiB  PE Size               4.00 MiB  Total PE              10238  Alloc PE &#x2F; Size       0 &#x2F; 0     Free  PE &#x2F; Size       10238 &#x2F; 39.99 GiB  VG UUID               Wvv01t-agHC-gEa3-kV7Y-DEND-9IFt-gegH2K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创卷LV逻辑卷"><a href="#4-创卷LV逻辑卷" class="headerlink" title="4.创卷LV逻辑卷"></a>4.创卷LV逻辑卷</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lvcreate -L +30G -n mysql db#创建一个名为mysql的30G大小的逻辑卷，卷组为db  Logical volume &quot;mysql&quot; created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lvscan  ACTIVE            &#39;&#x2F;dev&#x2F;db&#x2F;mysql&#39; [30.00 GiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;centos&#x2F;swap&#39; [2.00 GiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;centos&#x2F;root&#39; [17.53 GiB] inherit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-绑定mysql"><a href="#5-绑定mysql" class="headerlink" title="5.绑定mysql"></a>5.绑定mysql</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;mysql#先创建文件夹[root@localhost ~]# mkfs -t ext4 &#x2F;dev&#x2F;db&#x2F;mysql#格式化刚刚创建的逻辑卷为ext4文件系统mke2fs 1.42.9 (28-Dec-2013)文件系统标签&#x3D;OS type: Linux块大小&#x3D;4096 (log&#x3D;2)分块大小&#x3D;4096 (log&#x3D;2)Stride&#x3D;0 blocks, Stripe width&#x3D;0 blocks1966080 inodes, 7864320 blocks393216 blocks (5.00%) reserved for the super user第一个数据块&#x3D;0Maximum filesystem blocks&#x3D;2155872256240 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: 完成                            正在写入inode表: 完成                            Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;fstab#编辑配置文件，配置永久挂载&#x2F;dev&#x2F;db&#x2F;mysql   &#x2F;mysql  ext4    defaults        0 0[root@localhost ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6验证是否成功挂载"><a href="#6验证是否成功挂载" class="headerlink" title="6验证是否成功挂载"></a>6验证是否成功挂载</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblkNAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda           8:0    0   20G  0 disk ├─sda1        8:1    0  476M  0 part &#x2F;boot└─sda2        8:2    0 19.5G  0 part   ├─centos-root            253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap            253:1    0    2G  0 lvm  [SWAP]sdb           8:16   0   20G  0 disk └─db-mysql  253:2    0   30G  0 lvm  &#x2F;mysqlsdc           8:32   0   20G  0 disk └─db-mysql  253:2    0   30G  0 lvm  &#x2F;mysql[root@localhost ~]# df -hT | grep &quot;mysql&quot;&#x2F;dev&#x2F;mapper&#x2F;db-mysql    ext4       30G   45M   28G    1% &#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、指定PE的方式创建逻辑卷"><a href="#四、指定PE的方式创建逻辑卷" class="headerlink" title="四、指定PE的方式创建逻辑卷"></a>四、指定PE的方式创建逻辑卷</h2><h3 id="x2F-dev-x2F-db-x2F-redisxfs-x2F-redis800M"><a href="#x2F-dev-x2F-db-x2F-redisxfs-x2F-redis800M" class="headerlink" title="&#x2F;dev&#x2F;db&#x2F;redisxfs&#x2F;redis800M"></a>&#x2F;dev&#x2F;db&#x2F;redisxfs&#x2F;redis800M</h3><p><strong>在db卷组下创建一个名为redis的逻辑卷，大小800M，文件系统为xfs，并且挂载到&#x2F;redis</strong></p><h3 id="1-创建LV逻辑卷"><a href="#1-创建LV逻辑卷" class="headerlink" title="1.创建LV逻辑卷"></a>1.创建LV逻辑卷</h3><p>因为我们上一题已经创建了一个名为db的卷组，所以直接用就可以了</p><ul><li>-l 指定PE参数</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lvcreate -l 200 -n redis db  Logical volume &quot;redis&quot; created.#一个PE大小为4M，因为我们要创建800M的数据卷，所以上面的参数小l后面的数字为200[root@localhost ~]# lvscan  ACTIVE            &#39;&#x2F;dev&#x2F;db&#x2F;mysql&#39; [30.00 GiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;db&#x2F;redis&#39; [800.00 MiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;centos&#x2F;swap&#39; [2.00 GiB] inherit  ACTIVE            &#39;&#x2F;dev&#x2F;centos&#x2F;root&#39; [17.53 GiB] inherit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-格式化xfs"><a href="#2-格式化xfs" class="headerlink" title="2.格式化xfs"></a>2.格式化xfs</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkfs -t xfs &#x2F;dev&#x2F;db&#x2F;redismeta-data&#x3D;&#x2F;dev&#x2F;db&#x2F;redis          isize&#x3D;512    agcount&#x3D;4, agsize&#x3D;51200 blks         &#x3D;                       sectsz&#x3D;512   attr&#x3D;2, projid32bit&#x3D;1         &#x3D;                       crc&#x3D;1        finobt&#x3D;0, sparse&#x3D;0data     &#x3D;                       bsize&#x3D;4096   blocks&#x3D;204800, imaxpct&#x3D;25         &#x3D;                       sunit&#x3D;0      swidth&#x3D;0 blksnaming   &#x3D;version 2              bsize&#x3D;4096   ascii-ci&#x3D;0 ftype&#x3D;1log      &#x3D;internal log           bsize&#x3D;4096   blocks&#x3D;855, version&#x3D;2         &#x3D;                       sectsz&#x3D;512   sunit&#x3D;0 blks, lazy-count&#x3D;1realtime &#x3D;none                   extsz&#x3D;4096   blocks&#x3D;0, rtextents&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置永久挂载"><a href="#3-配置永久挂载" class="headerlink" title="3.配置永久挂载"></a>3.配置永久挂载</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;fstab&#x2F;dev&#x2F;db&#x2F;redis   &#x2F;redis  xfs     defaults        0 0[root@localhost ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-验证结果"><a href="#4-验证结果" class="headerlink" title="4.验证结果"></a>4.验证结果</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblkNAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda           8:0    0   20G  0 disk ├─sda1        8:1    0  476M  0 part &#x2F;boot└─sda2        8:2    0 19.5G  0 part   ├─centos-root            253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap            253:1    0    2G  0 lvm  [SWAP]sdb           8:16   0   20G  0 disk └─db-mysql  253:2    0   30G  0 lvm  &#x2F;mysqlsdc           8:32   0   20G  0 disk ├─db-mysql  253:2    0   30G  0 lvm  &#x2F;mysql└─db-redis  253:3    0  800M  0 lvm  &#x2F;redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT | grep &quot;redis&quot;&#x2F;dev&#x2F;mapper&#x2F;db-redis    xfs       797M   33M  765M    5% &#x2F;redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 分区 </tag>
            
            <tag> 逻辑卷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】GPT分区</title>
      <link href="/2023/03/08/45/"/>
      <url>/2023/03/08/45/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】GPT分区"><a href="#【Linux系列教程】GPT分区" class="headerlink" title="【Linux系列教程】GPT分区"></a>【Linux系列教程】GPT分区</h1><ul><li>GPT分区没有拓展分区和逻辑分区概念</li><li>GPT分区可以创建无数个主分区</li><li>GPT分区相比MBR支持大于2T的硬盘</li></ul><h2 id="一、添加硬盘"><a href="#一、添加硬盘" class="headerlink" title="一、添加硬盘"></a>一、添加硬盘</h2><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk1.png" alt="vmdk1"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk2.png" alt="vmdk2"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk3.png" alt="vmdk3"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk4.png" alt="vmdk4"></p><h2 id="二、使用parted命令进行分区"><a href="#二、使用parted命令进行分区" class="headerlink" title="二、使用parted命令进行分区"></a>二、使用parted命令进行分区</h2><h3 id="1-查看硬盘"><a href="#1-查看硬盘" class="headerlink" title="1.查看硬盘"></a>1.查看硬盘</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  476M  0 part &#x2F;boot└─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sdb               8:16   0    8G  0 disk #刚刚添加的8G硬盘sr0              11:0    1  4.4G  0 rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-转换GPT分区"><a href="#2-转换GPT分区" class="headerlink" title="2.转换GPT分区"></a>2.转换GPT分区</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# parted &#x2F;dev&#x2F;sdb mklabel gpt#把dev下sdb这个硬盘变成GPT分区信息: You may need to update &#x2F;etc&#x2F;fstab.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-创建分区"><a href="#3-创建分区" class="headerlink" title="3.创建分区"></a>3.创建分区</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# parted &#x2F;dev&#x2F;sdb mkpart nginx 10 2G信息: You may need to update &#x2F;etc&#x2F;fstab.[root@localhost ~]# parted &#x2F;dev&#x2F;sdb mkpart web 2G 5G信息: You may need to update &#x2F;etc&#x2F;fstab.[root@localhost ~]# parted &#x2F;dev&#x2F;sdb mkpart web 5G 8G信息: You may need to update &#x2F;etc&#x2F;fstab.[root@localhost ~]# lsblk | grep &quot;sdb&quot;#查看分区情况sdb               8:16   0    8G  0 disk ├─sdb1            8:17   0  1.9G  0 part ├─sdb2            8:18   0  2.8G  0 part └─sdb3            8:19   0  2.8G  0 part<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-内核重新识别磁盘变化"><a href="#4-内核重新识别磁盘变化" class="headerlink" title="4.内核重新识别磁盘变化"></a>4.内核重新识别磁盘变化</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# partprobe  &#x2F;dev&#x2F;sdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-格式化"><a href="#5-格式化" class="headerlink" title="5.格式化"></a>5.格式化</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb1[root@localhost ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb2[root@localhost ~]# mkfs -t xfs &#x2F;dev&#x2F;sdb3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-永久挂载"><a href="#6-永久挂载" class="headerlink" title="6.永久挂载"></a>6.永久挂载</h3><p>根据自身情况而定</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir -p &#x2F;web&#x2F;&#123;mysql,nginx,php&#125;[root@localhost ~]# vim &#x2F;etc&#x2F;fstab&#x2F;dev&#x2F;sdb1&#x2F;web&#x2F;mysqlext4defaults0 0&#x2F;dev&#x2F;sdb2&#x2F;web&#x2F;nginxext4defaults0 0&#x2F;dev&#x2F;sdb3&#x2F;web&#x2F;phpxfsdefaults0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mount -a#挂载全部<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblk | grep &quot;sdb&quot;#查看分区情况sdb               8:16   0    8G  0 disk ├─sdb1            8:17   0  1.9G  0 part &#x2F;web&#x2F;mysql├─sdb2            8:18   0  2.8G  0 part &#x2F;web&#x2F;nginx└─sdb3            8:19   0  2.8G  0 part &#x2F;web&#x2F;php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> GPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】硬盘的管理</title>
      <link href="/2023/03/07/44/"/>
      <url>/2023/03/07/44/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】硬盘的管理"><a href="#【Linux系列教程】硬盘的管理" class="headerlink" title="【Linux系列教程】硬盘的管理"></a>【Linux系列教程】硬盘的管理</h1><h2 id="一、添加硬盘"><a href="#一、添加硬盘" class="headerlink" title="一、添加硬盘"></a>一、添加硬盘</h2><h3 id="1-虚拟机添加硬盘"><a href="#1-虚拟机添加硬盘" class="headerlink" title="1.虚拟机添加硬盘"></a>1.虚拟机添加硬盘</h3><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk1.png" alt="vmdk1"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk2.png" alt="vmdk2"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk3.png" alt="vmdk3"></p><p><img src="https://www.wangshengjj.work/upload/2023/03/vmdk4.png" alt="vmdk4"></p><h2 id="二、创建磁盘分区"><a href="#二、创建磁盘分区" class="headerlink" title="二、创建磁盘分区"></a>二、创建磁盘分区</h2><p><strong>我们可以使用命令，查看我们刚刚添加的新硬盘</strong></p><h3 id="1-查看硬盘"><a href="#1-查看硬盘" class="headerlink" title="1.查看硬盘"></a>1.查看硬盘</h3><pre class="line-numbers language-none"><code class="language-none"># lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  476M  0 part &#x2F;boot└─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sdb               8:16   0    8G  0 disk #我们刚刚添加的硬盘，默认命名为sdbsr0              11:0    1  4.4G  0 rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-fdisk-l查看当前系统硬盘"><a href="#2-fdisk-l查看当前系统硬盘" class="headerlink" title="2. fdisk -l查看当前系统硬盘"></a>2. fdisk -l查看当前系统硬盘</h3><pre class="line-numbers language-none"><code class="language-none"># fdisk -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# fdisk -l磁盘 &#x2F;dev&#x2F;sda：21.5 GB, 21474836480 字节，41943040 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节磁盘标签类型：dos磁盘标识符：0x0009d66b   设备 Boot      Start         End      Blocks   Id  System&#x2F;dev&#x2F;sda1   *        2048      976895      487424   83  Linux&#x2F;dev&#x2F;sda2          976896    41943039    20483072   8e  Linux LVM磁盘 &#x2F;dev&#x2F;sdb：8589 MB, 8589934592 字节，16777216 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节磁盘 &#x2F;dev&#x2F;mapper&#x2F;centos-root：18.8 GB, 18824036352 字节，36765696 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节磁盘 &#x2F;dev&#x2F;mapper&#x2F;centos-swap：2147 MB, 2147483648 字节，4194304 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、fdisk磁盘管理工具"><a href="#三、fdisk磁盘管理工具" class="headerlink" title="三、fdisk磁盘管理工具"></a>三、fdisk磁盘管理工具</h2><h3 id="1-常用参数"><a href="#1-常用参数" class="headerlink" title="1.常用参数"></a>1.常用参数</h3><ul><li>n新建分区 </li><li>d删除分区</li><li>p查看分区</li><li>w保存退出</li><li>q强制退出</li></ul><h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h3><pre class="line-numbers language-none"><code class="language-none"># fdisk 硬盘名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# fdisk &#x2F;dev&#x2F;sdb#当前你要编辑的硬盘设备，默认在dev目录下欢迎使用 fdisk (util-linux 2.23.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。Device does not contain a recognized partition table使用磁盘标识符 0x617b717f 创建新的 DOS 磁盘标签。命令(输入 m 获取帮助)：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建一个主分区"><a href="#3-创建一个主分区" class="headerlink" title="3.创建一个主分区"></a>3.创建一个主分区</h3><p><strong>具体要求如下：<br>主分区 2G ext4 &#x2F;web&#x2F;nginx<br>逻辑分区 3G ext4 &#x2F;web&#x2F;httpd<br>逻辑分区 3G xfs &#x2F;web&#x2F;mysql</strong></p><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：n#创建一个新分区Partition type:   p   primary (0 primary, 0 extended, 4 free)   e   extendedSelect (default p): p#选择主分区分区号 (1-4，默认 1)：1 #默认即可起始 扇区 (2048-16777215，默认为 2048)： #默认即可将使用默认值 2048Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-16777215，默认为 16777215)：+2G #主分区划分的大小分区 1 已设置为 Linux 类型，大小设为 2 GiB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建拓展分区"><a href="#4-创建拓展分区" class="headerlink" title="4.创建拓展分区"></a>4.创建拓展分区</h3><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：n#新建一个分区Partition type:   p   primary (1 primary, 0 extended, 3 free)   e   extendedSelect (default p): e#选择拓展分区分区号 (2-4，默认 2):#默认即可起始 扇区 (4196352-16777215，默认为 4196352)：#默认即可将使用默认值 4196352Last 扇区, +扇区 or +size&#123;K,M,G&#125; (4196352-16777215，默认为 16777215)：#默认即可将使用默认值 16777215分区 2 已设置为 Extended 类型，大小设为 6 GiB命令(输入 m 获取帮助)：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建逻辑分区"><a href="#5-创建逻辑分区" class="headerlink" title="5.创建逻辑分区"></a>5.创建逻辑分区</h3><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：n#新建分区Partition type:   p   primary (1 primary, 1 extended, 2 free)   l   logical (numbered from 5)Select (default p): l#选择逻辑分区，只有先创建拓展分区才可以创建逻辑分区添加逻辑分区 5起始 扇区 (4198400-16777215，默认为 4198400)：将使用默认值 4198400Last 扇区, +扇区 or +size&#123;K,M,G&#125; (4198400-16777215，默认为 16777215)：+3G    #创建一个3G的逻辑分区分区 5 已设置为 Linux 类型，大小设为 3 GiB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：nPartition type:   p   primary (1 primary, 1 extended, 2 free)   l   logical (numbered from 5)Select (default p): l添加逻辑分区 6起始 扇区 (10491904-16777215，默认为 10491904)：将使用默认值 10491904Last 扇区, +扇区 or +size&#123;K,M,G&#125; (10491904-16777215，默认为 16777215)：     #把剩下的容量都给第二个逻辑分区    将使用默认值 16777215分区 6 已设置为 Linux 类型，大小设为 3 GiB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-查看"><a href="#6-查看" class="headerlink" title="6.查看"></a>6.查看</h3><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：p#可以使用p参数查看当前硬盘情况磁盘 &#x2F;dev&#x2F;sdb：8589 MB, 8589934592 字节，16777216 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节磁盘标签类型：dos磁盘标识符：0x617b717f   设备 Boot      Start         End      Blocks   Id  System&#x2F;dev&#x2F;sdb1            2048     4196351     2097152   83  Linux#主分区大小2G&#x2F;dev&#x2F;sdb2         4196352    16777215     6290432    5  Extended#拓展分区大小6G&#x2F;dev&#x2F;sdb5         4198400    10489855     3145728   83  Linux#逻辑分区大小3G&#x2F;dev&#x2F;sdb6        10491904    16777215     3142656   83  Linux#逻辑分区大小3G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除-拓展-不用执行"><a href="#删除-拓展-不用执行" class="headerlink" title="删除(拓展)不用执行"></a>删除(拓展)不用执行</h5><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：d#删除操作分区号 (1,2,5,6，默认 6)：5#选择第5号分区分区 5 已删除命令(输入 m 获取帮助)：p   设备 Boot      Start         End      Blocks   Id  System&#x2F;dev&#x2F;sdb1            2048     4196351     2097152   83  Linux&#x2F;dev&#x2F;sdb2         4196352    16777215     6290432    5  Extended&#x2F;dev&#x2F;sdb5        10491904    16777215     3142656   83  Linux#这里只剩下分区6了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="退出-不用执行"><a href="#退出-不用执行" class="headerlink" title="退出(不用执行)"></a>退出(不用执行)</h5><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：q[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-保存分区"><a href="#7-保存分区" class="headerlink" title="7.保存分区"></a>7.保存分区</h3><pre class="line-numbers language-none"><code class="language-none">命令(输入 m 获取帮助)：wThe partition table has been altered!Calling ioctl() to re-read partition table.正在同步磁盘。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-让内核识别硬盘上的分区变化-重要"><a href="#8-让内核识别硬盘上的分区变化-重要" class="headerlink" title="8.让内核识别硬盘上的分区变化 (重要)"></a>8.让内核识别硬盘上的分区变化 (重要)</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# partprobe &#x2F;dev&#x2F;sdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-查看分区"><a href="#9-查看分区" class="headerlink" title="9.查看分区"></a>9.查看分区</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  476M  0 part &#x2F;boot└─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sdb               8:16   0    8G  0 disk ├─sdb1            8:17   0    2G  0 part ├─sdb2            8:18   0    1K  0 part ├─sdb5            8:21   0    3G  0 part └─sdb6            8:22   0    3G  0 part sr0              11:0    1  4.4G  0 rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-创建文件系统-格式化"><a href="#10-创建文件系统-格式化" class="headerlink" title="10.创建文件系统(格式化)"></a>10.创建文件系统(格式化)</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb1[root@localhost ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb5[root@localhost ~]# mkfs -t xfs &#x2F;dev&#x2F;sdb6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-挂载"><a href="#11-挂载" class="headerlink" title="11.挂载"></a>11.挂载</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir -p &#x2F;web&#x2F;&#123;nginx,httpd,mysql&#125;[root@localhost ~]# mount &#x2F;dev&#x2F;sdb1 &#x2F;web&#x2F;nginx[root@localhost ~]# mount &#x2F;dev&#x2F;sdb5 &#x2F;web&#x2F;httpd[root@localhost ~]# mount &#x2F;dev&#x2F;sdb6 &#x2F;web&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-查看挂载情况"><a href="#12-查看挂载情况" class="headerlink" title="12.查看挂载情况"></a>12.查看挂载情况</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -Th | grep &quot;sdb&quot;#查看挂载情况&#x2F;dev&#x2F;sdb1               ext4      2.0G  6.0M  1.8G    1% &#x2F;web&#x2F;nginx&#x2F;dev&#x2F;sdb5               ext4      2.9G  9.0M  2.8G    1% &#x2F;web&#x2F;httpd&#x2F;dev&#x2F;sdb6               xfs       3.0G   33M  3.0G    2% &#x2F;web&#x2F;mysql[root@localhost ~]# lsblk#这个命令同样可以查看挂载情况NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0   20G  0 disk ├─sda1            8:1    0  476M  0 part └─sda2            8:2    0 19.5G  0 part   ├─centos-root 253:0    0 17.5G  0 lvm  &#x2F;  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]sdb               8:16   0    8G  0 disk ├─sdb1            8:17   0    2G  0 part &#x2F;web&#x2F;nginx├─sdb2            8:18   0    1K  0 part ├─sdb5            8:21   0    3G  0 part &#x2F;web&#x2F;httpd└─sdb6            8:22   0    3G  0 part &#x2F;web&#x2F;mysqlsr0              11:0    1  4.4G  0 rom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="取消挂载-拓展-不用执行"><a href="#取消挂载-拓展-不用执行" class="headerlink" title="取消挂载(拓展)不用执行"></a>取消挂载(拓展)不用执行</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# umount &#x2F;dev&#x2F;sdb1 &#x2F;web&#x2F;nginx[root@localhost ~]# umount &#x2F;dev&#x2F;sdb5 &#x2F;web&#x2F;httpd[root@localhost ~]# umount &#x2F;dev&#x2F;sdb6 &#x2F;web&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-永久挂载"><a href="#13-永久挂载" class="headerlink" title="13.永久挂载"></a>13.永久挂载</h3><h4 id="查看分区的UUID"><a href="#查看分区的UUID" class="headerlink" title="查看分区的UUID"></a>查看分区的UUID</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# blkid &#x2F;dev&#x2F;sdb6&#x2F;dev&#x2F;sdb6: UUID&#x3D;&quot;edefd51c-6f21-42a0-9ea3-a84fa7ced7cc&quot; TYPE&#x3D;&quot;xfs&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="a-实现永久挂载"><a href="#a-实现永久挂载" class="headerlink" title="a.实现永久挂载"></a>a.实现永久挂载</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;fstab&#x2F;dev&#x2F;sdb1       &#x2F;web&#x2F;nginx      ext4    defaults        0 0&#x2F;dev&#x2F;sdb5       &#x2F;web&#x2F;httpd      ext4    defaults        0 0UUID&#x3D;edefd51c-6f21-42a0-9ea3-a84fa7ced7cc       &#x2F;web&#x2F;mysql      xfs     defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mount -a#挂载所有<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# lsblk | grep &quot;sdb&quot;#查看挂载情况sdb               8:16   0    8G  0 disk ├─sdb1            8:17   0    2G  0 part &#x2F;web&#x2F;nginx├─sdb2            8:18   0    1K  0 part ├─sdb5            8:21   0    3G  0 part &#x2F;web&#x2F;httpd└─sdb6            8:22   0    3G  0 part &#x2F;web&#x2F;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、查看磁盘使用情况"><a href="#四、查看磁盘使用情况" class="headerlink" title="四、查看磁盘使用情况"></a>四、查看磁盘使用情况</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT | grep -v &quot;tmpfs&quot;文件系统                类型      容量  已用  可用 已用% 挂载点&#x2F;dev&#x2F;mapper&#x2F;centos-root xfs        18G  5.6G   12G   32% &#x2F;&#x2F;dev&#x2F;sdb6               xfs       3.0G   33M  3.0G    2% &#x2F;web&#x2F;mysql&#x2F;dev&#x2F;sdb1               ext4      2.0G  6.0M  1.8G    1% &#x2F;web&#x2F;nginx&#x2F;dev&#x2F;sdb5               ext4      2.9G  9.0M  2.8G    1% &#x2F;web&#x2F;httpd&#x2F;dev&#x2F;sda1               xfs       473M  177M  297M   38% &#x2F;boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、inode-i节点"><a href="#五、inode-i节点" class="headerlink" title="五、inode   i节点"></a>五、inode   i节点</h2><ul><li>限制磁盘存储数据的因素 <ul><li>容量 </li><li>inode<ul><li>文件数量</li></ul></li></ul></li></ul><h3 id="1-查看磁盘容量"><a href="#1-查看磁盘容量" class="headerlink" title="1.查看磁盘容量"></a>1.查看磁盘容量</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -hT &#x2F;dev&#x2F;sdb1文件系统       类型  容量  已用  可用 已用% 挂载点&#x2F;dev&#x2F;sdb1      ext4  477M  2.3M  445M    1% &#x2F;web&#x2F;httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看磁盘inode"><a href="#2-查看磁盘inode" class="headerlink" title="2.查看磁盘inode"></a>2.查看磁盘inode</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -i &#x2F;dev&#x2F;sdb1文件系统        Inode 已用(I) 可用(I) 已用(I)% 挂载点&#x2F;dev&#x2F;sdb1      128016      21  127995       1% &#x2F;web&#x2F;httpd#当12W多的文件创建满以后，即使磁盘还有剩余容量，也无法继续创建文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-inode作用"><a href="#3-inode作用" class="headerlink" title="3.inode作用"></a>3.inode作用</h3><ul><li>存储文件的元数据metadata信息</li><li>文件的存储 <ul><li>真实的数据<ul><li>数据块</li></ul></li><li>元数据信息<ul><li>inode</li></ul></li></ul></li></ul><p><strong>用于限制磁盘创建文件数量</strong></p><h3 id="4-查看元数据"><a href="#4-查看元数据" class="headerlink" title="4.查看元数据"></a>4.查看元数据</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# stat &#x2F;etc&#x2F;fstab   文件：&quot;&#x2F;etc&#x2F;fstab&quot;  大小：615       块：8          IO 块：4096   普通文件设备：fd00h&#x2F;64768dInode：18354730    硬链接：1权限：(0644&#x2F;-rw-r--r--)  Uid：(    0&#x2F;    root)   Gid：(    0&#x2F;    root)环境：system_u:object_r:etc_t:s0最近访问：2022-07-14 15:14:58.014971698 +0800最近更改：2022-07-14 15:14:57.906971702 +0800最近改动：2022-07-14 15:14:57.906971702 +0800创建时间：-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> linux磁盘管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】权限</title>
      <link href="/2023/03/06/43/"/>
      <url>/2023/03/06/43/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】权限"><a href="#【Linux系列教程】权限" class="headerlink" title="【Linux系列教程】权限"></a>【Linux系列教程】权限</h1><h2 id="一、查看权限信息"><a href="#一、查看权限信息" class="headerlink" title="一、查看权限信息"></a>一、查看权限信息</h2><h3 id="1-查看文件和目录的权限信息"><a href="#1-查看文件和目录的权限信息" class="headerlink" title="1.查看文件和目录的权限信息"></a>1.查看文件和目录的权限信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -l &#x2F;etc&#x2F;fstab #查看文件的权限-   rw-           r--        r--.  1    root     root 465 7月   5 13:51 &#x2F;etc&#x2F;fstab   属主用户权限   属组权限   其他用户    属主用户  属组   [root@localhost ~]# ls -ld &#x2F;etc&#x2F;#查看目录的权限drwxr-xr-x. 148 root root 8192 7月  13 09:08 &#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-常规权限"><a href="#2-常规权限" class="headerlink" title="2.常规权限"></a>2.常规权限</h3><ul><li>r读</li><li>w写</li><li>x执行</li></ul><ol><li><p>针对文件 </p><ol><li>r<ul><li>查看文件内容(cat&#x2F;head&#x2F;tail&#x2F;more&#x2F;less&#x2F;grep)</li></ul></li><li>w<ul><li>修改文件内容(vim)</li></ul></li><li>x<ul><li>脚本文件</li></ul></li></ol></li><li><p>针对目录</p></li></ol><ul><li>用户要正常查看目录下的文件，必须同时拥有rx权限<ol><li>r<ul><li>查看目录下的文件 ( ls 目录名称)</li></ul></li><li>w<ul><li>修改目录下的文件 (touch, rm, mv)</li></ul></li><li>x<ul><li>可正常切换目录(cd)</li></ul></li></ol></li></ul><h2 id="二、修改文件、目录的权限"><a href="#二、修改文件、目录的权限" class="headerlink" title="二、修改文件、目录的权限"></a>二、修改文件、目录的权限</h2><h3 id="1-修改属主和属组"><a href="#1-修改属主和属组" class="headerlink" title="1.修改属主和属组"></a>1.修改属主和属组</h3><pre class="line-numbers language-none"><code class="language-none"># chown 用户名[.用户组名]   文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chown zzj.caiwu &#x2F;opt&#x2F;test&#x2F;1.txt #修改属主和属组[root@localhost ~]# ls -l &#x2F;opt&#x2F;test&#x2F;1.txt-rw-r--r--. 1 zzj caiwu 0 7月  13 10:37 &#x2F;opt&#x2F;test&#x2F;1.txt[root@localhost ~]# chown martin &#x2F;opt&#x2F;test&#x2F;2.txt #修改属主[root@localhost ~]# ls -l &#x2F;opt&#x2F;test&#x2F;2.txt-rw-r--r--. 1 martin root 0 7月  13 10:37 &#x2F;opt&#x2F;test&#x2F;2.txt[root@localhost ~]# chown .martin &#x2F;opt&#x2F;test&#x2F;2.txt #修改属组[root@localhost ~]# ls -l &#x2F;opt&#x2F;test&#x2F;2.txt-rw-r--r--. 1 martin martin 0 7月  13 10:37 &#x2F;opt&#x2F;test&#x2F;2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-R递归修改属主或属组"><a href="#2-R递归修改属主或属组" class="headerlink" title="2 -R递归修改属主或属组"></a>2 -R递归修改属主或属组</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chown -R zzj.caiwu &#x2F;opt&#x2F;bj#递归修改文件或者目录的属主和属组(包括下面的所有文件或目录)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-修改属组"><a href="#3-修改属组" class="headerlink" title="3.修改属组"></a>3.修改属组</h3><pre class="line-numbers language-none"><code class="language-none"># chgrp 用户组名 文件名称 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chgrp caiwu &#x2F;opt&#x2F;test&#x2F;3.txt#修改属组[root@localhost ~]# ls -l &#x2F;opt&#x2F;test&#x2F;3.txt-rw-r--r--. 1 root caiwu 0 7月  13 10:37 &#x2F;opt&#x2F;test&#x2F;3.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-修改权限"><a href="#4-修改权限" class="headerlink" title="4.修改权限"></a>4.修改权限</h3><pre class="line-numbers language-none"><code class="language-none"># chmod &#123;augo&#125;&#123;+-&#x3D;&#125;&#123;rwx&#125;  文件名称 或# chmod xxx 文件名称#xxx代表数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>aall所有</li><li>uuser属主</li><li>ggroup属组</li><li>oother其他用户</li></ul><p><strong>rwx分别代表的数字</strong></p><ul><li>r 代表4</li><li>w 代表2</li><li>x 代表1</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chmod g+w &#x2F;opt&#x2F;test&#x2F;1.txt#给1.txt这个文件属组添加修改权限[root@localhost ~]# ls -l &#x2F;opt&#x2F;test&#x2F;1.txt-rw-rw-r--. 1 martin caiwu 0 7月  13 10:37 &#x2F;opt&#x2F;test&#x2F;1.txt[root@localhost ~]# chmod g-rw,o+x &#x2F;opt&#x2F;test&#x2F;1.txt#给1.txt这个文件属组用户取消读写权限，其他用户新增执行权限[root@localhost ~]# ls -l &#x2F;opt&#x2F;test&#x2F;1.txt-rw----r-x. 1 martin caiwu 0 7月  13 10:37 &#x2F;opt&#x2F;test&#x2F;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chmod 600 &#x2F;opt&#x2F;test&#x2F;2.txt#给2.txt文件属主用户添加读写权限，属组和其他用户没有权限[root@localhost ~]# ls -l &#x2F;opt&#x2F;test&#x2F;2.txt-rw-------. 1 martin root 0 7月  13 10:37 &#x2F;opt&#x2F;test&#x2F;2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-R递归修改权限"><a href="#5-R递归修改权限" class="headerlink" title="5. -R递归修改权限"></a>5. -R递归修改权限</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chmod -R 700 &#x2F;opt&#x2F;bj&#x2F; #递归修改目录下(所有文件和目录)包括目录本身的权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、facl文件访问控制列表"><a href="#三、facl文件访问控制列表" class="headerlink" title="三、facl文件访问控制列表"></a>三、facl文件访问控制列表</h2><ul><li>针对单个用户、单个用户组设置权限</li></ul><h3 id="1-单个用户"><a href="#1-单个用户" class="headerlink" title="1.单个用户"></a>1.单个用户</h3><pre class="line-numbers language-none"><code class="language-none"># setfacl -m u:用户名:权限   文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# setfacl -m u:user4:r &#x2F;opt&#x2F;test&#x2F;file03#file03这个文件，user4用户添加只读权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-单个用户组"><a href="#2-单个用户组" class="headerlink" title="2.单个用户组"></a>2.单个用户组</h3><pre class="line-numbers language-none"><code class="language-none"># setfacl -m g:用户组名:权限  文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# setfacl -m g:jishu:rwx &#x2F;opt&#x2F;test&#x2F;file03#file03这个文件，jishu组添加啊所有权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看权限"><a href="#3-查看权限" class="headerlink" title="3.查看权限"></a>3.查看权限</h3><pre class="line-numbers language-none"><code class="language-none"># getfacl 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# getfacl &#x2F;opt&#x2F;test&#x2F;file03  getfacl: Removing leading &#39;&#x2F;&#39; from absolute path names# file: opt&#x2F;test&#x2F;file03# owner: user1# group: user3user::rw-user:user4:r--group::rwxmask::rwxother::r-x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-撤销权限"><a href="#4-撤销权限" class="headerlink" title="4.撤销权限"></a>4.撤销权限</h3><pre class="line-numbers language-none"><code class="language-none"># setfacl -x u:用户名   文件名称 #删除用户的权限# setfacl -x g:用户组名  文件名称 #删除用户组的权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# setfacl -x u:martin &#x2F;opt&#x2F;test&#x2F;file04  #删除用户martin对file04这个文件的所有权限[root@localhost ~]# getfacl &#x2F;opt&#x2F;test&#x2F;file04getfacl: Removing leading &#39;&#x2F;&#39; from absolute path names# file: opt&#x2F;test&#x2F;file04# owner: root# group: rootuser::rw-group::r--mask::r--other::r--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、特殊权限-重要"><a href="#四、特殊权限-重要" class="headerlink" title="四、特殊权限(重要)"></a>四、特殊权限(重要)</h2><h3 id="1-suid"><a href="#1-suid" class="headerlink" title="1.suid"></a>1.suid</h3><ul><li>针对脚本文件、命令设置<ul><li>作用<ul><li>当普通用户运行命令期间，会临时获取到该命令对应的属主用户对操作系统的使用权限</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none"># chmod u+s &#x2F;usr&#x2F;bin&#x2F;passwd#添加suid权限# chmod u-s &#x2F;usr&#x2F;bin&#x2F;passwd #撤销suid权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -l &#x2F;usr&#x2F;bin&#x2F;passwd -rwsr-xr-x. 1 root root 27856 4月   1 2020 &#x2F;usr&#x2F;bin&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-sgid"><a href="#2-sgid" class="headerlink" title="2.sgid"></a>2.sgid</h3><ul><li>针对目录设置<ul><li>作用<ul><li>在目录下创建文件时，文件会自动继承目录的属组</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none"># chmod g+s &#x2F;opt&#x2F;linux#添加sgid权限# chmod g-s &#x2F;opt&#x2F;linux#撤销sgid权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chown .jishu &#x2F;opt&#x2F;linux[root@localhost ~]# chmod g+s &#x2F;opt&#x2F;linux#添加sgid权限[root@localhost ~]# ls -ldh &#x2F;opt&#x2F;linux&#x2F;drwxr-srwx. 2 root jishu 201 7月  13 14:50 &#x2F;opt&#x2F;linux&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-sticky-bit"><a href="#3-sticky-bit" class="headerlink" title="3.sticky bit"></a>3.sticky bit</h3><ul><li>针对目录设置<ul><li>作用<ul><li>防止普通用户相互删除文件</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none"># chmod o+t &#x2F;opt&#x2F;work&#x2F;#添加sticky bit权限# chmod o-t &#x2F;opt&#x2F;work&#x2F;#撤销sticky bit权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chmod o+t &#x2F;opt&#x2F;work&#x2F;#添加sticky bit权限[root@localhost ~]# ls -ldh &#x2F;opt&#x2F;work&#x2F;drwxrwxr-t. 2 root IT 50 7月  13 14:58 &#x2F;opt&#x2F;work&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-特殊权限数字代号"><a href="#4-特殊权限数字代号" class="headerlink" title="4.特殊权限数字代号"></a>4.特殊权限数字代号</h3><ul><li>suid4</li><li>sgid2</li><li>sticky bit 1</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chmod 3777 &#x2F;opt&#x2F;work#第一位数字代表特殊权限，后三位代表普通权限#上面命令解释：在opt下work这个目录，属主用户拥有全部权限，属组和其他用户拥有全部权限，目录下以后创建的所有文件和目录都会跟随work文件夹的属组，并且同一组用户创建文件之间不能互相删除彼此的文件(自己的文件可以删除)，只有文件夹属主和root用户可以删除全部文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、umask反掩码"><a href="#五、umask反掩码" class="headerlink" title="五、umask反掩码"></a>五、umask反掩码</h2><ul><li>影响文件、目录的默认权限</li></ul><h3 id="1-查看"><a href="#1-查看" class="headerlink" title="1.查看"></a>1.查看</h3><pre class="line-numbers language-none"><code class="language-none"># umask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>root管理员<ul><li>默认值: 0022<ul><li>文件: 666 -0022&#x3D;0644</li><li>目录: 777 -0022&#x3D;0755</li></ul></li></ul></li><li>普通用户<ul><li>默认值: 0002</li><li>文件：666 -0002&#x3D;0664</li><li>目录：777 -0002&#x3D;0775</li></ul></li></ul><h2 id="六、文件的隐藏属性"><a href="#六、文件的隐藏属性" class="headerlink" title="六、文件的隐藏属性"></a>六、文件的隐藏属性</h2><h3 id="1-查看文件的隐藏属性"><a href="#1-查看文件的隐藏属性" class="headerlink" title="1.查看文件的隐藏属性"></a>1.查看文件的隐藏属性</h3><pre class="line-numbers language-none"><code class="language-none"># lsattr 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-添加文件的隐藏属性"><a href="#2-添加文件的隐藏属性" class="headerlink" title="2.添加文件的隐藏属性"></a>2.添加文件的隐藏属性</h3><ul><li>-i 防止文件被删除</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chattr +i &#x2F;opt&#x2F;a.txt[root@localhost ~]# rm -rf &#x2F;opt&#x2F;a.txt rm: 无法删除&quot;&#x2F;opt&#x2F;a.txt&quot;: 不允许的操作#发现root用户也无法删除文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3删除文件的隐藏属性"><a href="#3删除文件的隐藏属性" class="headerlink" title="3删除文件的隐藏属性"></a>3删除文件的隐藏属性</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# chattr -i &#x2F;opt&#x2F;a.txt[root@localhost ~]# rm -rf &#x2F;opt&#x2F;a.txt#正常删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux教程 </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】用户和用户组的管理</title>
      <link href="/2023/03/03/42/"/>
      <url>/2023/03/03/42/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】用户和用户组的管理"><a href="#【Linux系列教程】用户和用户组的管理" class="headerlink" title="【Linux系列教程】用户和用户组的管理"></a>【Linux系列教程】用户和用户组的管理</h1><h2 id="一、用户的介绍"><a href="#一、用户的介绍" class="headerlink" title="一、用户的介绍"></a>一、用户的介绍</h2><ul><li>多用户多任务的操作系统 <ul><li><pre><code>用户、用户组</code></pre><ul><li><pre><code> 用户组</code></pre><ul><li>便于统一设置权限</li></ul></li></ul></li></ul></li></ul><h3 id="1-用户的相关文件"><a href="#1-用户的相关文件" class="headerlink" title="1.用户的相关文件"></a>1.用户的相关文件</h3><ol><li><ul><li>&#x2F;etc&#x2F;passwd<ul><li>用户信息<ul><li>格式</li><li>用户名:X:uid:gid:说明信息:家目录:shell<ul><li>shell翻译的作用<ul><li>&#x2F;bin&#x2F;bash默认</li><li>&#x2F;sbin&#x2F;nologin不允许登录系统</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><ul><li>&#x2F;etc&#x2F;shadow<ul><li>用户密码信息 </li><li>$6$6iQ2r92GW8UiDSBy$B23qIJIqmASBwZf&#x2F;FcrlfijEn<ul><li>$6: SHA算法，红帽5.x版本为$1   MD5算法 </li><li>salt 盐，随机数</li></ul></li></ul></li></ul></li><li><ul><li>&#x2F;etc&#x2F;group<ul><li>用户组</li></ul></li></ul></li></ol><h3 id="2-用户类型"><a href="#2-用户类型" class="headerlink" title="2.用户类型"></a>2.用户类型</h3><ol><li><ul><li>管理员用户<ul><li>root, 0</li></ul></li></ul></li><li><ul><li>普通用户 <ul><li>1000以后</li></ul></li></ul></li><li><ul><li>系统用户<ul><li>1—999</li><li>保证某应用、软件可正常安装部署、运行</li><li>不允许登录系统&#x2F;sbin&#x2F;nologin</li></ul></li></ul></li></ol><h3 id="3-用户组"><a href="#3-用户组" class="headerlink" title="3.用户组"></a>3.用户组</h3><ol><li><ul><li>基本组</li><li>一个用户只能加入一个基本组</li></ul></li><li><ul><li>附加组&#x2F;从属组</li><li>一个用户加入多个附加组</li></ul></li></ol><h2 id="二、用户的操作"><a href="#二、用户的操作" class="headerlink" title="二、用户的操作"></a>二、用户的操作</h2><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1.创建用户"></a>1.创建用户</h3><pre class="line-numbers language-none"><code class="language-none"># useradd [选项] 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# useradd zzj #创建一个名为zzj的用户<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="u指定用户的UID"><a href="#u指定用户的UID" class="headerlink" title="-u指定用户的UID"></a>-u指定用户的UID</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# useradd -u 2000 user01[root@localhost ~]# id user01#查看用户IDuid&#x3D;2000(user01) gid&#x3D;2000(user01) 组&#x3D;2000(user01)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="G-指定用户附加组"><a href="#G-指定用户附加组" class="headerlink" title="-G 指定用户附加组"></a>-G 指定用户附加组</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# groupadd jishu#创建jishu组[root@localhost ~]# useradd -G jishu jerry#创建jerry用户并且加入到jishu这个组里[root@localhost ~]# id jerryuid&#x3D;2001(jerry) gid&#x3D;2002(jerry) 组&#x3D;2002(jerry),2001(jishu)[root@localhost ~]# grep &quot;jishu&quot; &#x2F;etc&#x2F;groupjishu:x:2001:jerry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="g指定用户主组"><a href="#g指定用户主组" class="headerlink" title="-g指定用户主组"></a>-g指定用户主组</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# groupadd jishu[root@localhost ~]# useradd -g jishu tom[root@localhost ~]# id tomuid&#x3D;2003(tom) gid&#x3D;2001(jishu) 组2001(jishu)[root@localhost ~]# grep &quot;jishu&quot; &#x2F;etc&#x2F;groupjishu:x:2001:jerry,tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="s-指定shell-M-不创建家目录"><a href="#s-指定shell-M-不创建家目录" class="headerlink" title="-s 指定shell -M 不创建家目录"></a>-s 指定shell -M 不创建家目录</h4><p>创建系统账户会用到</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# useradd -u 111 -s &#x2F;sbin&#x2F;nologin -M www [root@localhost ~]# grep &quot;www&quot; &#x2F;etc&#x2F;passwdwww:x:111:2003::&#x2F;home&#x2F;www:&#x2F;sbin&#x2F;nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置用户密码"><a href="#2-设置用户密码" class="headerlink" title="2.设置用户密码"></a>2.设置用户密码</h3><ul><li>只有root用户可修改其他用户密码</li><li>普通用户只能修改自己的密码</li></ul><pre class="line-numbers language-none"><code class="language-none"># passwd [选项] [用户名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# passwd zzj 更改用户 zzj 的密码 。新的 密码：#注意！！！Linux系统在输入密码的时候不会显示出来重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="l-锁定用户"><a href="#l-锁定用户" class="headerlink" title="-l 锁定用户"></a>-l 锁定用户</h4><p>被锁定的用户无法登陆</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# passwd -l zzj锁定用户 zzj 的密码 。passwd: 操作成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="u-解锁用户"><a href="#u-解锁用户" class="headerlink" title="-u 解锁用户"></a>-u 解锁用户</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# passwd -u zzj解锁用户 zzj 的密码。passwd: 操作成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-切换用户"><a href="#3-切换用户" class="headerlink" title="3.切换用户"></a>3.切换用户</h3><pre class="line-numbers language-none"><code class="language-none"># su - 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# su - zzj上一次登录：二 7月 12 11:06:42 CST 2022pts&#x2F;1 上[zzj@localhost ~]$ [zzj@localhost ~]$ exit登出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除用户"><a href="#4-删除用户" class="headerlink" title="4.删除用户"></a>4.删除用户</h3><pre class="line-numbers language-none"><code class="language-none"># useradel 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# userdel -r zzj[root@localhost ~]# grep &quot;zzj&quot; &#x2F;etc&#x2F;passwd[root@localhost ~]# ls &#x2F;home&#x2F;AA  martin[root@localhost ~]# ls &#x2F;var&#x2F;spool&#x2F;mail&#x2F;AA  martin  rpc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-用户组"><a href="#5-用户组" class="headerlink" title="5.用户组"></a>5.用户组</h3><h4 id="a-创建用户组"><a href="#a-创建用户组" class="headerlink" title="a.创建用户组"></a>a.创建用户组</h4><pre class="line-numbers language-none"><code class="language-none"># groupadd 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="b-删除用户组"><a href="#b-删除用户组" class="headerlink" title="b.删除用户组"></a>b.删除用户组</h4><pre class="line-numbers language-none"><code class="language-none"># groupdel 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-查看用户信息"><a href="#6-查看用户信息" class="headerlink" title="6.查看用户信息"></a>6.查看用户信息</h3><h4 id="a-查看用户ID"><a href="#a-查看用户ID" class="headerlink" title="a.查看用户ID"></a>a.查看用户ID</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# id zzjuid&#x3D;1002(zzj) gid&#x3D;1002(zzj) 组&#x3D;1002(zzj)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="b-查看当前登录账户"><a href="#b-查看当前登录账户" class="headerlink" title="b.查看当前登录账户"></a>b.查看当前登录账户</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# whoami root[root@localhost ~]# su - zzj[zzj@localhost ~]$ whoamizzj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-查看都有哪些用户正在登录"><a href="#c-查看都有哪些用户正在登录" class="headerlink" title="c.查看都有哪些用户正在登录"></a>c.查看都有哪些用户正在登录</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# whoroot     :0           2022-07-12 09:05 (:0)root     pts&#x2F;0        2022-07-12 11:28 (:0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-修改用户信息"><a href="#7-修改用户信息" class="headerlink" title="7.修改用户信息"></a>7.修改用户信息</h3><pre class="line-numbers language-none"><code class="language-none"># usermod [选项] 用户名 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="u-修改uid"><a href="#u-修改uid" class="headerlink" title="-u 修改uid"></a>-u 修改uid</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# usermod -u 6666 zzj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="s-修改shell"><a href="#s-修改shell" class="headerlink" title="-s 修改shell"></a>-s 修改shell</h4><pre class="line-numbers language-none"><code class="language-none">root@localhost ~]# grep &quot;www&quot; &#x2F;etc&#x2F;passwdwww:x:111:2003::&#x2F;home&#x2F;www:&#x2F;sbin&#x2F;nologin[root@localhost ~]# usermod -s &#x2F;bin&#x2F;bash www[root@localhost ~]# grep &quot;www&quot; &#x2F;etc&#x2F;passwdwww:x:111:2003::&#x2F;home&#x2F;www:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="G-修改组"><a href="#G-修改组" class="headerlink" title="-G 修改组"></a>-G 修改组</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# id jerryuid&#x3D;2001(jerry) gid&#x3D;2002(jerry) 组&#x3D;2002(jerry),2001(jishu)[root@localhost ~]# [root@localhost ~]# groupadd caiwu[root@localhost ~]# usermod -G caiwu jerry[root@localhost ~]# [root@localhost ~]# id jerryuid&#x3D;2001(jerry) gid&#x3D;2002(jerry) 组&#x3D;2002(jerry),2004(caiwu)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="aG-同时添加到其他组"><a href="#aG-同时添加到其他组" class="headerlink" title="-aG 同时添加到其他组"></a>-aG 同时添加到其他组</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# usermod -aG jishu jerry  [root@localhost ~]# [root@localhost ~]# id jerryuid&#x3D;2001(jerry) gid&#x3D;2002(jerry) 组&#x3D;2002(jerry),2001(jishu),2004(caiwu)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、踢出用户组"><a href="#三、踢出用户组" class="headerlink" title="三、踢出用户组"></a>三、踢出用户组</h2><pre class="line-numbers language-none"><code class="language-none"># gpasswd -d 用户 用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# gpasswd -d jerry caiwu[root@localhost ~]# id jerryuid&#x3D;2001(jerry) gid&#x3D;2002(jerry) 组&#x3D;2002(jerry),2001(jishu)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、用户的相关配置文件"><a href="#四、用户的相关配置文件" class="headerlink" title="四、用户的相关配置文件"></a>四、用户的相关配置文件</h2><ul><li>默认会在用户家目录下创建几个隐藏文件</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -a &#x2F;home&#x2F;student&#x2F;.   .bash_history  .bash_profile  .cache   .mozilla..  .bash_logout   .bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1、用户配置文件"><a href="#1、用户配置文件" class="headerlink" title="1、用户配置文件"></a>1、用户配置文件</h3><ul><li>创建用户时，系统会自动从&#x2F;etc&#x2F;skel目录复制配置文件到用户的家目录</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ls -a &#x2F;etc&#x2F;skel&#x2F;.  ..  .bash_logout  .bash_profile  .bashrc  .mozilla[root@localhost ~]# ls -a &#x2F;home&#x2F;userB&#x2F;.  ..  .bash_logout  .bash_profile  .bashrc  .mozilla<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-bashrc"><a href="#2-bashrc" class="headerlink" title="2 .bashrc"></a>2 .bashrc</h3><ul><li>在用户打开终端时，自动执行该文件中的操作 </li><li>典型应用于定义命令别名<ul><li>~&#x2F;.bashrc针对当前用户生效</li><li>&#x2F;etc&#x2F;bashrc针对所有用户生效</li></ul></li></ul><h3 id="3-bash-profile"><a href="#3-bash-profile" class="headerlink" title="3 .bash_profile"></a>3 .bash_profile</h3><ul><li>在用户登录系统时, 会自动执行该文件中的操作</li><li>典型应用于定义环境变量 <ul><li>~&#x2F;.bash_profile针对当前用户生效</li><li>&#x2F;etc&#x2F;profile针对所有用户生效</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;root&#x2F;.bash_profileexport PS1&#x3D;&#39;\[\e[31;1m\]\u\[\e[0m\]\[\e[32;1m\]\[\e[0m\]:\[\e[35;1m\]\w\[\e[0m\]\n\$&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-bash-history"><a href="#4-bash-history" class="headerlink" title="4 .bash_history"></a>4 .bash_history</h3><ul><li>对应用户的历史命令</li></ul><h4 id="a-查看历史命令"><a href="#a-查看历史命令" class="headerlink" title="a.查看历史命令"></a>a.查看历史命令</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# history<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="b-删除历史命令"><a href="#b-删除历史命令" class="headerlink" title="b.删除历史命令"></a>b.删除历史命令</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# history -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-bash-logout"><a href="#5-bash-logout" class="headerlink" title="5 .bash_logout"></a>5 .bash_logout</h3><ul><li>用户登出时提示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 用户 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Do you like rain?</title>
      <link href="/2023/03/01/41/"/>
      <url>/2023/03/01/41/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Do-you-like-rain"><a href="#Do-you-like-rain" class="headerlink" title="Do you like rain?"></a>Do you like rain?</h1><p><video src="https://www.wangshengjj.work/upload/2023/03/do%20you%20like%20rain.mp4" width="800px" height="600px" controls="controls"></video></p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】华为欧拉(openEuler)系统安装图形化桌面</title>
      <link href="/2023/02/28/40/"/>
      <url>/2023/02/28/40/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】华为欧拉-openEuler-系统安装图形化桌面"><a href="#【Linux系列教程】华为欧拉-openEuler-系统安装图形化桌面" class="headerlink" title="【Linux系列教程】华为欧拉(openEuler)系统安装图形化桌面"></a>【Linux系列教程】华为欧拉(openEuler)系统安装图形化桌面</h1><p>关于华为欧拉(openEuler)系统的介绍：<br>openElur是一款基于Linux内核的服务器操作系统，支持x86等多种处理器架构，适用于数据库、大数据等多种应用场景。近十年的发展中，EulerOS成功支持了华为各种产品解决方案，以安全、稳定、高效被业界认可。，是与鲲鹏芯片配套最合适的软件基础设施，2019年底，ElurOS被正式推送给开源社区，命名为openEuler。所有开发者、企业、商业组织都可以使用openElur社区版本，也可以基于社区版本发布自己二次开发的操作系统版本。</p><p><strong>华为欧拉(openEuler)系统<a href="https://www.openeuler.org/zh/">官网</a></strong></p><h2 id="一、安装图形化桌面"><a href="#一、安装图形化桌面" class="headerlink" title="一、安装图形化桌面"></a>一、安装图形化桌面</h2><p><strong>tips（重要）:以下图形化桌面任选其一即可！！！</strong></p><h3 id="1-安装深度DDE桌面"><a href="#1-安装深度DDE桌面" class="headerlink" title="1.安装深度DDE桌面"></a>1.安装深度DDE桌面</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y dde<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装麒麟UKUI"><a href="#2-安装麒麟UKUI" class="headerlink" title="2.安装麒麟UKUI"></a>2.安装麒麟UKUI</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum install -y ukui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、设置图形化桌面为默认"><a href="#二、设置图形化桌面为默认" class="headerlink" title="二、设置图形化桌面为默认"></a>二、设置图形化桌面为默认</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl set-default graphical.target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-切回命令行桌面-自行选择"><a href="#1-切回命令行桌面-自行选择" class="headerlink" title="1.切回命令行桌面(自行选择)"></a>1.切回命令行桌面(自行选择)</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# systemctl set-default multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-重启计算机"><a href="#2-重启计算机" class="headerlink" title="2.重启计算机"></a>2.重启计算机</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、解决中文字体乱码问题"><a href="#三、解决中文字体乱码问题" class="headerlink" title="三、解决中文字体乱码问题"></a>三、解决中文字体乱码问题</h2><h3 id="1-安装中文字体"><a href="#1-安装中文字体" class="headerlink" title="1.安装中文字体"></a>1.安装中文字体</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# yum -y groupinstall fonts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
            <tag> linux </tag>
            
            <tag> linux教程 </tag>
            
            <tag> openEuler </tag>
            
            <tag> 华为欧拉 </tag>
            
            <tag> 国产操作系统 </tag>
            
            <tag> 图形化桌面 </tag>
            
            <tag> 图形化桌面安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】过滤的使用</title>
      <link href="/2023/02/22/39/"/>
      <url>/2023/02/22/39/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】过滤的使用"><a href="#【Linux系列教程】过滤的使用" class="headerlink" title="【Linux系列教程】过滤的使用"></a>【Linux系列教程】过滤的使用</h1><h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><ul><li>grep [选项] “条件” 文件目录</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep &quot;root&quot; &#x2F;etc&#x2F;passwd root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashoperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin[root@localhost ~]# ifconfig ens33 | grep &quot;netmask&quot;        inet 192.168.140.161  netmask 255.255.255.0  broadcast 192.168.140.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-o-仅显示符合条件的内容"><a href="#1-o-仅显示符合条件的内容" class="headerlink" title="1. -o 仅显示符合条件的内容"></a>1. -o 仅显示符合条件的内容</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep -o &quot;r..t&quot; &#x2F;etc&#x2F;passwdrootrootrootrootr&#x2F;ft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-i-忽略大小写"><a href="#2-i-忽略大小写" class="headerlink" title="2. -i 忽略大小写"></a>2. -i 忽略大小写</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep -i &quot;aa&quot; &#x2F;opt&#x2F;file01aaAAAaaA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-v-反向过滤"><a href="#3-v-反向过滤" class="headerlink" title="3. -v 反向过滤"></a>3. -v 反向过滤</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep -v &quot;^#&quot; &#x2F;etc&#x2F;fstab#开头不包含“#”的&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0UUID&#x3D;714c9df7-be4f-4480-a15a-bca5716ecb29 &#x2F;boot                   xfs     defaults        0 0&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-e-多条件过滤"><a href="#4-e-多条件过滤" class="headerlink" title="4. -e 多条件过滤"></a>4. -e 多条件过滤</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep -e &quot;^#&quot; -e &quot;^UUID&quot; &#x2F;etc&#x2F;fstab#过滤包含“#”和开头是UUID的## &#x2F;etc&#x2F;fstab# Created by anaconda on Fri Feb 17 14:13:18 2023## Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;# See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info#UUID&#x3D;714c9df7-be4f-4480-a15a-bca5716ecb29 &#x2F;boot                   xfs     defaults        0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-n-显示行号"><a href="#5-n-显示行号" class="headerlink" title="5. -n 显示行号"></a>5. -n 显示行号</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep -n &quot;[0-9]\&#123;1,3\&#125;&quot; &#x2F;etc&#x2F;passwd1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash2:bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin3:daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin4:adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin5:lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin6:sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync7:shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown8:halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt9:mail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-E-支持正则表达式"><a href="#6-E-支持正则表达式" class="headerlink" title="6. -E 支持正则表达式"></a>6. -E 支持正则表达式</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# grep -E &quot;(ab)&#123;2,&#125;&quot; &#x2F;usr&#x2F;share&#x2F;dict&#x2F;wordsattababyHababkababKababishkababsNodababus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、正则表达式"><a href="#二、正则表达式" class="headerlink" title="二、正则表达式"></a>二、正则表达式</h2><h3 id="1-匹配单个字符的元字符"><a href="#1-匹配单个字符的元字符" class="headerlink" title="1.匹配单个字符的元字符"></a>1.匹配单个字符的元字符</h3><pre class="line-numbers language-none"><code class="language-none">. #任意单个字符[rkb]#或者r 或者k 或者b-#连续的字符[a-z]#任意单个小写字母[A-Z]#任意单个大写字母[A-Za-z]#任意单个字母[0-9]#任意单个数字[a-zA-Z0-9]#任意单个字母和数字^ 取反[^a-z]#不包括任意单个小写字母^[^a-z]#开头不包括任意单个小写字母<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-匹配字符出现的次数"><a href="#2-匹配字符出现的次数" class="headerlink" title="2.匹配字符出现的次数"></a>2.匹配字符出现的次数</h3><pre class="line-numbers language-none"><code class="language-none">* #前一个字符连接出现任意次，可以是0次\+#前一个字符至少出现1次，最多出现无限次\？#前一个字符最多出现1次，最少出现0次\&#123;3\&#125;#前一个字符精确出现3次\&#123;3,5\&#125;#前一个字符至少出现3次，至多出现5次\&#123;3,\&#125;#前一个字符至少出现3次，至多出现无限次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用正则表达式查看机器IP"><a href="#3-使用正则表达式查看机器IP" class="headerlink" title="3.使用正则表达式查看机器IP"></a>3.使用正则表达式查看机器IP</h3><pre class="line-numbers language-none"><code class="language-none">ifconfig | grep -E -o &quot;[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】排序去重统计</title>
      <link href="/2023/02/22/38/"/>
      <url>/2023/02/22/38/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】排序去重统计"><a href="#【Linux系列教程】排序去重统计" class="headerlink" title="【Linux系列教程】排序去重统计"></a>【Linux系列教程】排序去重统计</h1><h2 id="一、排序"><a href="#一、排序" class="headerlink" title="一、排序"></a>一、排序</h2><ol><li>默认是按照ASCII码表进行排序</li><li>-r<ol><li>倒序，默认是升序</li></ol></li><li>-n<ol><li>按生活数字大小排序</li></ol></li><li>-k<ol><li>按每行的第几列进行排序<ol><li>默认按照空白进行区分列</li></ol></li></ol></li><li>-t<ol><li>指定行分割符</li></ol></li><li>-h<ol><li>使用易读性数字列出(例如： 2K 1G)</li></ol></li></ol><p><strong>关于ASCII码表</strong></p><p><img src="/.work//2023/02/ASCII.jpg" alt="ASCII"></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# sort -t: -k2 -n -r &#x2F;opt&#x2F;file04 #指定分割符为双引号，按照第二列进行排序，按数字大小排序，倒序显示出来file04默认内容华为：888OPPO：112小米：200vivo：8file04排序后内容华为：888小米：200OPPO：112vivo：8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、去重"><a href="#二、去重" class="headerlink" title="二、去重"></a>二、去重</h2><pre class="line-numbers language-none"><code class="language-none"># uniq 文件名称 [root@localhost ~]# uniq &#x2F;opt&#x2F;file03abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、统计"><a href="#三、统计" class="headerlink" title="三、统计"></a>三、统计</h2><h3 id="1-统计文件"><a href="#1-统计文件" class="headerlink" title="1.统计文件"></a>1.统计文件</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# du -h &#x2F;etc&#x2F;passwd 4.0K&#x2F;etc&#x2F;passwd[root@localhost ~]# du -h &#x2F;boot&#x2F;vmlinuz-3.10.0-1160.el7.x86_64 6.5M&#x2F;boot&#x2F;vmlinuz-3.10.0-1160.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-统计目录"><a href="#2-统计目录" class="headerlink" title="2.统计目录"></a>2.统计目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# du -sh &#x2F;boot&#x2F;   140M&#x2F;boot&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-统计所有文件大小"><a href="#3-统计所有文件大小" class="headerlink" title="3.统计所有文件大小"></a>3.统计所有文件大小</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# du -ah &#x2F;boot&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 去重 </tag>
            
            <tag> 统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】查找的使用</title>
      <link href="/2023/02/22/37/"/>
      <url>/2023/02/22/37/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】查找的使用"><a href="#【Linux系列教程】查找的使用" class="headerlink" title="【Linux系列教程】查找的使用"></a>【Linux系列教程】查找的使用</h1><p><strong>使用方法</strong></p><pre class="line-numbers language-none"><code class="language-none"># find 目录名称  查找条件 [-exec 命令 \;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="一、查找条件"><a href="#一、查找条件" class="headerlink" title="一、查找条件"></a>一、查找条件</h2><h3 id="1-按照文件名查找"><a href="#1-按照文件名查找" class="headerlink" title="1.按照文件名查找"></a>1.按照文件名查找</h3><ul><li>-name</li><li>-iname忽略大小写</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;opt&#x2F;test&#x2F; -name &quot;*.txt&quot;[root@localhost ~]# find &#x2F;opt&#x2F;test&#x2F; -name &quot;*.txt&quot; | wc -l[root@localhost ~]# find &#x2F;opt&#x2F;test&#x2F; -iname &quot;*.txt&quot;#忽略大小写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-按照文件大小查找"><a href="#2-按照文件大小查找" class="headerlink" title="2.按照文件大小查找"></a>2.按照文件大小查找</h3><ul><li>-size</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;etc&#x2F; -size +2M#查找大于2M[root@localhost ~]# find &#x2F;etc&#x2F; -size -2M#查找小于2M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-按照文件类型查找"><a href="#3-按照文件类型查找" class="headerlink" title="3.按照文件类型查找"></a>3.按照文件类型查找</h3><ul><li>-type<ul><li>f 普通文件</li><li>d 目录</li><li>l 链接文件</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;etc&#x2F; -type f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-按照文件创建时间查找"><a href="#4-按照文件创建时间查找" class="headerlink" title="4.按照文件创建时间查找"></a>4.按照文件创建时间查找</h3><ul><li>-ctime</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;etc&#x2F; -ctime +3#3天之前[root@localhost ~]# find &#x2F;etc&#x2F; -ctime -3#3天之内<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-按照文件最后一次修改时间查找"><a href="#5-按照文件最后一次修改时间查找" class="headerlink" title="5.按照文件最后一次修改时间查找"></a>5.按照文件最后一次修改时间查找</h3><ul><li>-mtime</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;etc&#x2F; -mtime -2#2天之内[root@localhost ~]# find &#x2F;etc&#x2F; -mtime +2#2天之前 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-多条件查找-重要"><a href="#6-多条件查找-重要" class="headerlink" title="6.多条件查找(重要)"></a>6.多条件查找(重要)</h3><ul><li>-a 并且</li><li>-o 或者</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;etc&#x2F; -name &quot;*.conf&quot; -a -size +20k#查找&#x2F;etc下的名字包含“.conf”并且文件大于20K的文件[root@localhost ~]# find &#x2F;etc&#x2F; -mtime -3 -a -size +10k -a -name &quot;*.conf&quot; #查找&#x2F;etc下最近修改时间小于3天，并且文件大于10k，并且文件名包含“.conf”的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;etc&#x2F; -name &quot;*.conf&quot; -o -size +1M#查找&#x2F;etc下名字包含“.conf”的文件或者大于1M的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-maxdepth-指定查找目录层级"><a href="#7-maxdepth-指定查找目录层级" class="headerlink" title="7. -maxdepth 指定查找目录层级"></a>7. -maxdepth 指定查找目录层级</h3><pre class="line-numbers language-none"><code class="language-none">查找&#x2F;etc目录, 及它下面的2层目录中软链接文件[root@localhost ~]# find &#x2F;etc&#x2F; -type l -maxdepth 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、exec-添加命令操作"><a href="#二、exec-添加命令操作" class="headerlink" title="二、exec 添加命令操作"></a>二、exec 添加命令操作</h2><ul><li>-exec 命令 ;<ul><li>对查找结果进行某某操作</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# find &#x2F;opt&#x2F;test&#x2F; -name &quot;*.mp3&quot; -exec rm -rf &#123;&#125; \;#查找&#x2F;opt&#x2F;test下名字包含“.mp3”的文件，执行删除所有文件[root@localhost ~]# find &#x2F;opt&#x2F;test&#x2F; -name &quot;*.jpg&quot; -exec cp &#123;&#125; &#x2F;tmp \;#查找&#x2F;opt&#x2F;test下名字包含“,jpg”的文件，执行复制到&#x2F;tmp下[root@localhost ~]# find &#x2F;etc&#x2F; -name &quot;*.conf&quot; -a -size +30k -exec ls -lh &#123;&#125; \;#查找&#x2F;etc下名字包含“。conf”的文件并且文件大于30k，执行查看详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> find查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】解压和压缩</title>
      <link href="/2023/02/21/36/"/>
      <url>/2023/02/21/36/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】解压和压缩"><a href="#【Linux系列教程】解压和压缩" class="headerlink" title="【Linux系列教程】解压和压缩"></a>【Linux系列教程】解压和压缩</h1><h2 id="一、文件的压缩和解压"><a href="#一、文件的压缩和解压" class="headerlink" title="一、文件的压缩和解压"></a>一、文件的压缩和解压</h2><h3 id="gzip压缩"><a href="#gzip压缩" class="headerlink" title="gzip压缩"></a>gzip压缩</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# gzip &#x2F;opt&#x2F;a.txt [root@localhost ~]# ls &#x2F;opt&#x2F;0629  A  a.txt.gz  rh[root@localhost ~]# file &#x2F;opt&#x2F;a.txt.gz &#x2F;opt&#x2F;a.txt.gz: gzip compressed data, was &quot;a.txt&quot;, from Unix, last modified: Thu Jul  7 13:39:53 2022<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解压</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# gzip -d &#x2F;opt&#x2F;a.txt.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# bzip2 &#x2F;opt&#x2F;b.txt [root@localhost ~]# ls &#x2F;opt&#x2F;0629  A  a.txt  b.txt.bz2  rh[root@localhost ~]# [root@localhost ~]# file &#x2F;opt&#x2F;b.txt.bz2 &#x2F;opt&#x2F;b.txt.bz2: bzip2 compressed data, block size &#x3D; 900k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解压</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# bzip2 -d &#x2F;opt&#x2F;b.txt.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="xz"><a href="#xz" class="headerlink" title="xz"></a>xz</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# xz &#x2F;opt&#x2F;c.txt [root@localhost ~]# ls &#x2F;opt&#x2F;0629  A  a.txt  b.txt  c.txt.xz  rh[root@localhost ~]# [root@localhost ~]# file &#x2F;opt&#x2F;c.txt.xz &#x2F;opt&#x2F;c.txt.xz: XZ compressed data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解压</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# xz -d &#x2F;opt&#x2F;c.txt.xz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、归档文件管理"><a href="#二、归档文件管理" class="headerlink" title="二、归档文件管理"></a>二、归档文件管理</h2><h3 id="1-tar"><a href="#1-tar" class="headerlink" title="1.tar"></a>1.tar</h3><pre class="line-numbers language-none"><code class="language-none"># tar cf 归档文件名称  源文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>c创建</li><li>f指定归档文件名称</li></ul><p>将&#x2F;etc目录所有文件打包到&#x2F;backup&#x2F;data.tar </p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar cf &#x2F;backup&#x2F;data.tar   &#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-tar-gz-调用gzip压缩"><a href="#2-tar-gz-调用gzip压缩" class="headerlink" title="2. tar.gz 调用gzip压缩"></a>2. tar.gz 调用gzip压缩</h3><pre class="line-numbers language-none"><code class="language-none"># tar czf 归档文件名称  源文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>z调用gzip压缩</li></ul><p>将&#x2F;etc目录下所有文件打包压缩到&#x2F;backup&#x2F;etc01.tar.gz </p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar czf &#x2F;backup&#x2F;etc01.tar.gz  &#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-bzip2-调用bzip2压缩"><a href="#3-bzip2-调用bzip2压缩" class="headerlink" title="3.bzip2 调用bzip2压缩"></a>3.bzip2 调用bzip2压缩</h3><p>将&#x2F;etc目录下所有文件打包压缩到&#x2F;backup&#x2F;etc02.tar.bz2</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar cjf &#x2F;backup&#x2F;etc02.tar.bz2 &#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>j 调用bzip2压缩</li></ul><h3 id="4-xz-调用xz压缩"><a href="#4-xz-调用xz压缩" class="headerlink" title="4.xz 调用xz压缩"></a>4.xz 调用xz压缩</h3><pre class="line-numbers language-none"><code class="language-none"># tar cJf  归档文件名称   源文件 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>J 调用xz压缩</li></ul><p>将&#x2F;etc目录下所有文件打包压缩到&#x2F;backup&#x2F;etc03.tar.xz</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar cJf &#x2F;backup&#x2F;etc03.tar.xz   &#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、tar解压缩"><a href="#三、tar解压缩" class="headerlink" title="三、tar解压缩"></a>三、tar解压缩</h2><pre class="line-numbers language-none"><code class="language-none"># tar xf 归档文件名称 [-C 目录名称]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>x解压缩</li><li>-C  目录名称<ul><li>指定解压位置</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar xf &#x2F;backup&#x2F;etc01.tar.gz [root@localhost ~]# tar xf &#x2F;backup&#x2F;etc03.tar.xz -C &#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、不解压查看压缩文件内容"><a href="#四、不解压查看压缩文件内容" class="headerlink" title="四、不解压查看压缩文件内容"></a>四、不解压查看压缩文件内容</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tar tvf &#x2F;backup&#x2F;etc01.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】vim编辑器</title>
      <link href="/2023/02/21/vim/"/>
      <url>/2023/02/21/vim/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】vim编辑器"><a href="#【Linux系列教程】vim编辑器" class="headerlink" title="【Linux系列教程】vim编辑器"></a>【Linux系列教程】vim编辑器</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><ul><li>功能：修改文件内容</li><li>特性：模式化编辑器</li><li>三个工作模式：命令模式、插入模式、末行模式</li></ul><pre class="line-numbers language-none"><code class="language-none">使用方法vim 文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、模式切换"><a href="#二、模式切换" class="headerlink" title="二、模式切换"></a>二、模式切换</h2><ol><li>命令模式  —-&gt; 插入模式<ol><li>a, i, o, O</li></ol></li><li>插入模式 —-&gt; 命令模式<ol><li>ESC</li></ol></li><li>命令模式 —-&gt; 末行模式<ol><li>冒号  :</li></ol></li></ol><h2 id="三、末行模式"><a href="#三、末行模式" class="headerlink" title="三、末行模式"></a>三、末行模式</h2><ol><li>保存退出<ol><li>:wq</li></ol></li><li>不保存<ol><li>:q!</li></ol></li><li>显示行号<ol><li>:set nu</li></ol></li></ol><h2 id="四、命令模式"><a href="#四、命令模式" class="headerlink" title="四、命令模式"></a>四、命令模式</h2><h3 id="1-快速移动光标"><a href="#1-快速移动光标" class="headerlink" title="1.快速移动光标"></a>1.快速移动光标</h3><ul><li>h左    j下    k 上  l 右</li><li>$移动到行尾</li><li>^移动到行首</li><li>68gg跳转到68行</li><li>shift + g 跳转到最后一行</li><li>gg跳转到第一行</li><li>. 重复上一次操作</li></ul><h3 id="2-删除字符"><a href="#2-删除字符" class="headerlink" title="2.删除字符"></a>2.删除字符</h3><ul><li>x删除单个字符</li><li>dw删除词</li><li>dd删除整行</li><li>67dd 删除(剪切)第67行</li><li>d$删除到行尾</li><li>d^删除到行首</li><li>dG删除到文件最后一行</li></ul><h3 id="3-复制粘贴剪切"><a href="#3-复制粘贴剪切" class="headerlink" title="3.复制粘贴剪切"></a>3.复制粘贴剪切</h3><ul><li>yy复制整行</li><li>p粘贴</li><li>dd剪切</li></ul><h3 id="4-撤销"><a href="#4-撤销" class="headerlink" title="4.撤销"></a>4.撤销</h3><ul><li>u撤销</li></ul><h3 id="5-搜索"><a href="#5-搜索" class="headerlink" title="5.搜索"></a>5.搜索</h3><ol><li>&#x2F;内容<ol><li>n向下查找 </li><li>N向上查找</li></ol></li></ol><h2 id="四、拓展"><a href="#四、拓展" class="headerlink" title="四、拓展"></a>四、拓展</h2><h3 id="1-更多键位图"><a href="#1-更多键位图" class="headerlink" title="1.更多键位图"></a>1.更多键位图</h3><p><img src="https://www.wangshengjj.work/upload/2023/02/vim.png" alt="vim"></p><h3 id="2-vim的使用练习"><a href="#2-vim的使用练习" class="headerlink" title="2.vim的使用练习"></a>2.vim的使用练习</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vimtutor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置vim编辑器的个人使用习惯"><a href="#3-配置vim编辑器的个人使用习惯" class="headerlink" title="3.配置vim编辑器的个人使用习惯"></a>3.配置vim编辑器的个人使用习惯</h3><p><strong>比如，打开某个文件后，默认显示行号，进行TAB缩进时，把Linux默认的站位8个改成4个</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vim &#x2F;etc&#x2F;vimrcif v:lang &#x3D;~ &quot;utf8$&quot; || v:lang &#x3D;~ &quot;UTF-8$&quot;  2    set fileencodings&#x3D;ucs-bom,utf-8,latin1  3 endif  4   5 set nocompatible    &quot; Use Vim defaults (much better!)  6 set bs&#x3D;indent,eol,start     &quot; allow backspacing over everything in inse    rt mode  7 &quot;set ai         &quot; always set autoindenting on  8 &quot;set backup     &quot; keep a backup file  9 set viminfo&#x3D;&#39;20,\&quot;50    &quot; read&#x2F;write a .viminfo file, don&#39;t store more 10             &quot; than 50 lines of registers 11 set history&#x3D;50      &quot; keep 50 lines of command line history 12 set ruler       &quot; show the cursor position all the time 13 set nu#添加此内容，默认打开某个文件时，自动显示行号 14 set tabstop&#x3D;4#添加此内容，默认缩进4个空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> vim </tag>
            
            <tag> vi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】管道符的使用</title>
      <link href="/2023/02/21/35/"/>
      <url>/2023/02/21/35/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】管道符的使用"><a href="#【Linux系列教程】管道符的使用" class="headerlink" title="【Linux系列教程】管道符的使用"></a>【Linux系列教程】管道符的使用</h1><ul><li>将前一条命令的结果，交给后一条命令进行处理</li></ul><h2 id="一、-管道符"><a href="#一、-管道符" class="headerlink" title="一、| 管道符"></a>一、| 管道符</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# head -n 3 &#x2F;etc&#x2F;passwd | tail -n 1daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin[root@localhost ~]# ls -lSh &#x2F;boot&#x2F; | head -n 3总用量 124M-rw-------. 1 root root  77M 7月   5 14:00 initramfs-0-rescue-d54fe4be6b674b079972696d39457a41.img-rw-------. 1 root root  31M 7月   5 14:03 initramfs-3.10.0-1160.el7.x86_64.img[root@localhost ~]# ls -lSh &#x2F;boot&#x2F; | head -n 3 | tail -n 2-rw-------. 1 root root  77M 7月   5 14:00 initramfs-0-rescue-d54fe4be6b674b079972696d39457a41.img-rw-------. 1 root root  31M 7月   5 14:03 initramfs-3.10.0-1160.el7.x86_64.img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、awk-打印"><a href="#二、awk-打印" class="headerlink" title="二、awk 打印"></a>二、awk 打印</h2><ul><li>按空白将某行内容分为多段，第1段使用$1表示，第2段使用$2表示，依次类推</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ifconfig ens33 | head -n 2 | tail -n 1 | awk &#39;&#123;print $2&#125;&#39;192.168.140.161<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】多种查看命令的使用方法</title>
      <link href="/2023/02/21/34/"/>
      <url>/2023/02/21/34/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】多种查看命令的使用方法"><a href="#【Linux系列教程】多种查看命令的使用方法" class="headerlink" title="【Linux系列教程】多种查看命令的使用方法"></a>【Linux系列教程】多种查看命令的使用方法</h1><ol><li>cat</li><li>more</li><li>less</li><li>head</li><li>tail</li></ol><h2 id="一、cat-查看文件全部内容"><a href="#一、cat-查看文件全部内容" class="headerlink" title="一、cat 查看文件全部内容"></a>一、cat 查看文件全部内容</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;etc&#x2F;hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat -n &#x2F;etc&#x2F;hosts     1127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4     2::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看Linux发行版本</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cat &#x2F;etc&#x2F;redhat-release CentOS Linux release 7.9.2009 (Core)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、more-和-less-分页查看"><a href="#二、more-和-less-分页查看" class="headerlink" title="二、more 和 less 分页查看"></a>二、more 和 less 分页查看</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# more &#x2F;usr&#x2F;share&#x2F;dict&#x2F;words #不可向前翻页<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# less &#x2F;usr&#x2F;share&#x2F;dict&#x2F;words #可向前向后随意翻页<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>回车按行查看</li><li>空格按页查看 </li><li>q退出</li></ul><h2 id="三、head-查看头部"><a href="#三、head-查看头部" class="headerlink" title="三、head 查看头部"></a>三、head 查看头部</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# head -n 2 &#x2F;etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin[root@localhost ~]# head -n 1 &#x2F;etc&#x2F;passwd root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# head &#x2F;etc&#x2F;passwd#不加任何参数，默认查看前十行root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologinsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;syncshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdownhalt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;haltmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologinoperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、tail-查看尾部"><a href="#四、tail-查看尾部" class="headerlink" title="四、tail 查看尾部"></a>四、tail 查看尾部</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tail -n 3 &#x2F;etc&#x2F;passwdpostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologintcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologinmartin:x:1000:1000:martin:&#x2F;home&#x2F;martin:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# tail &#x2F;etc&#x2F;passwd#不加任何参数，默认查看后十行ntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologingdm:x:42:42::&#x2F;var&#x2F;lib&#x2F;gdm:&#x2F;sbin&#x2F;nologinrpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologinnfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologingnome-initial-setup:x:988:982::&#x2F;run&#x2F;gnome-initial-setup&#x2F;:&#x2F;sbin&#x2F;nologinsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologinavahi:x:70:70:Avahi mDNS&#x2F;DNS-SD Stack:&#x2F;var&#x2F;run&#x2F;avahi-daemon:&#x2F;sbin&#x2F;nologinpostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologintcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologinmartin:x:1000:1000:martin:&#x2F;home&#x2F;martin:&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、拓展"><a href="#五、拓展" class="headerlink" title="五、拓展"></a>五、拓展</h2><h3 id="1-file-查看文件类型"><a href="#1-file-查看文件类型" class="headerlink" title="1. file 查看文件类型"></a>1. file 查看文件类型</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# file &#x2F;etc&#x2F;hosts&#x2F;etc&#x2F;hosts: ASCII text[root@localhost ~]# file &#x2F;boot&#x2F;vmlinuz-3.10.0-1160.el7.x86_64 &#x2F;boot&#x2F;vmlinuz-3.10.0-1160.el7.x86_64: Linux kernel x86 boot executable bzImage, version 3.10.0-1160.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) #1 , RO-rootFS, swap_dev 0x6, Normal VGA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-wc-统计"><a href="#2-wc-统计" class="headerlink" title="2. wc 统计"></a>2. wc 统计</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# wc &#x2F;etc&#x2F;hosts  2  10 158 &#x2F;etc&#x2F;hosts[root@localhost ~]# wc -l &#x2F;etc&#x2F;hosts#统计文件行数2 &#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】复制移动和删除</title>
      <link href="/2023/02/21/33/"/>
      <url>/2023/02/21/33/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】复制移动和删除"><a href="#【Linux系列教程】复制移动和删除" class="headerlink" title="【Linux系列教程】复制移动和删除"></a>【Linux系列教程】复制移动和删除</h1><h2 id="一、删除"><a href="#一、删除" class="headerlink" title="一、删除"></a>一、删除</h2><pre class="line-numbers language-none"><code class="language-none"># rm [选项] 文件或目录名称[root@localhost ~]# rm &#x2F;opt&#x2F;work&#x2F;8.jpg rm：是否删除普通空文件 &quot;&#x2F;opt&#x2F;work&#x2F;8.jpg&quot;？y [root@localhost ~]# rm &#x2F;opt&#x2F;work&#x2F;*.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-f-强制删除"><a href="#1-f-强制删除" class="headerlink" title="1. -f 强制删除"></a>1. -f 强制删除</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rm -f &#x2F;opt&#x2F;work&#x2F;*.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-r-删除目录"><a href="#2-r-删除目录" class="headerlink" title="2. -r 删除目录"></a>2. -r 删除目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# rm -rf &#x2F;opt&#x2F;linux&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、复制"><a href="#二、复制" class="headerlink" title="二、复制"></a>二、复制</h2><pre class="line-numbers language-none"><code class="language-none"># cp 源文件  目的文件[root@localhost ~]# cp &#x2F;etc&#x2F;fstab  &#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-r-复制目录"><a href="#1-r-复制目录" class="headerlink" title="1. -r 复制目录"></a>1. -r 复制目录</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cp -r &#x2F;opt&#x2F;0629&#x2F; &#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-a-保留权限"><a href="#2-a-保留权限" class="headerlink" title="2. -a 保留权限"></a>2. -a 保留权限</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# cp -a &#x2F;opt&#x2F;test&#x2F;3.sh &#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、移动"><a href="#三、移动" class="headerlink" title="三、移动"></a>三、移动</h2><pre class="line-numbers language-none"><code class="language-none"># mv  源文件   目的文件 [root@localhost ~]# mv &#x2F;opt&#x2F;file01.mp3  &#x2F;root&#x2F; #移动文件[root@localhost ~]# mv &#x2F;opt&#x2F;work&#x2F;  &#x2F;tmp&#x2F;#移动目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-重命名"><a href="#1-重命名" class="headerlink" title="1. 重命名"></a>1. 重命名</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mv &#x2F;root&#x2F;file01.mp3  &#x2F;root&#x2F;file02.html[root@localhost ~]# ls &#x2F;root&#x2F;anaconda-ks.cfg  file02.html  initial-setup-ks.cfg <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】自定义ikun登录界面</title>
      <link href="/2023/02/21/ikun/"/>
      <url>/2023/02/21/ikun/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】自定义ikun登录界面"><a href="#【Linux系列教程】自定义ikun登录界面" class="headerlink" title="【Linux系列教程】自定义ikun登录界面"></a>【Linux系列教程】自定义ikun登录界面</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</p><h2 id="废话不多说，直接上效果图"><a href="#废话不多说，直接上效果图" class="headerlink" title="废话不多说，直接上效果图"></a>废话不多说，直接上效果图</h2><p><img src="https://www.wangshengjj.work/upload/2023/02/ikun.png" alt="ikun"></p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><p>Centos修改配置文件</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;motd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">..................................................................................................................................................................................................-:...............................................................................................&#x3D;&#x3D;-:.............................................................................................-&#x3D;&#x3D;--............................................................................................------:..........................................................................................--------:........................................................................................--------:........................................................................................--------:..........................................:-&#x3D;+++&#x3D;-:.....................................--------:.........................................:&#x3D;+*****++-....................................--------:.........................................:+****#****:...................................--------:....................................:&#x3D;+-.-*####*&#x3D;###-...................................--------:..................................-*####--######-&#x3D;&#x3D;+....................................::------:.................................&#x3D;#######--#####*-:.....................................::::----:................................-#########:+#####&#x3D;......................................::::::--:...............................&#x3D;##########+:##+&#x3D;&#x3D;*:.....................................:::::::-:..............................+##%%########.&#x3D;.-*#+&#x3D;:....................................:::::::::.............................+%%%%#&#x3D;####%%%+&#x3D;*%%%%##....................................:::::::::::..........................&#x3D;%%%%%:&#x3D;##%%%%%-+%%%%%%%-...................................:::::::::::::........................#%%%%#:#%%%%%%%:*%%%%%%%:...................................:::::::::::::::......................+%%%%*#%##%%%%#.#%%%%%%%*...................................:::::::::::::::::.....................-#%%%####%%%%*:%%%%%%%%%-..................................::::::::::::::::::.....................:#%###%%%%%%+:%%%%%%%%%+....................................::::::::::::::::::.....................+#%%%%%%%%+&#x3D;%%%%%%%%%&#x3D;......................................::::::::::::::::::....................:*###%%%%**%%%%%%%%%........................................:::::::::::::::::::..................-&#x3D;+&#x3D;+++++&#x3D;++*##%%%%#..........................................::::::::::::::::::................&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+++++++++++*#**-............................................::::::::::::::::::..............+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;++++++++++++.................................................::::::::::::::::::...........-&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;++++++++++++&#x3D;:.................................................:::::::::::::::::::........-&#x3D;&#x3D;&#x3D;&#x3D;+++++++++++++++&#x3D;:..................................................:::::::::::::::::::.....-&#x3D;&#x3D;&#x3D;&#x3D;++++++++++++++++&#x3D;&#x3D;-...................................................:::::::::::::::::::..-&#x3D;&#x3D;&#x3D;&#x3D;++++++*++*****++++&#x3D;&#x3D;.....................................................::::::::::::::::::-&#x3D;&#x3D;&#x3D;+++++**+:...-+*++++++&#x3D;:......................................................::::::::::::::::&#x3D;&#x3D;+++++++&#x3D;:......:+++++++&#x3D;&#x3D;.......................................................::::::::::::::-&#x3D;&#x3D;++++++:..........&#x3D;+++++&#x3D;&#x3D;-........................................................:::::::::::&#x3D;&#x3D;++++++&#x3D;.............&#x3D;*++++++:.........................................................:::::::::&#x3D;&#x3D;+*++*-::.............-**++++&#x3D;...........................................................::::::-&#x3D;&#x3D;&#x3D;+*+-::::.............:+***+&#x3D;&#x3D;...........................................................:::::-&#x3D;&#x3D;&#x3D;+&#x3D;::::::::.............-++&#x3D;&#x3D;&#x3D;:..............................:::::::::::::::::::::::::::::::::&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;::::::::::............-&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;:.............................::::::::::::::::::::::::::::::---&#x3D;&#x3D;&#x3D;++---:::::::::::::::::::::&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-&#x3D;&#x3D;&#x3D;++::::::::::::::::::::::::-+&#x3D;&#x3D;&#x3D;&#x3D;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-&#x3D;&#x3D;&#x3D;+&#x3D;:::::::::::::::::::::::::&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-&#x3D;&#x3D;&#x3D;&#x3D;::::::::::::::::::::::::::-+&#x3D;&#x3D;&#x3D;-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-&#x3D;&#x3D;&#x3D;&#x3D;:::::::::::::::::::::::::::&#x3D;&#x3D;&#x3D;&#x3D;-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-&#x3D;&#x3D;+-::::::::::::::::::::::::::::+&#x3D;&#x3D;&#x3D;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::&#x3D;**+:::::::::::::::::::::::::::::-+#*-:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::###&#x3D;:::::::::::::::::::::::::::...-++&#x3D;::...:.............:.:..::::::::::::::::::::::::::::::::::+#**+:::::::::::::::::::::::::::...:+*+-:.................:.:..::::::::::::::::::::::::::::::::-*#####::::::::::::::::::::::::::::::+*###&#x3D;:::::::::::::::::::::::::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】创建文件夹和文件</title>
      <link href="/2023/02/20/32/"/>
      <url>/2023/02/20/32/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】创建文件夹和文件"><a href="#【Linux系列教程】创建文件夹和文件" class="headerlink" title="【Linux系列教程】创建文件夹和文件"></a>【Linux系列教程】创建文件夹和文件</h1><h2 id="1-mkdir-创建文件夹"><a href="#1-mkdir-创建文件夹" class="headerlink" title="1. mkdir 创建文件夹"></a>1. mkdir 创建文件夹</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir wangshengjj[root@localhost ~]# ls -l总用量 12-rwxr-xr-x  1 root root   15 2月  20 11:09 abc-rw-------. 1 root root 2106 2月  17 14:21 anaconda-ks.cfg-rw-r--r--. 1 root root 2154 2月  17 14:25 initial-setup-ks.cfgdrwxr-xr-x  2 root root    6 2月  20 14:07 wangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-touch-创建空白文件"><a href="#2-touch-创建空白文件" class="headerlink" title="2. touch 创建空白文件"></a>2. touch 创建空白文件</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# touch 123.txt[root@localhost ~]# ls -l总用量 12-rw-r--r--  1 root root    0 2月  20 14:09 123.txt-rwxr-xr-x  1 root root   15 2月  20 11:09 abc-rw-------. 1 root root 2106 2月  17 14:21 anaconda-ks.cfg-rw-r--r--. 1 root root 2154 2月  17 14:25 initial-setup-ks.cfgdrwxr-xr-x  2 root root    6 2月  20 14:07 wangshengjj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-大括号展开"><a href="#3-大括号展开" class="headerlink" title="3.大括号展开"></a>3.大括号展开</h2><pre class="line-numbers language-none"><code class="language-none">用法如下[root@localhost ~]# touch &#x2F;opt&#x2F;work&#x2F;&#123;1..100&#125;.txt#创建1.txt到100.txt的文件[root@localhost ~]# ls -l &#x2F;opt总用量 0-rw-r--r--  1 root root 0 2月  20 14:11 100.txt-rw-r--r--  1 root root 0 2月  20 14:11 10.txt-rw-r--r--  1 root root 0 2月  20 14:11 11.txt-rw-r--r--  1 root root 0 2月  20 14:11 12.txt-rw-r--r--  1 root root 0 2月  20 14:11 13.txt-rw-r--r--  1 root root 0 2月  20 14:11 14.txt-rw-r--r--  1 root root 0 2月  20 14:11 15.txt-rw-r--r--  1 root root 0 2月  20 14:11 16.txt-rw-r--r--  1 root root 0 2月  20 14:11 17.txt-rw-r--r--  1 root root 0 2月  20 14:11 18.txt-rw-r--r--  1 root root 0 2月  20 14:11 19.txt-rw-r--r--  1 root root 0 2月  20 14:11 1.txt多余的省略[root@localhost ~]# touch &#x2F;opt&#x2F;work&#x2F;&#123;2,4,6,8&#125;.jpg#创建2,4,6,8.jpg文件[root@localhost ~]# ls -l &#x2F;opt总用量 0-rw-r--r--  1 root root 0 2月  20 14:13 2.jpg-rw-r--r--  1 root root 0 2月  20 14:13 4.jpg-rw-r--r--  1 root root 0 2月  20 14:13 6.jpg-rw-r--r--  1 root root 0 2月  20 14:13 8.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-命令引用-命令"><a href="#4-命令引用-命令" class="headerlink" title="4.命令引用 $(命令)"></a>4.命令引用 $(命令)</h2><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# mkdir &#x2F;opt&#x2F;$(date +%F_%T)#创建一个名为当前系统日期的文件夹[root@localhost ~]# ls -l &#x2F;opt总用量 0drwxr-xr-x  2 root root 6 2月  20 14:14 2023-02-20_14:14:58[root@localhost ~]# touch &#x2F;opt&#x2F;$(openssl rand -hex 10)#生成个随机数的文件[root@localhost ~]# ls -l &#x2F;opt总用量 0-rw-r--r--  1 root root 0 2月  20 14:16 032c9a6c9989f1977a71<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-拓展"><a href="#5-拓展" class="headerlink" title="5.拓展"></a>5.拓展</h2><h3 id="查看系统时间"><a href="#查看系统时间" class="headerlink" title="查看系统时间"></a>查看系统时间</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# date2022年 07月 06日 星期三 11:34:49 CST[root@localhost ~]# [root@localhost ~]# date +%Y2022[root@localhost ~]# date +%m07[root@localhost ~]# date +%d06[root@localhost ~]# date +%H11[root@localhost ~]# date +%M36[root@localhost ~]# date +%S26[root@localhost ~]# date +%F2022-07-06[root@localhost ~]# date +%T11:36:58[root@localhost ~]# date +%F_%T2022-07-06_11:37:28<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】ls和cd命令的使用</title>
      <link href="/2023/02/20/31/"/>
      <url>/2023/02/20/31/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】ls和cd命令的使用"><a href="#【Linux系列教程】ls和cd命令的使用" class="headerlink" title="【Linux系列教程】ls和cd命令的使用"></a>【Linux系列教程】ls和cd命令的使用</h1><h3 id="一、-cd-命令-进入某个目录"><a href="#一、-cd-命令-进入某个目录" class="headerlink" title="一、 cd 命令 进入某个目录"></a>一、 cd 命令 进入某个目录</h3><pre class="line-numbers language-none"><code class="language-none">cd [目录名称][root@localhost ~]# cd &#x2F;home[root@localhost home]# pwd&#x2F;home[root@localhost home]# cd &#x2F;etc[root@localhost etc]# pwd&#x2F;etc[root@localhost etc]# cd &#x2F;etc&#x2F;sysconfig&#x2F;[root@localhost sysconfig]# pwd&#x2F;etc&#x2F;sysconfig[root@localhost sysconfig]# cd &#x2F;[root@localhost &#x2F;]# pwd#查看当前用户所在目录&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>返回上一级目录</strong></p><pre class="line-numbers language-none"><code class="language-none">cd ..[root@localhost ~]# cd &#x2F;etc&#x2F;sysconfig&#x2F;[root@localhost sysconfig]# pwd&#x2F;etc&#x2F;sysconfig[root@localhost sysconfig]# cd ..[root@localhost etc]# pwd&#x2F;etc[root@localhost etc]# cd ..[root@localhost &#x2F;]# pwd&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、-ls-命令-查看某个文件或目录"><a href="#二、-ls-命令-查看某个文件或目录" class="headerlink" title="二、 ls 命令 查看某个文件或目录"></a>二、 ls 命令 查看某个文件或目录</h3><pre class="line-numbers language-none"><code class="language-none">ls [选项] [目录名称][root@localhost ~]# pwd&#x2F;root[root@localhost ~]# lsanaconda-ks.cfg  initial-setup-ks.cfg  公共  模板  视频  图片  文档  下载  音乐  桌面[root@localhost ~]# cd &#x2F;boot[root@localhost boot]# lsconfig-3.10.0-1160.el7.x86_64                            initramfs-3.10.0-1160.el7.x86_64.imgefi                                                      symvers-3.10.0-1160.el7.x86_64.gzgrub                                                     System.map-3.10.0-1160.el7.x86_64grub2                                                    vmlinuz-0-rescue-d54fe4be6b674b079972696d39457a41initramfs-0-rescue-d54fe4be6b674b079972696d39457a41.img  vmlinuz-3.10.0-1160.el7.x86_64[root@localhost boot]# cd &#x2F;[root@localhost &#x2F;]# lsbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详细参数的使用</strong></p><h4 id="1-l-查看文件详细信息"><a href="#1-l-查看文件详细信息" class="headerlink" title="1. -l 查看文件详细信息"></a>1. -l 查看文件详细信息</h4><pre class="line-numbers language-none"><code class="language-none">ls -l#查看文件详细信息[root@localhost ~]# ls -l &#x2F;etc&#x2F;hosts-rw-r--r--. 1 root root 158 6月   7 2013 &#x2F;etc&#x2F;hosts[root@localhost ~]# ls -l &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 -rw-r--r--. 1 root root 310 7月   5 14:02 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-a-查看所有文件"><a href="#2-a-查看所有文件" class="headerlink" title="2. -a 查看所有文件"></a>2. -a 查看所有文件</h4><pre class="line-numbers language-none"><code class="language-none">ls -a#查看所有文件，包括隐藏文件[root@localhost ~]# ls -a.    anaconda-ks.cfg  .bash_profile  .config  .esd_auth             .local    .Xauthority  视频  下载..   .bash_history    .bashrc        .cshrc   .ICEauthority         .mozilla  公共         图片  音乐abc  .bash_logout     .cache         .dbus    initial-setup-ks.cfg  .tcshrc   模板         文档  桌面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-d-查看目录"><a href="#3-d-查看目录" class="headerlink" title="3. -d 查看目录"></a>3. -d 查看目录</h4><pre class="line-numbers language-none"><code class="language-none">ls -dhl #查看目录的详细信息，-h把字节单位换成K[root@localhost ~]# ls -ldh &#x2F;tmp&#x2F;drwxrwxrwt. 25 root root 4.0K 2月  20 10:43 &#x2F;tmp&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-t-按照最后一次修改时间查看"><a href="#3-t-按照最后一次修改时间查看" class="headerlink" title="3. -t 按照最后一次修改时间查看"></a>3. -t 按照最后一次修改时间查看</h4><pre class="line-numbers language-none"><code class="language-none">ls -t#按照最后一次编辑时间排序[root@localhost ~]# ls -lht &#x2F;tmp&#x2F;总用量 436Kdrwx------. 2 root root    6 2月  20 11:10 tracker-extract-files.0-rw-------  1 root root 209K 2月  20 09:04 yum_save_tx.2023-02-20.09-04.TUEk8x.yumtxdrwx------  3 root root   17 2月  20 09:02 systemd-private-4e74802da9d44631bdc81ae593d04604-fwupd.service-ra8fDc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-S-按照文件大小排序查看"><a href="#4-S-按照文件大小排序查看" class="headerlink" title="4. -S 按照文件大小排序查看"></a>4. -S 按照文件大小排序查看</h4><pre class="line-numbers language-none"><code class="language-none">ls -S#按照文件大小倒序排列[root@localhost ~]# ls -lhS &#x2F;tmp&#x2F;总用量 436K-rw-------. 1 root root 211K 2月  17 14:28 yum_save_tx.2023-02-17.14-28.YyHuye.yumtx-rw-------  1 root root 209K 2月  20 09:04 yum_save_tx.2023-02-20.09-04.TUEk8x.yumtx-rw-r--r--. 1 root root 1.2K 2月  17 14:25 anaconda.log-rwx------. 1 root root  836 2月  17 14:21 ks-script-5UmGx7-rw-r--r--. 1 root root  415 2月  17 14:24 ifcfg.logdrwx------  2 root root   24 2月  20 09:02 ssh-IZZQj8BqA1Nhdrwxrwxrwt  2 root root   20 2月  17 15:24 VMwareDnD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、awk命令"><a href="#三、awk命令" class="headerlink" title="三、awk命令"></a>三、awk命令</h3><ul><li>按空格将某行内容分为多段，$1为第一段，$2为第二段以此类推</li></ul><pre class="line-numbers language-none"><code class="language-none">只显示IP地址[root@localhost ~]# ifconfig ens33 | head -n 2 | tail -n1 | awk &#39;&#123;print $2&#125;&#39;192.168.31.128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>-F 指定分隔符(默认为空格)</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# head -n 1 &#x2F;etc&#x2F;passwd | awk -F: &#39;&#123;print $6&#125;&#39;#指定：为分隔符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux系列教程】基本的目录认识</title>
      <link href="/2023/02/20/30/"/>
      <url>/2023/02/20/30/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【Linux系列教程】基本的目录认识"><a href="#【Linux系列教程】基本的目录认识" class="headerlink" title="【Linux系列教程】基本的目录认识"></a>【Linux系列教程】基本的目录认识</h1><h3 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;#系统根目录，存放着所有数据&#x2F;root#管理员root用户的家目录&#x2F;宿主目录&#x2F;home#普通用户的家目录&#x2F;宿主目录     比如用户wangshengjj的家目录&#x2F;home&#x2F;wangshengjj&#x2F;dev#存放设备文件(磁盘、U盘、光盘、打印机等)&#x2F;etc#存放配置文件&#x2F;tmp#临时文件目录&#x2F;opt#个人文档、数据&#x2F;boot#启动分区，内核、启动配置文件 &#x2F;proc&#x2F;sys#动态数据文件&#x2F;lib64#库文件 保证某应用程序、功能可正常运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h3><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# root：当前系统登录的用户localhost：当前系统的主机名~ ：当前登录用户的家目录缩写# ：用户的权限 #代表管理员用户$代表普通用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> linux基础 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7配置本地YUM源</title>
      <link href="/2023/02/15/29/"/>
      <url>/2023/02/15/29/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7配置本地YUM源"><a href="#Centos7配置本地YUM源" class="headerlink" title="Centos7配置本地YUM源"></a>Centos7配置本地YUM源</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</p><h2 id="关于Yum-全称为-Yellowdog-Updater-Modified-的介绍："><a href="#关于Yum-全称为-Yellowdog-Updater-Modified-的介绍：" class="headerlink" title="关于Yum(全称为 Yellowdog Updater Modified)的介绍："></a>关于Yum(全称为 Yellowdog Updater Modified)的介绍：</h2><p>Yum是一个在RedHat以及CentOS中的Shell前端软件包管理器。直白一点它是帮我们安装、卸载软件的工具，暂时先简单地这样理解。</p><p>yum的命令形式一般是如下： yum –选项 命令包<br>其中选项是可选的，选项包括-h（帮助），-y（当安装过程提示选择全部为”yes”），-<br>q（不显示安装的过程）等等。</p><p>yum的一切信息都存储在一个叫yum.reops.d目录下的配置文件中，通常位于&#x2F;etc&#x2F;yum.reops.d目录下。在这个目录下面有很多文件，都是.repo结尾的，repo文件是yum源（也就是软件仓库）的配置文件，通常一个repo文件定义了一个或者多个软件仓库的细节内容，例如我们将从哪里下载需要安装或者升级的软件包，repo文件中的设置内容将被yum读取和应用！默认情况下，yum的软件仓库是在网络上的，所以每次安装的时候，前提需要联网，在网络上的软件仓库中下载软件，然后安装，所以呢，在没有网络的时候yum就用不了，为了解决这个问题，我们可以包软件仓库的设置修改为本地的光盘镜像上，我们下的CentOS-7-x86_64-Everything-1810.iso文件中就包含了完整的一套软件，所以我们可以用它来做软件仓库！</p><p><strong>说明（重要）：本文已经默认认为您已经把ISO镜像挂载到系统下！</strong></p><h3 id="一、设置系统光盘开机自动挂载"><a href="#一、设置系统光盘开机自动挂载" class="headerlink" title="一、设置系统光盘开机自动挂载"></a>一、设置系统光盘开机自动挂载</h3><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# vim &#x2F;etc&#x2F;fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示没有vim这个命令，请使用vi</p><p><strong>以下为配置文件中的内容</strong></p><pre class="line-numbers language-none"><code class="language-none">## &#x2F;etc&#x2F;fstab# Created by anaconda on Mon Nov 28 06:44:44 2022## Accessible filesystems, by reference, are maintained under &#39;&#x2F;dev&#x2F;disk&#39;# See man pages fstab(5), findfs(8), mount(8) and&#x2F;or blkid(8) for more info#&#x2F;dev&#x2F;mapper&#x2F;centos-root &#x2F;                       xfs     defaults        0 0UUID&#x3D;80bdaf68-0f57-4662-914f-bc7275981a45 &#x2F;boot                   xfs     defaults        0 0&#x2F;dev&#x2F;mapper&#x2F;centos-swap swap                    swap    defaults        0 0&#x2F;dev&#x2F;cdrom    &#x2F;mnt     iso9660    defaults    0   0#把此段内容加上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>末行模式  ：wq保存退出</strong></p><h3 id="二、加载文件到指定挂载点"><a href="#二、加载文件到指定挂载点" class="headerlink" title="二、加载文件到指定挂载点"></a>二、加载文件到指定挂载点</h3><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# mount -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>显示：mount: &#x2F;dev&#x2F;sr0 写保护，将以只读方式挂载</strong></p><h3 id="三、查看挂载情况"><a href="#三、查看挂载情况" class="headerlink" title="三、查看挂载情况"></a>三、查看挂载情况</h3><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# ls &#x2F;mnt&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>看到此目录下有内容，说明挂载成功</strong></p><h3 id="四、配置repo文件"><a href="#四、配置repo文件" class="headerlink" title="四、配置repo文件"></a>四、配置repo文件</h3><p><strong>1.进入指定目录</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# cd &#x2F;etc&#x2F;yum.repos.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.删除原有文件</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# rm -rf &#x2F;etc&#x2F;yum.repos.d&#x2F;*.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.创建新的repo文件</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>把以下内容加进去</strong></p><pre class="line-numbers language-none"><code class="language-none">[CentOS7]name&#x3D;CentOS-serverbaseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mntenabled&#x3D;1gpgcheck&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数说明：</strong></p><ol><li>[CentOS7] —&gt;yum的ID，必须唯一</li><li>name&#x3D;CentOS-server —–&gt;描述信息</li><li>baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt ——-&gt; &#x2F;mnt表示的是光盘的挂载点 . file:后面有3个&#x2F;&#x2F;&#x2F;这是规定</li><li>enabled&#x3D;1 ——&gt;启用</li><li>gpgcheck&#x3D;0 —-&gt;取消验证，自己的yum源一般不用校验它</li></ol><h3 id="四、验证本地YUM源"><a href="#四、验证本地YUM源" class="headerlink" title="四、验证本地YUM源"></a>四、验证本地YUM源</h3><p><strong>重启计算机</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>验证YUM源</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@wangshengjj ~]# yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> yum源 </tag>
            
            <tag> 本地yum源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【网络笔记】判断多个IP是否处在同一个网段下和网段划分</title>
      <link href="/2023/02/14/28/"/>
      <url>/2023/02/14/28/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【网络笔记】判断多个IP是否处在同一个网段下和网段划分"><a href="#【网络笔记】判断多个IP是否处在同一个网段下和网段划分" class="headerlink" title="【网络笔记】判断多个IP是否处在同一个网段下和网段划分"></a>【网络笔记】判断多个IP是否处在同一个网段下和网段划分</h1><h2 id="如以下题所示："><a href="#如以下题所示：" class="headerlink" title="如以下题所示："></a>如以下题所示：</h2><p><strong>有A B C D 四台电脑主机都处在同一个物理网中，主机A的IP地址是193.168.3.190，主机B的IP地址是193.168.3.65，主机C的IP地址是193.168.3.78，主机D的IP地址是193.168.3.97，这四台主机的子网掩码都是255.255.255.224。</strong></p><h2 id="一、问-1-：A-B-C-D四台主机之间哪些可以互相通信？"><a href="#一、问-1-：A-B-C-D四台主机之间哪些可以互相通信？" class="headerlink" title="一、问(1)：A B C D四台主机之间哪些可以互相通信？"></a>一、问(1)：A B C D四台主机之间哪些可以互相通信？</h2><h3 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h3><p><strong>B和C可以互相通信</strong></p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><p><strong>首先，把这4个IP地址从十进制转换为二进制</strong></p><pre class="line-numbers language-none"><code class="language-none">A：193.168.3.190 &gt;&gt;&gt; 11000001.10101000.00000011.10111110B：193.168.3.65 &gt;&gt;&gt; 11000001.10101000.00000011.01000001C：193.168.3.78 &gt;&gt;&gt; 11000001.10101000.00000011.01001110D：193.168.3.97 &gt;&gt;&gt; 11000001.10101000.00000011.01100001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>把他们四个主机共同的子网掩码从十进制转换为二进制</strong></p><pre class="line-numbers language-none"><code class="language-none">255.255.255.224 &gt;&gt;&gt; 11111111.11111111.11111111.11100000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>然后把得到二进制的IP和子网掩码，使用“与”运算可以得出网络号</strong></p><pre class="line-numbers language-none"><code class="language-none">A：   193.168.3.190#IP地址十进制   11000001.10101000.00000011.10111110#IP地址二进制   11111111.11111111.11111111.11100000#子网掩码二进制   vvvv   vvvv   vvvv   11000000.10101000.00000011.10100000#得出的二进制的网络号193.168.3.160#把上面得到的二进制数再转回十进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">B：   193.168.3.65#IP地址十进制   11000001.10101000.00000011.01000001#IP地址二进制   11111111.11111111.11111111.11100000#子网掩码二进制   vvvv   vvvv   vvvv   11000000.10101000.00000011.01000000#得出的二进制的网络号193.168.3.64#把上面得到的二进制数再转回十进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">C：   193.168.3.78#IP地址十进制   11000001.10101000.00000011.01001110#IP地址二进制   11111111.11111111.11111111.11100000#子网掩码二进制   vvvv   vvvv   vvvv   11000000.10101000.00000011.01000000#得出的二进制的网络号193.168.3.64#把上面得到的二进制数再转回十进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">D：   193.168.3.97#IP地址十进制   11000001.10101000.00000011.01100001#IP地址二进制   11111111.11111111.11111111.11100000#子网掩码二进制   vvvv   vvvv   vvvv   11000000.10101000.00000011.01100000#得出的二进制的网络号193.168.3.96#把上面得到的二进制数再转回十进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>得到的网络号整理一下</strong></p><pre class="line-numbers language-none"><code class="language-none">A：193.168.3.160B：193.168.3.64C：193.168.3.64D：193.168.3.96<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过上述可以得知，B和C的网络号一样，所以B和C处在同一个网段下！</strong></p><h2 id="二、问-2-：若要加入第五台主机E，使它能与D主机直接通信，其IP地址取值范围应该是多少？"><a href="#二、问-2-：若要加入第五台主机E，使它能与D主机直接通信，其IP地址取值范围应该是多少？" class="headerlink" title="二、问(2)：若要加入第五台主机E，使它能与D主机直接通信，其IP地址取值范围应该是多少？"></a>二、问(2)：若要加入第五台主机E，使它能与D主机直接通信，其IP地址取值范围应该是多少？</h2><h3 id="答案：29个-193-168-3-98—193-168-3-126-需要排除掉D主机用掉的97"><a href="#答案：29个-193-168-3-98—193-168-3-126-需要排除掉D主机用掉的97" class="headerlink" title="答案：29个 193.168.3.98—193.168.3.126  (需要排除掉D主机用掉的97)"></a>答案：29个 193.168.3.98—193.168.3.126  (需要排除掉D主机用掉的97)</h3><h3 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h3><p><strong>上题已经得知，D主机的网段是193.168.3.96，那么网段最小的就是96</strong></p><p><strong>我们需要知道D主机的网络号和主机号是多少，如下所示</strong></p><pre class="line-numbers language-none"><code class="language-none">D：   193.168.3.97#IP地址十进制   11000001.10101000.00000011.01100001#IP地址二进制   11111111.11111111.11111111.11100000#子网掩码二进制      “11000001.10101000.00000011.011”00001#双引号内为网络号，外面为主机号   11111111.11111111.11111111.111|00000 #管道符隔开，判断网络号和主机号，取子网掩码最后一个为“1”的数   假设这个IP最大的地址是 “11000001.10101000.00000011.011”11111(二进制最大数为1)   那么这个IP最大就是193.168.3.127<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>整合一下：最小是96，最大是127，那么这个网段就是96—127一共32个主机号</strong></p><p><strong>因为最小主机号和最大主机号，他们的二进制都是0或者1，所以最小96和最大127，都是不合法的主机号</strong></p><p><strong>那么就是30个可用主机号，排除D主机已经用掉了193.168.3.97主机号，那么范围就是193.168.3.98—193.168.3.126这个范围，所以一共29个可用主机号。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 技术 </category>
          
          <category> 网络 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> IP划分 </tag>
            
            <tag> 子网掩码 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试视频文章《改革春风吹满地-念诗之王》</title>
      <link href="/2023/01/26/27/"/>
      <url>/2023/01/26/27/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="这是一个视频测试文章"><a href="#这是一个视频测试文章" class="headerlink" title="这是一个视频测试文章"></a>这是一个视频测试文章</h1><iframe src="//player.bilibili.com/player.html?aid=19390801&bvid=BV1bW411n7fY&cid=31621681&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="600" width="920"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 改革春风吹满地 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7网心云搭建教程</title>
      <link href="/2023/01/07/wxedge/"/>
      <url>/2023/01/07/wxedge/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7网心云搭建教程"><a href="#Centos7网心云搭建教程" class="headerlink" title="Centos7网心云搭建教程"></a>Centos7网心云搭建教程</h1><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</strong></p><p>关于容器魔方(网心云)：</p><p>「容器魔方」由网心云推出的一款docker容器镜像软件，通过简单安装后即可快速加入网心云共享计算生态网络，为网心科技星域云贡献带宽和存储资源，用户根据每日的贡献量可获得相应的现金收益回报。</p><p><strong>关于Docker的<a href="https://www.wangshengjj.work/archives/13">安装教程</a></strong></p><h1 id="部署容器魔方"><a href="#部署容器魔方" class="headerlink" title="部署容器魔方"></a>部署容器魔方</h1><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre class="line-numbers language-none"><code class="language-none">docker run -d --name&#x3D;wxedge --restart&#x3D;always --privileged --net&#x3D;host --tmpfs &#x2F;run --tmpfs &#x2F;tmp -v 你的磁盘路径:&#x2F;storage:rw registry.hub.docker.com&#x2F;onething1&#x2F;wxedge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>磁盘路径为你需要存放文件的位置(推荐大于50G)</p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><pre class="line-numbers language-none"><code class="language-none">docker stop wxedge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><pre class="line-numbers language-none"><code class="language-none">docker rm wxedge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><pre class="line-numbers language-none"><code class="language-none">docker rmi onething1&#x2F;wxedge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令报错用下面这个</p><pre class="line-numbers language-none"><code class="language-none">docker rmi registry.hub.docker.com&#x2F;onething1&#x2F;wxedge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h3><p><a href="https://help.onethingcloud.com/caa9/a0fe/b6b3">网心云官方文档</a></p><p><a href="https://help.onethingcloud.com/7cb4/6bc9">容器魔方官方升级文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 技术 </tag>
            
            <tag> wxedge </tag>
            
            <tag> 网心云 </tag>
            
            <tag> 容器魔方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>曝光一个骗子</title>
      <link href="/2023/01/03/26/"/>
      <url>/2023/01/03/26/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="曝光一个骗子"><a href="#曝光一个骗子" class="headerlink" title="曝光一个骗子"></a>曝光一个骗子</h1><p>这个骗子的行骗手法，大概就是疯狂订货，支走人以后，趁你不注意就偷东西，最后再以取车为理由，走了就再也不回来了</p><h2 id="老子挂你到关站！"><a href="#老子挂你到关站！" class="headerlink" title="老子挂你到关站！"></a>老子挂你到关站！</h2><p><img src="https://www.wangshengjj.work/upload/2023/01/8BB80AC3-3E7C-4AF4-B96B-8637F6C19BE0.png" alt="8BB80AC3-3E7C-4AF4-B96B-8637F6C19BE0"></p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> ai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 曝光骗子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的网站挂上灯笼</title>
      <link href="/2022/12/31/xinnian/"/>
      <url>/2022/12/31/xinnian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="给网站挂上灯笼教程"><a href="#给网站挂上灯笼教程" class="headerlink" title="给网站挂上灯笼教程"></a>给网站挂上灯笼教程</h1><p><strong>本教程代码原作者<a href="https://tomys.top/">TomyJan</a></strong></p><p>原文直达<a href="https://blog.tomys.top/2021-02/2021newyear/">链接</a></p><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</p><p>废话不多直接上效果图</p><p><img src="https://www.wangshengjj.work/upload/2022/12/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221231101907.png" alt="微信图片_20221231101907"></p><p>找个地方随便加入head标签内就行</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 灯笼1 --&gt;&lt;div class&#x3D;&quot;deng-box&quot;&gt;&lt;div class&#x3D;&quot;deng&quot;&gt;&lt;div class&#x3D;&quot;xian&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;deng-a&quot;&gt;&lt;div class&#x3D;&quot;deng-b&quot;&gt;&lt;div class&#x3D;&quot;deng-t&quot;&gt;年&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;shui shui-a&quot;&gt;&lt;div class&#x3D;&quot;shui-c&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;shui-b&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt; &lt;!-- 灯笼2 --&gt;&lt;div class&#x3D;&quot;deng-box1&quot;&gt;&lt;div class&#x3D;&quot;deng&quot;&gt;&lt;div class&#x3D;&quot;xian&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;deng-a&quot;&gt;&lt;div class&#x3D;&quot;deng-b&quot;&gt;&lt;div class&#x3D;&quot;deng-t&quot;&gt;新&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;shui shui-a&quot;&gt;&lt;div class&#x3D;&quot;shui-c&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;shui-b&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;  &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;.deng-box &#123;position: fixed;top: -40px;right: -20px;z-index: 999;&#125; .deng-box1 &#123;position: fixed;top: -30px;right: 10px;z-index: 999;&#125; .deng-box1 .deng &#123;position: relative;width: 120px;height: 90px;margin: 50px;background: #d8000f;background: rgba(216, 0, 15, 0.8);border-radius: 50% 50%;-webkit-transform-origin: 50% -100px;-webkit-animation: swing 5s infinite ease-in-out;box-shadow: -5px 5px 30px 4px rgba(252, 144, 61, 1);&#125; .deng &#123;position: relative;width: 120px;height: 90px;margin: 50px;background: #d8000f;background: rgba(216, 0, 15, 0.8);border-radius: 50% 50%;-webkit-transform-origin: 50% -100px;-webkit-animation: swing 3s infinite ease-in-out;box-shadow: -5px 5px 50px 4px rgba(250, 108, 0, 1);&#125; .deng-a &#123;width: 100px;height: 90px;background: #d8000f;background: rgba(216, 0, 15, 0.1);margin: 12px 8px 8px 8px;border-radius: 50% 50%;border: 2px solid #dc8f03;&#125; .deng-b &#123;width: 45px;height: 90px;background: #d8000f;background: rgba(216, 0, 15, 0.1);margin: -4px 8px 8px 26px;border-radius: 50% 50%;border: 2px solid #dc8f03;&#125; .xian &#123;position: absolute;top: -20px;left: 60px;width: 2px;height: 20px;background: #dc8f03;&#125; .shui-a &#123;position: relative;width: 5px;height: 20px;margin: -5px 0 0 59px;-webkit-animation: swing 4s infinite ease-in-out;-webkit-transform-origin: 50% -45px;background: #ffa500;border-radius: 0 0 5px 5px;&#125; .shui-b &#123;position: absolute;top: 14px;left: -2px;width: 10px;height: 10px;background: #dc8f03;border-radius: 50%;&#125; .shui-c &#123;position: absolute;top: 18px;left: -2px;width: 10px;height: 35px;background: #ffa500;border-radius: 0 0 0 5px;&#125; .deng:before &#123;position: absolute;top: -7px;left: 29px;height: 12px;width: 60px;content: &quot; &quot;;display: block;z-index: 999;border-radius: 5px 5px 0 0;border: solid 1px #dc8f03;background: #ffa500;background: linear-gradient(to right, #dc8f03, #ffa500, #dc8f03, #ffa500, #dc8f03);&#125; .deng:after &#123;position: absolute;bottom: -7px;left: 10px;height: 12px;width: 60px;content: &quot; &quot;;display: block;margin-left: 20px;border-radius: 0 0 5px 5px;border: solid 1px #dc8f03;background: #ffa500;background: linear-gradient(to right, #dc8f03, #ffa500, #dc8f03, #ffa500, #dc8f03);&#125; .deng-t &#123;font-family: 华文行楷,Arial,Lucida Grande,Tahoma,sans-serif;font-size: 3.2rem;color: #dc8f03;font-weight: bold;line-height: 85px;text-align: center;&#125; .night .deng-t, .night .deng-box, .night .deng-box1 &#123;background: transparent !important;&#125; @-moz-keyframes swing &#123;0% &#123;-moz-transform: rotate(-10deg)&#125; 50% &#123;-moz-transform: rotate(10deg)&#125; 100% &#123;-moz-transform: rotate(-10deg)&#125;&#125; @-webkit-keyframes swing &#123;0% &#123;-webkit-transform: rotate(-10deg)&#125; 50% &#123;-webkit-transform: rotate(10deg)&#125; 100% &#123;-webkit-transform: rotate(-10deg)&#125;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> halo博客 </tag>
            
            <tag> 技术 </tag>
            
            <tag> 新年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7部署Cloudreve公私兼备网盘系统</title>
      <link href="/2022/12/22/25/"/>
      <url>/2022/12/22/25/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7部署Cloudreve公私兼备网盘系统"><a href="#Centos7部署Cloudreve公私兼备网盘系统" class="headerlink" title="Centos7部署Cloudreve公私兼备网盘系统"></a>Centos7部署Cloudreve公私兼备网盘系统</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</p><p><strong>使用Docker部署Cloudreve<a href="https://www.wangshengjj.work/archives/cloudreve">教程</a></strong></p><p><strong>首先简单介绍一下Cloudreve</strong></p><p>Cloudreve 可以让您快速搭建起公私兼备的网盘系统。Cloudreve 在底层支持不同的云存储平台，用户在实际使用时无须关心物理存储方式。你可以使用 Cloudreve 搭建个人用网盘、文件分享系统，亦或是针对大小团体的公有云系统。</p><h2 id="一、下载Cloudreve"><a href="#一、下载Cloudreve" class="headerlink" title="一、下载Cloudreve"></a>一、下载Cloudreve</h2><p>官方Github下载<a href="https://github.com/cloudreve/Cloudreve/releases">地址</a></p><p>我这里用<strong>linux_amd64.tar.gz</strong>做演示</p><h2 id="二、开始安装"><a href="#二、开始安装" class="headerlink" title="二、开始安装"></a>二、开始安装</h2><p>把文件上传服务器，或者直接在服务器下载步骤省略</p><h3 id="1-解压程序"><a href="#1-解压程序" class="headerlink" title="1.解压程序"></a>1.解压程序</h3><pre class="line-numbers language-none"><code class="language-none">tar -zxvf cloudreve_VERSION_OS_ARCH.tar.gz#自行修改命令，后面是文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-赋予权限"><a href="#2-赋予权限" class="headerlink" title="2.赋予权限"></a>2.赋予权限</h3><p>默认解压后是一个可执行文件</p><pre class="line-numbers language-none"><code class="language-none">chmod +x .&#x2F;cloudreve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3.运行"></a>3.运行</h3><p>这一步主要测试，能否成功运行，并且拿到默认的<strong>管理员账号和密码</strong></p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;cloudreve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行完毕，并且拿到管理员账号和密码后，使用<strong>快捷键Ctrl+c终止命令</strong></p><h2 id="三、创建守护进程并添加到系统服务里"><a href="#三、创建守护进程并添加到系统服务里" class="headerlink" title="三、创建守护进程并添加到系统服务里"></a>三、创建守护进程并添加到系统服务里</h2><h3 id="1-使用vi编辑器-vim也可以-创建service服务"><a href="#1-使用vi编辑器-vim也可以-创建service服务" class="headerlink" title="1.使用vi编辑器(vim也可以)创建service服务"></a>1.使用vi编辑器(vim也可以)创建service服务</h3><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;cloudreve.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入以下内容</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;CloudreveDocumentation&#x3D;https:&#x2F;&#x2F;docs.cloudreve.orgAfter&#x3D;network.targetWants&#x3D;network.target[Service]Type&#x3D;simpleWorkingDirectory&#x3D;&#x2F;root&#x2F;#工作目录ExecStart&#x3D;&#x2F;root&#x2F;cloudreve#执行文件所在目录(填绝对路径)Restart&#x3D;on-abnormalRestartSec&#x3D;5sKillMode&#x3D;mixedStandardOutput&#x3D;nullStandardError&#x3D;syslog[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>末行模式保存</p><h3 id="2-重新加载服务"><a href="#2-重新加载服务" class="headerlink" title="2.重新加载服务"></a>2.重新加载服务</h3><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-启动Cloudreve"><a href="#3-启动Cloudreve" class="headerlink" title="3.启动Cloudreve"></a>3.启动Cloudreve</h3><pre class="line-numbers language-none"><code class="language-none">systemctl start cloudreve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-设置开机自启"><a href="#4-设置开机自启" class="headerlink" title="4.设置开机自启"></a>4.设置开机自启</h3><pre class="line-numbers language-none"><code class="language-none">systemctl enable cloudreve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-停止服务"><a href="#5-停止服务" class="headerlink" title="5.停止服务"></a>5.停止服务</h3><pre class="line-numbers language-none"><code class="language-none">systemctl stop cloudreve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h3><p>自行使用浏览器输入IP+5212端口号即可</p><p>比如本机IP是127.0.0.1，那么浏览器输入127.0.0.1:5212即可</p><h2 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h2><p>首次启动时，Cloudreve 会在同级目录下创建名为conf.ini的配置文件，你可以修改此文件进行一些参数的配置，保存后需要重新启动 Cloudreve 生效。</p><pre class="line-numbers language-none"><code class="language-none">[System]#运行模式Mode &#x3D; master#监听端口Listen &#x3D; :5212#是否开启 DebugDebug &#x3D; false#Session 密钥, 一般在首次启动时自动生成SessionSecret &#x3D; 23333#Hash 加盐, 一般在首次启动时自动生成HashIDSalt &#x3D; something really hard to guss#呈递客户端 IP 时使用的 HeaderProxyHeader &#x3D; X-Forwarded-For#SSL 相关[SSL]#SSL 监听端口Listen &#x3D; :443#证书路径CertPath &#x3D; C:\Users\i\Documents\fullchain.pem#私钥路径KeyPath &#x3D; C:\Users\i\Documents\privkey.pem#启用 Unix Socket 监听[UnixSocket]Listen &#x3D; &#x2F;run&#x2F;cloudreve&#x2F;cloudreve.sock#设置产生的 socket 文件的权限Perm &#x3D; 0666#数据库相关，如果你只想使用内置的 SQLite 数据库，这一部分直接删去即可[Database]#数据库类型，目前支持 sqlite&#x2F;mysql&#x2F;mssql&#x2F;postgresType &#x3D; mysql#MySQL 端口Port &#x3D; 3306#用户名User &#x3D; root#密码Password &#x3D; root#数据库地址Host &#x3D; 127.0.0.1#数据库名称Name &#x3D; v3#数据表前缀TablePrefix &#x3D; cd_#字符集Charset &#x3D; utf8mb4#SQLite 数据库文件路径DBFile &#x3D; cloudreve.db#进程退出前安全关闭数据库连接的缓冲时间GracePeriod &#x3D; 30#从机模式下的配置[Slave]#通信密钥Secret &#x3D; 1234567891234567123456789123456712345678912345671234567891234567#回调请求超时时间 (s)CallbackTimeout &#x3D; 20#签名有效期SignatureTTL &#x3D; 60#跨域配置[CORS]AllowOrigins &#x3D; *AllowMethods &#x3D; OPTIONS,GET,POSTAllowHeaders &#x3D; *AllowCredentials &#x3D; falseSameSite &#x3D; DefaultSecure &#x3D; lse#Redis 相关[Redis]Server &#x3D; 127.0.0.1:6379Password &#x3D;DB &#x3D; 0#从机配置覆盖[OptionOverwrite]#可直接使用 &#96;设置名称 &#x3D; 值&#96; 的格式覆盖max_worker_num &#x3D; 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><a href="https://docs.cloudreve.org/getting-started/install">Cloudreve官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 私人网盘 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> centos </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 技术 </tag>
            
            <tag> cloudreve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信机器人部署ChatGPT【已失效】</title>
      <link href="/2022/12/16/24/"/>
      <url>/2022/12/16/24/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信部署ChatGPT【已失效】"><a href="#微信部署ChatGPT【已失效】" class="headerlink" title="微信部署ChatGPT【已失效】"></a>微信部署ChatGPT【已失效】</h1><h2 id="关于ChatGPT的介绍："><a href="#关于ChatGPT的介绍：" class="headerlink" title="关于ChatGPT的介绍："></a>关于ChatGPT的介绍：</h2><p><strong>ChatGPT 是一个原型人工智能聊天机器人，专注于可用性和对话。由OpenAI开发，采用基于GPT-3.5架构的大型语言模型</strong></p><p>ChatGPT异常的火爆，所以本教程利用了Docker，给你的微信接入ChatGPT服务</p><p>由于原作者已经删除了项目，所以这里附上本人fork后的链接<a href="https://github.com/wangshengjj/wechatbot">wechatbot项目地址</a></p><p>本教程使用了Docker<a href="https://www.wangshengjj.work/archives/13">点这里查看</a>安装教程</p><h2 id="一、目前实现了以下功能"><a href="#一、目前实现了以下功能" class="headerlink" title="一、目前实现了以下功能"></a>一、目前实现了以下功能</h2><ul><li>GPT机器人模型热度可配置</li><li>提问增加上下文</li><li>指令清空上下文（指令：根据配置）</li><li>机器人群聊@回复</li><li>机器人私聊回复</li><li>私聊回复前缀设置</li><li>好友添加自动通过</li></ul><h2 id="二、实现机制"><a href="#二、实现机制" class="headerlink" title="二、实现机制"></a>二、实现机制</h2><p>目前机器人有两种实现方式</p><ul><li>逆向功能，扒取官网API，通过抓取cookie获取GPT响应信息，优点：效果与官网一致，缺点：cookie会过期需要不定时更新。</li><li>基于openai官网提供的API，优点：模型以及各种参数可以自由配置，缺点：效果达不到官网智能，且API收费，新账号有18元免费额度。<br>本项目基于第二种方式实现，模型之间具体差异可以参考<a href="https://beta.openai.com/docs/models/overview">官方文档</a>, 详细<a href="https://beta.openai.com/examples">参数示例</a></li></ul><h2 id="三、常见问题"><a href="#三、常见问题" class="headerlink" title="三、常见问题"></a>三、常见问题</h2><ul><li>如无法登录 login error: write storage.json: bad file descriptor 删除掉storage.json文件重新登录。</li><li>其他无法登录问题，依然尝试删除掉storage.json文件重新登录。</li><li>linux中二维码无法扫描，缩小命令行功能，让二维码像素尽可能清晰。（无法从代码层面解决）</li><li>机器人一直答非所问，可能因为上下文累积过多。切换不同问题时，发送指令：启动时配置的++session_clear_token++字段。会清空上下文</li></ul><h2 id="四、使用前提"><a href="#四、使用前提" class="headerlink" title="四、使用前提"></a>四、使用前提</h2><ul><li>有openai账号，并且创建好api_key，注册事项可以参考<a href="https://juejin.cn/post/7173447848292253704">此文章</a> 。</li><li>微信必须实名认证</li></ul><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><ul><li>项目仅供娱乐，滥用可能有微信封禁的风险，请勿用于商业用途。</li><li>请注意收发敏感信息，本项目不做信息过滤。</li></ul><h2 id="六、使用docker运行"><a href="#六、使用docker运行" class="headerlink" title="六、使用docker运行"></a>六、使用docker运行</h2><p>点击<a href="https://beta.openai.com/account/api-keys">此链接</a>获取你账号的APIkey</p><pre class="line-numbers language-none"><code class="language-none"># 运行项目，环境变量参考下方配置说明$ docker run -itd --name wechatbot --restart&#x3D;always \ -e APIKEY&#x3D;换成你的key \ -e AUTO_PASS&#x3D;false \ -e SESSION_TIMEOUT&#x3D;60s \ -e MODEL&#x3D;text-davinci-003 \ -e MAX_TOKENS&#x3D;512 \ -e TEMPREATURE&#x3D;0.9 \ -e REPLY_PREFIX&#x3D;我是来自机器人回复: \ -e SESSION_CLEAR_TOKEN&#x3D;下一个问题 \ docker.mirrors.sjtug.sjtu.edu.cn&#x2F;qingshui869413421&#x2F;wechatbot:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 查看登录二维码$ docker exec -it wechatbot &#x2F;bin&#x2F;bash$ tail -f -n 50 &#x2F;app&#x2F;run.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
          <category> ai </category>
          
          <category> ChatGPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原神群机器人 </tag>
            
            <tag> AI </tag>
            
            <tag> ChatGPT </tag>
            
            <tag> openai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes(K8s)部署WordPress博客</title>
      <link href="/2022/11/25/23/"/>
      <url>/2022/11/25/23/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Kubernetes-K8s-部署WordPress博客"><a href="#Kubernetes-K8s-部署WordPress博客" class="headerlink" title="Kubernetes(K8s)部署WordPress博客"></a>Kubernetes(K8s)部署WordPress博客</h1><p>如果您还没有部署K8s集群环境，请查看第一期教程<a href="https://www.wangshengjj.work/archives/k8s">Kubernetes部署</a></p><h2 id="一、创建命名空间"><a href="#一、创建命名空间" class="headerlink" title="一、创建命名空间"></a>一、创建命名空间</h2><pre class="line-numbers language-none"><code class="language-none">kubectl create ns wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-查看命名空间"><a href="#1-查看命名空间" class="headerlink" title="1.查看命名空间"></a>1.查看命名空间</h3><pre class="line-numbers language-none"><code class="language-none">kubectl get ns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、配置数据库"><a href="#二、配置数据库" class="headerlink" title="二、配置数据库"></a>二、配置数据库</h2><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# vim wordpress-db.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请复制以下内容</p><pre class="line-numbers language-none"><code class="language-none">apiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: wordpress-db    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:              app: wordpress-db    template:        metadata:            labels:                app: wordpress-db        spec:            containers:            - name: wordpress-db              image: mysql:5.7              imagePullPolicy: IfNotPresent              env:              - name: MYSQL_ROOT_PASSWORD                value: redhat---apiVersion: v1kind: Servicemetadata:    name: wordpress-db    namespace: wordpressspec:    ports:    - port: 3306    selector:        app: wordpress-db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据库密码为redhat</strong></p><h3 id="1-创建数据库容器"><a href="#1-创建数据库容器" class="headerlink" title="1.创建数据库容器"></a>1.创建数据库容器</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# kubectl create -f wordpress-db.yaml deployment.apps&#x2F;wordpress-db createdservice&#x2F;wordpress-db created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看pod"><a href="#2-查看pod" class="headerlink" title="2.查看pod"></a>2.查看pod</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# kubectl get pods -n wordpressNAME                           READY   STATUS    RESTARTS   AGEwordpress-db-875865d79-vlcnf   1&#x2F;1     Running   0          13s#记住这里的NAME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-连接数据库，创建用户"><a href="#3-连接数据库，创建用户" class="headerlink" title="3.连接数据库，创建用户"></a>3.连接数据库，创建用户</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# kubectl exec -ti -n wordpress wordpress-db-875865d79-vlcnf -- bash#中间的wordpress-db-875865d79-vlcnf为上面的NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用root用户登录，密码redhat</p><pre class="line-numbers language-none"><code class="language-none">bash-4.2# mysql -uroot -predhat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建名为WordPress的库，密码是redhat，给wpuser给予权限</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; create database wordpress charset utf8;Query OK, 1 row affected (0.00 sec)mysql&gt; create user &#39;wpuser&#39;@&quot;%&quot; identified by &#39;redhat&#39;;Query OK, 0 rows affected (0.01 sec)mysql&gt; grant all on wordpress.* to &#39;wpuser&#39;@&quot;%&quot;;Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt;exit;bash-4.2# exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-部署Wordpress博客"><a href="#三、-部署Wordpress博客" class="headerlink" title="三、 部署Wordpress博客"></a>三、 部署Wordpress博客</h2><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# vim wordpress-deploy.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把下面内容复制进去</p><pre class="line-numbers language-none"><code class="language-none">apiVersion: apps&#x2F;v1kind: Deploymentmetadata:    name: wordpress    namespace: wordpressspec:    replicas: 1    selector:        matchLabels:              app: wordpress    template:        metadata:            labels:                app: wordpress        spec:            containers:            - name: wordpress              image: wordpress              imagePullPolicy: IfNotPresent              env:              - name: WORDPRESS_DB_HOST                value: wordpress-db              - name: WORDPRESS_DB_USER                value: wpuser#刚才创建的用户              - name: WORDPRESS_DB_PASSWORD                value: redhat#数据库密码              - name: WORDPRESS_DB_NAME                value: wordpress#库名              - name: WORDPRESS_TABLE_PREFIX                value: wp_---apiVersion: v1kind: Servicemetadata:    name: wordpress    namespace: wordpressspec:    type: NodePort    ports:    - port: 80      nodePort: 30009#外部端口    selector:        app: wordpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-创建WordPress容器"><a href="#1-创建WordPress容器" class="headerlink" title="1.创建WordPress容器"></a>1.创建WordPress容器</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# kubectl create -f wordpress-deploy.yaml deployment.apps&#x2F;wordpress createdservice&#x2F;wordpress created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看WordPress在哪个节点上运行"><a href="#2-查看WordPress在哪个节点上运行" class="headerlink" title="2.查看WordPress在哪个节点上运行"></a>2.查看WordPress在哪个节点上运行</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# kubectl get pods -n wordpress -o wideNAME                           READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATESwordpress-59569c76f6-5h8xq     1&#x2F;1     Running   0          26s   192.168.242.164   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;wordpress-db-875865d79-vlcnf   1&#x2F;1     Running   0          12m   192.168.201.234   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>WordPress运行在node2节点，数据库运行在node1节点</p><h3 id="3-查看端口"><a href="#3-查看端口" class="headerlink" title="3.查看端口"></a>3.查看端口</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master wordpressTest]# kubectl get svc -n wordpressNAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGEwordpress      NodePort    172.16.216.117   &lt;none&gt;        80:30009&#x2F;TCP   37swordpress-db   ClusterIP   172.16.45.191    &lt;none&gt;        3306&#x2F;TCP       13m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>80端口被映射到了30009端口</p><p><strong>打开浏览器，输入node2节点的IP+30009端口即可</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> wordpress </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> 技术 </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装并配置Kubernetes(K8s)</title>
      <link href="/2022/11/20/k8s/"/>
      <url>/2022/11/20/k8s/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7安装并配置Kubernetes-K8s"><a href="#Centos7安装并配置Kubernetes-K8s" class="headerlink" title="Centos7安装并配置Kubernetes(K8s)"></a>Centos7安装并配置Kubernetes(K8s)</h1><p><strong>关于K8s介绍：</strong></p><p>Kubernetes 是一个全新的基于容器技术的分布式架构解决方案，是 Google 开源的一个容器集群管理系统，Kubernetes 简称 K8S。</p><p>Kubernetes 是一个一站式的完备的分布式系统开发和支撑平台，更是一个开放平台，对现有的编程语言、编程框架、中间件没有任何侵入性。</p><p>Kubernetes 提供了完善的管理工具，这些工具涵盖了开发、部署测试、运维监控在内的各个环节。</p><p>Kubernetes 具有完备的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、内建智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制、多粒度的资源配额管理能力。</p><p>Kubernetes 官方文档：<a href="https://kubernetes.io/zh/">https://kubernetes.io/zh/</a></p><p>第二期教程：<a href="https://www.wangshengjj.work/archives/23">Kubernetes(K8s)部署WordPress博客</a></p><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><p>本教程第十步、第十一步、第十二步涉及到的插件<a href="https://cloud.wangshengjj.work/s/zYcp">下载链接</a></p><h3 id="三台虚拟机："><a href="#三台虚拟机：" class="headerlink" title="三台虚拟机："></a>三台虚拟机：</h3><p>ip:192.168.137.130(根据自己的来)域名：k8s-master.linux.comMaster<strong>2核2G</strong>(官方要求最低配置)系统：Centos7.9</p><p>ip:192.168.137.129(根据自己的来)域名：k8s-node1.linux.comNode1<strong>2核2G</strong>(官方要求最低配置)系统：Centos7.9</p><p>ip:192.168.137.128(根据自己的来)域名：k8s-node2.linux.comNode2<strong>2核2G</strong>(官方要求最低配置)系统：Centos7.9</p><h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><p>kubernetes 1.20.7版本</p><p>docker   19.03版本(版本过高会报错)</p><h3 id="网段"><a href="#网段" class="headerlink" title="网段"></a>网段</h3><p>pod网段:    10.88.0.0&#x2F;16</p><p>service网段:  172.16.0.0&#x2F;16</p><h2 id="二、关闭SElinux和防火墙-三台虚拟机都要配置"><a href="#二、关闭SElinux和防火墙-三台虚拟机都要配置" class="headerlink" title="二、关闭SElinux和防火墙(三台虚拟机都要配置)"></a>二、关闭SElinux和防火墙(三台虚拟机都要配置)</h2><h3 id="1-关闭防火墙并且设置开机不自启"><a href="#1-关闭防火墙并且设置开机不自启" class="headerlink" title="1.关闭防火墙并且设置开机不自启"></a>1.关闭防火墙并且设置开机不自启</h3><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld &amp;&amp; systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-关闭selinux"><a href="#2-关闭selinux" class="headerlink" title="2.关闭selinux"></a>2.关闭selinux</h3><pre class="line-numbers language-none"><code class="language-none">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-重启"><a href="#3-重启" class="headerlink" title="3.重启"></a>3.重启</h3><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-配置yum源和epel源"><a href="#4-配置yum源和epel源" class="headerlink" title="4.配置yum源和epel源"></a>4.配置yum源和epel源</h3><p>yum源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>epel源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、修改主机名和域名"><a href="#三、修改主机名和域名" class="headerlink" title="三、修改主机名和域名"></a>三、修改主机名和域名</h2><h3 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1.修改主机名"></a>1.修改主机名</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# hostnamectl set-hostname k8s-master.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node1 ~]# hostnamectl set-hostname k8s-node1.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node2 ~]# hostnamectl set-hostname k8s-node2.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-修改hosts"><a href="#2-修改hosts" class="headerlink" title="2.修改hosts"></a>2.修改hosts</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.137.130k8s-master.linux.com#master的IP和域名192.168.137.129k8s-node01.linux.com#node1的IP和域名192.168.137.128k8s-node02.linux.com#node2的IP和域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp &#x2F;etc&#x2F;hosts root@192.168.137.129:&#x2F;etc&#x2F;hosts#把master的hosts文件拷贝给node1hosts                                                                                                                      100%  267   154.5KB&#x2F;s   00:00    [root@k8s-master ~]# scp &#x2F;etc&#x2F;hosts root@192.168.137.128:&#x2F;etc&#x2F;hosts#把master的hosts文件拷贝给node2hosts                                                                                                                      100%  267   154.5KB&#x2F;s <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用ping命令测试"><a href="#3-使用ping命令测试" class="headerlink" title="3.使用ping命令测试"></a>3.使用ping命令测试</h3><pre class="line-numbers language-none"><code class="language-none">ping k8s-node1.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ping k8s-node8.linux.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、给三台虚拟机配置免密SSH-master上操作"><a href="#四、给三台虚拟机配置免密SSH-master上操作" class="headerlink" title="四、给三台虚拟机配置免密SSH(master上操作)"></a>四、给三台虚拟机配置免密SSH(master上操作)</h2><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# mv &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;root&#x2F;.ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.137.129:&#x2F;root&#x2F;#把秘钥文件拷贝给node1[root@k8s-master ~]# scp -r &#x2F;root&#x2F;.ssh&#x2F; root@192.168.137.128:&#x2F;root&#x2F;#把秘钥文件拷贝给node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、配置主机资源"><a href="#五、配置主机资源" class="headerlink" title="五、配置主机资源"></a>五、配置主机资源</h2><h3 id="1-所有主机禁用swap交换分区-master、node1、node2"><a href="#1-所有主机禁用swap交换分区-master、node1、node2" class="headerlink" title="1.所有主机禁用swap交换分区(master、node1、node2)"></a>1.所有主机禁用swap交换分区(master、node1、node2)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# swapoff -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# free -m              total        used        free      shared  buff&#x2F;cache   availableMem:           3932         113        3658          11         160        3599Swap:             0           0           0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sysctl -w vm.swappiness&#x3D;0vm.swappiness &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sed -ri &#39;&#x2F;swap&#x2F;d&#39; &#x2F;etc&#x2F;fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-所有主机调整系统的资源限制-master、node1、node2"><a href="#2-所有主机调整系统的资源限制-master、node1、node2" class="headerlink" title="2.所有主机调整系统的资源限制(master、node1、node2)"></a>2.所有主机调整系统的资源限制(master、node1、node2)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# ulimit -SHn 65535<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;security&#x2F;limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把下面的添加进去</p><pre class="line-numbers language-none"><code class="language-none">* soft nofile 655360* hard nofile 131072* soft nproc 655350* hard nproc 655350* soft memlock unlimited* hard memlock unlimited<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><ul><li>nofile<br>最大文件数</li><li>nproc<br>最大进程数</li><li>memlock<br>内页的页面锁</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp &#x2F;etc&#x2F;security&#x2F;limits.conf root@192.168.137.129:&#x2F;etc&#x2F;security&#x2F;limits.conf#拷贝文件到node1limits.conf                                                                                                                100% 2555     1.4MB&#x2F;s   00:00    [root@k8s-master ~]# scp &#x2F;etc&#x2F;security&#x2F;limits.conf root@192.168.137.128:&#x2F;etc&#x2F;security&#x2F;limits.conf#拷贝文件到node2limits.conf                                                                                                                100% 2555     2.1MB&#x2F;s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、配置Docekr仓库和K8s仓库"><a href="#六、配置Docekr仓库和K8s仓库" class="headerlink" title="六、配置Docekr仓库和K8s仓库"></a>六、配置Docekr仓库和K8s仓库</h2><h3 id="1-配置Docker仓库-阿里云"><a href="#1-配置Docker仓库-阿里云" class="headerlink" title="1.配置Docker仓库(阿里云)"></a>1.配置Docker仓库(阿里云)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把下面内容复制进去</p><pre class="line-numbers language-none"><code class="language-none">[docker-ce-stable]name&#x3D;Docker CE Stable - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;stableenabled&#x3D;1gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-stable-debuginfo]name&#x3D;Docker CE Stable - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;stableenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-stable-source]name&#x3D;Docker CE Stable - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;stableenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test]name&#x3D;Docker CE Test - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test-debuginfo]name&#x3D;Docker CE Test - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-test-source]name&#x3D;Docker CE Test - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;testenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly]name&#x3D;Docker CE Nightly - $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly-debuginfo]name&#x3D;Docker CE Nightly - Debuginfo $basearchbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;debug-$basearch&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg[docker-ce-nightly-source]name&#x3D;Docker CE Nightly - Sourcesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;$releasever&#x2F;source&#x2F;nightlyenabled&#x3D;0gpgcheck&#x3D;1gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><h3 id="2-配置K8s仓库-阿里云"><a href="#2-配置K8s仓库-阿里云" class="headerlink" title="2.配置K8s仓库(阿里云)"></a>2.配置K8s仓库(阿里云)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[kubernetes]name&#x3D;Kubernetesbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;enabled&#x3D;1gpgcheck&#x3D;1repo_gpgcheck&#x3D;0gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><h3 id="3-讲上述2个仓库拷贝到node1和node2"><a href="#3-讲上述2个仓库拷贝到node1和node2" class="headerlink" title="3.讲上述2个仓库拷贝到node1和node2"></a>3.讲上述2个仓库拷贝到node1和node2</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo root@192.168.137.129:&#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo                                                                                                                100% 2081     1.8MB&#x2F;s   00:00    [root@k8s-master ~]# scp &#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo root@192.168.137.128:&#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo                                                                                                                100% 2081     2.8MB&#x2F;s   00:00    [root@k8s-master ~]# [root@k8s-master ~]# scp &#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo root@192.168.137.129:&#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo                                                                                                                   100%  276   360.6KB&#x2F;s   00:00    [root@k8s-master ~]# scp &#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo root@192.168.137.128:&#x2F;etc&#x2F;yum.repos.d&#x2F;k8s.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-升级系统到最新版本-Centos7-9"><a href="#4-升级系统到最新版本-Centos7-9" class="headerlink" title="4.升级系统到最新版本(Centos7.9)"></a>4.升级系统到最新版本(Centos7.9)</h3><pre class="line-numbers language-none"><code class="language-none">yum update -y#三个虚拟机都要执行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看系统版本</p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# uname -aLinux k8s-master.linux.com 3.10.0-1160.80.1.el7.x86_64 #1 SMP Tue Nov 8 15:48:59 UTC 2022 x86_64 x86_64 x86_64 GNU&#x2F;Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="七、调整系统参数-master、node1、node2"><a href="#七、调整系统参数-master、node1、node2" class="headerlink" title="七、调整系统参数(master、node1、node2)"></a>七、调整系统参数(master、node1、node2)</h2><h3 id="1-安装IPVS"><a href="#1-安装IPVS" class="headerlink" title="1.安装IPVS"></a>1.安装IPVS</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum install ipvsadm ipset sysstat conntrack libseccomp -y#三个主机都要运行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-加载IPVS模块"><a href="#2-加载IPVS模块" class="headerlink" title="2.加载IPVS模块"></a>2.加载IPVS模块</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ip_vsip_vs_lcip_vs_wlcip_vs_rrip_vs_wrrip_vs_lblcip_vs_lblcrip_vs_dhip_vs_ship_vs_foip_vs_nqip_vs_sedip_vs_ftpip_vs_shnf_conntrack_ipv4ip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf root@192.168.137.129:&#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf#拷贝到node1ipvs.conf                                                                                                                  100%  211   123.4KB&#x2F;s   00:00    [root@k8s-master ~]# scp &#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf root@192.168.137.128:&#x2F;etc&#x2F;modules-load.d&#x2F;ipvs.conf#拷贝到node2ipvs.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl enable --now systemd-modules-load#三台虚拟机都要运行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-调整内核参数"><a href="#4-调整内核参数" class="headerlink" title="4.调整内核参数"></a>4.调整内核参数</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">net.ipv4.ip_forward &#x3D; 1net.bridge.bridge-nf-call-iptables &#x3D; 1net.bridge.bridge-nf-call-ip6tables &#x3D; 1fs.may_detach_mounts &#x3D; 1vm.overcommit_memory&#x3D;1vm.panic_on_oom&#x3D;0fs.inotify.max_user_watches&#x3D;89100fs.file-max&#x3D;52706963fs.nr_open&#x3D;52706963net.netfilter.nf_conntrack_max&#x3D;2310720net.ipv4.tcp_keepalive_time &#x3D; 600net.ipv4.tcp_keepalive_probes &#x3D; 3net.ipv4.tcp_keepalive_intvl &#x3D;15net.ipv4.tcp_max_tw_buckets &#x3D; 36000net.ipv4.tcp_tw_reuse &#x3D; 1net.ipv4.tcp_max_orphans &#x3D; 327680net.ipv4.tcp_orphan_retries &#x3D; 3net.ipv4.tcp_syncookies &#x3D; 1net.ipv4.tcp_max_syn_backlog &#x3D; 16384net.ipv4.ip_conntrack_max &#x3D; 65536net.ipv4.tcp_max_syn_backlog &#x3D; 16384net.ipv4.tcp_timestamps &#x3D; 0net.core.somaxconn &#x3D; 16384<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf root@192.168.137.129:&#x2F;etc&#x2F;sysctl.d&#x2F;#拷贝到node1k8s.conf                                                                                                                   100%  704   654.4KB&#x2F;s   00:00    [root@k8s-master ~]# scp &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf root@192.168.137.128:&#x2F;etc&#x2F;sysctl.d&#x2F;#拷贝到node2k8s.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sysctl --system#三个虚拟机都要运行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、安装软件-master、node1、node2"><a href="#八、安装软件-master、node1、node2" class="headerlink" title="八、安装软件(master、node1、node2)"></a>八、安装软件(master、node1、node2)</h2><h3 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1.安装Docker"></a>1.安装Docker</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum install -y docker-ce-19.03*#注意版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl enable --now docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置镜像加速</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><p><strong>重启服务</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-安装kubernetes"><a href="#2-安装kubernetes" class="headerlink" title="2.安装kubernetes"></a>2.安装kubernetes</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# yum install -y kubeadm-1.20.7 kubelet-1.20.7 kubectl-1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">KUBELET_EXTRA_ARGS&#x3D;&quot;--pod-infra-container-image&#x3D;registry.cn-hangzhou.aliyuncs.com&#x2F;google_containers&#x2F;pause-amd64:3.2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>：wq保存</p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# systemctl enable --now kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="九、配置master节点的初始文件"><a href="#九、配置master节点的初始文件" class="headerlink" title="九、配置master节点的初始文件"></a>九、配置master节点的初始文件</h2><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim new.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">apiVersion: kubeadm.k8s.io&#x2F;v1beta2bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: 7t2weq.bjbawausm0jaxury  ttl: 96h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.137.130      #master节点IP  bindPort: 6443nodeRegistration:  criSocket: &#x2F;var&#x2F;run&#x2F;dockershim.sock  name: k8s-master01  taints:  - effect: NoSchedule    key: node-role.kubernetes.io&#x2F;master---apiServer:  certSANs:  - 192.168.183.10              #master节点IP  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io&#x2F;v1beta2certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pkiclusterName: kubernetescontrolPlaneEndpoint: 192.168.137.130:6443            #master节点IPcontrollerManager: &#123;&#125;dns:  type: CoreDNSetcd:  local:    dataDir: &#x2F;var&#x2F;lib&#x2F;etcdimageRepository: registry.cn-hangzhou.aliyuncs.com&#x2F;google_containerskind: ClusterConfigurationkubernetesVersion: v1.20.7networking:  dnsDomain: cluster.local  podSubnet: 10.88.0.0&#x2F;16#之前配置的网段  serviceSubnet: 172.16.0.0&#x2F;16#之前配置的网段scheduler: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><h3 id="1-在master节点事先下载初始化需要的镜像"><a href="#1-在master节点事先下载初始化需要的镜像" class="headerlink" title="1.在master节点事先下载初始化需要的镜像"></a>1.在master节点事先下载初始化需要的镜像</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubeadm config images pull --config &#x2F;root&#x2F;new.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-在master节点上初始化集群"><a href="#2-在master节点上初始化集群" class="headerlink" title="2.在master节点上初始化集群"></a>2.在master节点上初始化集群</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubeadm init --config &#x2F;root&#x2F;new.yaml --upload-certs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出信息如下图</p><pre class="line-numbers language-none"><code class="language-none">[init] Using Kubernetes version: v1.20.7[preflight] Running pre-flight checks[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;cri&#x2F;[WARNING Hostname]: hostname &quot;k8s-master01&quot; could not be reached[WARNING Hostname]: hostname &quot;k8s-master01&quot;: lookup k8s-master01 on 114.114.114.114:53: no such host[preflight] Pulling images required for setting up a Kubernetes cluster[preflight] This might take a minute or two, depending on the speed of your internet connection[preflight] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;[certs] Using certificateDir folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;pki&quot;[certs] Generating &quot;ca&quot; certificate and key[certs] Generating &quot;apiserver&quot; certificate and key[certs] apiserver serving cert is signed for DNS names [k8s-master01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [172.16.0.1 192.168.183.10][certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key[certs] Generating &quot;front-proxy-ca&quot; certificate and key[certs] Generating &quot;front-proxy-client&quot; certificate and key[certs] Generating &quot;etcd&#x2F;ca&quot; certificate and key[certs] Generating &quot;etcd&#x2F;server&quot; certificate and key[certs] etcd&#x2F;server serving cert is signed for DNS names [k8s-master01 localhost] and IPs [192.168.183.10 127.0.0.1 ::1][certs] Generating &quot;etcd&#x2F;peer&quot; certificate and key[certs] etcd&#x2F;peer serving cert is signed for DNS names [k8s-master01 localhost] and IPs [192.168.183.10 127.0.0.1 ::1][certs] Generating &quot;etcd&#x2F;healthcheck-client&quot; certificate and key[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key[certs] Generating &quot;sa&quot; key and public key[kubeconfig] Using kubeconfig folder &quot;&#x2F;etc&#x2F;kubernetes&quot;[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;[kubelet-start] Starting the kubelet[control-plane] Using manifest folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;[etcd] Creating static Pod manifest for local etcd in &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;. This can take up to 4m0s[apiclient] All control plane components are healthy after 12.026038 seconds[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace[kubelet] Creating a ConfigMap &quot;kubelet-config-1.20&quot; in namespace kube-system with the configuration for the kubelets in the cluster[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:4c95b29d3f062b0b005d7f6ddd74dc1b227ad8f76dbe5b5c2a13da883d93d73f[mark-control-plane] Marking the node k8s-master01 as control-plane by adding the labels &quot;node-role.kubernetes.io&#x2F;master&#x3D;&#39;&#39;&quot; and &quot;node-role.kubernetes.io&#x2F;control-plane&#x3D;&#39;&#39; (deprecated)&quot;[mark-control-plane] Marking the node k8s-master01 as control-plane by adding the taints [node-role.kubernetes.io&#x2F;master:NoSchedule][bootstrap-token] Using token: 7t2weq.bjbawausm0jaxury[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace[kubelet-finalize] Updating &quot;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf&quot; to point to a rotatable kubelet client certificate and key[addons] Applied essential addon: CoreDNS[addons] Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME&#x2F;.kube  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;configAlternatively, if you are the root user, you can run:  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.confYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;You can now join any number of the control-plane node running the following command on each as root:  kubeadm join 192.168.137.130:6443 --token 7t2weq.bjbawausm0jaxury \    --discovery-token-ca-cert-hash sha256:26b04c860890abb6fabbca8dd194eb089aa6a3811be1fe2edff3b4a08c6bb38c \    --control-plane --certificate-key 4c95b29d3f062b0b005d7f6ddd74dc1b227ad8f76dbe5b5c2a13da883d93d73fPlease note that the certificate-key gives access to cluster sensitive data, keep it secret!As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.Then you can join any number of worker nodes by running the following on each as root:kubeadm join 192.168.137.130:6443 --token 7t2weq.bjbawausm0jaxury \    --discovery-token-ca-cert-hash sha256:26b04c860890abb6fabbca8dd194eb089aa6a3811be1fe2edff3b4a08c6bb38c#一会node加入master的命令，注意：每个人的token不一样！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定义kubeconfig环境变量"><a href="#3-定义kubeconfig环境变量" class="headerlink" title="3.定义kubeconfig环境变量"></a>3.定义kubeconfig环境变量</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾加上</p><pre class="line-numbers language-none"><code class="language-none">export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>：wq保存</p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-将node节点加入master"><a href="#4-将node节点加入master" class="headerlink" title="4.将node节点加入master"></a>4.将node节点加入master</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node01 ~]# kubeadm join 192.168.137.130:6443 --token 7t2weq.bjbawausm0jaxury \&gt;     --discovery-token-ca-cert-hash sha256:26b04c860890abb6fabbca8dd194eb089aa6a3811be1fe2edff3b4a08c6bb38c#在node1上运行，注意！每个人的token不一样，看自己终端生成的！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-node02 ~]# kubeadm join 192.168.137.130:6443 --token 7t2weq.bjbawausm0jaxury \&gt;     --discovery-token-ca-cert-hash sha256:26b04c860890abb6fabbca8dd194eb089aa6a3811be1fe2edff3b4a08c6bb38c#在node2上运行，注意！每个人的token不一样，看自己终端生成的！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-查看集群节点"><a href="#5-查看集群节点" class="headerlink" title="5.查看集群节点"></a>5.查看集群节点</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nodesNAME                   STATUS     ROLES                  AGE     VERSIONk8s-master01           NotReady   control-plane,master   7m55s   v1.20.7k8s-node01.linux.com   NotReady   &lt;none&gt;                 97s     v1.20.7k8s-node02.linux.com   NotReady   &lt;none&gt;                 42s     v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、部署calico网络，实现容器间的通信"><a href="#十、部署calico网络，实现容器间的通信" class="headerlink" title="十、部署calico网络，实现容器间的通信"></a>十、部署calico网络，实现容器间的通信</h2><ul><li><p>calico基于BGP协议实现通信 </p></li><li><p>只需要在master节点上进行操作即可</p></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把下面的内容全部复制进去</p><pre class="line-numbers language-none"><code class="language-none">---# Source: calico&#x2F;templates&#x2F;calico-etcd-secrets.yaml# The following contains k8s Secrets for use with a TLS enabled etcd cluster.# For information on populating Secrets, see http:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;user-guide&#x2F;secrets&#x2F;apiVersion: v1kind: Secrettype: Opaquemetadata:  name: calico-etcd-secrets  namespace: kube-systemdata:  # Populate the following with etcd TLS configuration if desired, but leave blank if  # not using TLS for etcd.  # The keys below should be uncommented and the values populated with the base64  # encoded contents of each file that would be associated with the TLS data.  # Example command for encoding a file contents: cat &lt;file&gt; | base64 -w 0  # etcd-key: null  # etcd-cert: null  # etcd-ca: null---# Source: calico&#x2F;templates&#x2F;calico-config.yaml# This ConfigMap is used to configure a self-hosted Calico installation.kind: ConfigMapapiVersion: v1metadata:  name: calico-config  namespace: kube-systemdata:  # Configure this with the location of your etcd cluster.  etcd_endpoints: &quot;http:&#x2F;&#x2F;&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;  # If you&#39;re using TLS enabled etcd uncomment the following.  # You must also populate the Secret below with these files.  etcd_ca: &quot;&quot;   # &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;  etcd_cert: &quot;&quot; # &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;  etcd_key: &quot;&quot;  # &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot;  # Typha is disabled.  typha_service_name: &quot;none&quot;  # Configure the backend to use.  calico_backend: &quot;bird&quot;  # Configure the MTU to use for workload interfaces and tunnels.  # - If Wireguard is enabled, set to your network MTU - 60  # - Otherwise, if VXLAN or BPF mode is enabled, set to your network MTU - 50  # - Otherwise, if IPIP is enabled, set to your network MTU - 20  # - Otherwise, if not using any encapsulation, set to your network MTU.  veth_mtu: &quot;1440&quot;  # The CNI network configuration to install on each node. The special  # values in this config will be automatically populated.  cni_network_config: |-    &#123;      &quot;name&quot;: &quot;k8s-pod-network&quot;,      &quot;cniVersion&quot;: &quot;0.3.1&quot;,      &quot;plugins&quot;: [        &#123;          &quot;type&quot;: &quot;calico&quot;,          &quot;log_level&quot;: &quot;info&quot;,          &quot;etcd_endpoints&quot;: &quot;__ETCD_ENDPOINTS__&quot;,          &quot;etcd_key_file&quot;: &quot;__ETCD_KEY_FILE__&quot;,          &quot;etcd_cert_file&quot;: &quot;__ETCD_CERT_FILE__&quot;,          &quot;etcd_ca_cert_file&quot;: &quot;__ETCD_CA_CERT_FILE__&quot;,          &quot;mtu&quot;: __CNI_MTU__,          &quot;ipam&quot;: &#123;              &quot;type&quot;: &quot;calico-ipam&quot;          &#125;,          &quot;policy&quot;: &#123;              &quot;type&quot;: &quot;k8s&quot;          &#125;,          &quot;kubernetes&quot;: &#123;              &quot;kubeconfig&quot;: &quot;__KUBECONFIG_FILEPATH__&quot;          &#125;        &#125;,        &#123;          &quot;type&quot;: &quot;portmap&quot;,          &quot;snat&quot;: true,          &quot;capabilities&quot;: &#123;&quot;portMappings&quot;: true&#125;        &#125;,        &#123;          &quot;type&quot;: &quot;bandwidth&quot;,          &quot;capabilities&quot;: &#123;&quot;bandwidth&quot;: true&#125;        &#125;      ]    &#125;---# Source: calico&#x2F;templates&#x2F;calico-kube-controllers-rbac.yaml# Include a clusterrole for the kube-controllers component,# and bind it to the calico-kube-controllers serviceaccount.kind: ClusterRoleapiVersion: rbac.authorization.k8s.io&#x2F;v1metadata:  name: calico-kube-controllersrules:  # Pods are monitored for changing labels.  # The node controller monitors Kubernetes nodes.  # Namespace and serviceaccount labels are used for policy.  - apiGroups: [&quot;&quot;]    resources:      - pods      - nodes      - namespaces      - serviceaccounts    verbs:      - watch      - list      - get  # Watch for changes to Kubernetes NetworkPolicies.  - apiGroups: [&quot;networking.k8s.io&quot;]    resources:      - networkpolicies    verbs:      - watch      - list---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io&#x2F;v1metadata:  name: calico-kube-controllersroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: calico-kube-controllerssubjects:- kind: ServiceAccount  name: calico-kube-controllers  namespace: kube-system------# Source: calico&#x2F;templates&#x2F;calico-node-rbac.yaml# Include a clusterrole for the calico-node DaemonSet,# and bind it to the calico-node serviceaccount.kind: ClusterRoleapiVersion: rbac.authorization.k8s.io&#x2F;v1metadata:  name: calico-noderules:  # The CNI plugin needs to get pods, nodes, and namespaces.  - apiGroups: [&quot;&quot;]    resources:      - pods      - nodes      - namespaces    verbs:      - get  - apiGroups: [&quot;&quot;]    resources:      - endpoints      - services    verbs:      # Used to discover service IPs for advertisement.      - watch      - list  # Pod CIDR auto-detection on kubeadm needs access to config maps.  - apiGroups: [&quot;&quot;]    resources:      - configmaps    verbs:      - get  - apiGroups: [&quot;&quot;]    resources:      - nodes&#x2F;status    verbs:      # Needed for clearing NodeNetworkUnavailable flag.      - patch---apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRoleBindingmetadata:  name: calico-noderoleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: calico-nodesubjects:- kind: ServiceAccount  name: calico-node  namespace: kube-system---# Source: calico&#x2F;templates&#x2F;calico-node.yaml# This manifest installs the calico-node container, as well# as the CNI plugins and network config on# each master and worker node in a Kubernetes cluster.kind: DaemonSetapiVersion: apps&#x2F;v1metadata:  name: calico-node  namespace: kube-system  labels:    k8s-app: calico-nodespec:  selector:    matchLabels:      k8s-app: calico-node  updateStrategy:    type: RollingUpdate    rollingUpdate:      maxUnavailable: 1  template:    metadata:      labels:        k8s-app: calico-node    spec:      nodeSelector:        kubernetes.io&#x2F;os: linux      hostNetwork: true      tolerations:        # Make sure calico-node gets scheduled on all nodes.        - effect: NoSchedule          operator: Exists        # Mark the pod as a critical add-on for rescheduling.        - key: CriticalAddonsOnly          operator: Exists        - effect: NoExecute          operator: Exists      serviceAccountName: calico-node      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a &quot;force      # deletion&quot;: https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod&#x2F;#termination-of-pods.      terminationGracePeriodSeconds: 0      priorityClassName: system-node-critical      initContainers:        # This container installs the CNI binaries        # and CNI network config file on each node.        - name: install-cni          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;cni:v3.15.3          command: [&quot;&#x2F;install-cni.sh&quot;]          env:            # Name of the CNI config file to create.            - name: CNI_CONF_NAME              value: &quot;10-calico.conflist&quot;            # The CNI network config to install on each node.            - name: CNI_NETWORK_CONFIG              valueFrom:                configMapKeyRef:                  name: calico-config                  key: cni_network_config            # The location of the etcd cluster.            - name: ETCD_ENDPOINTS              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_endpoints            # CNI MTU Config variable            - name: CNI_MTU              valueFrom:                configMapKeyRef:                  name: calico-config                  key: veth_mtu            # Prevents the container from sleeping forever.            - name: SLEEP              value: &quot;false&quot;          volumeMounts:            - mountPath: &#x2F;host&#x2F;opt&#x2F;cni&#x2F;bin              name: cni-bin-dir            - mountPath: &#x2F;host&#x2F;etc&#x2F;cni&#x2F;net.d              name: cni-net-dir            - mountPath: &#x2F;calico-secrets              name: etcd-certs          securityContext:            privileged: true        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes        # to communicate with Felix over the Policy Sync API.        - name: flexvol-driver          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;pod2daemon-flexvol:v3.15.3          volumeMounts:          - name: flexvol-driver-host            mountPath: &#x2F;host&#x2F;driver          securityContext:            privileged: true      containers:        # Runs calico-node container on each Kubernetes node. This        # container programs network policy and routes on each        # host.        - name: calico-node          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;node:v3.15.3          env:            # The location of the etcd cluster.            - name: ETCD_ENDPOINTS              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_endpoints            # Location of the CA certificate for etcd.            - name: ETCD_CA_CERT_FILE              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_ca            # Location of the client key for etcd.            - name: ETCD_KEY_FILE              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_key            # Location of the client certificate for etcd.            - name: ETCD_CERT_FILE              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_cert            # Set noderef for node controller.            - name: CALICO_K8S_NODE_REF              valueFrom:                fieldRef:                  fieldPath: spec.nodeName            # Choose the backend to use.            - name: CALICO_NETWORKING_BACKEND              valueFrom:                configMapKeyRef:                  name: calico-config                  key: calico_backend            # Cluster type to identify the deployment type            - name: CLUSTER_TYPE              value: &quot;k8s,bgp&quot;            # Auto-detect the BGP IP address.            - name: IP              value: &quot;autodetect&quot;            # Enable IPIP            - name: CALICO_IPV4POOL_IPIP              value: &quot;Always&quot;            # Enable or Disable VXLAN on the default IP pool.            - name: CALICO_IPV4POOL_VXLAN              value: &quot;Never&quot;            # Set MTU for tunnel device used if ipip is enabled            - name: FELIX_IPINIPMTU              valueFrom:                configMapKeyRef:                  name: calico-config                  key: veth_mtu            # Set MTU for the VXLAN tunnel device.            - name: FELIX_VXLANMTU              valueFrom:                configMapKeyRef:                  name: calico-config                  key: veth_mtu            # Set MTU for the Wireguard tunnel device.            - name: FELIX_WIREGUARDMTU              valueFrom:                configMapKeyRef:                  name: calico-config                  key: veth_mtu            # The default IPv4 pool to create on startup if none exists. Pod IPs will be            # chosen from this range. Changing this value after installation will have            # no effect. This should fall within &#96;--cluster-cidr&#96;.            # - name: CALICO_IPV4POOL_CIDR            #   value: &quot;192.168.0.0&#x2F;16&quot;            # Disable file logging so &#96;kubectl logs&#96; works.            - name: CALICO_DISABLE_FILE_LOGGING              value: &quot;true&quot;            # Set Felix endpoint to host default action to ACCEPT.            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION              value: &quot;ACCEPT&quot;            # Disable IPv6 on Kubernetes.            - name: FELIX_IPV6SUPPORT              value: &quot;false&quot;            # Set Felix logging to &quot;info&quot;            - name: FELIX_LOGSEVERITYSCREEN              value: &quot;info&quot;            - name: FELIX_HEALTHENABLED              value: &quot;true&quot;          securityContext:            privileged: true          resources:            requests:              cpu: 250m          livenessProbe:            exec:              command:              - &#x2F;bin&#x2F;calico-node              - -felix-live              - -bird-live            periodSeconds: 10            initialDelaySeconds: 10            failureThreshold: 6          readinessProbe:            exec:              command:              - &#x2F;bin&#x2F;calico-node              - -felix-ready              - -bird-ready            periodSeconds: 10          volumeMounts:            - mountPath: &#x2F;lib&#x2F;modules              name: lib-modules              readOnly: true            - mountPath: &#x2F;run&#x2F;xtables.lock              name: xtables-lock              readOnly: false            - mountPath: &#x2F;var&#x2F;run&#x2F;calico              name: var-run-calico              readOnly: false            - mountPath: &#x2F;var&#x2F;lib&#x2F;calico              name: var-lib-calico              readOnly: false            - mountPath: &#x2F;calico-secrets              name: etcd-certs            - name: policysync              mountPath: &#x2F;var&#x2F;run&#x2F;nodeagent      volumes:        # Used by calico-node.        - name: lib-modules          hostPath:            path: &#x2F;lib&#x2F;modules        - name: var-run-calico          hostPath:            path: &#x2F;var&#x2F;run&#x2F;calico        - name: var-lib-calico          hostPath:            path: &#x2F;var&#x2F;lib&#x2F;calico        - name: xtables-lock          hostPath:            path: &#x2F;run&#x2F;xtables.lock            type: FileOrCreate        # Used to install CNI.        - name: cni-bin-dir          hostPath:            path: &#x2F;opt&#x2F;cni&#x2F;bin        - name: cni-net-dir          hostPath:            path: &#x2F;etc&#x2F;cni&#x2F;net.d        # Mount in the etcd TLS secrets with mode 400.        # See https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;        - name: etcd-certs          secret:            secretName: calico-etcd-secrets            defaultMode: 0400        # Used to create per-pod Unix Domain Sockets        - name: policysync          hostPath:            type: DirectoryOrCreate            path: &#x2F;var&#x2F;run&#x2F;nodeagent        # Used to install Flex Volume Driver        - name: flexvol-driver-host          hostPath:            type: DirectoryOrCreate            path: &#x2F;usr&#x2F;libexec&#x2F;kubernetes&#x2F;kubelet-plugins&#x2F;volume&#x2F;exec&#x2F;nodeagent~uds---apiVersion: v1kind: ServiceAccountmetadata:  name: calico-node  namespace: kube-system---# Source: calico&#x2F;templates&#x2F;calico-kube-controllers.yaml# See https:&#x2F;&#x2F;github.com&#x2F;projectcalico&#x2F;kube-controllersapiVersion: apps&#x2F;v1kind: Deploymentmetadata:  name: calico-kube-controllers  namespace: kube-system  labels:    k8s-app: calico-kube-controllersspec:  # The controllers can only have a single active instance.  replicas: 1  selector:    matchLabels:      k8s-app: calico-kube-controllers  strategy:    type: Recreate  template:    metadata:      name: calico-kube-controllers      namespace: kube-system      labels:        k8s-app: calico-kube-controllers    spec:      nodeSelector:        kubernetes.io&#x2F;os: linux      tolerations:        # Mark the pod as a critical add-on for rescheduling.        - key: CriticalAddonsOnly          operator: Exists        - key: node-role.kubernetes.io&#x2F;master          effect: NoSchedule      serviceAccountName: calico-kube-controllers      priorityClassName: system-cluster-critical      # The controllers must run in the host network namespace so that      # it isn&#39;t governed by policy that would prevent it from working.      hostNetwork: true      containers:        - name: calico-kube-controllers          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;kube-controllers:v3.15.3          env:            # The location of the etcd cluster.            - name: ETCD_ENDPOINTS              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_endpoints            # Location of the CA certificate for etcd.            - name: ETCD_CA_CERT_FILE              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_ca            # Location of the client key for etcd.            - name: ETCD_KEY_FILE              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_key            # Location of the client certificate for etcd.            - name: ETCD_CERT_FILE              valueFrom:                configMapKeyRef:                  name: calico-config                  key: etcd_cert            # Choose which controllers to run.            - name: ENABLED_CONTROLLERS              value: policy,namespace,serviceaccount,workloadendpoint,node          volumeMounts:            # Mount in the etcd TLS secrets.            - mountPath: &#x2F;calico-secrets              name: etcd-certs          readinessProbe:            exec:              command:              - &#x2F;usr&#x2F;bin&#x2F;check-status              - -r      volumes:        # Mount in the etcd TLS secrets with mode 400.        # See https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;        - name: etcd-certs          secret:            secretName: calico-etcd-secrets            defaultMode: 0400---apiVersion: v1kind: ServiceAccountmetadata:  name: calico-kube-controllers  namespace: kube-system---# Source: calico&#x2F;templates&#x2F;calico-typha.yaml---# Source: calico&#x2F;templates&#x2F;configure-canal.yaml---# Source: calico&#x2F;templates&#x2F;kdd-crds.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><h3 id="1-在calico-etcd-yaml指定etcd数据库的连接地址"><a href="#1-在calico-etcd-yaml指定etcd数据库的连接地址" class="headerlink" title="1.在calico-etcd.yaml指定etcd数据库的连接地址"></a>1.在calico-etcd.yaml指定etcd数据库的连接地址</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sed -i &#39;s#etcd_endpoints: &quot;http:&#x2F;&#x2F;&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;#etcd_endpoints: &quot;https:&#x2F;&#x2F;192.168.137.130:2379&quot;#g&#39; calico-etcd.yaml#注意：命令后面的IP地址为master的IP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-指定连接etcd数据库使用的证书信息"><a href="#2-指定连接etcd数据库使用的证书信息" class="headerlink" title="2.指定连接etcd数据库使用的证书信息"></a>2.指定连接etcd数据库使用的证书信息</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# ETCD_CA&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;ca.crt | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master ~]# ETCD_CERT&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.crt | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master ~]# ETCD_KEY&#x3D;&#96;cat &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;etcd&#x2F;server.key | base64 | tr -d &#39;\n&#39;&#96;[root@k8s-master ~]# sed -i &quot;s@# etcd-key: null@etcd-key: $&#123;ETCD_KEY&#125;@g; s@# etcd-cert: null@etcd-cert: $&#123;ETCD_CERT&#125;@g; s@# etcd-ca: null@etcd-ca: $&#123;ETCD_CA&#125;@g&quot; calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# sed -i &#39;s#etcd_ca: &quot;&quot;#etcd_ca: &quot;&#x2F;calico-secrets&#x2F;etcd-ca&quot;#g; s#etcd_cert: &quot;&quot;#etcd_cert: &quot;&#x2F;calico-secrets&#x2F;etcd-cert&quot;#g; s#etcd_key: &quot;&quot; #etcd_key: &quot;&#x2F;calico-secrets&#x2F;etcd-key&quot; #g&#39; calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-指定通信的网段"><a href="#3-指定通信的网段" class="headerlink" title="3.指定通信的网段"></a>3.指定通信的网段</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# vim calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">346             # no effect. This should fall within &#96;--cluster-cidr&#96;.347             - name: CALICO_IPV4POOL_CIDR#把这里的注释删掉，并且和下面的对齐348               value: &quot;192.168.0.0&#x2F;16&quot;#把这里的注释删掉，并且和下面的对齐349             # Disable file logging so &#96;kubectl logs&#96; works.350             - name: CALICO_DISABLE_FILE_LOGGING351               value: &quot;true&quot;352             # Set Felix endpoint to host default action to ACCEPT.353             - name: FELIX_DEFAULTENDPOINTTOHOSTACTION354               value: &quot;ACCEPT&quot;355             # Disable IPv6 on Kubernetes.356             - name: FELIX_IPV6SUPPORT357               value: &quot;false&quot;358             # Set Felix logging to &quot;info&quot;359             - name: FELIX_LOGSEVERITYSCREEN360               value: &quot;info&quot;361             - name: FELIX_HEALTHENABLED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-部署calico网络"><a href="#4-部署calico网络" class="headerlink" title="4.部署calico网络"></a>4.部署calico网络</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl create -f calico-etcd.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get pods -A -o wideNAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE    IP               NODE                   NOMINATED NODE   READINESS GATESkube-system   calico-kube-controllers-5f6d4b864b-sv9kc   1&#x2F;1     Running   0          10m    192.168.137.130  k8s-master01           &lt;none&gt;           &lt;none&gt;kube-system   calico-node-bcsxg                          1&#x2F;1     Running   0          10m    192.168.137.129   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   calico-node-g6k4d                          1&#x2F;1     Running   0          10m    192.168.137.128   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;kube-system   calico-node-wp8hj                          1&#x2F;1     Running   0          10m    192.168.137.130   k8s-master01           &lt;none&gt;           &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-再次查看集群节点的状态"><a href="#5-再次查看集群节点的状态" class="headerlink" title="5.再次查看集群节点的状态"></a>5.再次查看集群节点的状态</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl get nodesNAME                   STATUS   ROLES                  AGE    VERSIONk8s-master01           Ready    control-plane,master   130m   v1.20.7k8s-node01.linux.com   Ready    &lt;none&gt;                 124m   v1.20.7k8s-node02.linux.com   Ready    &lt;none&gt;                 123m   v1.20.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、安装metric插件"><a href="#十一、安装metric插件" class="headerlink" title="十一、安装metric插件"></a>十一、安装metric插件</h2><ul><li>搜集、监控node节点CPU、内存使用情况</li></ul><h3 id="1-将front-proxy-ca-crt证书拷贝到所有node节点"><a href="#1-将front-proxy-ca-crt证书拷贝到所有node节点" class="headerlink" title="1.将front-proxy-ca.crt证书拷贝到所有node节点"></a>1.将front-proxy-ca.crt证书拷贝到所有node节点</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt root@192.168.137.129:&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt#拷贝到node1节点front-proxy-ca.crt                                                                                                                       100% 1078   754.4KB&#x2F;s   00:00    [root@k8s-master ~]# scp &#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt root@192.168.137.128:&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt#拷贝到node2节点front-proxy-ca.crt  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-部署Metric插件"><a href="#2-部署Metric插件" class="headerlink" title="2.部署Metric插件"></a>2.部署Metric插件</h3><pre class="line-numbers language-none"><code class="language-none">vim comp.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制以下内容</p><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: ServiceAccountmetadata:  labels:    k8s-app: metrics-server  name: metrics-server  namespace: kube-system---apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRolemetadata:  labels:    k8s-app: metrics-server    rbac.authorization.k8s.io&#x2F;aggregate-to-admin: &quot;true&quot;    rbac.authorization.k8s.io&#x2F;aggregate-to-edit: &quot;true&quot;    rbac.authorization.k8s.io&#x2F;aggregate-to-view: &quot;true&quot;  name: system:aggregated-metrics-readerrules:  - apiGroups:      - metrics.k8s.io    resources:      - pods      - nodes    verbs:      - get      - list      - watch---apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRolemetadata:  labels:    k8s-app: metrics-server  name: system:metrics-serverrules:  - apiGroups:      - &quot;&quot;    resources:      - pods      - nodes      - nodes&#x2F;stats      - namespaces      - configmaps    verbs:      - get      - list      - watch---apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: RoleBindingmetadata:  labels:    k8s-app: metrics-server  name: metrics-server-auth-reader  namespace: kube-systemroleRef:  apiGroup: rbac.authorization.k8s.io  kind: Role  name: extension-apiserver-authentication-readersubjects:  - kind: ServiceAccount    name: metrics-server    namespace: kube-system---apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRoleBindingmetadata:  labels:    k8s-app: metrics-server  name: metrics-server:system:auth-delegatorroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:auth-delegatorsubjects:  - kind: ServiceAccount    name: metrics-server    namespace: kube-system---apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRoleBindingmetadata:  labels:    k8s-app: metrics-server  name: system:metrics-serverroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: system:metrics-serversubjects:  - kind: ServiceAccount    name: metrics-server    namespace: kube-system---apiVersion: v1kind: Servicemetadata:  labels:    k8s-app: metrics-server  name: metrics-server  namespace: kube-systemspec:  ports:    - name: https      port: 443      protocol: TCP      targetPort: https  selector:    k8s-app: metrics-server---apiVersion: apps&#x2F;v1kind: Deploymentmetadata:  labels:    k8s-app: metrics-server  name: metrics-server  namespace: kube-systemspec:  selector:    matchLabels:      k8s-app: metrics-server  strategy:    rollingUpdate:      maxUnavailable: 0  template:    metadata:      labels:        k8s-app: metrics-server    spec:      containers:        - args:            - --cert-dir&#x3D;&#x2F;tmp            - --secure-port&#x3D;4443            - --metric-resolution&#x3D;30s            - --kubelet-insecure-tls            - --kubelet-preferred-address-types&#x3D;InternalIP,ExternalIP,Hostname            - --requestheader-client-ca-file&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;pki&#x2F;front-proxy-ca.crt # change to front-proxy-ca.crt for kubeadm            - --requestheader-username-headers&#x3D;X-Remote-User            - --requestheader-group-headers&#x3D;X-Remote-Group            - --requestheader-extra-headers-prefix&#x3D;X-Remote-Extra-          image: registry.cn-beijing.aliyuncs.com&#x2F;dotbalo&#x2F;metrics-server:v0.4.1          imagePullPolicy: IfNotPresent          livenessProbe:            failureThreshold: 3            httpGet:              path: &#x2F;livez              port: https              scheme: HTTPS            periodSeconds: 10          name: metrics-server          ports:            - containerPort: 4443              name: https              protocol: TCP          readinessProbe:            failureThreshold: 3            httpGet:              path: &#x2F;readyz              port: https              scheme: HTTPS            periodSeconds: 10          securityContext:            readOnlyRootFilesystem: true            runAsNonRoot: true            runAsUser: 1000          volumeMounts:            - mountPath: &#x2F;tmp              name: tmp-dir            - name: ca-ssl              mountPath: &#x2F;etc&#x2F;kubernetes&#x2F;pki      nodeSelector:        kubernetes.io&#x2F;os: linux      priorityClassName: system-cluster-critical      serviceAccountName: metrics-server      volumes:        - emptyDir: &#123;&#125;          name: tmp-dir        - name: ca-ssl          hostPath:            path: &#x2F;etc&#x2F;kubernetes&#x2F;pki---apiVersion: apiregistration.k8s.io&#x2F;v1kind: APIServicemetadata:  labels:    k8s-app: metrics-server  name: v1beta1.metrics.k8s.iospec:  group: metrics.k8s.io  groupPriorityMinimum: 100  insecureSkipTLSVerify: true  service:    name: metrics-server    namespace: kube-system  version: v1beta1  versionPriority: 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq保存</p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl create -f comp.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-测试Metric插件"><a href="#3-测试Metric插件" class="headerlink" title="3.测试Metric插件"></a>3.测试Metric插件</h3><p>可以等待1分钟左右再测试</p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# kubectl top nodes NAME                   CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%     k8s-node02.linux.com   154m         3%     834Mi           22%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="十二、部署dashboard插件"><a href="#十二、部署dashboard插件" class="headerlink" title="十二、部署dashboard插件"></a>十二、部署dashboard插件</h2><ul><li>提供web UI界面</li></ul><p>涉及到的包<a href="https://wangshengjj.work/s/wRSz">下载链接</a></p><h3 id="1-部署dashboard"><a href="#1-部署dashboard" class="headerlink" title="1.部署dashboard"></a>1.部署dashboard</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master ~]# cd dashboard&#x2F;#网盘提供下载[root@k8s-master dashboard]# kubectl create -f .&#x2F;#里面有2个yaml格式的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-将dashboard服务类型修改为nodePort-默认ClusterIP模式，其他机器不能访问"><a href="#2-将dashboard服务类型修改为nodePort-默认ClusterIP模式，其他机器不能访问" class="headerlink" title="2.将dashboard服务类型修改为nodePort(默认ClusterIP模式，其他机器不能访问)"></a>2.将dashboard服务类型修改为nodePort(默认ClusterIP模式，其他机器不能访问)</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"> 1 # Please edit the object below. Lines beginning with a &#39;#&#39; will be ignored, 2 # and an empty file will abort the edit. If an error occurs while saving this file         will be 3 # reopened with the relevant failures. 4 # 5 apiVersion: v1 6 kind: Service 7 metadata: 8   creationTimestamp: &quot;2022-11-20T07:28:30Z&quot; 9   labels:10     k8s-app: kubernetes-dashboard11   name: kubernetes-dashboard12   namespace: kubernetes-dashboard13   resourceVersion: &quot;6565&quot;14   uid: de981c75-46e1-4721-b633-f64e2d7511f215 spec:16   clusterIP: 172.16.63.5417   clusterIPs:18   - 172.16.63.54 19   externalTrafficPolicy: Cluster20   ports:21   - nodePort: 3107722     port: 44323     protocol: TCP24     targetPort: 844325   selector:26     k8s-app: kubernetes-dashboard27   sessionAffinity: None28   type: NodePort#把这里默认的ClusterIP改成NodePort29 status: 30   loadBalancer: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-验证修改结果"><a href="#3-验证修改结果" class="headerlink" title="3.验证修改结果"></a>3.验证修改结果</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl get service -n kubernetes-dashboardNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGEdashboard-metrics-scraper   ClusterIP   172.16.188.225   &lt;none&gt;        8000&#x2F;TCP        8m44skubernetes-dashboard        NodePort    172.16.1.18      &lt;none&gt;        443:32205&#x2F;TCP   8m45s#注意这里端口443映射到了32205端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查看dashboard容器运行的主机"><a href="#4-查看dashboard容器运行的主机" class="headerlink" title="4.查看dashboard容器运行的主机"></a>4.查看dashboard容器运行的主机</h3><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl get pods -n kubernetes-dashboard -o wide NAME                                         READY   STATUS    RESTARTS   AGE   IP                NODE                   NOMINATED NODE   READINESS GATESdashboard-metrics-scraper-7645f69d8c-hxz8n   1&#x2F;1     Running   0          11m   192.168.242.130   k8s-node02.linux.com   &lt;none&gt;           &lt;none&gt;kubernetes-dashboard-78cb679857-8hdnc        1&#x2F;1     Running   0          11m   192.168.201.193   k8s-node01.linux.com   &lt;none&gt;           &lt;none&gt;#通过这里我们知道了dashboard服务跑在了node1机器上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器访问node1的IP+32205端口即可访问：<a href="https://192.168.137.129:32205/">https://192.168.137.129:32205</a>#每个人的IP不一样仅供参考</p><h3 id="5-获取token令牌，登录dashboard"><a href="#5-获取token令牌，登录dashboard" class="headerlink" title="5.获取token令牌，登录dashboard"></a>5.获取token令牌，登录dashboard</h3><p><img src="https://www.wangshengjj.work/upload/2022/11/k8s1.png" alt="k8s1"></p><pre class="line-numbers language-none"><code class="language-none">[root@k8s-master dashboard]# kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &#39;&#123;print $1&#125;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Name:         admin-user-token-crx2fNamespace:    kube-systemLabels:       &lt;none&gt;Annotations:  kubernetes.io&#x2F;service-account.name: admin-user              kubernetes.io&#x2F;service-account.uid: 289b1d24-93ec-4af0-abdc-99d51dafa133Type:  kubernetes.io&#x2F;service-account-tokenData&#x3D;&#x3D;&#x3D;&#x3D;namespace:  11 bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IlBUNDdadjNDQ3hPbWZ1enlNMGZCU09SNlpZOW9GdkIxckI1LWdWclIwUTgifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWNyeDJmIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyODliMWQyNC05M2VjLTRhZjAtYWJkYy05OWQ1MWRhZmExMzMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.FuU7y1LTqlEMSLFMkilOS2-9Q6uaoSYSvn7hr2aS4vGN5CvIeXbWRr-SJKmMTsDGr3ZfQcPc06ixFN1IafSAXZ0Ao6V6dPpuY37DmJ4Uv8Kvinrg1gRZeVSjpeFsTa9cXWod6tDDI7zxEF7byimkGTwXPjgGui2eRwFObu7UzdhAyNZMbALhKM3ot36Acbt8kQoZgkPeZLrbsuy--Qd1tdUH3rirvNEI9v_YDUYx_o5NxMM5OHvrtWConVtenRBYmIllsV4gx_-KQHFwWvx8IAtV4fQFMp5E-hcjOcxhIXkjnUPzr1BlhV68H7yZF2YYkama4y7EKPI6E1hlBYPcHA#上面的token是我们需要复制到浏览器的！ca.crt:     1066 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-登录成功"><a href="#6-登录成功" class="headerlink" title="6.登录成功"></a>6.登录成功</h3><p>把刚刚获取到的token复制进去即可</p><p><img src="https://www.wangshengjj.work/upload/2022/11/k8s2.png" alt="k8s2"></p><p>教程未完结，等待补充……</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
          <category> 虚拟机 </category>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装配置Ansible教程</title>
      <link href="/2022/11/09/22/"/>
      <url>/2022/11/09/22/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7安装配置Ansible教程"><a href="#Centos7安装配置Ansible教程" class="headerlink" title="Centos7安装配置Ansible教程"></a>Centos7安装配置Ansible教程</h1><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</strong></p><p>关于Ansible介绍：ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。Ansible架构相对比较简单，仅需通过SSH连接客户机执行任务即可。</p><h2 id="一、安装并配置虚拟机"><a href="#一、安装并配置虚拟机" class="headerlink" title="一、安装并配置虚拟机"></a>一、安装并配置虚拟机</h2><p>1.关闭防火墙并且设置开机不自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld &amp;&amp; systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.关闭selinux</p><pre class="line-numbers language-none"><code class="language-none">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.重启</p><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、设置阿里源"><a href="#二、设置阿里源" class="headerlink" title="二、设置阿里源"></a>二、设置阿里源</h2><p>请提前启动网卡！</p><p><strong>1.查看网卡信息和ip地址</strong></p><pre class="line-numbers language-none"><code class="language-none">ip addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列：网卡名字是ens33</p><p><strong>启动网卡</strong></p><pre class="line-numbers language-none"><code class="language-none">ifup ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yum源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>epel源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.清理yum源缓存</strong></p><pre class="line-numbers language-none"><code class="language-none">yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、配置Ansible"><a href="#三、配置Ansible" class="headerlink" title="三、配置Ansible"></a>三、配置Ansible</h2><p><strong>1.安装Ansible</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install -y ansible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.关于Ansible配置文件</strong></p><p>可使用 –version参数查看具体信息</p><pre class="line-numbers language-none"><code class="language-none">ansible --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# ansible --versionansible 2.9.27#版本信息  config file &#x3D; &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg#当前正在使用的配置文件具体位置  configured module search path &#x3D; [u&#39;&#x2F;root&#x2F;.ansible&#x2F;plugins&#x2F;modules&#39;, u&#39;&#x2F;usr&#x2F;share&#x2F;ansible&#x2F;plugins&#x2F;modules&#39;]  ansible python module location &#x3D; &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ansible  executable location &#x3D; &#x2F;usr&#x2F;bin&#x2F;ansible  python version &#x3D; 2.7.5 (default, Aug  4 2017, 00:39:18) [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ~]# rpm -qc ansible&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg#Ansible的配置文件&#x2F;etc&#x2F;ansible&#x2F;hosts#Ansible的清单文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3.配置用户配置文件，并且连接客户机</strong></p><p>以root用户根目录为例</p><pre class="line-numbers language-none"><code class="language-none">mkdir ansible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制配置文件</p><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;etc&#x2F;ansible&#x2F;ansible.cfg &#x2F;root&#x2F;ansible&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和配置文件建立链接</p><pre class="line-numbers language-none"><code class="language-none">ansible --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@server ansible]# ansible --versionansible 2.9.27  config file &#x3D; &#x2F;root&#x2F;ansible&#x2F;ansible.cfg#这里配置文件目录为当前目录下  configured module search path &#x3D; [u&#39;&#x2F;root&#x2F;.ansible&#x2F;plugins&#x2F;modules&#39;, u&#39;&#x2F;usr&#x2F;share&#x2F;ansible&#x2F;plugins&#x2F;modules&#39;]  ansible python module location &#x3D; &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ansible  executable location &#x3D; &#x2F;usr&#x2F;bin&#x2F;ansible  python version &#x3D; 2.7.5 (default, Aug  4 2017, 00:39:18) [GCC 4.8.5 20150623 (Red Hat 4.8.5-16)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改配置文件</p><pre class="line-numbers language-none"><code class="language-none">vim ansible.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">inventory&#x3D; &#x2F;root&#x2F;ansible&#x2F;hosts#指定清单路径remote_user&#x3D; root#指定远程用户为roothost_key_checking&#x3D; false#远程免除yes:wq保存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.链接客户机</strong></p><p>配置hosts</p><pre class="line-numbers language-none"><code class="language-none">hostnamectl set-hostname server.example.com#server.example.com为自定义域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.3.117 server.example.com server#添加服务器 IP地址请更换你的192.168.3.31 node1.example.com node1#添加客户机 IP地址请更换你的:wq保存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制hosts文件到客户机</p><pre class="line-numbers language-none"><code class="language-none">scp &#x2F;etc&#x2F;hosts root@192.168.3.31:&#x2F;etc&#x2F;hosts #IP地址请更换成你的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试能不能ping通</p><pre class="line-numbers language-none"><code class="language-none">ping node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>在当前目录下创建一个清单</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;root&#x2F;ansible&#x2F;hosts #清单名字为hosts，和ansible.cfg配置文件内一样<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[dev]#主机群组node1#主机名[all:vars]ansible_password&#x3D;centos#配置密码:wq保存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随便测试一个</p><pre class="line-numbers language-none"><code class="language-none">ansible node1 -m command -a &#39;hostname&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果(测试成功)</p><pre class="line-numbers language-none"><code class="language-none">[root@server ansible]# ansible node1 -m command -a &#39;hostname&#39;node1 | CHANGED | rc&#x3D;0 &gt;&gt;node1.example.com#node1的域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="五、拓展"><a href="#五、拓展" class="headerlink" title="五、拓展"></a>五、拓展</h2><p><strong>1.关于模块帮助</strong></p><pre class="line-numbers language-none"><code class="language-none">ansible-doc 模块名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>教程未完结，等待补充……</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> ansible </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装并配置Zabbix Proxy端</title>
      <link href="/2022/11/04/21/"/>
      <url>/2022/11/04/21/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7安装并配置Zabbix-Proxy端"><a href="#Centos7安装并配置Zabbix-Proxy端" class="headerlink" title="Centos7安装并配置Zabbix Proxy端"></a>Centos7安装并配置Zabbix Proxy端</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除或评论，我将会在24h内删除</p><p>本教程为安装Zabbix系列教程第三期，如果您还没有搭建，请看第一期和第二期教程教程！</p><p>第一期教程：<a href="https://www.wangshengjj.work/archives/18">Centos7安装并配置Zabbix Server端</a></p><p>第二期教程：<a href="https://www.wangshengjj.work/archives/19">Centos7安装并配置Zabbix Agent端</a></p><p>本教程需要第三台虚拟机，请自行准备第三台虚拟机！</p><h2 id="一、安装并配置虚拟机-第三台虚拟机"><a href="#一、安装并配置虚拟机-第三台虚拟机" class="headerlink" title="一、安装并配置虚拟机(第三台虚拟机)"></a>一、安装并配置虚拟机(第三台虚拟机)</h2><p>1.关闭防火墙并且设置开机不自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld &amp;&amp; systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.关闭selinux</p><pre class="line-numbers language-none"><code class="language-none">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.重启</p><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、设置阿里源"><a href="#二、设置阿里源" class="headerlink" title="二、设置阿里源"></a>二、设置阿里源</h2><p>请提前启动网卡！</p><p><strong>查看网卡信息和ip地址</strong></p><pre class="line-numbers language-none"><code class="language-none">ip addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列：网卡名字是ens33</p><p><strong>启动网卡</strong></p><pre class="line-numbers language-none"><code class="language-none">ifup ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yum源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>epel源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、安装并且配置zabbix"><a href="#三、安装并且配置zabbix" class="headerlink" title="三、安装并且配置zabbix"></a>三、安装并且配置zabbix</h2><p><strong>1.安装zabbix rpm源（官方源）</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -Uvh https:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.0-1.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装zabbix rpm源（阿里源）【上面下载慢用这个】</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -Uvh https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;zabbix&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.0-1.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.清理yum源缓存</strong></p><pre class="line-numbers language-none"><code class="language-none">yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.安装zabbix proxy端</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install -y zabbix-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.安装并配置mysql</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install -y mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置开启自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable --now mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建并设置库（设置默认密码为password）</p><pre class="line-numbers language-none"><code class="language-none">mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">create database zabbix_proxy character set utf8 collate utf8_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">create user zabbix@localhost identified by &#39;password&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">grant all privileges on zabbix.* to zabbix@localhost;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">quit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>导入初始架构和数据</strong></p><pre class="line-numbers language-none"><code class="language-none">zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-proxy-mysql*&#x2F;schema.sql.gz | mysql -uzabbix -ppassword zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.编辑配置文件 &#x2F;etc&#x2F;zabbix&#x2F;zabbix_proxy.conf</strong></p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;zabbix&#x2F;zabbix_proxy.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">请自行找到并更改以下字段Server&#x3D;127.0.0.1#把127.0.0.1改成服务器IP [server端]Hostname&#x3D;zabbix proxy#把zabbix server改成本机IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">搜索： &#x2F;DBPDBPassword&#x3D;password  #删除注释，并且输入刚才设置的密码“默认为password”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>6.重启zabbix-proxy服务</strong></p><pre class="line-numbers language-none"><code class="language-none">systemctl restart zabbix-proxy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>7.设置开机自启</strong></p><pre class="line-numbers language-none"><code class="language-none">systemctl enable zabbix-proxy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、在Server端添加Proxy"><a href="#四、在Server端添加Proxy" class="headerlink" title="四、在Server端添加Proxy"></a>四、在Server端添加Proxy</h2><p><img src="https://www.wangshengjj.work/upload/2022/11/zb10.png" alt="zb10"></p><p><img src="https://www.wangshengjj.work/upload/2022/11/zb11.png" alt="zb11"></p><p><img src="https://www.wangshengjj.work/upload/2022/11/zb12.png" alt="zb12"></p><p><img src="https://www.wangshengjj.work/upload/2022/11/zb13.png" alt="zb13"></p><p><img src="https://www.wangshengjj.work/upload/2022/11/zb14.png" alt="zb14"></p><p><img src="https://www.wangshengjj.work/upload/2022/11/zb15.png" alt="zb15"></p><p><strong>如果长时间未能亮起，请尝试重启proxy端服务</strong></p><pre class="line-numbers language-none"><code class="language-none">systemctl restart zabbix-proxy.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>教程未完结，等待补充……</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> centos </tag>
            
            <tag> zabbix </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装并配置Zabbix Agent端</title>
      <link href="/2022/10/26/19/"/>
      <url>/2022/10/26/19/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7安装并配置Zabbix-Agent端"><a href="#Centos7安装并配置Zabbix-Agent端" class="headerlink" title="Centos7安装并配置Zabbix Agent端"></a>Centos7安装并配置Zabbix Agent端</h1><p>本教程为<a href="https://www.wangshengjj.work/archives/18">Centos7安装并配置Zabbix Server端</a>后续教程，如果您还没有搭建，请看第一期教程</p><p>本教程需要第二台虚拟机配置agent端，请自行准备！</p><p>第一期教程：<a href="https://www.wangshengjj.work/archives/18">Centos7安装并配置Zabbix Server端</a></p><p>第三期教程：<a href="https://www.wangshengjj.work/archives/21">Centos7安装并配置Zabbix Proxy端</a></p><h2 id="一、关闭防火墙和selinux-第二台虚拟机"><a href="#一、关闭防火墙和selinux-第二台虚拟机" class="headerlink" title="一、关闭防火墙和selinux(第二台虚拟机)"></a>一、关闭防火墙和selinux(第二台虚拟机)</h2><p>1.关闭防火墙并且设置开机不自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld &amp;&amp; systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.关闭selinux</p><pre class="line-numbers language-none"><code class="language-none">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.重启</p><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、设置阿里源"><a href="#二、设置阿里源" class="headerlink" title="二、设置阿里源"></a>二、设置阿里源</h2><p>请提前启动网卡！</p><p><strong>查看网卡信息和ip地址</strong></p><pre class="line-numbers language-none"><code class="language-none">ip addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列：网卡名字是ens33</p><p><strong>启动网卡</strong></p><pre class="line-numbers language-none"><code class="language-none">ifup ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yum源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>epel源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、安装并且配置zabbix"><a href="#三、安装并且配置zabbix" class="headerlink" title="三、安装并且配置zabbix"></a>三、安装并且配置zabbix</h2><p><strong>1.安装zabbix rpm源（官方源）</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -Uvh https:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.0-1.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装zabbix rpm源（阿里源）【上面下载慢用这个】</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -Uvh https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;zabbix&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.0-1.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.清理yum源缓存</strong></p><pre class="line-numbers language-none"><code class="language-none">yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.安装zabbix agent2</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install -y zabbix-agent2.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.修改配置文件&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agent2.conf</strong></p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agent2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">请自行找到并更改以下字段Server&#x3D;127.0.0.1#把127.0.0.1改成服务器IP [server端]ServerActive&#x3D;127.0.0.1#把127.0.0.1改成服务器IP [server端]Hostname&#x3D;zabbix server#把zabbix server改成本机IPUnsafeUserParameters&#x3D;0#把0改成1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.重启并设置开机自启</strong></p><pre class="line-numbers language-none"><code class="language-none">systemctl restart  zabbix-agent2.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl enable  zabbix-agent2.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、在server端添加并且监控agent端"><a href="#四、在server端添加并且监控agent端" class="headerlink" title="四、在server端添加并且监控agent端"></a>四、在server端添加并且监控agent端</h2><p><strong>打开浏览器访问服务器地址（ip+&#x2F;zabbix）</strong></p><p><strong>1.添加主机组</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb1.png" alt="zb1"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb2.png" alt="zb2"></p><p><strong>2.添加主机(想监控其他请自行更改参数)</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb3.png" alt="zb3"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb4.png" alt="zb4"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb5.png" alt="zb5"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb6.png" alt="zb6"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb7.png" alt="zb7"></p><p>以上即可完成添加</p><p><strong>3.查看添加的agent端</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb8.png" alt="zb8"></p><p><strong>只要那个图标亮了，就证明我们配置没有问题</strong></p><p>感谢观看！<br>教程未完结，等待更新…..</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 技术 </category>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> zabbix </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装并配置Zabbix Server端</title>
      <link href="/2022/10/26/18/"/>
      <url>/2022/10/26/18/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7安装并配置Zabbix5-0-Server端"><a href="#Centos7安装并配置Zabbix5-0-Server端" class="headerlink" title="Centos7安装并配置Zabbix5.0 Server端"></a>Centos7安装并配置Zabbix5.0 Server端</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除或评论，我将会在24h内删除</p><p>第二期教程：<a href="https://www.wangshengjj.work/archives/19">Centos7配置Zabbix Agent端</a></p><p>第三期教程：<a href="https://www.wangshengjj.work/archives/21">Centos7安装并配置Zabbix Proxy端</a></p><h3 id="关于zabbix介绍："><a href="#关于zabbix介绍：" class="headerlink" title="关于zabbix介绍："></a>关于zabbix介绍：</h3><p><strong>Zabbix 是一种企业级的分布式开源监控解决方案。</strong></p><p><strong>Zabbix 是一款能够监控众多网络参数和服务器的健康度和完整性的软件。Zabbix 使用灵活的通知机制，允许用户为几乎任何事件配置基于邮件的警报。这样可以快速相应服务器问题。Zabbix 基于存储的数据提供出色的报告和数据可视化。这些功能使得 Zabbix 成为容量规划的理想选择。</strong></p><h2 id="一、关闭防火墙和selinux"><a href="#一、关闭防火墙和selinux" class="headerlink" title="一、关闭防火墙和selinux"></a>一、关闭防火墙和selinux</h2><p>1.关闭防火墙并且设置开机不自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld &amp;&amp; systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.关闭selinux</p><pre class="line-numbers language-none"><code class="language-none">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.重启</p><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、设置阿里源"><a href="#二、设置阿里源" class="headerlink" title="二、设置阿里源"></a>二、设置阿里源</h2><p>请提前启动网卡！</p><p><strong>查看网卡信息和ip地址</strong></p><pre class="line-numbers language-none"><code class="language-none">ip addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列：网卡名字是ens33</p><p><strong>启动网卡</strong></p><pre class="line-numbers language-none"><code class="language-none">ifup ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yum源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>epel源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、安装并且配置zabbix"><a href="#三、安装并且配置zabbix" class="headerlink" title="三、安装并且配置zabbix"></a>三、安装并且配置zabbix</h2><p><strong>1.安装zabbix rpm源（官方源）</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -Uvh https:&#x2F;&#x2F;repo.zabbix.com&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.0-1.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装zabbix rpm源（阿里源）【上面下载慢用这个】</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -Uvh https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;zabbix&#x2F;zabbix&#x2F;5.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-release-5.0-1.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.清理yum源缓存</strong></p><pre class="line-numbers language-none"><code class="language-none">yum clean all &amp;&amp; yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3.安装zabbix server,Web端，agent</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install zabbix-server-mysql zabbix-agent -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4.安装 zabbix frontend</strong></p><pre class="line-numbers language-none"><code class="language-none">yum-config-manager --enable rhel-server-rhscl-7-rpms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.编辑配置文件 &#x2F;etc&#x2F;yum.repos.d&#x2F;zabbix.repo</strong></p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;yum.repos.d&#x2F;zabbix.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">找到下面字段[zabbix-frontend]...enabled&#x3D;1#把这里的0改成1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.安装zabbix必要组件，使用Apache服务器</strong></p><pre class="line-numbers language-none"><code class="language-none">yum install centos-release-scl-rh -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum install zabbix-web-mysql-scl zabbix-apache-conf-scl -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四-安装并配置mysql"><a href="#四-安装并配置mysql" class="headerlink" title="四.安装并配置mysql"></a>四.安装并配置mysql</h2><pre class="line-numbers language-none"><code class="language-none">yum install -y mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置开机启动</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable --now mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建并设置库（设置默认密码为password）</p><pre class="line-numbers language-none"><code class="language-none">mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">create database zabbix character set utf8 collate utf8_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">create user zabbix@localhost identified by &#39;password&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">grant all privileges on zabbix.* to zabbix@localhost;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">quit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>导入初始架构和数据，系统将提示您输入新创建的密码</strong></p><pre class="line-numbers language-none"><code class="language-none">zcat &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zabbix-server-mysql*&#x2F;create.sql.gz | mysql -uzabbix -ppassword zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-为Zabbix-server配置数据库"><a href="#1-为Zabbix-server配置数据库" class="headerlink" title="1.为Zabbix server配置数据库"></a><strong>1.为Zabbix server配置数据库</strong></h4><p><strong>编辑配置文件 &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</strong></p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">搜索： &#x2F;DBPDBPassword&#x3D;password  #删除注释，并且输入刚才设置的密码“默认为password”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、为zabbix配置PHP"><a href="#五、为zabbix配置PHP" class="headerlink" title="五、为zabbix配置PHP"></a>五、为zabbix配置PHP</h2><p><strong>编辑配置文件 &#x2F;etc&#x2F;opt&#x2F;rh&#x2F;rh-php72&#x2F;php-fpm.d&#x2F;zabbix.conf</strong></p><pre class="line-numbers language-none"><code class="language-none">vi  &#x2F;etc&#x2F;opt&#x2F;rh&#x2F;rh-php72&#x2F;php-fpm.d&#x2F;zabbix.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">找到下面字段; php_value[date.timezone] &#x3D; Europe&#x2F;Riga    #发现有带；分号的注释行php_value[date.timezone] &#x3D; Asia&#x2F;Shanghai#修改时区为上海<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>安装中文依赖（防止字体乱码）</strong></p><pre class="line-numbers language-none"><code class="language-none">yum -y install wqy-microhei-fonts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;wqy-microhei&#x2F;wqy-microhei.ttc &#x2F;usr&#x2F;share&#x2F;fonts&#x2F;dejavu&#x2F;DejaVuSans.ttf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、启动zabbix并且配置开机自启"><a href="#六、启动zabbix并且配置开机自启" class="headerlink" title="六、启动zabbix并且配置开机自启"></a>六、启动zabbix并且配置开机自启</h2><pre class="line-numbers language-none"><code class="language-none">systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl enable zabbix-server zabbix-agent httpd rh-php72-php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成</p><p><strong>浏览器访问 电脑IP+&#x2F;zabbix 进入配置界面</strong></p><p>列：电脑IP为127.0.0.1  访问<a href="http://127.0.0.1/zabbix%E5%8D%B3%E5%8F%AF">http://127.0.0.1/zabbix即可</a></p><pre class="line-numbers language-none"><code class="language-none">数据可默认账号：zabbix数据库默认密码：password管理员账号：Admin默认密码：zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、拓展"><a href="#七、拓展" class="headerlink" title="七、拓展"></a>七、拓展</h2><p><strong>1.设置中文</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/zb9.png" alt="zb9"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> centos </tag>
            
            <tag> zabbix </tag>
            
            <tag> 技术 </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装并配置虚拟机教程</title>
      <link href="/2022/10/25/17/"/>
      <url>/2022/10/25/17/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装并配置虚拟机教程"><a href="#安装并配置虚拟机教程" class="headerlink" title="安装并配置虚拟机教程"></a>安装并配置虚拟机教程</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</p><p>写在前面：本教程包含Vmware的安装，centos的安装，以及centos关闭防火墙配置，配置yum源和epel源</p><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><p>用到的文件</p><ul><li>VMware 16</li><li>Centos7的镜像</li></ul><p>如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm1.png" alt="vm1"></p><h2 id="二、安装VMware"><a href="#二、安装VMware" class="headerlink" title="二、安装VMware"></a>二、安装VMware</h2><p>我们下载解压后，如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm2.png" alt="vm2"></p><p><strong>第一步：安装VMware-workstation-full-16.x.x.x</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm3.png" alt="vm3"></p><p>安装过程省略</p><p><strong>第二步：配置许可证</strong></p><p>如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm4.png" alt="vm4"></p><p>我们把文件内提供的激活码复制进去即可</p><pre class="line-numbers language-none"><code class="language-none">ZF3R0-FHED2-M80TY-8QYGC-NPKYF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm5.png" alt="vm5"></p><p>点击“完成”即可完成安装</p><h2 id="三、创建Centos虚拟机"><a href="#三、创建Centos虚拟机" class="headerlink" title="三、创建Centos虚拟机"></a>三、创建Centos虚拟机</h2><p><strong>第一步：提前创建好文件</strong></p><p>我们在D盘或者E盘，创建一个文件夹(我这里拿D盘做演示)</p><p>注意：需要提前把镜像文件，复制到这个文件夹内</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm6.png" alt="vm6"></p><p><strong>第二步：创建一个虚拟机</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm7.png" alt="vm7"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm8.png" alt="vm8"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm9.png" alt="vm9"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm10.png" alt="vm10"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm11.png" alt="vm11"></p><p><strong>剩下的步骤跳过，默认下一步即可</strong></p><p>这是我们配置好的虚拟机，点击完成即可</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm12.png" alt="vm12"></p><p><strong>第三步：指定镜像位置</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm13.png" alt="vm13"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm14.png" alt="vm14"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm15.png" alt="vm15"></p><p>准备安装centos7系统</p><p>点击“开启此虚拟机”</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm16.png" alt="vm16"></p><h2 id="四、安装Centos系统"><a href="#四、安装Centos系统" class="headerlink" title="四、安装Centos系统"></a>四、安装Centos系统</h2><p><strong>第一步：安装系统</strong></p><p>使用小键盘的上下左右键，可以移动光标</p><p>选择第一个 安装centos7</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm17.png" alt="vm17"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm18.png" alt="vm18"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm19.png" alt="vm19"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm20.png" alt="vm20"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm21.png" alt="vm21"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm22.png" alt="vm22"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm23.png" alt="vm23"></p><p><strong>第二步：配置root密码</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm24.png" alt="vm24"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm25.png" alt="vm25"></p><p>配置完，如下图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm26.png" alt="vm26"></p><p>等待系统安装完，重启</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm27.png" alt="vm27"></p><p>接受许可证</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm28.png" alt="vm28"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm29.png" alt="vm29"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm30.png" alt="vm30"></p><p><strong>进入系统后，系统会引导你配置时区，创建用户，我这里跳过</strong></p><p>使用root账户登录系统(我已经提前创建了一个student名字的普通账户)</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm31.png" alt="vm31"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm32.png" alt="vm32"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm33.png" alt="vm33"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm34.png" alt="vm34"></p><h2 id="五、配置Centos"><a href="#五、配置Centos" class="headerlink" title="五、配置Centos"></a>五、配置Centos</h2><p><strong>1.查看网卡</strong></p><pre class="line-numbers language-none"><code class="language-none">ip addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wangshengjj.work/upload/2022/10/vm35.png" alt="vm35"></p><p>可以看到，我们的网卡叫ens33（不同虚拟机，网卡名字可能不一样）</p><p><strong>2.打开网卡</strong></p><pre class="line-numbers language-none"><code class="language-none">ifup ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wangshengjj.work/upload/2022/10/vm36.png" alt="vm36"></p><p><strong>3.测试网络是否通</strong></p><pre class="line-numbers language-none"><code class="language-none">ping baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用快捷键ctrl+c,可以终止命令</p><h3 id="1-配置yum源和epel源"><a href="#1-配置yum源和epel源" class="headerlink" title="1.配置yum源和epel源"></a>1.配置yum源和epel源</h3><p>这里用阿里源作为示范</p><p><strong>阿里云yum源</strong></p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>阿里云epel源</strong></p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-关闭防火墙和selinux"><a href="#2-关闭防火墙和selinux" class="headerlink" title="2.关闭防火墙和selinux"></a>2.关闭防火墙和selinux</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><pre class="line-numbers language-none"><code class="language-none">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>设置防火墙开机不自启</strong></p><pre class="line-numbers language-none"><code class="language-none">systemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看防火墙状态</strong></p><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h4><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;selinux&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>把SELINUX&#x3D;enable</strong><br><strong>改成SELINUX&#x3D;disabled</strong></p><p>重启服务器</p><pre class="line-numbers language-none"><code class="language-none">reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>进入桌面后查看selinux状态（disable为关闭）</strong></p><pre class="line-numbers language-none"><code class="language-none">sestatus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、拓展"><a href="#六、拓展" class="headerlink" title="六、拓展"></a>六、拓展</h2><p>我们可以给虚拟机拍摄快照，防止虚拟机崩溃后需要重新部署</p><p><img src="https://www.wangshengjj.work/upload/2022/10/vm37.png" alt="vm37"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> 虚拟机 </category>
          
          <category> 笔记 </category>
          
          <category> centos </category>
          
          <category> linux教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Docker搭建一个Cloudreve</title>
      <link href="/2022/10/17/cloudreve/"/>
      <url>/2022/10/17/cloudreve/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="利用Docker搭建一个Cloudreve"><a href="#利用Docker搭建一个Cloudreve" class="headerlink" title="利用Docker搭建一个Cloudreve"></a>利用Docker搭建一个Cloudreve</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</p><p><strong>如果您还未安装Docker请点击我查看<a href="https://www.wangshengjj.work/archives/13">Docker的安装教程</a></strong></p><h2 id="首先简单介绍一下Cloudreve"><a href="#首先简单介绍一下Cloudreve" class="headerlink" title="首先简单介绍一下Cloudreve"></a>首先简单介绍一下Cloudreve</h2><p>Cloudreve 可以让您快速搭建起公私兼备的网盘系统。Cloudreve 在底层支持不同的云存储平台，用户在实际使用时无须关心物理存储方式。你可以使用 Cloudreve 搭建个人用网盘、文件分享系统，亦或是针对大小团体的公有云系统。</p><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><strong>创建必要的文件夹</strong></p><pre class="line-numbers language-none"><code class="language-none">mkdir -vp cloudreve&#x2F;&#123;uploads,avatar&#125; \&amp;&amp; touch cloudreve&#x2F;conf.ini \&amp;&amp; touch cloudreve&#x2F;cloudreve.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p><strong>拉取并且运行镜像</strong></p><pre class="line-numbers language-none"><code class="language-none">docker run -d \-p 5212:5212 \--mount type&#x3D;bind,source&#x3D;&#x2F;root&#x2F;cloudreve&#x2F;conf.ini,target&#x3D;&#x2F;cloudreve&#x2F;conf.ini \--mount type&#x3D;bind,source&#x3D;&#x2F;root&#x2F;cloudreve&#x2F;cloudreve.db,target&#x3D;&#x2F;cloudreve&#x2F;cloudreve.db \-v &#x2F;root&#x2F;cloudreve&#x2F;uploads:&#x2F;cloudreve&#x2F;uploads \-v &#x2F;root&#x2F;cloudreve&#x2F;avatar:&#x2F;cloudreve&#x2F;avatar \cloudreve&#x2F;cloudreve:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>默认站在root家目录下，如有需要请自行更改命令目录！！！</strong></p><p>命令拆分：</p><ul><li>-d 后台运行</li><li>-p 映射端口 </li><li>5212:5212 外部端口：内部端口</li><li>-v 映射目录</li><li>latest 最新版</li></ul><p>待进度条走完浏览器访问，服务器IP+ 5212端口即可</p><h3 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h3><p><a href="https://docs.cloudreve.org/getting-started/install">Cloudreve官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 技术 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> docker </tag>
            
            <tag> cloudreve </tag>
            
            <tag> 私人网盘 nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热烈庆祝中共二十大胜利召开！</title>
      <link href="/2022/10/16/16/"/>
      <url>/2022/10/16/16/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="热烈庆祝中共二十大胜利召开！"><a href="#热烈庆祝中共二十大胜利召开！" class="headerlink" title="热烈庆祝中共二十大胜利召开！"></a>热烈庆祝中共二十大胜利召开！</h1><p><img src="https://www.wangshengjj.work/upload/2022/10/1da.webp" alt="1da"></p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二十大 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生日快乐</title>
      <link href="/2022/10/15/15/"/>
      <url>/2022/10/15/15/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>祝自己生日快乐！</p><p><a href="http://bd.wangshengjj.work/">点击查看生日页面</a></p><p>特别感谢菲菲提供的网页源码！<a href="https://www.rainkavik.com/">点我访问Rainkavik官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai画图NovelAI教程</title>
      <link href="/2022/10/13/novelai/"/>
      <url>/2022/10/13/novelai/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ai画图NovelAI教程"><a href="#Ai画图NovelAI教程" class="headerlink" title="Ai画图NovelAI教程"></a>Ai画图NovelAI教程</h1><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除</strong></p><p>本教程用到的文件来自<a href="https://www.bilibili.com/video/BV1EV4y1L7dX?share_source=copy_web&vd_source=234fafcdf8624d26f5ac4b02a30efabd">bilibli秋葉aaaki</a></p><p>本教程需要的文件下载：<a href="https://pan.baidu.com/s/1fYnD6OpJDeJbxe0II6X8CA?pwd=iuqw">NovelAI本体</a> 、<a href="https://pan.baidu.com/s/11ApMr7fi55hdrag-LjLhZQ?pwd=xwq8">需要的安装环境</a> 、<a href="https://www.aliyundrive.com/s/4QhvmWuRrRX">词条生成器</a></p><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><p>本教程仅提供Windows平台</p><p>首先保证自己电脑的显卡必须是<strong>NVIDIA显卡</strong>并且支持CUDA</p><p>具体支持型号如下</p><ul><li>NVIDIA GTX1060 6G</li><li>NVIDIA GTX1070</li><li>NVIDIA GTX1080&#x2F;ti</li><li>NVIDIA GTX1660&#x2F;ti</li><li>NVIDIA RTX20全系、RTX30全系、RTX40全系</li></ul><h2 id="二、安装必要环境"><a href="#二、安装必要环境" class="headerlink" title="二、安装必要环境"></a>二、安装必要环境</h2><p>下载安装环境</p><p>NVIDIA CUDA学习包、git、Python3.10.x</p><p>安装过程略过，默认下一步即可</p><p><img src="https://www.wangshengjj.work/upload/2022/10/ai2.png" alt="ai2"></p><h2 id="三、开始运行"><a href="#三、开始运行" class="headerlink" title="三、开始运行"></a>三、开始运行</h2><p>解压完以后如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/ai3.png" alt="ai3"></p><p>检查是否正在工作</p><p><img src="https://www.wangshengjj.work/upload/2022/10/ai4.png" alt="ai4"></p><h2 id="四、操作界面详情"><a href="#四、操作界面详情" class="headerlink" title="四、操作界面详情"></a>四、操作界面详情</h2><p><img src="https://www.wangshengjj.work/upload/2022/10/ai1.png" alt="ai1"></p><h2 id="五、拓展"><a href="#五、拓展" class="headerlink" title="五、拓展"></a>五、拓展</h2><h3 id="使用词条生成器快速完成操作"><a href="#使用词条生成器快速完成操作" class="headerlink" title="使用词条生成器快速完成操作"></a>使用词条生成器快速完成操作</h3><p><a href="https://www.aliyundrive.com/s/4QhvmWuRrRX">下载链接</a></p><p><img src="https://www.wangshengjj.work/upload/2022/10/ai5.png" alt="ai5"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
          <category> ai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> Noveai </tag>
            
            <tag> Ai画图 </tag>
            
            <tag> 二次元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想Y7000-2020系列黑苹果教程</title>
      <link href="/2022/10/06/14/"/>
      <url>/2022/10/06/14/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="联想拯救者Y7000-2020系列黑苹果教程"><a href="#联想拯救者Y7000-2020系列黑苹果教程" class="headerlink" title="联想拯救者Y7000-2020系列黑苹果教程"></a>联想拯救者Y7000-2020系列黑苹果教程</h1><p>写在最前面：<strong>本教程涉及到的文件<a href="https://pan.baidu.com/s/1nVl5YUxks02xurr5uGjLug?pwd=zkth">下载链接</a></strong></p><p>本教程适用于<strong>联想拯救者Y7000 2020</strong>系列，具体型号如下</p><ul><li>Y7000-2020</li><li>Y7000-2020H</li><li>Y7000P-2020</li><li>Y7000P-2020H</li></ul><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</strong></p><p>本教程部分内容参考自<a href="https://www.rainkavik.com/archives/203/">Rainkavik黑苹果教程</a></p><h2 id="以下教程正式开始"><a href="#以下教程正式开始" class="headerlink" title="以下教程正式开始"></a>以下教程正式开始</h2><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><ul><li>一个大于等于8GB的U盘</li><li><a href="https://www.balena.io/etcher/">etcher工具</a>(用于制作引导盘)</li><li>DiskGenius(替换引导文件)</li><li>一份EFI引导文件(本文提供下载)</li><li>MacOS镜像(推荐去<a href="https://blog.daliansky.net/">黑果小兵下载</a>)</li><li>Y7000系列一键修改BIOS工具</li><li>EasyUEFI(添加引导)</li></ul><p><strong>本教程涉及到的文件<a href="https://pan.baidu.com/s/1nVl5YUxks02xurr5uGjLug?pwd=zkth">下载链接</a></strong></p><p><strong>注意(重要)：本文提供2个版本的EFI引导文件，2个版本互相冲突，清选择正确版本！！！</strong></p><p><strong>如果您选择MacOS11 (Bigsur)，请选择EFI Mac11版本</strong></p><p><strong>如果您选择MacOS12(Monterey)，请选择EFI Mac12版本</strong></p><h3 id="二、首先制作启动盘"><a href="#二、首先制作启动盘" class="headerlink" title="二、首先制作启动盘"></a>二、首先制作启动盘</h3><p>我需要使用<strong>Etcher工具</strong>制作启动盘</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg1.png" alt="hpg1"></p><h3 id="三、替换EFI文件"><a href="#三、替换EFI文件" class="headerlink" title="三、替换EFI文件"></a>三、替换EFI文件</h3><p>这里需要使用<strong>DiskGenius工具</strong></p><p>把刚才下载的EFI文件复制到<strong>U盘内的EFI分区</strong></p><p>如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg2.png" alt="hpg2"></p><p>需要选择好我们的EFI文件(一定不要选错版本)</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg3.png" alt="hpg3"></p><p><strong>复制之前请自行把名字改成“EFI”</strong></p><p>复制到EFI分区下</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg4.png" alt="hpg4"></p><h4 id="四、准备黑苹果分区"><a href="#四、准备黑苹果分区" class="headerlink" title="四、准备黑苹果分区"></a>四、准备黑苹果分区</h4><p>这里需要使用<strong>DiskGenius工具</strong></p><p>这里推荐使用一块空硬盘</p><p>如果您是本机安装，可以照着我操作</p><p>选择您需要安装黑苹果的分区(请不要删除Windows系统分区)</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg5.png" alt="hpg5"></p><p>这里只拿空硬盘做演示，实际情况请使用大于等于50G空间的分区</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg6.png" alt="hpg6"></p><h3 id="五、修改BIOS-重要"><a href="#五、修改BIOS-重要" class="headerlink" title="五、修改BIOS(重要)"></a>五、修改BIOS(重要)</h3><p>这里使用<strong>Y7000系列一键修改BIOS工具</strong></p><p>如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg7.png" alt="hpg7"></p><p>依次执行5、6、7、8</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg9.png" alt="hpg9"></p><h3 id="六、重启电脑进入安装界面"><a href="#六、重启电脑进入安装界面" class="headerlink" title="六、重启电脑进入安装界面"></a>六、重启电脑进入安装界面</h3><p>开机按F12进入快速菜单，选择U盘</p><p>根据MacOS的引导界面安装就行</p><ol><li>先使用磁盘工具，选择要安装的磁盘</li><li>选择返回，安装MacOS即可</li></ol><p>这里具体操作方法跳过</p><h3 id="七、脱离U盘EFI引导"><a href="#七、脱离U盘EFI引导" class="headerlink" title="七、脱离U盘EFI引导"></a>七、脱离U盘EFI引导</h3><p>因为我们的EFI文件原本存在于U盘里，我们需要给他和Windows的引导文件添加到一起去</p><p>我们这里安装完MacOS进入桌面以后</p><p>我们需要重启电脑，<strong>回到Windows系统！</strong></p><p>这里我们使用<strong>EasyUEFI工具</strong>和<strong>DiskGenius工具</strong></p><p>如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg10.png" alt="hpg10"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg11.png" alt="hpg11"></p><p>我们使用<strong>DiskGenius工具</strong>，把黑苹果EFI里的<strong>OC文件</strong>，复制到Windows的引导<strong>EFI目录</strong>下</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg12.png" alt="hpg12"></p><p>使用<strong>EasyUEFI工具</strong>把OC目录下OpenCore.efi文件添加到引导中</p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg13.png" alt="hpg13"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg14.png" alt="hpg14"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg15.png" alt="hpg15"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg16.png" alt="hpg16"></p><h3 id="八、重启电脑测试EFI是否添加成功"><a href="#八、重启电脑测试EFI是否添加成功" class="headerlink" title="八、重启电脑测试EFI是否添加成功"></a>八、重启电脑测试EFI是否添加成功</h3><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg18.jpg" alt="hpg18"></p><p><img src="https://www.wangshengjj.work/upload/2022/10/hpg19.jpg" alt="hpg19"></p><h3 id="拓展：修复Windows时间不同步BUG"><a href="#拓展：修复Windows时间不同步BUG" class="headerlink" title="拓展：修复Windows时间不同步BUG"></a>拓展：修复Windows时间不同步BUG</h3><p>在我提供的文件内，有一个<strong>双系统时间同步.reg</strong>文件，安装重启即可</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 我的水货 </category>
          
          <category> 技术 </category>
          
          <category> 黑苹果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
            <tag> 联想 </tag>
            
            <tag> 拯救者 </tag>
            
            <tag> 技术 </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装Docker并配置镜像加速教程</title>
      <link href="/2022/09/17/13/"/>
      <url>/2022/09/17/13/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos安装Docker和配置镜像加速教程"><a href="#Centos安装Docker和配置镜像加速教程" class="headerlink" title="Centos安装Docker和配置镜像加速教程"></a>Centos安装Docker和配置镜像加速教程</h1><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</strong></p><h2 id="一、先挂载阿里云yum源"><a href="#一、先挂载阿里云yum源" class="headerlink" title="一、先挂载阿里云yum源"></a>一、先挂载阿里云yum源</h2><p>++centos7使用这条命令++</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>++centos8使用这条命令++</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-vault-8.5.2111.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、保存打包新yum源"><a href="#二、保存打包新yum源" class="headerlink" title="二、保存打包新yum源"></a>二、保存打包新yum源</h2><pre class="line-numbers language-none"><code class="language-none">yum clean all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、开始安装Docker"><a href="#三、开始安装Docker" class="headerlink" title="三、开始安装Docker"></a>三、开始安装Docker</h2><p>1.安装一些必要依赖</p><pre class="line-numbers language-none"><code class="language-none">yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.挂载Docker镜像</p><pre class="line-numbers language-none"><code class="language-none">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.安装Docker</p><pre class="line-numbers language-none"><code class="language-none">yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.启动Docker</p><pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.设置开启自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、配置镜像加速（使用网易和官方仓库）"><a href="#四、配置镜像加速（使用网易和官方仓库）" class="headerlink" title="四、配置镜像加速（使用网易和官方仓库）"></a>四、配置镜像加速（使用网易和官方仓库）</h2><p>1.使用vi编辑器，编辑镜像加速配置文件</p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;docker&#x2F;daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.使用键盘<strong>i</strong>键进入编辑模式</p><p>3.复制以下代码</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.保存并退出</p><p>粘贴进去后，按esc键退出编辑模式</p><p>进入末行模式wq保存（输入：wq即可）</p><p>5.重启Docker服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于cloud云存储上线公告</title>
      <link href="/2022/09/15/12/"/>
      <url>/2022/09/15/12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大家好啊，这里是网笙久久，我的第一个云存储正式上线</p><p>新用户注册就送30G空间，在此条文章下面<strong>评论</strong>就再送20G！一共50G供您存储</p><p><a href="http://cloud.wangshengjj.work/">传送链接</a></p><p><img src="https://www.wangshengjj.work/upload/2022/09/ced81536ae7017e8efa0f092cd6d62c.png" alt="ced81536ae7017e8efa0f092cd6d62c"></p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决宝塔面板跨域问题</title>
      <link href="/2022/09/10/11/"/>
      <url>/2022/09/10/11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="宝塔面板跨域问题"><a href="#宝塔面板跨域问题" class="headerlink" title="宝塔面板跨域问题"></a>宝塔面板跨域问题</h1><p>如图所示</p><p><img src="https://www.wangshengjj.work/upload/2022/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220910185701.png" alt="微信图片_20220910185701"></p><p>首先来到我们的宝塔面板，我们需要修改Nginx配置文件</p><p><img src="https://www.wangshengjj.work/upload/2022/09/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220910185926.png" alt="微信图片_20220910185926"></p><p>需要添加的代码</p><pre class="line-numbers language-none"><code class="language-none">add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,POST&#39;;add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加完保存重启即可</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> docker </tag>
            
            <tag> halo博客 </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈一下今天刚刚发布的mate50系列</title>
      <link href="/2022/09/06/10/"/>
      <url>/2022/09/06/10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅谈一下今天刚刚发布的mate50系列"><a href="#浅谈一下今天刚刚发布的mate50系列" class="headerlink" title="浅谈一下今天刚刚发布的mate50系列"></a>浅谈一下今天刚刚发布的mate50系列</h1><h2 id="关于颜值和价格"><a href="#关于颜值和价格" class="headerlink" title="关于颜值和价格"></a>关于颜值和价格</h2><p>我觉得这代华为mate50（除去RS版）外观设计有点退步了，个人觉得背面属于有点欣赏不过来，但是正面的中间挖孔，以及超小刘海给人的第一印象还是不错的！</p><p>价格也只能说不便宜，但是确实值得</p><img src="https://pic.rmb.bdstatic.com/bjh/news/87b78252c1c66618f5ac127e544dc358.jpeg"><img src="https://pic.rmb.bdstatic.com/bjh/news/7716aa0e3fd2f167c9cda93b2e80579d.jpeg" style="zoom: 67%;"><h2 id="关于这次发布会亮点"><a href="#关于这次发布会亮点" class="headerlink" title="关于这次发布会亮点"></a>关于这次发布会亮点</h2><p>无疑就是“卫星通话”，“应急模式”，“可变光圈”这三个，这三个我最感兴趣的是“可变光圈”</p><p>不过u1s1这次的可变光圈绝对是革命性的尝试，相信以后各大手机厂家一定会发布自己的可变光圈手机吧！</p><p><img src="https://pics7.baidu.com/feed/c2cec3fdfc039245750db42366cd4dc87c1e25c2.jpeg?token=0702dc0905a392bc69e2c919d2682cc7"></p><p><img src="https://doc-fd.zol-img.com.cn/t_s640x359/g7/M00/03/0D/ChMkLGMW8GKIWYKAAAoD2E3475EAAHO9gArZtwACgPw901.png"></p><p><img src="http://i5.hexun.com/2022-09-06/206718225.jpg"></p><h2 id="关于处理器"><a href="#关于处理器" class="headerlink" title="关于处理器"></a>关于处理器</h2><p>发布会上只是粗略的谈了一下，这次mate50和pro版搭载的是<strong>新骁龙8+<strong>，mate50E搭载的是</strong>骁龙778G</strong>，值得一提的是mate50系列均不支持5G网络，可能这一点，确实是mate50系列的一大败笔。</p><h2 id="关于屏幕"><a href="#关于屏幕" class="headerlink" title="关于屏幕"></a>关于屏幕</h2><p>mate50是中孔直屏+90hz屏幕</p><p><img src="http://sy0.img.pcpop.com/article/4/4431/4431695.jpg_p-w730"></p><p>mate50pro是刘海曲屏+120hz屏幕，支持3D人脸识别（有点像iPhone的faceID）</p><p><img src="http://sy0.img.pcpop.com/article/4/4431/4431696.jpg_p-w730"></p><p>做总结，mate50给90hz不够用，也许是因为4400毫安电池的原因。</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p><strong>mate50无疑是亮点很多的手机，这次的几个新功能都是平常用得到的，只是mate50e的3999价格确实很贵，如果让我选择，我可能会直接购买mate50</strong></p><p>这次发布会我还关注到了一个小功能，叫“智感扫码”</p><p>这个功能无疑，在现在这个满大街都是二维码的时代，是个非常便捷的功能！</p><p>只需要在手机背部敲击2下，即可快速扫码，免去我们再去手动打开应用，手动解锁屏幕，直接一步到位</p><p><img src="https://www.wangshengjj.work/upload/2022/09/7e3e6709c93d70cf154ba20c93bd380abba12bed.png" alt="7e3e6709c93d70cf154ba20c93bd380abba12bed"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机 </tag>
            
            <tag> 华为 </tag>
            
            <tag> Mate50 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>halo博客升级和备份</title>
      <link href="/2022/08/21/8/"/>
      <url>/2022/08/21/8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="halo博客升级和备份教程"><a href="#halo博客升级和备份教程" class="headerlink" title="halo博客升级和备份教程"></a>halo博客升级和备份教程</h1><p>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</p><p><strong>本教程为halo博客搭建教程后续教程，传送到搭建篇<a href="https://www.wangshengjj.work/archives/halo">halo博客搭建教程</a></strong></p><h2 id="第一步：停止和删除容器"><a href="#第一步：停止和删除容器" class="headerlink" title="第一步：停止和删除容器"></a>第一步：停止和删除容器</h2><p>停止容器</p><pre class="line-numbers language-none"><code class="language-none">docker stop halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除容器</p><pre class="line-numbers language-none"><code class="language-none">docker rm -f halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PS:如果你的容器名不叫<strong>halo</strong>，可以使用<strong>docker ps -a</strong>查看您的容器</p><h2 id="第二步：备份数据（重要）"><a href="#第二步：备份数据（重要）" class="headerlink" title="第二步：备份数据（重要）"></a>第二步：备份数据（重要）</h2><pre class="line-numbers language-none"><code class="language-none">cp -r ~&#x2F;.halo ~&#x2F;.halo.archive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>.halo.archive</strong>为备份后的文件名，根据自己需要命名即可</p><h2 id="第三步：清除缓存"><a href="#第三步：清除缓存" class="headerlink" title="第三步：清除缓存"></a>第三步：清除缓存</h2><pre class="line-numbers language-none"><code class="language-none">rm -rf ~&#x2F;.halo&#x2F;.leveldb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第四步：拉取最新镜像"><a href="#第四步：拉取最新镜像" class="headerlink" title="第四步：拉取最新镜像"></a>第四步：拉取最新镜像</h2><pre class="line-numbers language-none"><code class="language-none">docker pull halohub&#x2F;halo:1.6.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PS：截止写文章日期<strong>22年11月11日</strong>，最新版本为<strong>1.6.0</strong>版本，官方提供最新的<strong>latest镜像</strong>，<strong>可以选择使用latest版本</strong></p><p><strong>使用latest版本命令（如果您已选择上面的1.6.0版本，可以不用再运行此命令）</strong></p><pre class="line-numbers language-none"><code class="language-none">docker pull halohub&#x2F;halo:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用images命令查看拉取的镜像信息</p><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第五步：运行拉取的镜像"><a href="#第五步：运行拉取的镜像" class="headerlink" title="第五步：运行拉取的镜像"></a>第五步：运行拉取的镜像</h2><p>如果您选择1.6.0版本，请运行此命令</p><pre class="line-numbers language-none"><code class="language-none">docker run -it -d --name halo -p 8090:8090 -v ~&#x2F;.halo:&#x2F;root&#x2F;.halo --restart&#x3D;unless-stopped halohub&#x2F;halo:1.6.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您选择latest版本，请运行以下命令</p><pre class="line-numbers language-none"><code class="language-none">docker run -it -d --name halo -p 8090:8090 -v ~&#x2F;.halo:&#x2F;root&#x2F;.halo --restart&#x3D;unless-stopped halohub&#x2F;halo:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-it 开启输入功能并连接伪终端</li><li>-d 保持后台运行容器</li><li>–name 为容器指定一个名字</li><li>-p 映射指定端口</li><li>-v 映射宿主机上的目录</li><li>–restart 在Docker开机自启后自动启动容器</li></ul><h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h2><p><a href="https://docs.halo.run/getting-started/upgrade/">halo官方升级文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> docker </tag>
            
            <tag> halo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水一篇文章</title>
      <link href="/2022/08/18/7/"/>
      <url>/2022/08/18/7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我的家乡起疫情了，现在暂时只能在家呆着，马上又要开学了</p><p>呜呜呜</p><p>评论区求安慰</p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> docker </tag>
            
            <tag> 原神 </tag>
            
            <tag> 星穹铁道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装云崽Bot(详细版)</title>
      <link href="/2022/07/17/5/"/>
      <url>/2022/07/17/5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker安装原神群机器人-YunZai-Bot"><a href="#Docker安装原神群机器人-YunZai-Bot" class="headerlink" title="Docker安装原神群机器人(YunZai-Bot)"></a>Docker安装原神群机器人(YunZai-Bot)</h1><p>本教程实例群：<a href="https://jq.qq.com/?_wv=1027&k=7D0KYFsy">加群请点击我</a></p><p><strong>Yunzai-Bot属于开源项目，大佬源项目<a href="https://gitee.com/Le-niao/Yunzai-Bot">地址</a></strong></p><h3 id="如果您还未安装docker请点击我"><a href="#如果您还未安装docker请点击我" class="headerlink" title="如果您还未安装docker请点击我"></a>如果您还未安装docker<a href="https://www.wangshengjj.work/archives/13">请点击我</a></h3><p><strong>本教程可以绕过Docker拉取镜像步骤，可以直接在真实系统环境下配置！</strong></p><p><strong>YunzaiV2.2版本留档<a href="https://cloud.wangshengjj.work/s/x9T4">下载链接</a></strong></p><p><strong>YunzaiV3.x版本Github留档<a href="https://github.com/wangshengjj/Yunzai-Bot">链接</a></strong></p><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除</strong></p><h3 id="一、Docker操作"><a href="#一、Docker操作" class="headerlink" title="一、Docker操作"></a>一、Docker操作</h3><h2 id="写在最前面-重要-：本教程适用Yunzai2-x和Yunzai3-x版本，各版本命令有所不同，请仔细检查自己版本后，在选择相应版本的命令执行！"><a href="#写在最前面-重要-：本教程适用Yunzai2-x和Yunzai3-x版本，各版本命令有所不同，请仔细检查自己版本后，在选择相应版本的命令执行！" class="headerlink" title="写在最前面(重要)：本教程适用Yunzai2.x和Yunzai3.x版本，各版本命令有所不同，请仔细检查自己版本后，在选择相应版本的命令执行！"></a>写在最前面(重要)：本教程适用Yunzai2.x和Yunzai3.x版本，各版本命令有所不同，请仔细检查自己版本后，在选择相应版本的命令执行！</h2><h4 id="1-拉取一个Centos镜像"><a href="#1-拉取一个Centos镜像" class="headerlink" title="1.拉取一个Centos镜像"></a>1.拉取一个Centos镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name centos_bot centos:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker exec -it centos_bot &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-it：开启输入功能并连接伪终端</li><li>-d：后台运行容器</li><li>-name：为容器指定一个名称</li><li>latest 最新版本</li></ul><h3 id="二、在容器里操作-可以选择在真实环境操作"><a href="#二、在容器里操作-可以选择在真实环境操作" class="headerlink" title="二、在容器里操作(可以选择在真实环境操作)"></a>二、在容器里操作(可以选择在真实环境操作)</h3><h4 id="1-配置yum源"><a href="#1-配置yum源" class="headerlink" title="1.配置yum源"></a>1.配置yum源</h4><p><strong>这一步目的是，老旧的yum源官方已经停止维护，我们使用阿里云的yum源</strong></p><p>进入yum源目录</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置yum源(此步骤仅限Centos8用户)</p><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;mirrorlist&#x2F;#mirrorlist&#x2F;g&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s|#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org|baseurl&#x3D;http:&#x2F;&#x2F;vault.centos.org|g&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装wget</p><pre class="line-numbers language-none"><code class="language-none">yum -y install wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="挂载阿里云yum源（Centos8）"><a href="#挂载阿里云yum源（Centos8）" class="headerlink" title="挂载阿里云yum源（Centos8）"></a>挂载阿里云yum源（Centos8）</h5><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-vault-8.5.2111.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您使用的是Centos7版本请使用这条命令（Centos8用户请忽略）</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="挂载阿里云Epel源（Centos8）"><a href="#挂载阿里云Epel源（Centos8）" class="headerlink" title="挂载阿里云Epel源（Centos8）"></a>挂载阿里云Epel源（Centos8）</h5><pre class="line-numbers language-none"><code class="language-none">yum install -y https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;epel&#x2F;epel-release-latest-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s|^#baseurl&#x3D;https:&#x2F;&#x2F;download.example&#x2F;pub|baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com|&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;epel*sed -i &#39;s|^metalink|#metalink|&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;epel*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果您使用的是Centos7版本请使用这条命令（Centos8用户请忽略）</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清理旧yum</p><pre class="line-numbers language-none"><code class="language-none">yum clean all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打包新yum</p><pre class="line-numbers language-none"><code class="language-none">yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试yum源</p><pre class="line-numbers language-none"><code class="language-none">yum install -y wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-配置并且安装原神助手机器人"><a href="#2-配置并且安装原神助手机器人" class="headerlink" title="2.配置并且安装原神助手机器人"></a>2.配置并且安装原神助手机器人</h4><p>安装curl</p><pre class="line-numbers language-none"><code class="language-none">yum -y install curl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到家目录下</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>开始安装</strong></p><pre class="line-numbers language-none"><code class="language-none">curl -sL http:&#x2F;&#x2F;mtw.so&#x2F;5U67tU | bash#由于原作者原因，此命令已废弃，请根据下面的步骤手动配置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您这一步出现了<strong>报错</strong>，接下来请继续往下看<br>如果您正常下载并且安装成功<a href="#3.%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%A5%9E%E7%BE%A4%E5%8A%A9%E6%89%8B">点击我跳转到第三步</a>启动原神助手</p><h4 id="报错解决步骤"><a href="#报错解决步骤" class="headerlink" title="报错解决步骤"></a>报错解决步骤</h4><p><strong>因为自动脚本无法完成任务，所以我们需要手动安装环境！</strong></p><p>安装git</p><pre class="line-numbers language-none"><code class="language-none">yum -y install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">git version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装redis</p><pre class="line-numbers language-none"><code class="language-none">yum -y install redis &amp;&amp; redis-server --daemonize yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装nodejs</p><pre class="line-numbers language-none"><code class="language-none">curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_16.x | bash -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum -y install nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装chrome依赖库和chromium</p><pre class="line-numbers language-none"><code class="language-none">yum install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 -y &amp;&amp; yum install libdrm libgbm libxshmfence -y &amp;&amp; yum install nss -y &amp;&amp; yum update nss -y;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum -y install chromium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示没有可用包，请给系统配置Epel源！</p><p>安装中文字体</p><pre class="line-numbers language-none"><code class="language-none">yum groupinstall fonts -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用Github源克隆项目</strong></p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;Le-niao&#x2F;Yunzai-Bot.git#已失效<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>建议使用喵喵版云崽</strong></p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;yoimiya-kokomi&#x2F;Miao-Yunzai.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用Gitee源克隆项目(上面的克隆失败用这个)</strong></p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;gitee.com&#x2F;Le-niao&#x2F;Yunzai-Bot.git#目前停止维护<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;gitee.com&#x2F;yoimiya-kokomi&#x2F;Miao-Yunzai.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入主程序目录下</p><pre class="line-numbers language-none"><code class="language-none">cd Yunzai-Bot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用pnpm安装（仅适用3.x版本）</p><pre class="line-numbers language-none"><code class="language-none">npm install pnpm -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pnpm install -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用cnpm安装（仅适用于2.x版本）3.x不要使用这个</p><pre class="line-numbers language-none"><code class="language-none">npm install cnpm -g --registry&#x3D;http:&#x2F;&#x2F;registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-启动原神群助手"><a href="#3-启动原神群助手" class="headerlink" title="3.启动原神群助手"></a>3.启动原神群助手</h4><p>启动</p><pre class="line-numbers language-none"><code class="language-none">node app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止</p><pre class="line-numbers language-none"><code class="language-none">npm stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、拓展"><a href="#三、拓展" class="headerlink" title="三、拓展"></a>三、拓展</h3><h4 id="1-安装喵喵插件miao-plugin"><a href="#1-安装喵喵插件miao-plugin" class="headerlink" title="1.安装喵喵插件miao-plugin"></a>1.安装喵喵插件miao-plugin</h4><p>官方开源<a href="https://gitee.com/yoimiya-kokomi/miao-plugin">地址</a></p><p>进入到Yunzai目录下</p><pre class="line-numbers language-none"><code class="language-none">cd Yunzai-Bot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用GitHub克隆</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;yoimiya-kokomi&#x2F;miao-plugin.git .&#x2F;plugins&#x2F;miao-plugin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用Gitee克隆（上面慢的用这个）</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;gitee.com&#x2F;yoimiya-kokomi&#x2F;miao-plugin.git .&#x2F;plugins&#x2F;miao-plugin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>重启bot即可</strong></p><h4 id="2-解决喵喵插件”Cannot-find-package-‘image-size’-“的错误"><a href="#2-解决喵喵插件”Cannot-find-package-‘image-size’-“的错误" class="headerlink" title="2.解决喵喵插件”Cannot find package ‘image-size’ “的错误"></a>2.解决喵喵插件”Cannot find package ‘image-size’ “的错误</h4><p>使用pnpm或者cnpm或npm安装即可</p><p><strong>Yunzai3.0建议用这个</strong></p><pre class="line-numbers language-none"><code class="language-none">pnpm add image-size -w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>或</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install image-size --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-解决提示登录安全问题（仅适用2-x版本）"><a href="#3-解决提示登录安全问题（仅适用2-x版本）" class="headerlink" title="3.解决提示登录安全问题（仅适用2.x版本）"></a>3.解决提示登录安全问题（仅适用2.x版本）</h4><p>这个方法也是我自己摸索出来的，所以仅供参考！！！</p><p>我们在本地Windows部署一个Yunzai-Bot</p><p><a href="https://www.bilibili.com/read/cv15119056?from=search&spm_id_from=333.337.0.0">教程链接</a></p><p>1.部署好以后，我们在本地使用扫码的方式登录</p><p>2.登录成功以后，会自动在data文件夹内生成一个“以你QQ号命名的文件”</p><p>3.具体操作就是把这个“以你QQ号命名的文件”上传并且替换掉云服务器的文件</p><p>具体目录如下：Yunzai-Bot&#x2F;data&#x2F;QQ号&#x2F;</p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
          <category> 原神群助手 </category>
          
          <category> 我的水货 </category>
          
          <category> 杂谈 </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 原神群机器人 </tag>
            
            <tag> 原神 </tag>
            
            <tag> 云崽 </tag>
            
            <tag> YunZai-Bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建教程</title>
      <link href="/2022/06/23/hexo/"/>
      <url>/2022/06/23/hexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo博客搭建教程"><a href="#hexo博客搭建教程" class="headerlink" title="hexo博客搭建教程"></a>hexo博客搭建教程</h1><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</strong></p><h2 id="一、选择服务器和域名"><a href="#一、选择服务器和域名" class="headerlink" title="一、选择服务器和域名"></a>一、选择服务器和域名</h2><p>我这里用腾讯云服务器做演示</p><p><a href="https://cloud.tencent.com/act/pro/618season?channel=sp&fromSource=gwzcw.6633950.6633950.6633950&utm_medium=cpc&utm_id=gwzcw.6633950.6633950.6633950&bd_vid=11065626160413136653">服务器购买链接</a></p><p>新用户可以选择45一年的轻量级服务器</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613164726.png"></p><p>购买域名</p><p><a href="https://cloud.tencent.com/act/domainsales?channel=sp&fromSource=gwzcw.6463875.6463875.6463875&utm_medium=cpc&utm_id=gwzcw.6463875.6463875.6463875&bd_vid=9026323095797005744">域名购买链接</a></p><p>这里推荐购买.top和.cc的域名（主要是次年续费便宜），可以根据自己网站的名称去选择注册</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613165407.png"></p><h2 id="二-开始部署服务器"><a href="#二-开始部署服务器" class="headerlink" title="二.开始部署服务器"></a>二.开始部署服务器</h2><p>来到腾讯云控制台</p><p><a href="https://console.cloud.tencent.com/">点我跳转到腾讯云控制台</a></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613165945.png"></p><h4 id="1-开始部署服务器"><a href="#1-开始部署服务器" class="headerlink" title="1.开始部署服务器"></a>1.开始部署服务器</h4><p>进入我们的服务器管理，选择“新建”后会跳转到新的页面（服务器创建过程中会慢一点，请耐心等待）</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613174620.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623131212.png"></p><p><strong>设置防火墙规则（这一步非常重要！）</strong></p><p>我们需要开放8888端口和4000端口</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623132815.png"></p><p><strong>1.安装宝塔面板</strong></p><p>我们部署好服务器后，先更改服务器密码</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623131446.png"></p><p>然后使用Windows自带的远程桌面工具，连接我们的服务器</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623131736.png"></p><p>如果提示输入账号和密码，请按以下输入</p><pre class="line-numbers language-none"><code class="language-none">用户：Administrator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">密码：刚才我们已经改好的密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们去宝塔官网下载面板（选择Windows版）</p><p><a href="https://www.bt.cn/new/download.html">宝塔官网</a></p><p><del>安装步骤省略</del></p><p>浏览器访问外网管理地址即可</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613171440.png"></p><p>选择安装Nginx套件</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623162456.png" alt="微信图片_20220623162456"></p><h4 id="2-安装nodejs和git"><a href="#2-安装nodejs和git" class="headerlink" title="2.安装nodejs和git"></a>2.安装nodejs和git</h4><p><a href="http://nodejs.cn/download/">nodejs下载地址</a></p><p><a href="https://git-scm.com/download/win">git下载地址</a></p><p><strong>下载打开后，一直点下一步安装即可</strong></p><p>在桌面创建一个data文件夹，里面再创建一个名为blog的文件夹</p><p>我们右键，选择git bash</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623133922.png"></p><p>依次输入以下代码（检查环境和版本）</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">git -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623134129.png"></p><h4 id="3-开始部署hexo博客"><a href="#3-开始部署hexo博客" class="headerlink" title="3.开始部署hexo博客"></a>3.开始部署hexo博客</h4><p>npm下载慢的话，可以下载淘宝下载源cnpm</p><pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>1.安装hexo</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后可以选择使用hexo -v查看版本信息</p><p><strong>2.初始化</strong></p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623135134.png"></p><p><strong>3.启动博客</strong></p><p>生成</p><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止</p><p><strong>Ctrl+C</strong></p><p><strong>4.测试</strong></p><p>浏览器访问<strong>服务器IP+4000端口</strong>测试</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623135822.png"></p><h2 id="三、配置域名访问"><a href="#三、配置域名访问" class="headerlink" title="三、配置域名访问"></a>三、配置域名访问</h2><p>1.首先你需要提前准备好一个域名（最好已经备过案的，否则只能等待备案完成后才能访问，备案期间只能使用IP+端口号访问！！！）</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613173251.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613173407.png"></p><p>2.配置反向代理</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613174029.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623140119.png" alt="微信图片_20220623140119"></p><p><strong>以上全部配置完成后，即可使用域名访问博客页面</strong></p><h3 id="拓展1：配置SSL证书（https访问）"><a href="#拓展1：配置SSL证书（https访问）" class="headerlink" title="拓展1：配置SSL证书（https访问）"></a>拓展1：配置SSL证书（https访问）</h3><p>可以使用腾讯云一键注册一个ssl证书，添加到宝塔面板即可！</p><p><strong>下载的证书的时候，选择Nginx证书！！！</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613180016.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613175749.png"></p><h3 id="拓展2：认识hexo博客基本操作"><a href="#拓展2：认识hexo博客基本操作" class="headerlink" title="拓展2：认识hexo博客基本操作"></a>拓展2：认识hexo博客基本操作</h3><ol><li>生成：<strong>hexo g</strong></li><li>启动：<strong>hexo s</strong></li><li>清理：<strong>hexo clean</strong></li><li>建议每次修改操作之后，先依次运行<strong>hexo clean</strong>，然后再运行<strong>hexo g</strong>和<strong>hexo s</strong></li></ol><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623141259.png"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>halo博客搭建教程</title>
      <link href="/2022/06/13/halo/"/>
      <url>/2022/06/13/halo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="halo博客搭建教程"><a href="#halo博客搭建教程" class="headerlink" title="halo博客搭建教程"></a>halo博客搭建教程</h1><h4 id="写在文章前面：本教程部分内容基于幻幻博客"><a href="#写在文章前面：本教程部分内容基于幻幻博客" class="headerlink" title="写在文章前面：本教程部分内容基于幻幻博客"></a>写在文章前面：本教程部分内容基于<a href="https://blog.xhxx.cc/">幻幻博客</a></h4><h2 id="halo博客升级和备份教程-点我传送"><a href="#halo博客升级和备份教程-点我传送" class="headerlink" title="halo博客升级和备份教程 点我传送"></a>halo博客升级和备份教程 <a href="https://www.wangshengjj.work/archives/8">点我传送</a></h2><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</strong></p><h3 id="一、选择服务器和域名"><a href="#一、选择服务器和域名" class="headerlink" title="一、选择服务器和域名"></a>一、选择服务器和域名</h3><p>我这里用腾讯云服务器做演示</p><p><a href="https://cloud.tencent.com/act/pro/618season?channel=sp&fromSource=gwzcw.6633950.6633950.6633950&utm_medium=cpc&utm_id=gwzcw.6633950.6633950.6633950&bd_vid=11065626160413136653">服务器购买链接</a></p><p>新用户可以选择45一年的轻量级服务器</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613164726.png"></p><p>购买域名</p><p><a href="https://cloud.tencent.com/act/domainsales?channel=sp&fromSource=gwzcw.6463875.6463875.6463875&utm_medium=cpc&utm_id=gwzcw.6463875.6463875.6463875&bd_vid=9026323095797005744">域名购买链接</a></p><p>这里推荐购买.top和.cc的域名（主要是次年续费便宜），可以根据自己网站的名称去选择注册</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613165407.png"></p><h3 id="二、开始准备服务器"><a href="#二、开始准备服务器" class="headerlink" title="二、开始准备服务器"></a>二、开始准备服务器</h3><p>来到腾讯云控制台</p><p><a href="https://console.cloud.tencent.com/">点我跳转到腾讯云控制台</a></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613165945.png"></p><h4 id="1-开始部署服务器"><a href="#1-开始部署服务器" class="headerlink" title="1.开始部署服务器"></a>1.开始部署服务器</h4><p>进入我们的服务器管理，选择“新建”后会跳转到新的页面（服务器创建过程中会慢一点，请耐心等待）</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613174620.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613170450.png"></p><p>设置防火墙策略</p><p>开放8888端口和8090端口</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613182231.png" alt="微信图片_20220613182231"></p><h4 id="2-获取宝塔面板地址和账号密码"><a href="#2-获取宝塔面板地址和账号密码" class="headerlink" title="2.获取宝塔面板地址和账号密码"></a>2.获取宝塔面板地址和账号密码</h4><p>我们创建完成后，点击登录即可</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613170919.png"></p><p>在终端输入以下代码</p><pre class="line-numbers language-none"><code class="language-none">sudo &#x2F;etc&#x2F;init.d&#x2F;bt default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613171144.png"></p><p>我复制好网址，就可以访问了！</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613171440.png"></p><p>我们登录进去以后选择“推荐安装”</p><p><img src="https://www.wangshengjj.work/upload/2022/06/825eec95f9da2.png"></p><h3 id="三、配置环境"><a href="#三、配置环境" class="headerlink" title="三、配置环境"></a>三、配置环境</h3><p>1.下载并且安装Docker环境</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613172236.png"></p><p>2.创建halo目录（回到终端页面）</p><pre class="line-numbers language-none"><code class="language-none">mkdir ~&#x2F;.halo &amp;&amp; cd ~&#x2F;.halo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.拉取并运行halo(目前最新版本1.6.0，如果有新版本，可以删除版本号拉取最新latest版本)</p><pre class="line-numbers language-none"><code class="language-none">docker run -it -d --name halo -p 8090:8090 -v ~&#x2F;.halo:&#x2F;root&#x2F;.halo --restart&#x3D;unless-stopped halohub&#x2F;halo:1.6.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>拓展：</strong></p><blockquote><ol><li>-it 开启输入功能并连接伪终端</li><li>-d 保持后台运行容器</li><li>–name 为容器指定一个名字</li><li>-p 映射指定端口</li><li>-v 映射宿主机上的目录</li><li>–restart 在Docker开机自启后自动启动容器</li></ol></blockquote><p>4.浏览器访问：<strong>http:&#x2F;&#x2F; 服务器IP:8090</strong> 即可进入halo博客的安装引导界面</p><h3 id="四、配置域名访问"><a href="#四、配置域名访问" class="headerlink" title="四、配置域名访问"></a>四、配置域名访问</h3><p>1.首先你需要提前准备好一个域名（最好已经备过案的，否则只能等待备案完成后才能访问，备案期间只能使用IP+端口号访问！！！）</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613173251.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613173407.png"></p><p>2.配置反向代理</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613174029.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613174032.png"></p><p><strong>以上全部配置完成后，即可使用域名访问博客页面</strong></p><h3 id="五、拓展：配置SSL证书（https访问）"><a href="#五、拓展：配置SSL证书（https访问）" class="headerlink" title="五、拓展：配置SSL证书（https访问）"></a>五、拓展：配置SSL证书（https访问）</h3><p>可以使用腾讯云一键注册一个ssl证书，添加到宝塔面板即可！</p><p><strong>下载的证书的时候，选择Nginx证书！！！</strong></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613180016.png"></p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220613175749.png"></p><p><strong>管理页面（仪表盘）</strong></p><p>浏览器访问域名或者IP+端口号，成功进入主页以后，在后面加上”&#x2F;admin”即可进到管理页面</p><p><img src="https://www.wangshengjj.work/upload/2022/06/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220623142303.png" alt="微信图片_20220623142303"></p><h3 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h3><p><a href="https://docs.halo.run/">halo官方文档</a></p><p><a href="https://blog.xhxx.cc/">幻幻博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器搭建 </tag>
            
            <tag> linux搭建服务器 </tag>
            
            <tag> halo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用docker拉取的镜像安装原神助手(停止更新)</title>
      <link href="/2022/06/11/4/"/>
      <url>/2022/06/11/4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="利用docker拉取的镜像安装原神群机器人-停止更新"><a href="#利用docker拉取的镜像安装原神群机器人-停止更新" class="headerlink" title="利用docker拉取的镜像安装原神群机器人(停止更新)"></a>利用docker拉取的镜像安装原神群机器人(停止更新)</h1><h2 id="本教程实例群：加群请点击我"><a href="#本教程实例群：加群请点击我" class="headerlink" title="本教程实例群：加群请点击我"></a>本教程实例群：<a href="https://jq.qq.com/?_wv=1027&k=7D0KYFsy">加群请点击我</a></h2><p><strong>仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除</strong></p><h3 id="写在文章前面：如果您还未安装docker请点击我（看第一章Docker的安装就行）"><a href="#写在文章前面：如果您还未安装docker请点击我（看第一章Docker的安装就行）" class="headerlink" title="写在文章前面：如果您还未安装docker请点击我（看第一章Docker的安装就行）"></a>写在文章前面：如果您还未安装docker<a href="https://www.wangshengjj.work/archives/%E5%88%A9%E7%94%A8docker%E5%9C%A8linux%E6%88%96windows%E4%B8%8A%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">请点击我</a>（看第一章Docker的安装就行）</h3><h3 id="一、Docker操作"><a href="#一、Docker操作" class="headerlink" title="一、Docker操作"></a>一、Docker操作</h3><p><strong>写在最前面，建议使用Ctrl+Alt+F2切换到第二个终端操作，搭建好后再（Ctrl+Alt+F1）切回第一终端！ 或者使用Xshell软件！</strong></p><h4 id="1-拉取一个Centos镜像"><a href="#1-拉取一个Centos镜像" class="headerlink" title="1.拉取一个Centos镜像"></a>1.拉取一个Centos镜像</h4><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name centos_bot centos:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker exec -it centos_bot &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>-it：开启输入功能并连接伪终端</strong></p><p><strong>-d：后台运行容器</strong></p><p><strong>-name：为容器指定一个名称</strong></p><p><strong>latest 最新版本</strong></p><h3 id="二、在容器里操作"><a href="#二、在容器里操作" class="headerlink" title="二、在容器里操作"></a>二、在容器里操作</h3><h4 id="1-配置yum源"><a href="#1-配置yum源" class="headerlink" title="1.配置yum源"></a>1.配置yum源</h4><p><strong>这一步目的是，老旧的yum源官方已经停止维护，我们使用阿里云的yum源</strong></p><p>进入yum源目录</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置yum源</p><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s&#x2F;mirrorlist&#x2F;#mirrorlist&#x2F;g&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">sed -i &#39;s|#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org|baseurl&#x3D;http:&#x2F;&#x2F;vault.centos.org|g&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装wget</p><pre class="line-numbers language-none"><code class="language-none">yum -y install wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>挂载阿里云yum源</p><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-vault-8.5.2111.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清理旧yum</p><pre class="line-numbers language-none"><code class="language-none">yum clean all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打包新yum</p><pre class="line-numbers language-none"><code class="language-none">yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试yum源</p><pre class="line-numbers language-none"><code class="language-none">yum install -y wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-配置并且安装原神助手机器人"><a href="#2-配置并且安装原神助手机器人" class="headerlink" title="2.配置并且安装原神助手机器人"></a>2.配置并且安装原神助手机器人</h4><p>安装curl</p><pre class="line-numbers language-none"><code class="language-none">yum -y install curl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到家目录下</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>开始安装</strong></p><h2 id="由于原作者原因，请查看详细版教程，点我跳转"><a href="#由于原作者原因，请查看详细版教程，点我跳转" class="headerlink" title="由于原作者原因，请查看详细版教程，点我跳转"></a>由于原作者原因，请查看详细版教程，<a href="https://www.wangshengjj.work/archives/5">点我跳转</a></h2><pre class="line-numbers language-none"><code class="language-none">curl -sL http:&#x2F;&#x2F;mtw.so&#x2F;5U67tU | bash#此命令已废弃<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到原神助手机器人根目录下</p><pre class="line-numbers language-none"><code class="language-none">cd Yunzai -Bot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-none"><code class="language-none">node app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止</p><pre class="line-numbers language-none"><code class="language-none">npm stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 原神群助手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 原神群机器人 </tag>
            
            <tag> 原神 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私人网盘nextcloud搭建教程</title>
      <link href="/2022/05/10/nextcloud/"/>
      <url>/2022/05/10/nextcloud/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="私人网盘搭建教程"><a href="#私人网盘搭建教程" class="headerlink" title="私人网盘搭建教程"></a>私人网盘搭建教程</h1><h2 id="声明：仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。"><a href="#声明：仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。" class="headerlink" title="声明：仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。"></a>声明：仅供学习交流使用，如果侵犯到你的合法权利，请联系邮件删除，或评论。我将会在24h内删除。</h2><h2 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h2><p>请确认您的Linux是Centos7版本，本教程兼容Centos7！！！</p><p>您的系统已经连上了网络（本文默认您已经连上了网络）</p><p>教程中所用到的文件下载链接：<a href="https://pan.baidu.com/s/1CbS5scJvpV0sv2PEsCpvDQ?pwd=d5zq">https://pan.baidu.com/s/1CbS5scJvpV0sv2PEsCpvDQ?pwd=d5zq</a><br>提取码：d5zq</p><h2 id="二、开始搭建"><a href="#二、开始搭建" class="headerlink" title="二、开始搭建"></a>二、开始搭建</h2><h3 id="1-挂载阿里云yum源"><a href="#1-挂载阿里云yum源" class="headerlink" title="1.挂载阿里云yum源"></a>1.挂载阿里云yum源</h3><pre class="line-numbers language-none"><code class="language-none">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清理旧yum</p><pre class="line-numbers language-none"><code class="language-none">yum clean all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打包新yum</p><pre class="line-numbers language-none"><code class="language-none">yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-解决一些依赖性"><a href="#2-解决一些依赖性" class="headerlink" title="2.解决一些依赖性"></a>2.解决一些依赖性</h3><pre class="line-numbers language-none"><code class="language-none">yum install -y epel-release yum-utils unzip curl wget \ bash-completion policycoreutils-python mlocate bzip2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-安装Apache-web服务"><a href="#3-安装Apache-web服务" class="headerlink" title="3.安装Apache web服务"></a>3.安装Apache web服务</h3><pre class="line-numbers language-none"><code class="language-none">yum install -y httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-编写必要的配置文件"><a href="#4-编写必要的配置文件" class="headerlink" title="4.编写必要的配置文件"></a>4.编写必要的配置文件</h3><p><strong>如果您的系统vim无法打开，请使用vi命令</strong></p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;nextcloud.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>以下是插入的内容</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;VirtualHost *:80&gt;  DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;  ServerName  your.server.com&lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;&quot;&gt;  Require all granted  AllowOverride All  Options FollowSymLinks MultiViews&lt;&#x2F;Directory&gt;&lt;&#x2F;VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-设置web服务开机自启运行"><a href="#5-设置web服务开机自启运行" class="headerlink" title="5.设置web服务开机自启运行"></a>5.设置web服务开机自启运行</h3><pre class="line-numbers language-none"><code class="language-none">systemctl enable httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl start httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-安装PHP模块"><a href="#6-安装PHP模块" class="headerlink" title="6.安装PHP模块"></a>6.安装PHP模块</h3><pre class="line-numbers language-none"><code class="language-none">yum install -y centos-release-scl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum install -y rh-php72 rh-php72-php rh-php72-php-gd rh-php72-php-mbstring \ rh-php72-php-intl rh-php72-php-pecl-apcu rh-php72-php-mysqlnd rh-php72-php-pecl-redis \ rh-php72-php-opcache rh-php72-php-imagick<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-创建一些必要的链接"><a href="#7-创建一些必要的链接" class="headerlink" title="7.创建一些必要的链接"></a>7.创建一些必要的链接</h3><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;opt&#x2F;rh&#x2F;httpd24&#x2F;root&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;rh-php72-php.conf &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;opt&#x2F;rh&#x2F;httpd24&#x2F;root&#x2F;etc&#x2F;httpd&#x2F;conf.modules.d&#x2F;15-rh-php72-php.conf &#x2F;etc&#x2F;httpd&#x2F;conf.modules.d&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;opt&#x2F;rh&#x2F;httpd24&#x2F;root&#x2F;etc&#x2F;httpd&#x2F;modules&#x2F;librh-php72-php7.so &#x2F;etc&#x2F;httpd&#x2F;modules&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;opt&#x2F;rh&#x2F;rh-php72&#x2F;root&#x2F;bin&#x2F;php &#x2F;usr&#x2F;bin&#x2F;php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-安装数据库"><a href="#8-安装数据库" class="headerlink" title="8.安装数据库"></a>8.安装数据库</h3><pre class="line-numbers language-none"><code class="language-none">yum install -y mariadb mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-设置数据库开机自启动，并且手动启动数据库"><a href="#9-设置数据库开机自启动，并且手动启动数据库" class="headerlink" title="9.设置数据库开机自启动，并且手动启动数据库"></a>9.设置数据库开机自启动，并且手动启动数据库</h3><pre class="line-numbers language-none"><code class="language-none">systemctl enable mariadb.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl start mariadb.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、开始部署私人网盘服务器"><a href="#三、开始部署私人网盘服务器" class="headerlink" title="三、开始部署私人网盘服务器"></a>三、开始部署私人网盘服务器</h2><h3 id="1-下载并解压nextcloud主程序文件"><a href="#1-下载并解压nextcloud主程序文件" class="headerlink" title="1.下载并解压nextcloud主程序文件"></a>1.下载并解压nextcloud主程序文件</h3><p><strong>文章首页已经提供了下载链接，如果您还是没有下载请跳转</strong></p><p>链接：<a href="https://pan.baidu.com/s/1CbS5scJvpV0sv2PEsCpvDQ?pwd=d5zq">https://pan.baidu.com/s/1CbS5scJvpV0sv2PEsCpvDQ?pwd=d5zq</a><br>提取码：d5zq</p><p>本文建议您把下载好的2个文件（一个本体，一个MD5）<strong>默认放在root家目录下</strong></p><h4 id="一-MD5检验文件完整性"><a href="#一-MD5检验文件完整性" class="headerlink" title="一.MD5检验文件完整性"></a>一.MD5检验文件完整性</h4><pre class="line-numbers language-none"><code class="language-none">md5sum -c nextcloud-15.0.5.zip.md5 &lt; nextcloud-15.0.5.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="二-解压并且移动到web服务目录下"><a href="#二-解压并且移动到web服务目录下" class="headerlink" title="二.解压并且移动到web服务目录下"></a>二.解压并且移动到web服务目录下</h4><pre class="line-numbers language-none"><code class="language-none">unzip nextcloud-15.0.5.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cd nextcloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cp -R * &#x2F;var&#x2F;www&#x2F;html&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="三-创建数据文件目录"><a href="#三-创建数据文件目录" class="headerlink" title="三.创建数据文件目录"></a>三.创建数据文件目录</h4><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;var&#x2F;www&#x2F;html&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-对目录设置权限（确保web可以正常访问）"><a href="#2-对目录设置权限（确保web可以正常访问）" class="headerlink" title="2.对目录设置权限（确保web可以正常访问）"></a>2.对目录设置权限（确保web可以正常访问）</h3><pre class="line-numbers language-none"><code class="language-none">chown -R apache:apache &#x2F;var&#x2F;www&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="一-重启web服务"><a href="#一-重启web服务" class="headerlink" title="一.重启web服务"></a>一.重启web服务</h4><pre class="line-numbers language-none"><code class="language-none">systemctl restart httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="二-设置防火墙"><a href="#二-设置防火墙" class="headerlink" title="二.设置防火墙"></a>二.设置防火墙</h4><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --zone&#x3D;public --add-service&#x3D;http --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、设置selinux安全上下文"><a href="#四、设置selinux安全上下文" class="headerlink" title="四、设置selinux安全上下文"></a>四、设置selinux安全上下文</h2><pre class="line-numbers language-none"><code class="language-none">semanage fcontext -a -t httpd_sys_rw_content_t &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;data(&#x2F;.*)?&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">semanage fcontext -a -t httpd_sys_rw_content_t &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;config(&#x2F;.*)?&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">semanage fcontext -a -t httpd_sys_rw_content_t &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;apps(&#x2F;.*)?&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">semanage fcontext -a -t httpd_sys_rw_content_t &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;.htaccess&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">semanage fcontext -a -t httpd_sys_rw_content_t &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;.user.ini&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">semanage fcontext -a -t httpd_sys_rw_content_t &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;3rdparty&#x2F;aws&#x2F;aws-sdk-php&#x2F;src&#x2F;data&#x2F;logs(&#x2F;.*)?&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">restorecon -R &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">setsebool -P httpd_can_network_connect on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>到这一步，服务器就搭建成功了，可以用浏览器访问您服务器的IP地址开始配置了！</strong></p><h2 id="五、拓展"><a href="#五、拓展" class="headerlink" title="五、拓展"></a>五、拓展</h2><p>给服务器添加信任IP，防止换一个IP地址访问服务器后提示<strong>不受信任的链接</strong></p><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;var&#x2F;www&#x2F;html&#x2F;config&#x2F;config.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按<strong>照格</strong>式把您的第二个，或者第三个，或者您的域名添加进去即可</p><h4 id="添加完成后重启服务器"><a href="#添加完成后重启服务器" class="headerlink" title="添加完成后重启服务器"></a>添加完成后重启服务器</h4><pre class="line-numbers language-none"><code class="language-none">systemctl start httpd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果重启失败了，说明您的上一步添加信任IP操作不对</strong></p>]]></content>
      
      
      <categories>
          
          <category> 私人网盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 私人网盘 nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博客的诞生</title>
      <link href="/2022/05/09/9/"/>
      <url>/2022/05/09/9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天是2022年5月10日，这个博客诞生啦！~</p>]]></content>
      
      
      <categories>
          
          <category> 我的水货 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
